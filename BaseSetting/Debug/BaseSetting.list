
BaseSetting.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c90  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08003e54  08003e54  00004e54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e74  08003e74  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003e74  08003e74  00004e74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003e7c  08003e7c  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e7c  08003e7c  00004e7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e80  08003e80  00004e80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003e84  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ac  2000000c  08003e90  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b8  08003e90  000051b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010eff  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022f3  00000000  00000000  00015f3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001048  00000000  00000000  00018230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cf2  00000000  00000000  00019278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022d09  00000000  00000000  00019f6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000147bd  00000000  00000000  0003cc73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc463  00000000  00000000  00051430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012d893  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000463c  00000000  00000000  0012d8d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  00131f14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003e3c 	.word	0x08003e3c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08003e3c 	.word	0x08003e3c

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f8:	f000 fc2e 	bl	8000d58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fc:	f000 f812 	bl	8000524 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000500:	f000 f9bc 	bl	800087c <MX_GPIO_Init>
  MX_DMA_Init();
 8000504:	f000 f99a 	bl	800083c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000508:	f000 f96e 	bl	80007e8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800050c:	f000 f8f8 	bl	8000700 <MX_TIM2_Init>
  MX_ADC1_Init();
 8000510:	f000 f876 	bl	8000600 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000514:	f000 f8c6 	bl	80006a4 <MX_I2C1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	//HAL_GPIO_TogglePin(GPIOx, GPIO_Pin)
	HAL_Delay(1000);
 8000518:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800051c:	f000 fc8e 	bl	8000e3c <HAL_Delay>
 8000520:	e7fa      	b.n	8000518 <main+0x24>
	...

08000524 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b094      	sub	sp, #80	@ 0x50
 8000528:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052a:	f107 031c 	add.w	r3, r7, #28
 800052e:	2234      	movs	r2, #52	@ 0x34
 8000530:	2100      	movs	r1, #0
 8000532:	4618      	mov	r0, r3
 8000534:	f003 fc56 	bl	8003de4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000538:	f107 0308 	add.w	r3, r7, #8
 800053c:	2200      	movs	r2, #0
 800053e:	601a      	str	r2, [r3, #0]
 8000540:	605a      	str	r2, [r3, #4]
 8000542:	609a      	str	r2, [r3, #8]
 8000544:	60da      	str	r2, [r3, #12]
 8000546:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000548:	2300      	movs	r3, #0
 800054a:	607b      	str	r3, [r7, #4]
 800054c:	4b2a      	ldr	r3, [pc, #168]	@ (80005f8 <SystemClock_Config+0xd4>)
 800054e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000550:	4a29      	ldr	r2, [pc, #164]	@ (80005f8 <SystemClock_Config+0xd4>)
 8000552:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000556:	6413      	str	r3, [r2, #64]	@ 0x40
 8000558:	4b27      	ldr	r3, [pc, #156]	@ (80005f8 <SystemClock_Config+0xd4>)
 800055a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800055c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000560:	607b      	str	r3, [r7, #4]
 8000562:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000564:	2300      	movs	r3, #0
 8000566:	603b      	str	r3, [r7, #0]
 8000568:	4b24      	ldr	r3, [pc, #144]	@ (80005fc <SystemClock_Config+0xd8>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000570:	4a22      	ldr	r2, [pc, #136]	@ (80005fc <SystemClock_Config+0xd8>)
 8000572:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000576:	6013      	str	r3, [r2, #0]
 8000578:	4b20      	ldr	r3, [pc, #128]	@ (80005fc <SystemClock_Config+0xd8>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000580:	603b      	str	r3, [r7, #0]
 8000582:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000584:	2302      	movs	r3, #2
 8000586:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000588:	2301      	movs	r3, #1
 800058a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800058c:	2310      	movs	r3, #16
 800058e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000590:	2302      	movs	r3, #2
 8000592:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000594:	2300      	movs	r3, #0
 8000596:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000598:	2308      	movs	r3, #8
 800059a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 800059c:	2360      	movs	r3, #96	@ 0x60
 800059e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005a0:	2302      	movs	r3, #2
 80005a2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005a4:	2302      	movs	r3, #2
 80005a6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005a8:	2302      	movs	r3, #2
 80005aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ac:	f107 031c 	add.w	r3, r7, #28
 80005b0:	4618      	mov	r0, r3
 80005b2:	f002 f911 	bl	80027d8 <HAL_RCC_OscConfig>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80005bc:	f000 f9cc 	bl	8000958 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c0:	230f      	movs	r3, #15
 80005c2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c4:	2302      	movs	r3, #2
 80005c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c8:	2300      	movs	r3, #0
 80005ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005cc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80005d0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005d6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80005d8:	f107 0308 	add.w	r3, r7, #8
 80005dc:	2103      	movs	r1, #3
 80005de:	4618      	mov	r0, r3
 80005e0:	f001 fdb0 	bl	8002144 <HAL_RCC_ClockConfig>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <SystemClock_Config+0xca>
  {
    Error_Handler();
 80005ea:	f000 f9b5 	bl	8000958 <Error_Handler>
  }
}
 80005ee:	bf00      	nop
 80005f0:	3750      	adds	r7, #80	@ 0x50
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	40023800 	.word	0x40023800
 80005fc:	40007000 	.word	0x40007000

08000600 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b084      	sub	sp, #16
 8000604:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000606:	463b      	mov	r3, r7
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
 8000610:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000612:	4b21      	ldr	r3, [pc, #132]	@ (8000698 <MX_ADC1_Init+0x98>)
 8000614:	4a21      	ldr	r2, [pc, #132]	@ (800069c <MX_ADC1_Init+0x9c>)
 8000616:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000618:	4b1f      	ldr	r3, [pc, #124]	@ (8000698 <MX_ADC1_Init+0x98>)
 800061a:	2200      	movs	r2, #0
 800061c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800061e:	4b1e      	ldr	r3, [pc, #120]	@ (8000698 <MX_ADC1_Init+0x98>)
 8000620:	2200      	movs	r2, #0
 8000622:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000624:	4b1c      	ldr	r3, [pc, #112]	@ (8000698 <MX_ADC1_Init+0x98>)
 8000626:	2200      	movs	r2, #0
 8000628:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800062a:	4b1b      	ldr	r3, [pc, #108]	@ (8000698 <MX_ADC1_Init+0x98>)
 800062c:	2200      	movs	r2, #0
 800062e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000630:	4b19      	ldr	r3, [pc, #100]	@ (8000698 <MX_ADC1_Init+0x98>)
 8000632:	2200      	movs	r2, #0
 8000634:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000638:	4b17      	ldr	r3, [pc, #92]	@ (8000698 <MX_ADC1_Init+0x98>)
 800063a:	2200      	movs	r2, #0
 800063c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800063e:	4b16      	ldr	r3, [pc, #88]	@ (8000698 <MX_ADC1_Init+0x98>)
 8000640:	4a17      	ldr	r2, [pc, #92]	@ (80006a0 <MX_ADC1_Init+0xa0>)
 8000642:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000644:	4b14      	ldr	r3, [pc, #80]	@ (8000698 <MX_ADC1_Init+0x98>)
 8000646:	2200      	movs	r2, #0
 8000648:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800064a:	4b13      	ldr	r3, [pc, #76]	@ (8000698 <MX_ADC1_Init+0x98>)
 800064c:	2201      	movs	r2, #1
 800064e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000650:	4b11      	ldr	r3, [pc, #68]	@ (8000698 <MX_ADC1_Init+0x98>)
 8000652:	2200      	movs	r2, #0
 8000654:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000658:	4b0f      	ldr	r3, [pc, #60]	@ (8000698 <MX_ADC1_Init+0x98>)
 800065a:	2201      	movs	r2, #1
 800065c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800065e:	480e      	ldr	r0, [pc, #56]	@ (8000698 <MX_ADC1_Init+0x98>)
 8000660:	f000 fc10 	bl	8000e84 <HAL_ADC_Init>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800066a:	f000 f975 	bl	8000958 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800066e:	2301      	movs	r3, #1
 8000670:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000672:	2301      	movs	r3, #1
 8000674:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000676:	2300      	movs	r3, #0
 8000678:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800067a:	463b      	mov	r3, r7
 800067c:	4619      	mov	r1, r3
 800067e:	4806      	ldr	r0, [pc, #24]	@ (8000698 <MX_ADC1_Init+0x98>)
 8000680:	f000 fc44 	bl	8000f0c <HAL_ADC_ConfigChannel>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800068a:	f000 f965 	bl	8000958 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800068e:	bf00      	nop
 8000690:	3710      	adds	r7, #16
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	20000028 	.word	0x20000028
 800069c:	40012000 	.word	0x40012000
 80006a0:	0f000001 	.word	0x0f000001

080006a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006a8:	4b12      	ldr	r3, [pc, #72]	@ (80006f4 <MX_I2C1_Init+0x50>)
 80006aa:	4a13      	ldr	r2, [pc, #76]	@ (80006f8 <MX_I2C1_Init+0x54>)
 80006ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006ae:	4b11      	ldr	r3, [pc, #68]	@ (80006f4 <MX_I2C1_Init+0x50>)
 80006b0:	4a12      	ldr	r2, [pc, #72]	@ (80006fc <MX_I2C1_Init+0x58>)
 80006b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006b4:	4b0f      	ldr	r3, [pc, #60]	@ (80006f4 <MX_I2C1_Init+0x50>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006ba:	4b0e      	ldr	r3, [pc, #56]	@ (80006f4 <MX_I2C1_Init+0x50>)
 80006bc:	2200      	movs	r2, #0
 80006be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006c0:	4b0c      	ldr	r3, [pc, #48]	@ (80006f4 <MX_I2C1_Init+0x50>)
 80006c2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80006c6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006c8:	4b0a      	ldr	r3, [pc, #40]	@ (80006f4 <MX_I2C1_Init+0x50>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006ce:	4b09      	ldr	r3, [pc, #36]	@ (80006f4 <MX_I2C1_Init+0x50>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006d4:	4b07      	ldr	r3, [pc, #28]	@ (80006f4 <MX_I2C1_Init+0x50>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006da:	4b06      	ldr	r3, [pc, #24]	@ (80006f4 <MX_I2C1_Init+0x50>)
 80006dc:	2200      	movs	r2, #0
 80006de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006e0:	4804      	ldr	r0, [pc, #16]	@ (80006f4 <MX_I2C1_Init+0x50>)
 80006e2:	f001 fbeb 	bl	8001ebc <HAL_I2C_Init>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006ec:	f000 f934 	bl	8000958 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006f0:	bf00      	nop
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	20000070 	.word	0x20000070
 80006f8:	40005400 	.word	0x40005400
 80006fc:	000186a0 	.word	0x000186a0

08000700 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b08e      	sub	sp, #56	@ 0x38
 8000704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000706:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	605a      	str	r2, [r3, #4]
 8000710:	609a      	str	r2, [r3, #8]
 8000712:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000714:	f107 0320 	add.w	r3, r7, #32
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800071e:	1d3b      	adds	r3, r7, #4
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
 8000728:	60da      	str	r2, [r3, #12]
 800072a:	611a      	str	r2, [r3, #16]
 800072c:	615a      	str	r2, [r3, #20]
 800072e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000730:	4b2c      	ldr	r3, [pc, #176]	@ (80007e4 <MX_TIM2_Init+0xe4>)
 8000732:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000736:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000738:	4b2a      	ldr	r3, [pc, #168]	@ (80007e4 <MX_TIM2_Init+0xe4>)
 800073a:	2200      	movs	r2, #0
 800073c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800073e:	4b29      	ldr	r3, [pc, #164]	@ (80007e4 <MX_TIM2_Init+0xe4>)
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 60-1;
 8000744:	4b27      	ldr	r3, [pc, #156]	@ (80007e4 <MX_TIM2_Init+0xe4>)
 8000746:	223b      	movs	r2, #59	@ 0x3b
 8000748:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800074a:	4b26      	ldr	r3, [pc, #152]	@ (80007e4 <MX_TIM2_Init+0xe4>)
 800074c:	2200      	movs	r2, #0
 800074e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000750:	4b24      	ldr	r3, [pc, #144]	@ (80007e4 <MX_TIM2_Init+0xe4>)
 8000752:	2200      	movs	r2, #0
 8000754:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000756:	4823      	ldr	r0, [pc, #140]	@ (80007e4 <MX_TIM2_Init+0xe4>)
 8000758:	f002 fadc 	bl	8002d14 <HAL_TIM_Base_Init>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8000762:	f000 f8f9 	bl	8000958 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000766:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800076a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800076c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000770:	4619      	mov	r1, r3
 8000772:	481c      	ldr	r0, [pc, #112]	@ (80007e4 <MX_TIM2_Init+0xe4>)
 8000774:	f002 fc38 	bl	8002fe8 <HAL_TIM_ConfigClockSource>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 800077e:	f000 f8eb 	bl	8000958 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000782:	4818      	ldr	r0, [pc, #96]	@ (80007e4 <MX_TIM2_Init+0xe4>)
 8000784:	f002 fb15 	bl	8002db2 <HAL_TIM_PWM_Init>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800078e:	f000 f8e3 	bl	8000958 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000792:	2300      	movs	r3, #0
 8000794:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000796:	2300      	movs	r3, #0
 8000798:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800079a:	f107 0320 	add.w	r3, r7, #32
 800079e:	4619      	mov	r1, r3
 80007a0:	4810      	ldr	r0, [pc, #64]	@ (80007e4 <MX_TIM2_Init+0xe4>)
 80007a2:	f002 ffdf 	bl	8003764 <HAL_TIMEx_MasterConfigSynchronization>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80007ac:	f000 f8d4 	bl	8000958 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007b0:	2360      	movs	r3, #96	@ 0x60
 80007b2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80007b4:	2300      	movs	r3, #0
 80007b6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007b8:	2300      	movs	r3, #0
 80007ba:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007bc:	2300      	movs	r3, #0
 80007be:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007c0:	1d3b      	adds	r3, r7, #4
 80007c2:	2200      	movs	r2, #0
 80007c4:	4619      	mov	r1, r3
 80007c6:	4807      	ldr	r0, [pc, #28]	@ (80007e4 <MX_TIM2_Init+0xe4>)
 80007c8:	f002 fb4c 	bl	8002e64 <HAL_TIM_PWM_ConfigChannel>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 80007d2:	f000 f8c1 	bl	8000958 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80007d6:	4803      	ldr	r0, [pc, #12]	@ (80007e4 <MX_TIM2_Init+0xe4>)
 80007d8:	f000 f9c8 	bl	8000b6c <HAL_TIM_MspPostInit>

}
 80007dc:	bf00      	nop
 80007de:	3738      	adds	r7, #56	@ 0x38
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	200000c4 	.word	0x200000c4

080007e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007ec:	4b11      	ldr	r3, [pc, #68]	@ (8000834 <MX_USART2_UART_Init+0x4c>)
 80007ee:	4a12      	ldr	r2, [pc, #72]	@ (8000838 <MX_USART2_UART_Init+0x50>)
 80007f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007f2:	4b10      	ldr	r3, [pc, #64]	@ (8000834 <MX_USART2_UART_Init+0x4c>)
 80007f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000834 <MX_USART2_UART_Init+0x4c>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000800:	4b0c      	ldr	r3, [pc, #48]	@ (8000834 <MX_USART2_UART_Init+0x4c>)
 8000802:	2200      	movs	r2, #0
 8000804:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000806:	4b0b      	ldr	r3, [pc, #44]	@ (8000834 <MX_USART2_UART_Init+0x4c>)
 8000808:	2200      	movs	r2, #0
 800080a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800080c:	4b09      	ldr	r3, [pc, #36]	@ (8000834 <MX_USART2_UART_Init+0x4c>)
 800080e:	220c      	movs	r2, #12
 8000810:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000812:	4b08      	ldr	r3, [pc, #32]	@ (8000834 <MX_USART2_UART_Init+0x4c>)
 8000814:	2200      	movs	r2, #0
 8000816:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000818:	4b06      	ldr	r3, [pc, #24]	@ (8000834 <MX_USART2_UART_Init+0x4c>)
 800081a:	2200      	movs	r2, #0
 800081c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800081e:	4805      	ldr	r0, [pc, #20]	@ (8000834 <MX_USART2_UART_Init+0x4c>)
 8000820:	f003 f81c 	bl	800385c <HAL_UART_Init>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800082a:	f000 f895 	bl	8000958 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800082e:	bf00      	nop
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	2000016c 	.word	0x2000016c
 8000838:	40004400 	.word	0x40004400

0800083c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	607b      	str	r3, [r7, #4]
 8000846:	4b0c      	ldr	r3, [pc, #48]	@ (8000878 <MX_DMA_Init+0x3c>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084a:	4a0b      	ldr	r2, [pc, #44]	@ (8000878 <MX_DMA_Init+0x3c>)
 800084c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000850:	6313      	str	r3, [r2, #48]	@ 0x30
 8000852:	4b09      	ldr	r3, [pc, #36]	@ (8000878 <MX_DMA_Init+0x3c>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000856:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800085a:	607b      	str	r3, [r7, #4]
 800085c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800085e:	2200      	movs	r2, #0
 8000860:	2100      	movs	r1, #0
 8000862:	2010      	movs	r0, #16
 8000864:	f000 fe5b 	bl	800151e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000868:	2010      	movs	r0, #16
 800086a:	f000 fe74 	bl	8001556 <HAL_NVIC_EnableIRQ>

}
 800086e:	bf00      	nop
 8000870:	3708      	adds	r7, #8
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	40023800 	.word	0x40023800

0800087c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b08a      	sub	sp, #40	@ 0x28
 8000880:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000882:	f107 0314 	add.w	r3, r7, #20
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	605a      	str	r2, [r3, #4]
 800088c:	609a      	str	r2, [r3, #8]
 800088e:	60da      	str	r2, [r3, #12]
 8000890:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	613b      	str	r3, [r7, #16]
 8000896:	4b2d      	ldr	r3, [pc, #180]	@ (800094c <MX_GPIO_Init+0xd0>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089a:	4a2c      	ldr	r2, [pc, #176]	@ (800094c <MX_GPIO_Init+0xd0>)
 800089c:	f043 0304 	orr.w	r3, r3, #4
 80008a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008a2:	4b2a      	ldr	r3, [pc, #168]	@ (800094c <MX_GPIO_Init+0xd0>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a6:	f003 0304 	and.w	r3, r3, #4
 80008aa:	613b      	str	r3, [r7, #16]
 80008ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	60fb      	str	r3, [r7, #12]
 80008b2:	4b26      	ldr	r3, [pc, #152]	@ (800094c <MX_GPIO_Init+0xd0>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b6:	4a25      	ldr	r2, [pc, #148]	@ (800094c <MX_GPIO_Init+0xd0>)
 80008b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008be:	4b23      	ldr	r3, [pc, #140]	@ (800094c <MX_GPIO_Init+0xd0>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008c6:	60fb      	str	r3, [r7, #12]
 80008c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	60bb      	str	r3, [r7, #8]
 80008ce:	4b1f      	ldr	r3, [pc, #124]	@ (800094c <MX_GPIO_Init+0xd0>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d2:	4a1e      	ldr	r2, [pc, #120]	@ (800094c <MX_GPIO_Init+0xd0>)
 80008d4:	f043 0301 	orr.w	r3, r3, #1
 80008d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008da:	4b1c      	ldr	r3, [pc, #112]	@ (800094c <MX_GPIO_Init+0xd0>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008de:	f003 0301 	and.w	r3, r3, #1
 80008e2:	60bb      	str	r3, [r7, #8]
 80008e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	607b      	str	r3, [r7, #4]
 80008ea:	4b18      	ldr	r3, [pc, #96]	@ (800094c <MX_GPIO_Init+0xd0>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ee:	4a17      	ldr	r2, [pc, #92]	@ (800094c <MX_GPIO_Init+0xd0>)
 80008f0:	f043 0302 	orr.w	r3, r3, #2
 80008f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008f6:	4b15      	ldr	r3, [pc, #84]	@ (800094c <MX_GPIO_Init+0xd0>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fa:	f003 0302 	and.w	r3, r3, #2
 80008fe:	607b      	str	r3, [r7, #4]
 8000900:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LED1_Pin, GPIO_PIN_RESET);
 8000902:	2200      	movs	r2, #0
 8000904:	21a0      	movs	r1, #160	@ 0xa0
 8000906:	4812      	ldr	r0, [pc, #72]	@ (8000950 <MX_GPIO_Init+0xd4>)
 8000908:	f001 fabe 	bl	8001e88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800090c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000910:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000912:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000916:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800091c:	f107 0314 	add.w	r3, r7, #20
 8000920:	4619      	mov	r1, r3
 8000922:	480c      	ldr	r0, [pc, #48]	@ (8000954 <MX_GPIO_Init+0xd8>)
 8000924:	f001 f91c 	bl	8001b60 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LED1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LED1_Pin;
 8000928:	23a0      	movs	r3, #160	@ 0xa0
 800092a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092c:	2301      	movs	r3, #1
 800092e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000934:	2300      	movs	r3, #0
 8000936:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000938:	f107 0314 	add.w	r3, r7, #20
 800093c:	4619      	mov	r1, r3
 800093e:	4804      	ldr	r0, [pc, #16]	@ (8000950 <MX_GPIO_Init+0xd4>)
 8000940:	f001 f90e 	bl	8001b60 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000944:	bf00      	nop
 8000946:	3728      	adds	r7, #40	@ 0x28
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	40023800 	.word	0x40023800
 8000950:	40020000 	.word	0x40020000
 8000954:	40020800 	.word	0x40020800

08000958 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800095c:	b672      	cpsid	i
}
 800095e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000960:	bf00      	nop
 8000962:	e7fd      	b.n	8000960 <Error_Handler+0x8>

08000964 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	607b      	str	r3, [r7, #4]
 800096e:	4b10      	ldr	r3, [pc, #64]	@ (80009b0 <HAL_MspInit+0x4c>)
 8000970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000972:	4a0f      	ldr	r2, [pc, #60]	@ (80009b0 <HAL_MspInit+0x4c>)
 8000974:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000978:	6453      	str	r3, [r2, #68]	@ 0x44
 800097a:	4b0d      	ldr	r3, [pc, #52]	@ (80009b0 <HAL_MspInit+0x4c>)
 800097c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800097e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	603b      	str	r3, [r7, #0]
 800098a:	4b09      	ldr	r3, [pc, #36]	@ (80009b0 <HAL_MspInit+0x4c>)
 800098c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800098e:	4a08      	ldr	r2, [pc, #32]	@ (80009b0 <HAL_MspInit+0x4c>)
 8000990:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000994:	6413      	str	r3, [r2, #64]	@ 0x40
 8000996:	4b06      	ldr	r3, [pc, #24]	@ (80009b0 <HAL_MspInit+0x4c>)
 8000998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800099a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800099e:	603b      	str	r3, [r7, #0]
 80009a0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009a2:	2007      	movs	r0, #7
 80009a4:	f000 fdb0 	bl	8001508 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009a8:	bf00      	nop
 80009aa:	3708      	adds	r7, #8
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	40023800 	.word	0x40023800

080009b4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b08a      	sub	sp, #40	@ 0x28
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009bc:	f107 0314 	add.w	r3, r7, #20
 80009c0:	2200      	movs	r2, #0
 80009c2:	601a      	str	r2, [r3, #0]
 80009c4:	605a      	str	r2, [r3, #4]
 80009c6:	609a      	str	r2, [r3, #8]
 80009c8:	60da      	str	r2, [r3, #12]
 80009ca:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a17      	ldr	r2, [pc, #92]	@ (8000a30 <HAL_ADC_MspInit+0x7c>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d127      	bne.n	8000a26 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	613b      	str	r3, [r7, #16]
 80009da:	4b16      	ldr	r3, [pc, #88]	@ (8000a34 <HAL_ADC_MspInit+0x80>)
 80009dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009de:	4a15      	ldr	r2, [pc, #84]	@ (8000a34 <HAL_ADC_MspInit+0x80>)
 80009e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80009e6:	4b13      	ldr	r3, [pc, #76]	@ (8000a34 <HAL_ADC_MspInit+0x80>)
 80009e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80009ee:	613b      	str	r3, [r7, #16]
 80009f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	60fb      	str	r3, [r7, #12]
 80009f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000a34 <HAL_ADC_MspInit+0x80>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fa:	4a0e      	ldr	r2, [pc, #56]	@ (8000a34 <HAL_ADC_MspInit+0x80>)
 80009fc:	f043 0301 	orr.w	r3, r3, #1
 8000a00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a02:	4b0c      	ldr	r3, [pc, #48]	@ (8000a34 <HAL_ADC_MspInit+0x80>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a06:	f003 0301 	and.w	r3, r3, #1
 8000a0a:	60fb      	str	r3, [r7, #12]
 8000a0c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a12:	2303      	movs	r3, #3
 8000a14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a1a:	f107 0314 	add.w	r3, r7, #20
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4805      	ldr	r0, [pc, #20]	@ (8000a38 <HAL_ADC_MspInit+0x84>)
 8000a22:	f001 f89d 	bl	8001b60 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a26:	bf00      	nop
 8000a28:	3728      	adds	r7, #40	@ 0x28
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40012000 	.word	0x40012000
 8000a34:	40023800 	.word	0x40023800
 8000a38:	40020000 	.word	0x40020000

08000a3c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b08a      	sub	sp, #40	@ 0x28
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a44:	f107 0314 	add.w	r3, r7, #20
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
 8000a4c:	605a      	str	r2, [r3, #4]
 8000a4e:	609a      	str	r2, [r3, #8]
 8000a50:	60da      	str	r2, [r3, #12]
 8000a52:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a19      	ldr	r2, [pc, #100]	@ (8000ac0 <HAL_I2C_MspInit+0x84>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d12c      	bne.n	8000ab8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	613b      	str	r3, [r7, #16]
 8000a62:	4b18      	ldr	r3, [pc, #96]	@ (8000ac4 <HAL_I2C_MspInit+0x88>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a66:	4a17      	ldr	r2, [pc, #92]	@ (8000ac4 <HAL_I2C_MspInit+0x88>)
 8000a68:	f043 0302 	orr.w	r3, r3, #2
 8000a6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a6e:	4b15      	ldr	r3, [pc, #84]	@ (8000ac4 <HAL_I2C_MspInit+0x88>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a72:	f003 0302 	and.w	r3, r3, #2
 8000a76:	613b      	str	r3, [r7, #16]
 8000a78:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a7a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000a7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a80:	2312      	movs	r3, #18
 8000a82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a84:	2300      	movs	r3, #0
 8000a86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a88:	2303      	movs	r3, #3
 8000a8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a8c:	2304      	movs	r3, #4
 8000a8e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a90:	f107 0314 	add.w	r3, r7, #20
 8000a94:	4619      	mov	r1, r3
 8000a96:	480c      	ldr	r0, [pc, #48]	@ (8000ac8 <HAL_I2C_MspInit+0x8c>)
 8000a98:	f001 f862 	bl	8001b60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	60fb      	str	r3, [r7, #12]
 8000aa0:	4b08      	ldr	r3, [pc, #32]	@ (8000ac4 <HAL_I2C_MspInit+0x88>)
 8000aa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aa4:	4a07      	ldr	r2, [pc, #28]	@ (8000ac4 <HAL_I2C_MspInit+0x88>)
 8000aa6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000aaa:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aac:	4b05      	ldr	r3, [pc, #20]	@ (8000ac4 <HAL_I2C_MspInit+0x88>)
 8000aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ab0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ab4:	60fb      	str	r3, [r7, #12]
 8000ab6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ab8:	bf00      	nop
 8000aba:	3728      	adds	r7, #40	@ 0x28
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	40005400 	.word	0x40005400
 8000ac4:	40023800 	.word	0x40023800
 8000ac8:	40020400 	.word	0x40020400

08000acc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b084      	sub	sp, #16
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000adc:	d13c      	bne.n	8000b58 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	60fb      	str	r3, [r7, #12]
 8000ae2:	4b1f      	ldr	r3, [pc, #124]	@ (8000b60 <HAL_TIM_Base_MspInit+0x94>)
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ae6:	4a1e      	ldr	r2, [pc, #120]	@ (8000b60 <HAL_TIM_Base_MspInit+0x94>)
 8000ae8:	f043 0301 	orr.w	r3, r3, #1
 8000aec:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aee:	4b1c      	ldr	r3, [pc, #112]	@ (8000b60 <HAL_TIM_Base_MspInit+0x94>)
 8000af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000af2:	f003 0301 	and.w	r3, r3, #1
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 8000afa:	4b1a      	ldr	r3, [pc, #104]	@ (8000b64 <HAL_TIM_Base_MspInit+0x98>)
 8000afc:	4a1a      	ldr	r2, [pc, #104]	@ (8000b68 <HAL_TIM_Base_MspInit+0x9c>)
 8000afe:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 8000b00:	4b18      	ldr	r3, [pc, #96]	@ (8000b64 <HAL_TIM_Base_MspInit+0x98>)
 8000b02:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8000b06:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b08:	4b16      	ldr	r3, [pc, #88]	@ (8000b64 <HAL_TIM_Base_MspInit+0x98>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b0e:	4b15      	ldr	r3, [pc, #84]	@ (8000b64 <HAL_TIM_Base_MspInit+0x98>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000b14:	4b13      	ldr	r3, [pc, #76]	@ (8000b64 <HAL_TIM_Base_MspInit+0x98>)
 8000b16:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b1a:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b1c:	4b11      	ldr	r3, [pc, #68]	@ (8000b64 <HAL_TIM_Base_MspInit+0x98>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b22:	4b10      	ldr	r3, [pc, #64]	@ (8000b64 <HAL_TIM_Base_MspInit+0x98>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8000b28:	4b0e      	ldr	r3, [pc, #56]	@ (8000b64 <HAL_TIM_Base_MspInit+0x98>)
 8000b2a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b2e:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000b30:	4b0c      	ldr	r3, [pc, #48]	@ (8000b64 <HAL_TIM_Base_MspInit+0x98>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b36:	4b0b      	ldr	r3, [pc, #44]	@ (8000b64 <HAL_TIM_Base_MspInit+0x98>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8000b3c:	4809      	ldr	r0, [pc, #36]	@ (8000b64 <HAL_TIM_Base_MspInit+0x98>)
 8000b3e:	f000 fd25 	bl	800158c <HAL_DMA_Init>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <HAL_TIM_Base_MspInit+0x80>
    {
      Error_Handler();
 8000b48:	f7ff ff06 	bl	8000958 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	4a05      	ldr	r2, [pc, #20]	@ (8000b64 <HAL_TIM_Base_MspInit+0x98>)
 8000b50:	625a      	str	r2, [r3, #36]	@ 0x24
 8000b52:	4a04      	ldr	r2, [pc, #16]	@ (8000b64 <HAL_TIM_Base_MspInit+0x98>)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000b58:	bf00      	nop
 8000b5a:	3710      	adds	r7, #16
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	40023800 	.word	0x40023800
 8000b64:	2000010c 	.word	0x2000010c
 8000b68:	40026088 	.word	0x40026088

08000b6c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b088      	sub	sp, #32
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b74:	f107 030c 	add.w	r3, r7, #12
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	605a      	str	r2, [r3, #4]
 8000b7e:	609a      	str	r2, [r3, #8]
 8000b80:	60da      	str	r2, [r3, #12]
 8000b82:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000b8c:	d11d      	bne.n	8000bca <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	60bb      	str	r3, [r7, #8]
 8000b92:	4b10      	ldr	r3, [pc, #64]	@ (8000bd4 <HAL_TIM_MspPostInit+0x68>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b96:	4a0f      	ldr	r2, [pc, #60]	@ (8000bd4 <HAL_TIM_MspPostInit+0x68>)
 8000b98:	f043 0301 	orr.w	r3, r3, #1
 8000b9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b9e:	4b0d      	ldr	r3, [pc, #52]	@ (8000bd4 <HAL_TIM_MspPostInit+0x68>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba2:	f003 0301 	and.w	r3, r3, #1
 8000ba6:	60bb      	str	r3, [r7, #8]
 8000ba8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000baa:	2301      	movs	r3, #1
 8000bac:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bbe:	f107 030c 	add.w	r3, r7, #12
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	4804      	ldr	r0, [pc, #16]	@ (8000bd8 <HAL_TIM_MspPostInit+0x6c>)
 8000bc6:	f000 ffcb 	bl	8001b60 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000bca:	bf00      	nop
 8000bcc:	3720      	adds	r7, #32
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	40023800 	.word	0x40023800
 8000bd8:	40020000 	.word	0x40020000

08000bdc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b08a      	sub	sp, #40	@ 0x28
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be4:	f107 0314 	add.w	r3, r7, #20
 8000be8:	2200      	movs	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	605a      	str	r2, [r3, #4]
 8000bee:	609a      	str	r2, [r3, #8]
 8000bf0:	60da      	str	r2, [r3, #12]
 8000bf2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a19      	ldr	r2, [pc, #100]	@ (8000c60 <HAL_UART_MspInit+0x84>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d12b      	bne.n	8000c56 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bfe:	2300      	movs	r3, #0
 8000c00:	613b      	str	r3, [r7, #16]
 8000c02:	4b18      	ldr	r3, [pc, #96]	@ (8000c64 <HAL_UART_MspInit+0x88>)
 8000c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c06:	4a17      	ldr	r2, [pc, #92]	@ (8000c64 <HAL_UART_MspInit+0x88>)
 8000c08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c0e:	4b15      	ldr	r3, [pc, #84]	@ (8000c64 <HAL_UART_MspInit+0x88>)
 8000c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c16:	613b      	str	r3, [r7, #16]
 8000c18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	60fb      	str	r3, [r7, #12]
 8000c1e:	4b11      	ldr	r3, [pc, #68]	@ (8000c64 <HAL_UART_MspInit+0x88>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c22:	4a10      	ldr	r2, [pc, #64]	@ (8000c64 <HAL_UART_MspInit+0x88>)
 8000c24:	f043 0301 	orr.w	r3, r3, #1
 8000c28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c64 <HAL_UART_MspInit+0x88>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2e:	f003 0301 	and.w	r3, r3, #1
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c36:	230c      	movs	r3, #12
 8000c38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c42:	2303      	movs	r3, #3
 8000c44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c46:	2307      	movs	r3, #7
 8000c48:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4a:	f107 0314 	add.w	r3, r7, #20
 8000c4e:	4619      	mov	r1, r3
 8000c50:	4805      	ldr	r0, [pc, #20]	@ (8000c68 <HAL_UART_MspInit+0x8c>)
 8000c52:	f000 ff85 	bl	8001b60 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c56:	bf00      	nop
 8000c58:	3728      	adds	r7, #40	@ 0x28
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	40004400 	.word	0x40004400
 8000c64:	40023800 	.word	0x40023800
 8000c68:	40020000 	.word	0x40020000

08000c6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c70:	bf00      	nop
 8000c72:	e7fd      	b.n	8000c70 <NMI_Handler+0x4>

08000c74 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c78:	bf00      	nop
 8000c7a:	e7fd      	b.n	8000c78 <HardFault_Handler+0x4>

08000c7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c80:	bf00      	nop
 8000c82:	e7fd      	b.n	8000c80 <MemManage_Handler+0x4>

08000c84 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c88:	bf00      	nop
 8000c8a:	e7fd      	b.n	8000c88 <BusFault_Handler+0x4>

08000c8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c90:	bf00      	nop
 8000c92:	e7fd      	b.n	8000c90 <UsageFault_Handler+0x4>

08000c94 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c98:	bf00      	nop
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr

08000ca2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr

08000cb0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cb4:	bf00      	nop
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr

08000cbe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cc2:	f000 f89b 	bl	8000dfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cc6:	bf00      	nop
 8000cc8:	bd80      	pop	{r7, pc}
	...

08000ccc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8000cd0:	4802      	ldr	r0, [pc, #8]	@ (8000cdc <DMA1_Stream5_IRQHandler+0x10>)
 8000cd2:	f000 fd09 	bl	80016e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	2000010c 	.word	0x2000010c

08000ce0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ce4:	4b06      	ldr	r3, [pc, #24]	@ (8000d00 <SystemInit+0x20>)
 8000ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cea:	4a05      	ldr	r2, [pc, #20]	@ (8000d00 <SystemInit+0x20>)
 8000cec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cf0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cf4:	bf00      	nop
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	e000ed00 	.word	0xe000ed00

08000d04 <Reset_Handler>:
 8000d04:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d3c <LoopFillZerobss+0x12>
 8000d08:	480d      	ldr	r0, [pc, #52]	@ (8000d40 <LoopFillZerobss+0x16>)
 8000d0a:	490e      	ldr	r1, [pc, #56]	@ (8000d44 <LoopFillZerobss+0x1a>)
 8000d0c:	4a0e      	ldr	r2, [pc, #56]	@ (8000d48 <LoopFillZerobss+0x1e>)
 8000d0e:	2300      	movs	r3, #0
 8000d10:	e002      	b.n	8000d18 <LoopCopyDataInit>

08000d12 <CopyDataInit>:
 8000d12:	58d4      	ldr	r4, [r2, r3]
 8000d14:	50c4      	str	r4, [r0, r3]
 8000d16:	3304      	adds	r3, #4

08000d18 <LoopCopyDataInit>:
 8000d18:	18c4      	adds	r4, r0, r3
 8000d1a:	428c      	cmp	r4, r1
 8000d1c:	d3f9      	bcc.n	8000d12 <CopyDataInit>
 8000d1e:	4a0b      	ldr	r2, [pc, #44]	@ (8000d4c <LoopFillZerobss+0x22>)
 8000d20:	4c0b      	ldr	r4, [pc, #44]	@ (8000d50 <LoopFillZerobss+0x26>)
 8000d22:	2300      	movs	r3, #0
 8000d24:	e001      	b.n	8000d2a <LoopFillZerobss>

08000d26 <FillZerobss>:
 8000d26:	6013      	str	r3, [r2, #0]
 8000d28:	3204      	adds	r2, #4

08000d2a <LoopFillZerobss>:
 8000d2a:	42a2      	cmp	r2, r4
 8000d2c:	d3fb      	bcc.n	8000d26 <FillZerobss>
 8000d2e:	f7ff ffd7 	bl	8000ce0 <SystemInit>
 8000d32:	f003 f85f 	bl	8003df4 <__libc_init_array>
 8000d36:	f7ff fbdd 	bl	80004f4 <main>
 8000d3a:	4770      	bx	lr
 8000d3c:	20020000 	.word	0x20020000
 8000d40:	20000000 	.word	0x20000000
 8000d44:	2000000c 	.word	0x2000000c
 8000d48:	08003e84 	.word	0x08003e84
 8000d4c:	2000000c 	.word	0x2000000c
 8000d50:	200001b8 	.word	0x200001b8

08000d54 <ADC_IRQHandler>:
 8000d54:	e7fe      	b.n	8000d54 <ADC_IRQHandler>
	...

08000d58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d5c:	4b0e      	ldr	r3, [pc, #56]	@ (8000d98 <HAL_Init+0x40>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a0d      	ldr	r2, [pc, #52]	@ (8000d98 <HAL_Init+0x40>)
 8000d62:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d68:	4b0b      	ldr	r3, [pc, #44]	@ (8000d98 <HAL_Init+0x40>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a0a      	ldr	r2, [pc, #40]	@ (8000d98 <HAL_Init+0x40>)
 8000d6e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d74:	4b08      	ldr	r3, [pc, #32]	@ (8000d98 <HAL_Init+0x40>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a07      	ldr	r2, [pc, #28]	@ (8000d98 <HAL_Init+0x40>)
 8000d7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d80:	2003      	movs	r0, #3
 8000d82:	f000 fbc1 	bl	8001508 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d86:	2000      	movs	r0, #0
 8000d88:	f000 f808 	bl	8000d9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d8c:	f7ff fdea 	bl	8000964 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d90:	2300      	movs	r3, #0
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	40023c00 	.word	0x40023c00

08000d9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000da4:	4b12      	ldr	r3, [pc, #72]	@ (8000df0 <HAL_InitTick+0x54>)
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	4b12      	ldr	r3, [pc, #72]	@ (8000df4 <HAL_InitTick+0x58>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	4619      	mov	r1, r3
 8000dae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000db2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000db6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f000 fbd9 	bl	8001572 <HAL_SYSTICK_Config>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	e00e      	b.n	8000de8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2b0f      	cmp	r3, #15
 8000dce:	d80a      	bhi.n	8000de6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	6879      	ldr	r1, [r7, #4]
 8000dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000dd8:	f000 fba1 	bl	800151e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ddc:	4a06      	ldr	r2, [pc, #24]	@ (8000df8 <HAL_InitTick+0x5c>)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000de2:	2300      	movs	r3, #0
 8000de4:	e000      	b.n	8000de8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000de6:	2301      	movs	r3, #1
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	3708      	adds	r7, #8
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	20000000 	.word	0x20000000
 8000df4:	20000008 	.word	0x20000008
 8000df8:	20000004 	.word	0x20000004

08000dfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e00:	4b06      	ldr	r3, [pc, #24]	@ (8000e1c <HAL_IncTick+0x20>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	461a      	mov	r2, r3
 8000e06:	4b06      	ldr	r3, [pc, #24]	@ (8000e20 <HAL_IncTick+0x24>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4413      	add	r3, r2
 8000e0c:	4a04      	ldr	r2, [pc, #16]	@ (8000e20 <HAL_IncTick+0x24>)
 8000e0e:	6013      	str	r3, [r2, #0]
}
 8000e10:	bf00      	nop
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	20000008 	.word	0x20000008
 8000e20:	200001b4 	.word	0x200001b4

08000e24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  return uwTick;
 8000e28:	4b03      	ldr	r3, [pc, #12]	@ (8000e38 <HAL_GetTick+0x14>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	200001b4 	.word	0x200001b4

08000e3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e44:	f7ff ffee 	bl	8000e24 <HAL_GetTick>
 8000e48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e54:	d005      	beq.n	8000e62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e56:	4b0a      	ldr	r3, [pc, #40]	@ (8000e80 <HAL_Delay+0x44>)
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	461a      	mov	r2, r3
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	4413      	add	r3, r2
 8000e60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e62:	bf00      	nop
 8000e64:	f7ff ffde 	bl	8000e24 <HAL_GetTick>
 8000e68:	4602      	mov	r2, r0
 8000e6a:	68bb      	ldr	r3, [r7, #8]
 8000e6c:	1ad3      	subs	r3, r2, r3
 8000e6e:	68fa      	ldr	r2, [r7, #12]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	d8f7      	bhi.n	8000e64 <HAL_Delay+0x28>
  {
  }
}
 8000e74:	bf00      	nop
 8000e76:	bf00      	nop
 8000e78:	3710      	adds	r7, #16
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	20000008 	.word	0x20000008

08000e84 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b084      	sub	sp, #16
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d101      	bne.n	8000e9a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
 8000e98:	e033      	b.n	8000f02 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d109      	bne.n	8000eb6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ea2:	6878      	ldr	r0, [r7, #4]
 8000ea4:	f7ff fd86 	bl	80009b4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2200      	movs	r2, #0
 8000eac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eba:	f003 0310 	and.w	r3, r3, #16
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d118      	bne.n	8000ef4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ec6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000eca:	f023 0302 	bic.w	r3, r3, #2
 8000ece:	f043 0202 	orr.w	r2, r3, #2
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000ed6:	6878      	ldr	r0, [r7, #4]
 8000ed8:	f000 f94a 	bl	8001170 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2200      	movs	r2, #0
 8000ee0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ee6:	f023 0303 	bic.w	r3, r3, #3
 8000eea:	f043 0201 	orr.w	r2, r3, #1
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	641a      	str	r2, [r3, #64]	@ 0x40
 8000ef2:	e001      	b.n	8000ef8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2200      	movs	r2, #0
 8000efc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3710      	adds	r7, #16
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
	...

08000f0c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b085      	sub	sp, #20
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000f16:	2300      	movs	r3, #0
 8000f18:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000f20:	2b01      	cmp	r3, #1
 8000f22:	d101      	bne.n	8000f28 <HAL_ADC_ConfigChannel+0x1c>
 8000f24:	2302      	movs	r3, #2
 8000f26:	e113      	b.n	8001150 <HAL_ADC_ConfigChannel+0x244>
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	2b09      	cmp	r3, #9
 8000f36:	d925      	bls.n	8000f84 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	68d9      	ldr	r1, [r3, #12]
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	b29b      	uxth	r3, r3
 8000f44:	461a      	mov	r2, r3
 8000f46:	4613      	mov	r3, r2
 8000f48:	005b      	lsls	r3, r3, #1
 8000f4a:	4413      	add	r3, r2
 8000f4c:	3b1e      	subs	r3, #30
 8000f4e:	2207      	movs	r2, #7
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	43da      	mvns	r2, r3
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	400a      	ands	r2, r1
 8000f5c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	68d9      	ldr	r1, [r3, #12]
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	689a      	ldr	r2, [r3, #8]
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	b29b      	uxth	r3, r3
 8000f6e:	4618      	mov	r0, r3
 8000f70:	4603      	mov	r3, r0
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	4403      	add	r3, r0
 8000f76:	3b1e      	subs	r3, #30
 8000f78:	409a      	lsls	r2, r3
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	430a      	orrs	r2, r1
 8000f80:	60da      	str	r2, [r3, #12]
 8000f82:	e022      	b.n	8000fca <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	6919      	ldr	r1, [r3, #16]
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	b29b      	uxth	r3, r3
 8000f90:	461a      	mov	r2, r3
 8000f92:	4613      	mov	r3, r2
 8000f94:	005b      	lsls	r3, r3, #1
 8000f96:	4413      	add	r3, r2
 8000f98:	2207      	movs	r2, #7
 8000f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9e:	43da      	mvns	r2, r3
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	400a      	ands	r2, r1
 8000fa6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	6919      	ldr	r1, [r3, #16]
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	689a      	ldr	r2, [r3, #8]
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	b29b      	uxth	r3, r3
 8000fb8:	4618      	mov	r0, r3
 8000fba:	4603      	mov	r3, r0
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	4403      	add	r3, r0
 8000fc0:	409a      	lsls	r2, r3
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	430a      	orrs	r2, r1
 8000fc8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	2b06      	cmp	r3, #6
 8000fd0:	d824      	bhi.n	800101c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685a      	ldr	r2, [r3, #4]
 8000fdc:	4613      	mov	r3, r2
 8000fde:	009b      	lsls	r3, r3, #2
 8000fe0:	4413      	add	r3, r2
 8000fe2:	3b05      	subs	r3, #5
 8000fe4:	221f      	movs	r2, #31
 8000fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fea:	43da      	mvns	r2, r3
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	400a      	ands	r2, r1
 8000ff2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	b29b      	uxth	r3, r3
 8001000:	4618      	mov	r0, r3
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	685a      	ldr	r2, [r3, #4]
 8001006:	4613      	mov	r3, r2
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	4413      	add	r3, r2
 800100c:	3b05      	subs	r3, #5
 800100e:	fa00 f203 	lsl.w	r2, r0, r3
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	430a      	orrs	r2, r1
 8001018:	635a      	str	r2, [r3, #52]	@ 0x34
 800101a:	e04c      	b.n	80010b6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	2b0c      	cmp	r3, #12
 8001022:	d824      	bhi.n	800106e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	685a      	ldr	r2, [r3, #4]
 800102e:	4613      	mov	r3, r2
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	4413      	add	r3, r2
 8001034:	3b23      	subs	r3, #35	@ 0x23
 8001036:	221f      	movs	r2, #31
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	43da      	mvns	r2, r3
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	400a      	ands	r2, r1
 8001044:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	b29b      	uxth	r3, r3
 8001052:	4618      	mov	r0, r3
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685a      	ldr	r2, [r3, #4]
 8001058:	4613      	mov	r3, r2
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	4413      	add	r3, r2
 800105e:	3b23      	subs	r3, #35	@ 0x23
 8001060:	fa00 f203 	lsl.w	r2, r0, r3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	430a      	orrs	r2, r1
 800106a:	631a      	str	r2, [r3, #48]	@ 0x30
 800106c:	e023      	b.n	80010b6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685a      	ldr	r2, [r3, #4]
 8001078:	4613      	mov	r3, r2
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	4413      	add	r3, r2
 800107e:	3b41      	subs	r3, #65	@ 0x41
 8001080:	221f      	movs	r2, #31
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	43da      	mvns	r2, r3
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	400a      	ands	r2, r1
 800108e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	b29b      	uxth	r3, r3
 800109c:	4618      	mov	r0, r3
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685a      	ldr	r2, [r3, #4]
 80010a2:	4613      	mov	r3, r2
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	4413      	add	r3, r2
 80010a8:	3b41      	subs	r3, #65	@ 0x41
 80010aa:	fa00 f203 	lsl.w	r2, r0, r3
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	430a      	orrs	r2, r1
 80010b4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80010b6:	4b29      	ldr	r3, [pc, #164]	@ (800115c <HAL_ADC_ConfigChannel+0x250>)
 80010b8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a28      	ldr	r2, [pc, #160]	@ (8001160 <HAL_ADC_ConfigChannel+0x254>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d10f      	bne.n	80010e4 <HAL_ADC_ConfigChannel+0x1d8>
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	2b12      	cmp	r3, #18
 80010ca:	d10b      	bne.n	80010e4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a1d      	ldr	r2, [pc, #116]	@ (8001160 <HAL_ADC_ConfigChannel+0x254>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d12b      	bne.n	8001146 <HAL_ADC_ConfigChannel+0x23a>
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a1c      	ldr	r2, [pc, #112]	@ (8001164 <HAL_ADC_ConfigChannel+0x258>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d003      	beq.n	8001100 <HAL_ADC_ConfigChannel+0x1f4>
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2b11      	cmp	r3, #17
 80010fe:	d122      	bne.n	8001146 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a11      	ldr	r2, [pc, #68]	@ (8001164 <HAL_ADC_ConfigChannel+0x258>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d111      	bne.n	8001146 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001122:	4b11      	ldr	r3, [pc, #68]	@ (8001168 <HAL_ADC_ConfigChannel+0x25c>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a11      	ldr	r2, [pc, #68]	@ (800116c <HAL_ADC_ConfigChannel+0x260>)
 8001128:	fba2 2303 	umull	r2, r3, r2, r3
 800112c:	0c9a      	lsrs	r2, r3, #18
 800112e:	4613      	mov	r3, r2
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	4413      	add	r3, r2
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001138:	e002      	b.n	8001140 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	3b01      	subs	r3, #1
 800113e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d1f9      	bne.n	800113a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2200      	movs	r2, #0
 800114a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800114e:	2300      	movs	r3, #0
}
 8001150:	4618      	mov	r0, r3
 8001152:	3714      	adds	r7, #20
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr
 800115c:	40012300 	.word	0x40012300
 8001160:	40012000 	.word	0x40012000
 8001164:	10000012 	.word	0x10000012
 8001168:	20000000 	.word	0x20000000
 800116c:	431bde83 	.word	0x431bde83

08001170 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001170:	b480      	push	{r7}
 8001172:	b085      	sub	sp, #20
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001178:	4b79      	ldr	r3, [pc, #484]	@ (8001360 <ADC_Init+0x1f0>)
 800117a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	685a      	ldr	r2, [r3, #4]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	431a      	orrs	r2, r3
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	685a      	ldr	r2, [r3, #4]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80011a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	6859      	ldr	r1, [r3, #4]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	691b      	ldr	r3, [r3, #16]
 80011b0:	021a      	lsls	r2, r3, #8
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	430a      	orrs	r2, r1
 80011b8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	685a      	ldr	r2, [r3, #4]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80011c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	6859      	ldr	r1, [r3, #4]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	689a      	ldr	r2, [r3, #8]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	430a      	orrs	r2, r1
 80011da:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	689a      	ldr	r2, [r3, #8]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80011ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	6899      	ldr	r1, [r3, #8]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	68da      	ldr	r2, [r3, #12]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	430a      	orrs	r2, r1
 80011fc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001202:	4a58      	ldr	r2, [pc, #352]	@ (8001364 <ADC_Init+0x1f4>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d022      	beq.n	800124e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	689a      	ldr	r2, [r3, #8]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001216:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	6899      	ldr	r1, [r3, #8]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	430a      	orrs	r2, r1
 8001228:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	689a      	ldr	r2, [r3, #8]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001238:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	6899      	ldr	r1, [r3, #8]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	430a      	orrs	r2, r1
 800124a:	609a      	str	r2, [r3, #8]
 800124c:	e00f      	b.n	800126e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	689a      	ldr	r2, [r3, #8]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800125c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	689a      	ldr	r2, [r3, #8]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800126c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	689a      	ldr	r2, [r3, #8]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f022 0202 	bic.w	r2, r2, #2
 800127c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	6899      	ldr	r1, [r3, #8]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	7e1b      	ldrb	r3, [r3, #24]
 8001288:	005a      	lsls	r2, r3, #1
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	430a      	orrs	r2, r1
 8001290:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d01b      	beq.n	80012d4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	685a      	ldr	r2, [r3, #4]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80012aa:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	685a      	ldr	r2, [r3, #4]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80012ba:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	6859      	ldr	r1, [r3, #4]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012c6:	3b01      	subs	r3, #1
 80012c8:	035a      	lsls	r2, r3, #13
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	430a      	orrs	r2, r1
 80012d0:	605a      	str	r2, [r3, #4]
 80012d2:	e007      	b.n	80012e4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	685a      	ldr	r2, [r3, #4]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80012e2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80012f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	69db      	ldr	r3, [r3, #28]
 80012fe:	3b01      	subs	r3, #1
 8001300:	051a      	lsls	r2, r3, #20
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	430a      	orrs	r2, r1
 8001308:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	689a      	ldr	r2, [r3, #8]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001318:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	6899      	ldr	r1, [r3, #8]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001326:	025a      	lsls	r2, r3, #9
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	430a      	orrs	r2, r1
 800132e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	689a      	ldr	r2, [r3, #8]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800133e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	6899      	ldr	r1, [r3, #8]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	695b      	ldr	r3, [r3, #20]
 800134a:	029a      	lsls	r2, r3, #10
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	430a      	orrs	r2, r1
 8001352:	609a      	str	r2, [r3, #8]
}
 8001354:	bf00      	nop
 8001356:	3714      	adds	r7, #20
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr
 8001360:	40012300 	.word	0x40012300
 8001364:	0f000001 	.word	0x0f000001

08001368 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001368:	b480      	push	{r7}
 800136a:	b085      	sub	sp, #20
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f003 0307 	and.w	r3, r3, #7
 8001376:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001378:	4b0c      	ldr	r3, [pc, #48]	@ (80013ac <__NVIC_SetPriorityGrouping+0x44>)
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800137e:	68ba      	ldr	r2, [r7, #8]
 8001380:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001384:	4013      	ands	r3, r2
 8001386:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001390:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001394:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001398:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800139a:	4a04      	ldr	r2, [pc, #16]	@ (80013ac <__NVIC_SetPriorityGrouping+0x44>)
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	60d3      	str	r3, [r2, #12]
}
 80013a0:	bf00      	nop
 80013a2:	3714      	adds	r7, #20
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr
 80013ac:	e000ed00 	.word	0xe000ed00

080013b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013b4:	4b04      	ldr	r3, [pc, #16]	@ (80013c8 <__NVIC_GetPriorityGrouping+0x18>)
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	0a1b      	lsrs	r3, r3, #8
 80013ba:	f003 0307 	and.w	r3, r3, #7
}
 80013be:	4618      	mov	r0, r3
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr
 80013c8:	e000ed00 	.word	0xe000ed00

080013cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	4603      	mov	r3, r0
 80013d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	db0b      	blt.n	80013f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013de:	79fb      	ldrb	r3, [r7, #7]
 80013e0:	f003 021f 	and.w	r2, r3, #31
 80013e4:	4907      	ldr	r1, [pc, #28]	@ (8001404 <__NVIC_EnableIRQ+0x38>)
 80013e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ea:	095b      	lsrs	r3, r3, #5
 80013ec:	2001      	movs	r0, #1
 80013ee:	fa00 f202 	lsl.w	r2, r0, r2
 80013f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013f6:	bf00      	nop
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	e000e100 	.word	0xe000e100

08001408 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	4603      	mov	r3, r0
 8001410:	6039      	str	r1, [r7, #0]
 8001412:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001414:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001418:	2b00      	cmp	r3, #0
 800141a:	db0a      	blt.n	8001432 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	b2da      	uxtb	r2, r3
 8001420:	490c      	ldr	r1, [pc, #48]	@ (8001454 <__NVIC_SetPriority+0x4c>)
 8001422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001426:	0112      	lsls	r2, r2, #4
 8001428:	b2d2      	uxtb	r2, r2
 800142a:	440b      	add	r3, r1
 800142c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001430:	e00a      	b.n	8001448 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	b2da      	uxtb	r2, r3
 8001436:	4908      	ldr	r1, [pc, #32]	@ (8001458 <__NVIC_SetPriority+0x50>)
 8001438:	79fb      	ldrb	r3, [r7, #7]
 800143a:	f003 030f 	and.w	r3, r3, #15
 800143e:	3b04      	subs	r3, #4
 8001440:	0112      	lsls	r2, r2, #4
 8001442:	b2d2      	uxtb	r2, r2
 8001444:	440b      	add	r3, r1
 8001446:	761a      	strb	r2, [r3, #24]
}
 8001448:	bf00      	nop
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr
 8001454:	e000e100 	.word	0xe000e100
 8001458:	e000ed00 	.word	0xe000ed00

0800145c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800145c:	b480      	push	{r7}
 800145e:	b089      	sub	sp, #36	@ 0x24
 8001460:	af00      	add	r7, sp, #0
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	60b9      	str	r1, [r7, #8]
 8001466:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	f003 0307 	and.w	r3, r3, #7
 800146e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	f1c3 0307 	rsb	r3, r3, #7
 8001476:	2b04      	cmp	r3, #4
 8001478:	bf28      	it	cs
 800147a:	2304      	movcs	r3, #4
 800147c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	3304      	adds	r3, #4
 8001482:	2b06      	cmp	r3, #6
 8001484:	d902      	bls.n	800148c <NVIC_EncodePriority+0x30>
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	3b03      	subs	r3, #3
 800148a:	e000      	b.n	800148e <NVIC_EncodePriority+0x32>
 800148c:	2300      	movs	r3, #0
 800148e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001490:	f04f 32ff 	mov.w	r2, #4294967295
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	fa02 f303 	lsl.w	r3, r2, r3
 800149a:	43da      	mvns	r2, r3
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	401a      	ands	r2, r3
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014a4:	f04f 31ff 	mov.w	r1, #4294967295
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	fa01 f303 	lsl.w	r3, r1, r3
 80014ae:	43d9      	mvns	r1, r3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b4:	4313      	orrs	r3, r2
         );
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3724      	adds	r7, #36	@ 0x24
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
	...

080014c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	3b01      	subs	r3, #1
 80014d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014d4:	d301      	bcc.n	80014da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014d6:	2301      	movs	r3, #1
 80014d8:	e00f      	b.n	80014fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014da:	4a0a      	ldr	r2, [pc, #40]	@ (8001504 <SysTick_Config+0x40>)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	3b01      	subs	r3, #1
 80014e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014e2:	210f      	movs	r1, #15
 80014e4:	f04f 30ff 	mov.w	r0, #4294967295
 80014e8:	f7ff ff8e 	bl	8001408 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014ec:	4b05      	ldr	r3, [pc, #20]	@ (8001504 <SysTick_Config+0x40>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014f2:	4b04      	ldr	r3, [pc, #16]	@ (8001504 <SysTick_Config+0x40>)
 80014f4:	2207      	movs	r2, #7
 80014f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014f8:	2300      	movs	r3, #0
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	e000e010 	.word	0xe000e010

08001508 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f7ff ff29 	bl	8001368 <__NVIC_SetPriorityGrouping>
}
 8001516:	bf00      	nop
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}

0800151e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800151e:	b580      	push	{r7, lr}
 8001520:	b086      	sub	sp, #24
 8001522:	af00      	add	r7, sp, #0
 8001524:	4603      	mov	r3, r0
 8001526:	60b9      	str	r1, [r7, #8]
 8001528:	607a      	str	r2, [r7, #4]
 800152a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800152c:	2300      	movs	r3, #0
 800152e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001530:	f7ff ff3e 	bl	80013b0 <__NVIC_GetPriorityGrouping>
 8001534:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001536:	687a      	ldr	r2, [r7, #4]
 8001538:	68b9      	ldr	r1, [r7, #8]
 800153a:	6978      	ldr	r0, [r7, #20]
 800153c:	f7ff ff8e 	bl	800145c <NVIC_EncodePriority>
 8001540:	4602      	mov	r2, r0
 8001542:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001546:	4611      	mov	r1, r2
 8001548:	4618      	mov	r0, r3
 800154a:	f7ff ff5d 	bl	8001408 <__NVIC_SetPriority>
}
 800154e:	bf00      	nop
 8001550:	3718      	adds	r7, #24
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}

08001556 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001556:	b580      	push	{r7, lr}
 8001558:	b082      	sub	sp, #8
 800155a:	af00      	add	r7, sp, #0
 800155c:	4603      	mov	r3, r0
 800155e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001560:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff ff31 	bl	80013cc <__NVIC_EnableIRQ>
}
 800156a:	bf00      	nop
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001572:	b580      	push	{r7, lr}
 8001574:	b082      	sub	sp, #8
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f7ff ffa2 	bl	80014c4 <SysTick_Config>
 8001580:	4603      	mov	r3, r0
}
 8001582:	4618      	mov	r0, r3
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
	...

0800158c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b086      	sub	sp, #24
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001594:	2300      	movs	r3, #0
 8001596:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001598:	f7ff fc44 	bl	8000e24 <HAL_GetTick>
 800159c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d101      	bne.n	80015a8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	e099      	b.n	80016dc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2202      	movs	r2, #2
 80015ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2200      	movs	r2, #0
 80015b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f022 0201 	bic.w	r2, r2, #1
 80015c6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015c8:	e00f      	b.n	80015ea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80015ca:	f7ff fc2b 	bl	8000e24 <HAL_GetTick>
 80015ce:	4602      	mov	r2, r0
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	2b05      	cmp	r3, #5
 80015d6:	d908      	bls.n	80015ea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2220      	movs	r2, #32
 80015dc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2203      	movs	r2, #3
 80015e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80015e6:	2303      	movs	r3, #3
 80015e8:	e078      	b.n	80016dc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 0301 	and.w	r3, r3, #1
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d1e8      	bne.n	80015ca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001600:	697a      	ldr	r2, [r7, #20]
 8001602:	4b38      	ldr	r3, [pc, #224]	@ (80016e4 <HAL_DMA_Init+0x158>)
 8001604:	4013      	ands	r3, r2
 8001606:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	685a      	ldr	r2, [r3, #4]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001616:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	691b      	ldr	r3, [r3, #16]
 800161c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001622:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	699b      	ldr	r3, [r3, #24]
 8001628:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800162e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6a1b      	ldr	r3, [r3, #32]
 8001634:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001636:	697a      	ldr	r2, [r7, #20]
 8001638:	4313      	orrs	r3, r2
 800163a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001640:	2b04      	cmp	r3, #4
 8001642:	d107      	bne.n	8001654 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800164c:	4313      	orrs	r3, r2
 800164e:	697a      	ldr	r2, [r7, #20]
 8001650:	4313      	orrs	r3, r2
 8001652:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	697a      	ldr	r2, [r7, #20]
 800165a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	695b      	ldr	r3, [r3, #20]
 8001662:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	f023 0307 	bic.w	r3, r3, #7
 800166a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001670:	697a      	ldr	r2, [r7, #20]
 8001672:	4313      	orrs	r3, r2
 8001674:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800167a:	2b04      	cmp	r3, #4
 800167c:	d117      	bne.n	80016ae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001682:	697a      	ldr	r2, [r7, #20]
 8001684:	4313      	orrs	r3, r2
 8001686:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800168c:	2b00      	cmp	r3, #0
 800168e:	d00e      	beq.n	80016ae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f000 f9e9 	bl	8001a68 <DMA_CheckFifoParam>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d008      	beq.n	80016ae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2240      	movs	r2, #64	@ 0x40
 80016a0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2201      	movs	r2, #1
 80016a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80016aa:	2301      	movs	r3, #1
 80016ac:	e016      	b.n	80016dc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	697a      	ldr	r2, [r7, #20]
 80016b4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f000 f9a0 	bl	80019fc <DMA_CalcBaseAndBitshift>
 80016bc:	4603      	mov	r3, r0
 80016be:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016c4:	223f      	movs	r2, #63	@ 0x3f
 80016c6:	409a      	lsls	r2, r3
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2200      	movs	r2, #0
 80016d0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2201      	movs	r2, #1
 80016d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80016da:	2300      	movs	r3, #0
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3718      	adds	r7, #24
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	f010803f 	.word	0xf010803f

080016e8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b086      	sub	sp, #24
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80016f0:	2300      	movs	r3, #0
 80016f2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80016f4:	4b8e      	ldr	r3, [pc, #568]	@ (8001930 <HAL_DMA_IRQHandler+0x248>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a8e      	ldr	r2, [pc, #568]	@ (8001934 <HAL_DMA_IRQHandler+0x24c>)
 80016fa:	fba2 2303 	umull	r2, r3, r2, r3
 80016fe:	0a9b      	lsrs	r3, r3, #10
 8001700:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001706:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001712:	2208      	movs	r2, #8
 8001714:	409a      	lsls	r2, r3
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	4013      	ands	r3, r2
 800171a:	2b00      	cmp	r3, #0
 800171c:	d01a      	beq.n	8001754 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 0304 	and.w	r3, r3, #4
 8001728:	2b00      	cmp	r3, #0
 800172a:	d013      	beq.n	8001754 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f022 0204 	bic.w	r2, r2, #4
 800173a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001740:	2208      	movs	r2, #8
 8001742:	409a      	lsls	r2, r3
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800174c:	f043 0201 	orr.w	r2, r3, #1
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001758:	2201      	movs	r2, #1
 800175a:	409a      	lsls	r2, r3
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	4013      	ands	r3, r2
 8001760:	2b00      	cmp	r3, #0
 8001762:	d012      	beq.n	800178a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	695b      	ldr	r3, [r3, #20]
 800176a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800176e:	2b00      	cmp	r3, #0
 8001770:	d00b      	beq.n	800178a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001776:	2201      	movs	r2, #1
 8001778:	409a      	lsls	r2, r3
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001782:	f043 0202 	orr.w	r2, r3, #2
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800178e:	2204      	movs	r2, #4
 8001790:	409a      	lsls	r2, r3
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	4013      	ands	r3, r2
 8001796:	2b00      	cmp	r3, #0
 8001798:	d012      	beq.n	80017c0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 0302 	and.w	r3, r3, #2
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d00b      	beq.n	80017c0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017ac:	2204      	movs	r2, #4
 80017ae:	409a      	lsls	r2, r3
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017b8:	f043 0204 	orr.w	r2, r3, #4
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017c4:	2210      	movs	r2, #16
 80017c6:	409a      	lsls	r2, r3
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	4013      	ands	r3, r2
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d043      	beq.n	8001858 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0308 	and.w	r3, r3, #8
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d03c      	beq.n	8001858 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017e2:	2210      	movs	r2, #16
 80017e4:	409a      	lsls	r2, r3
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d018      	beq.n	800182a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d108      	bne.n	8001818 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800180a:	2b00      	cmp	r3, #0
 800180c:	d024      	beq.n	8001858 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	4798      	blx	r3
 8001816:	e01f      	b.n	8001858 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800181c:	2b00      	cmp	r3, #0
 800181e:	d01b      	beq.n	8001858 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	4798      	blx	r3
 8001828:	e016      	b.n	8001858 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001834:	2b00      	cmp	r3, #0
 8001836:	d107      	bne.n	8001848 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f022 0208 	bic.w	r2, r2, #8
 8001846:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800184c:	2b00      	cmp	r3, #0
 800184e:	d003      	beq.n	8001858 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800185c:	2220      	movs	r2, #32
 800185e:	409a      	lsls	r2, r3
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	4013      	ands	r3, r2
 8001864:	2b00      	cmp	r3, #0
 8001866:	f000 808f 	beq.w	8001988 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0310 	and.w	r3, r3, #16
 8001874:	2b00      	cmp	r3, #0
 8001876:	f000 8087 	beq.w	8001988 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800187e:	2220      	movs	r2, #32
 8001880:	409a      	lsls	r2, r3
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800188c:	b2db      	uxtb	r3, r3
 800188e:	2b05      	cmp	r3, #5
 8001890:	d136      	bne.n	8001900 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f022 0216 	bic.w	r2, r2, #22
 80018a0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	695a      	ldr	r2, [r3, #20]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80018b0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d103      	bne.n	80018c2 <HAL_DMA_IRQHandler+0x1da>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d007      	beq.n	80018d2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f022 0208 	bic.w	r2, r2, #8
 80018d0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018d6:	223f      	movs	r2, #63	@ 0x3f
 80018d8:	409a      	lsls	r2, r3
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2201      	movs	r2, #1
 80018e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2200      	movs	r2, #0
 80018ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d07e      	beq.n	80019f4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	4798      	blx	r3
        }
        return;
 80018fe:	e079      	b.n	80019f4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d01d      	beq.n	800194a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001918:	2b00      	cmp	r3, #0
 800191a:	d10d      	bne.n	8001938 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001920:	2b00      	cmp	r3, #0
 8001922:	d031      	beq.n	8001988 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	4798      	blx	r3
 800192c:	e02c      	b.n	8001988 <HAL_DMA_IRQHandler+0x2a0>
 800192e:	bf00      	nop
 8001930:	20000000 	.word	0x20000000
 8001934:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800193c:	2b00      	cmp	r3, #0
 800193e:	d023      	beq.n	8001988 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	4798      	blx	r3
 8001948:	e01e      	b.n	8001988 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001954:	2b00      	cmp	r3, #0
 8001956:	d10f      	bne.n	8001978 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f022 0210 	bic.w	r2, r2, #16
 8001966:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2201      	movs	r2, #1
 800196c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2200      	movs	r2, #0
 8001974:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800197c:	2b00      	cmp	r3, #0
 800197e:	d003      	beq.n	8001988 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800198c:	2b00      	cmp	r3, #0
 800198e:	d032      	beq.n	80019f6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001994:	f003 0301 	and.w	r3, r3, #1
 8001998:	2b00      	cmp	r3, #0
 800199a:	d022      	beq.n	80019e2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2205      	movs	r2, #5
 80019a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f022 0201 	bic.w	r2, r2, #1
 80019b2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	3301      	adds	r3, #1
 80019b8:	60bb      	str	r3, [r7, #8]
 80019ba:	697a      	ldr	r2, [r7, #20]
 80019bc:	429a      	cmp	r2, r3
 80019be:	d307      	bcc.n	80019d0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0301 	and.w	r3, r3, #1
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d1f2      	bne.n	80019b4 <HAL_DMA_IRQHandler+0x2cc>
 80019ce:	e000      	b.n	80019d2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80019d0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2201      	movs	r2, #1
 80019d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2200      	movs	r2, #0
 80019de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d005      	beq.n	80019f6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	4798      	blx	r3
 80019f2:	e000      	b.n	80019f6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80019f4:	bf00      	nop
    }
  }
}
 80019f6:	3718      	adds	r7, #24
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}

080019fc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b085      	sub	sp, #20
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	3b10      	subs	r3, #16
 8001a0c:	4a14      	ldr	r2, [pc, #80]	@ (8001a60 <DMA_CalcBaseAndBitshift+0x64>)
 8001a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a12:	091b      	lsrs	r3, r3, #4
 8001a14:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001a16:	4a13      	ldr	r2, [pc, #76]	@ (8001a64 <DMA_CalcBaseAndBitshift+0x68>)
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	461a      	mov	r2, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	2b03      	cmp	r3, #3
 8001a28:	d909      	bls.n	8001a3e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001a32:	f023 0303 	bic.w	r3, r3, #3
 8001a36:	1d1a      	adds	r2, r3, #4
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	659a      	str	r2, [r3, #88]	@ 0x58
 8001a3c:	e007      	b.n	8001a4e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001a46:	f023 0303 	bic.w	r3, r3, #3
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3714      	adds	r7, #20
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	aaaaaaab 	.word	0xaaaaaaab
 8001a64:	08003e6c 	.word	0x08003e6c

08001a68 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b085      	sub	sp, #20
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a70:	2300      	movs	r3, #0
 8001a72:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a78:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	699b      	ldr	r3, [r3, #24]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d11f      	bne.n	8001ac2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	2b03      	cmp	r3, #3
 8001a86:	d856      	bhi.n	8001b36 <DMA_CheckFifoParam+0xce>
 8001a88:	a201      	add	r2, pc, #4	@ (adr r2, 8001a90 <DMA_CheckFifoParam+0x28>)
 8001a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a8e:	bf00      	nop
 8001a90:	08001aa1 	.word	0x08001aa1
 8001a94:	08001ab3 	.word	0x08001ab3
 8001a98:	08001aa1 	.word	0x08001aa1
 8001a9c:	08001b37 	.word	0x08001b37
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aa4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d046      	beq.n	8001b3a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ab0:	e043      	b.n	8001b3a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ab6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001aba:	d140      	bne.n	8001b3e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ac0:	e03d      	b.n	8001b3e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	699b      	ldr	r3, [r3, #24]
 8001ac6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001aca:	d121      	bne.n	8001b10 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	2b03      	cmp	r3, #3
 8001ad0:	d837      	bhi.n	8001b42 <DMA_CheckFifoParam+0xda>
 8001ad2:	a201      	add	r2, pc, #4	@ (adr r2, 8001ad8 <DMA_CheckFifoParam+0x70>)
 8001ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ad8:	08001ae9 	.word	0x08001ae9
 8001adc:	08001aef 	.word	0x08001aef
 8001ae0:	08001ae9 	.word	0x08001ae9
 8001ae4:	08001b01 	.word	0x08001b01
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	73fb      	strb	r3, [r7, #15]
      break;
 8001aec:	e030      	b.n	8001b50 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001af2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d025      	beq.n	8001b46 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001afe:	e022      	b.n	8001b46 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b04:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001b08:	d11f      	bne.n	8001b4a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001b0e:	e01c      	b.n	8001b4a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d903      	bls.n	8001b1e <DMA_CheckFifoParam+0xb6>
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	2b03      	cmp	r3, #3
 8001b1a:	d003      	beq.n	8001b24 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001b1c:	e018      	b.n	8001b50 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	73fb      	strb	r3, [r7, #15]
      break;
 8001b22:	e015      	b.n	8001b50 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b28:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d00e      	beq.n	8001b4e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	73fb      	strb	r3, [r7, #15]
      break;
 8001b34:	e00b      	b.n	8001b4e <DMA_CheckFifoParam+0xe6>
      break;
 8001b36:	bf00      	nop
 8001b38:	e00a      	b.n	8001b50 <DMA_CheckFifoParam+0xe8>
      break;
 8001b3a:	bf00      	nop
 8001b3c:	e008      	b.n	8001b50 <DMA_CheckFifoParam+0xe8>
      break;
 8001b3e:	bf00      	nop
 8001b40:	e006      	b.n	8001b50 <DMA_CheckFifoParam+0xe8>
      break;
 8001b42:	bf00      	nop
 8001b44:	e004      	b.n	8001b50 <DMA_CheckFifoParam+0xe8>
      break;
 8001b46:	bf00      	nop
 8001b48:	e002      	b.n	8001b50 <DMA_CheckFifoParam+0xe8>
      break;   
 8001b4a:	bf00      	nop
 8001b4c:	e000      	b.n	8001b50 <DMA_CheckFifoParam+0xe8>
      break;
 8001b4e:	bf00      	nop
    }
  } 
  
  return status; 
 8001b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3714      	adds	r7, #20
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop

08001b60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b089      	sub	sp, #36	@ 0x24
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b72:	2300      	movs	r3, #0
 8001b74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b76:	2300      	movs	r3, #0
 8001b78:	61fb      	str	r3, [r7, #28]
 8001b7a:	e165      	b.n	8001e48 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	fa02 f303 	lsl.w	r3, r2, r3
 8001b84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	697a      	ldr	r2, [r7, #20]
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b90:	693a      	ldr	r2, [r7, #16]
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	f040 8154 	bne.w	8001e42 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f003 0303 	and.w	r3, r3, #3
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d005      	beq.n	8001bb2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d130      	bne.n	8001c14 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	005b      	lsls	r3, r3, #1
 8001bbc:	2203      	movs	r2, #3
 8001bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc2:	43db      	mvns	r3, r3
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	68da      	ldr	r2, [r3, #12]
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	005b      	lsls	r3, r3, #1
 8001bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd6:	69ba      	ldr	r2, [r7, #24]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001be8:	2201      	movs	r2, #1
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf0:	43db      	mvns	r3, r3
 8001bf2:	69ba      	ldr	r2, [r7, #24]
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	091b      	lsrs	r3, r3, #4
 8001bfe:	f003 0201 	and.w	r2, r3, #1
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	fa02 f303 	lsl.w	r3, r2, r3
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f003 0303 	and.w	r3, r3, #3
 8001c1c:	2b03      	cmp	r3, #3
 8001c1e:	d017      	beq.n	8001c50 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	005b      	lsls	r3, r3, #1
 8001c2a:	2203      	movs	r2, #3
 8001c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c30:	43db      	mvns	r3, r3
 8001c32:	69ba      	ldr	r2, [r7, #24]
 8001c34:	4013      	ands	r3, r2
 8001c36:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	689a      	ldr	r2, [r3, #8]
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	005b      	lsls	r3, r3, #1
 8001c40:	fa02 f303 	lsl.w	r3, r2, r3
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f003 0303 	and.w	r3, r3, #3
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d123      	bne.n	8001ca4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	08da      	lsrs	r2, r3, #3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	3208      	adds	r2, #8
 8001c64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c68:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	f003 0307 	and.w	r3, r3, #7
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	220f      	movs	r2, #15
 8001c74:	fa02 f303 	lsl.w	r3, r2, r3
 8001c78:	43db      	mvns	r3, r3
 8001c7a:	69ba      	ldr	r2, [r7, #24]
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	691a      	ldr	r2, [r3, #16]
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	f003 0307 	and.w	r3, r3, #7
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	4313      	orrs	r3, r2
 8001c94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	08da      	lsrs	r2, r3, #3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	3208      	adds	r2, #8
 8001c9e:	69b9      	ldr	r1, [r7, #24]
 8001ca0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	005b      	lsls	r3, r3, #1
 8001cae:	2203      	movs	r2, #3
 8001cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb4:	43db      	mvns	r3, r3
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f003 0203 	and.w	r2, r3, #3
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	005b      	lsls	r3, r3, #1
 8001cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	f000 80ae 	beq.w	8001e42 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	60fb      	str	r3, [r7, #12]
 8001cea:	4b5d      	ldr	r3, [pc, #372]	@ (8001e60 <HAL_GPIO_Init+0x300>)
 8001cec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cee:	4a5c      	ldr	r2, [pc, #368]	@ (8001e60 <HAL_GPIO_Init+0x300>)
 8001cf0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cf4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cf6:	4b5a      	ldr	r3, [pc, #360]	@ (8001e60 <HAL_GPIO_Init+0x300>)
 8001cf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cfa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cfe:	60fb      	str	r3, [r7, #12]
 8001d00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d02:	4a58      	ldr	r2, [pc, #352]	@ (8001e64 <HAL_GPIO_Init+0x304>)
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	089b      	lsrs	r3, r3, #2
 8001d08:	3302      	adds	r3, #2
 8001d0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	f003 0303 	and.w	r3, r3, #3
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	220f      	movs	r2, #15
 8001d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1e:	43db      	mvns	r3, r3
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	4013      	ands	r3, r2
 8001d24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a4f      	ldr	r2, [pc, #316]	@ (8001e68 <HAL_GPIO_Init+0x308>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d025      	beq.n	8001d7a <HAL_GPIO_Init+0x21a>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a4e      	ldr	r2, [pc, #312]	@ (8001e6c <HAL_GPIO_Init+0x30c>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d01f      	beq.n	8001d76 <HAL_GPIO_Init+0x216>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4a4d      	ldr	r2, [pc, #308]	@ (8001e70 <HAL_GPIO_Init+0x310>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d019      	beq.n	8001d72 <HAL_GPIO_Init+0x212>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a4c      	ldr	r2, [pc, #304]	@ (8001e74 <HAL_GPIO_Init+0x314>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d013      	beq.n	8001d6e <HAL_GPIO_Init+0x20e>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a4b      	ldr	r2, [pc, #300]	@ (8001e78 <HAL_GPIO_Init+0x318>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d00d      	beq.n	8001d6a <HAL_GPIO_Init+0x20a>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4a4a      	ldr	r2, [pc, #296]	@ (8001e7c <HAL_GPIO_Init+0x31c>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d007      	beq.n	8001d66 <HAL_GPIO_Init+0x206>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4a49      	ldr	r2, [pc, #292]	@ (8001e80 <HAL_GPIO_Init+0x320>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d101      	bne.n	8001d62 <HAL_GPIO_Init+0x202>
 8001d5e:	2306      	movs	r3, #6
 8001d60:	e00c      	b.n	8001d7c <HAL_GPIO_Init+0x21c>
 8001d62:	2307      	movs	r3, #7
 8001d64:	e00a      	b.n	8001d7c <HAL_GPIO_Init+0x21c>
 8001d66:	2305      	movs	r3, #5
 8001d68:	e008      	b.n	8001d7c <HAL_GPIO_Init+0x21c>
 8001d6a:	2304      	movs	r3, #4
 8001d6c:	e006      	b.n	8001d7c <HAL_GPIO_Init+0x21c>
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e004      	b.n	8001d7c <HAL_GPIO_Init+0x21c>
 8001d72:	2302      	movs	r3, #2
 8001d74:	e002      	b.n	8001d7c <HAL_GPIO_Init+0x21c>
 8001d76:	2301      	movs	r3, #1
 8001d78:	e000      	b.n	8001d7c <HAL_GPIO_Init+0x21c>
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	69fa      	ldr	r2, [r7, #28]
 8001d7e:	f002 0203 	and.w	r2, r2, #3
 8001d82:	0092      	lsls	r2, r2, #2
 8001d84:	4093      	lsls	r3, r2
 8001d86:	69ba      	ldr	r2, [r7, #24]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d8c:	4935      	ldr	r1, [pc, #212]	@ (8001e64 <HAL_GPIO_Init+0x304>)
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	089b      	lsrs	r3, r3, #2
 8001d92:	3302      	adds	r3, #2
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d9a:	4b3a      	ldr	r3, [pc, #232]	@ (8001e84 <HAL_GPIO_Init+0x324>)
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	43db      	mvns	r3, r3
 8001da4:	69ba      	ldr	r2, [r7, #24]
 8001da6:	4013      	ands	r3, r2
 8001da8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d003      	beq.n	8001dbe <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001db6:	69ba      	ldr	r2, [r7, #24]
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001dbe:	4a31      	ldr	r2, [pc, #196]	@ (8001e84 <HAL_GPIO_Init+0x324>)
 8001dc0:	69bb      	ldr	r3, [r7, #24]
 8001dc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001dc4:	4b2f      	ldr	r3, [pc, #188]	@ (8001e84 <HAL_GPIO_Init+0x324>)
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	43db      	mvns	r3, r3
 8001dce:	69ba      	ldr	r2, [r7, #24]
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d003      	beq.n	8001de8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001de8:	4a26      	ldr	r2, [pc, #152]	@ (8001e84 <HAL_GPIO_Init+0x324>)
 8001dea:	69bb      	ldr	r3, [r7, #24]
 8001dec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001dee:	4b25      	ldr	r3, [pc, #148]	@ (8001e84 <HAL_GPIO_Init+0x324>)
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	43db      	mvns	r3, r3
 8001df8:	69ba      	ldr	r2, [r7, #24]
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d003      	beq.n	8001e12 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001e0a:	69ba      	ldr	r2, [r7, #24]
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e12:	4a1c      	ldr	r2, [pc, #112]	@ (8001e84 <HAL_GPIO_Init+0x324>)
 8001e14:	69bb      	ldr	r3, [r7, #24]
 8001e16:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e18:	4b1a      	ldr	r3, [pc, #104]	@ (8001e84 <HAL_GPIO_Init+0x324>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	43db      	mvns	r3, r3
 8001e22:	69ba      	ldr	r2, [r7, #24]
 8001e24:	4013      	ands	r3, r2
 8001e26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d003      	beq.n	8001e3c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e3c:	4a11      	ldr	r2, [pc, #68]	@ (8001e84 <HAL_GPIO_Init+0x324>)
 8001e3e:	69bb      	ldr	r3, [r7, #24]
 8001e40:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	3301      	adds	r3, #1
 8001e46:	61fb      	str	r3, [r7, #28]
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	2b0f      	cmp	r3, #15
 8001e4c:	f67f ae96 	bls.w	8001b7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e50:	bf00      	nop
 8001e52:	bf00      	nop
 8001e54:	3724      	adds	r7, #36	@ 0x24
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	40023800 	.word	0x40023800
 8001e64:	40013800 	.word	0x40013800
 8001e68:	40020000 	.word	0x40020000
 8001e6c:	40020400 	.word	0x40020400
 8001e70:	40020800 	.word	0x40020800
 8001e74:	40020c00 	.word	0x40020c00
 8001e78:	40021000 	.word	0x40021000
 8001e7c:	40021400 	.word	0x40021400
 8001e80:	40021800 	.word	0x40021800
 8001e84:	40013c00 	.word	0x40013c00

08001e88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	460b      	mov	r3, r1
 8001e92:	807b      	strh	r3, [r7, #2]
 8001e94:	4613      	mov	r3, r2
 8001e96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e98:	787b      	ldrb	r3, [r7, #1]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d003      	beq.n	8001ea6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e9e:	887a      	ldrh	r2, [r7, #2]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ea4:	e003      	b.n	8001eae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ea6:	887b      	ldrh	r3, [r7, #2]
 8001ea8:	041a      	lsls	r2, r3, #16
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	619a      	str	r2, [r3, #24]
}
 8001eae:	bf00      	nop
 8001eb0:	370c      	adds	r7, #12
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
	...

08001ebc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d101      	bne.n	8001ece <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e12b      	b.n	8002126 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d106      	bne.n	8001ee8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f7fe fdaa 	bl	8000a3c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2224      	movs	r2, #36	@ 0x24
 8001eec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f022 0201 	bic.w	r2, r2, #1
 8001efe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001f0e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001f1e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f20:	f000 fa02 	bl	8002328 <HAL_RCC_GetPCLK1Freq>
 8001f24:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	4a81      	ldr	r2, [pc, #516]	@ (8002130 <HAL_I2C_Init+0x274>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d807      	bhi.n	8001f40 <HAL_I2C_Init+0x84>
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	4a80      	ldr	r2, [pc, #512]	@ (8002134 <HAL_I2C_Init+0x278>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	bf94      	ite	ls
 8001f38:	2301      	movls	r3, #1
 8001f3a:	2300      	movhi	r3, #0
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	e006      	b.n	8001f4e <HAL_I2C_Init+0x92>
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	4a7d      	ldr	r2, [pc, #500]	@ (8002138 <HAL_I2C_Init+0x27c>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	bf94      	ite	ls
 8001f48:	2301      	movls	r3, #1
 8001f4a:	2300      	movhi	r3, #0
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e0e7      	b.n	8002126 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	4a78      	ldr	r2, [pc, #480]	@ (800213c <HAL_I2C_Init+0x280>)
 8001f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f5e:	0c9b      	lsrs	r3, r3, #18
 8001f60:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	68ba      	ldr	r2, [r7, #8]
 8001f72:	430a      	orrs	r2, r1
 8001f74:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	6a1b      	ldr	r3, [r3, #32]
 8001f7c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	4a6a      	ldr	r2, [pc, #424]	@ (8002130 <HAL_I2C_Init+0x274>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d802      	bhi.n	8001f90 <HAL_I2C_Init+0xd4>
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	3301      	adds	r3, #1
 8001f8e:	e009      	b.n	8001fa4 <HAL_I2C_Init+0xe8>
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001f96:	fb02 f303 	mul.w	r3, r2, r3
 8001f9a:	4a69      	ldr	r2, [pc, #420]	@ (8002140 <HAL_I2C_Init+0x284>)
 8001f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa0:	099b      	lsrs	r3, r3, #6
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	687a      	ldr	r2, [r7, #4]
 8001fa6:	6812      	ldr	r2, [r2, #0]
 8001fa8:	430b      	orrs	r3, r1
 8001faa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	69db      	ldr	r3, [r3, #28]
 8001fb2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001fb6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	495c      	ldr	r1, [pc, #368]	@ (8002130 <HAL_I2C_Init+0x274>)
 8001fc0:	428b      	cmp	r3, r1
 8001fc2:	d819      	bhi.n	8001ff8 <HAL_I2C_Init+0x13c>
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	1e59      	subs	r1, r3, #1
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fd2:	1c59      	adds	r1, r3, #1
 8001fd4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001fd8:	400b      	ands	r3, r1
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d00a      	beq.n	8001ff4 <HAL_I2C_Init+0x138>
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	1e59      	subs	r1, r3, #1
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fec:	3301      	adds	r3, #1
 8001fee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ff2:	e051      	b.n	8002098 <HAL_I2C_Init+0x1dc>
 8001ff4:	2304      	movs	r3, #4
 8001ff6:	e04f      	b.n	8002098 <HAL_I2C_Init+0x1dc>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d111      	bne.n	8002024 <HAL_I2C_Init+0x168>
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	1e58      	subs	r0, r3, #1
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6859      	ldr	r1, [r3, #4]
 8002008:	460b      	mov	r3, r1
 800200a:	005b      	lsls	r3, r3, #1
 800200c:	440b      	add	r3, r1
 800200e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002012:	3301      	adds	r3, #1
 8002014:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002018:	2b00      	cmp	r3, #0
 800201a:	bf0c      	ite	eq
 800201c:	2301      	moveq	r3, #1
 800201e:	2300      	movne	r3, #0
 8002020:	b2db      	uxtb	r3, r3
 8002022:	e012      	b.n	800204a <HAL_I2C_Init+0x18e>
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	1e58      	subs	r0, r3, #1
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6859      	ldr	r1, [r3, #4]
 800202c:	460b      	mov	r3, r1
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	440b      	add	r3, r1
 8002032:	0099      	lsls	r1, r3, #2
 8002034:	440b      	add	r3, r1
 8002036:	fbb0 f3f3 	udiv	r3, r0, r3
 800203a:	3301      	adds	r3, #1
 800203c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002040:	2b00      	cmp	r3, #0
 8002042:	bf0c      	ite	eq
 8002044:	2301      	moveq	r3, #1
 8002046:	2300      	movne	r3, #0
 8002048:	b2db      	uxtb	r3, r3
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <HAL_I2C_Init+0x196>
 800204e:	2301      	movs	r3, #1
 8002050:	e022      	b.n	8002098 <HAL_I2C_Init+0x1dc>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d10e      	bne.n	8002078 <HAL_I2C_Init+0x1bc>
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	1e58      	subs	r0, r3, #1
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6859      	ldr	r1, [r3, #4]
 8002062:	460b      	mov	r3, r1
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	440b      	add	r3, r1
 8002068:	fbb0 f3f3 	udiv	r3, r0, r3
 800206c:	3301      	adds	r3, #1
 800206e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002072:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002076:	e00f      	b.n	8002098 <HAL_I2C_Init+0x1dc>
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	1e58      	subs	r0, r3, #1
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6859      	ldr	r1, [r3, #4]
 8002080:	460b      	mov	r3, r1
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	440b      	add	r3, r1
 8002086:	0099      	lsls	r1, r3, #2
 8002088:	440b      	add	r3, r1
 800208a:	fbb0 f3f3 	udiv	r3, r0, r3
 800208e:	3301      	adds	r3, #1
 8002090:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002094:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002098:	6879      	ldr	r1, [r7, #4]
 800209a:	6809      	ldr	r1, [r1, #0]
 800209c:	4313      	orrs	r3, r2
 800209e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	69da      	ldr	r2, [r3, #28]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6a1b      	ldr	r3, [r3, #32]
 80020b2:	431a      	orrs	r2, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	430a      	orrs	r2, r1
 80020ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80020c6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	6911      	ldr	r1, [r2, #16]
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	68d2      	ldr	r2, [r2, #12]
 80020d2:	4311      	orrs	r1, r2
 80020d4:	687a      	ldr	r2, [r7, #4]
 80020d6:	6812      	ldr	r2, [r2, #0]
 80020d8:	430b      	orrs	r3, r1
 80020da:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	695a      	ldr	r2, [r3, #20]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	699b      	ldr	r3, [r3, #24]
 80020ee:	431a      	orrs	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	430a      	orrs	r2, r1
 80020f6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f042 0201 	orr.w	r2, r2, #1
 8002106:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2200      	movs	r2, #0
 800210c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2220      	movs	r2, #32
 8002112:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2200      	movs	r2, #0
 800211a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2200      	movs	r2, #0
 8002120:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002124:	2300      	movs	r3, #0
}
 8002126:	4618      	mov	r0, r3
 8002128:	3710      	adds	r7, #16
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	000186a0 	.word	0x000186a0
 8002134:	001e847f 	.word	0x001e847f
 8002138:	003d08ff 	.word	0x003d08ff
 800213c:	431bde83 	.word	0x431bde83
 8002140:	10624dd3 	.word	0x10624dd3

08002144 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b084      	sub	sp, #16
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d101      	bne.n	8002158 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e0cc      	b.n	80022f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002158:	4b68      	ldr	r3, [pc, #416]	@ (80022fc <HAL_RCC_ClockConfig+0x1b8>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 030f 	and.w	r3, r3, #15
 8002160:	683a      	ldr	r2, [r7, #0]
 8002162:	429a      	cmp	r2, r3
 8002164:	d90c      	bls.n	8002180 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002166:	4b65      	ldr	r3, [pc, #404]	@ (80022fc <HAL_RCC_ClockConfig+0x1b8>)
 8002168:	683a      	ldr	r2, [r7, #0]
 800216a:	b2d2      	uxtb	r2, r2
 800216c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800216e:	4b63      	ldr	r3, [pc, #396]	@ (80022fc <HAL_RCC_ClockConfig+0x1b8>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 030f 	and.w	r3, r3, #15
 8002176:	683a      	ldr	r2, [r7, #0]
 8002178:	429a      	cmp	r2, r3
 800217a:	d001      	beq.n	8002180 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e0b8      	b.n	80022f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0302 	and.w	r3, r3, #2
 8002188:	2b00      	cmp	r3, #0
 800218a:	d020      	beq.n	80021ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0304 	and.w	r3, r3, #4
 8002194:	2b00      	cmp	r3, #0
 8002196:	d005      	beq.n	80021a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002198:	4b59      	ldr	r3, [pc, #356]	@ (8002300 <HAL_RCC_ClockConfig+0x1bc>)
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	4a58      	ldr	r2, [pc, #352]	@ (8002300 <HAL_RCC_ClockConfig+0x1bc>)
 800219e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80021a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0308 	and.w	r3, r3, #8
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d005      	beq.n	80021bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021b0:	4b53      	ldr	r3, [pc, #332]	@ (8002300 <HAL_RCC_ClockConfig+0x1bc>)
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	4a52      	ldr	r2, [pc, #328]	@ (8002300 <HAL_RCC_ClockConfig+0x1bc>)
 80021b6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80021ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021bc:	4b50      	ldr	r3, [pc, #320]	@ (8002300 <HAL_RCC_ClockConfig+0x1bc>)
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	494d      	ldr	r1, [pc, #308]	@ (8002300 <HAL_RCC_ClockConfig+0x1bc>)
 80021ca:	4313      	orrs	r3, r2
 80021cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0301 	and.w	r3, r3, #1
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d044      	beq.n	8002264 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d107      	bne.n	80021f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021e2:	4b47      	ldr	r3, [pc, #284]	@ (8002300 <HAL_RCC_ClockConfig+0x1bc>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d119      	bne.n	8002222 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e07f      	b.n	80022f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d003      	beq.n	8002202 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021fe:	2b03      	cmp	r3, #3
 8002200:	d107      	bne.n	8002212 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002202:	4b3f      	ldr	r3, [pc, #252]	@ (8002300 <HAL_RCC_ClockConfig+0x1bc>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d109      	bne.n	8002222 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e06f      	b.n	80022f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002212:	4b3b      	ldr	r3, [pc, #236]	@ (8002300 <HAL_RCC_ClockConfig+0x1bc>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0302 	and.w	r3, r3, #2
 800221a:	2b00      	cmp	r3, #0
 800221c:	d101      	bne.n	8002222 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e067      	b.n	80022f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002222:	4b37      	ldr	r3, [pc, #220]	@ (8002300 <HAL_RCC_ClockConfig+0x1bc>)
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	f023 0203 	bic.w	r2, r3, #3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	4934      	ldr	r1, [pc, #208]	@ (8002300 <HAL_RCC_ClockConfig+0x1bc>)
 8002230:	4313      	orrs	r3, r2
 8002232:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002234:	f7fe fdf6 	bl	8000e24 <HAL_GetTick>
 8002238:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800223a:	e00a      	b.n	8002252 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800223c:	f7fe fdf2 	bl	8000e24 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	f241 3288 	movw	r2, #5000	@ 0x1388
 800224a:	4293      	cmp	r3, r2
 800224c:	d901      	bls.n	8002252 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e04f      	b.n	80022f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002252:	4b2b      	ldr	r3, [pc, #172]	@ (8002300 <HAL_RCC_ClockConfig+0x1bc>)
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	f003 020c 	and.w	r2, r3, #12
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	429a      	cmp	r2, r3
 8002262:	d1eb      	bne.n	800223c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002264:	4b25      	ldr	r3, [pc, #148]	@ (80022fc <HAL_RCC_ClockConfig+0x1b8>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 030f 	and.w	r3, r3, #15
 800226c:	683a      	ldr	r2, [r7, #0]
 800226e:	429a      	cmp	r2, r3
 8002270:	d20c      	bcs.n	800228c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002272:	4b22      	ldr	r3, [pc, #136]	@ (80022fc <HAL_RCC_ClockConfig+0x1b8>)
 8002274:	683a      	ldr	r2, [r7, #0]
 8002276:	b2d2      	uxtb	r2, r2
 8002278:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800227a:	4b20      	ldr	r3, [pc, #128]	@ (80022fc <HAL_RCC_ClockConfig+0x1b8>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 030f 	and.w	r3, r3, #15
 8002282:	683a      	ldr	r2, [r7, #0]
 8002284:	429a      	cmp	r2, r3
 8002286:	d001      	beq.n	800228c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e032      	b.n	80022f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0304 	and.w	r3, r3, #4
 8002294:	2b00      	cmp	r3, #0
 8002296:	d008      	beq.n	80022aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002298:	4b19      	ldr	r3, [pc, #100]	@ (8002300 <HAL_RCC_ClockConfig+0x1bc>)
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	4916      	ldr	r1, [pc, #88]	@ (8002300 <HAL_RCC_ClockConfig+0x1bc>)
 80022a6:	4313      	orrs	r3, r2
 80022a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0308 	and.w	r3, r3, #8
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d009      	beq.n	80022ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022b6:	4b12      	ldr	r3, [pc, #72]	@ (8002300 <HAL_RCC_ClockConfig+0x1bc>)
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	691b      	ldr	r3, [r3, #16]
 80022c2:	00db      	lsls	r3, r3, #3
 80022c4:	490e      	ldr	r1, [pc, #56]	@ (8002300 <HAL_RCC_ClockConfig+0x1bc>)
 80022c6:	4313      	orrs	r3, r2
 80022c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80022ca:	f000 f855 	bl	8002378 <HAL_RCC_GetSysClockFreq>
 80022ce:	4602      	mov	r2, r0
 80022d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002300 <HAL_RCC_ClockConfig+0x1bc>)
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	091b      	lsrs	r3, r3, #4
 80022d6:	f003 030f 	and.w	r3, r3, #15
 80022da:	490a      	ldr	r1, [pc, #40]	@ (8002304 <HAL_RCC_ClockConfig+0x1c0>)
 80022dc:	5ccb      	ldrb	r3, [r1, r3]
 80022de:	fa22 f303 	lsr.w	r3, r2, r3
 80022e2:	4a09      	ldr	r2, [pc, #36]	@ (8002308 <HAL_RCC_ClockConfig+0x1c4>)
 80022e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80022e6:	4b09      	ldr	r3, [pc, #36]	@ (800230c <HAL_RCC_ClockConfig+0x1c8>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7fe fd56 	bl	8000d9c <HAL_InitTick>

  return HAL_OK;
 80022f0:	2300      	movs	r3, #0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3710      	adds	r7, #16
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	40023c00 	.word	0x40023c00
 8002300:	40023800 	.word	0x40023800
 8002304:	08003e54 	.word	0x08003e54
 8002308:	20000000 	.word	0x20000000
 800230c:	20000004 	.word	0x20000004

08002310 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002314:	4b03      	ldr	r3, [pc, #12]	@ (8002324 <HAL_RCC_GetHCLKFreq+0x14>)
 8002316:	681b      	ldr	r3, [r3, #0]
}
 8002318:	4618      	mov	r0, r3
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	20000000 	.word	0x20000000

08002328 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800232c:	f7ff fff0 	bl	8002310 <HAL_RCC_GetHCLKFreq>
 8002330:	4602      	mov	r2, r0
 8002332:	4b05      	ldr	r3, [pc, #20]	@ (8002348 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	0a9b      	lsrs	r3, r3, #10
 8002338:	f003 0307 	and.w	r3, r3, #7
 800233c:	4903      	ldr	r1, [pc, #12]	@ (800234c <HAL_RCC_GetPCLK1Freq+0x24>)
 800233e:	5ccb      	ldrb	r3, [r1, r3]
 8002340:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002344:	4618      	mov	r0, r3
 8002346:	bd80      	pop	{r7, pc}
 8002348:	40023800 	.word	0x40023800
 800234c:	08003e64 	.word	0x08003e64

08002350 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002354:	f7ff ffdc 	bl	8002310 <HAL_RCC_GetHCLKFreq>
 8002358:	4602      	mov	r2, r0
 800235a:	4b05      	ldr	r3, [pc, #20]	@ (8002370 <HAL_RCC_GetPCLK2Freq+0x20>)
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	0b5b      	lsrs	r3, r3, #13
 8002360:	f003 0307 	and.w	r3, r3, #7
 8002364:	4903      	ldr	r1, [pc, #12]	@ (8002374 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002366:	5ccb      	ldrb	r3, [r1, r3]
 8002368:	fa22 f303 	lsr.w	r3, r2, r3
}
 800236c:	4618      	mov	r0, r3
 800236e:	bd80      	pop	{r7, pc}
 8002370:	40023800 	.word	0x40023800
 8002374:	08003e64 	.word	0x08003e64

08002378 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002378:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800237c:	b0ae      	sub	sp, #184	@ 0xb8
 800237e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002380:	2300      	movs	r3, #0
 8002382:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002386:	2300      	movs	r3, #0
 8002388:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800238c:	2300      	movs	r3, #0
 800238e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002392:	2300      	movs	r3, #0
 8002394:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002398:	2300      	movs	r3, #0
 800239a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800239e:	4bcb      	ldr	r3, [pc, #812]	@ (80026cc <HAL_RCC_GetSysClockFreq+0x354>)
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	f003 030c 	and.w	r3, r3, #12
 80023a6:	2b0c      	cmp	r3, #12
 80023a8:	f200 8206 	bhi.w	80027b8 <HAL_RCC_GetSysClockFreq+0x440>
 80023ac:	a201      	add	r2, pc, #4	@ (adr r2, 80023b4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80023ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023b2:	bf00      	nop
 80023b4:	080023e9 	.word	0x080023e9
 80023b8:	080027b9 	.word	0x080027b9
 80023bc:	080027b9 	.word	0x080027b9
 80023c0:	080027b9 	.word	0x080027b9
 80023c4:	080023f1 	.word	0x080023f1
 80023c8:	080027b9 	.word	0x080027b9
 80023cc:	080027b9 	.word	0x080027b9
 80023d0:	080027b9 	.word	0x080027b9
 80023d4:	080023f9 	.word	0x080023f9
 80023d8:	080027b9 	.word	0x080027b9
 80023dc:	080027b9 	.word	0x080027b9
 80023e0:	080027b9 	.word	0x080027b9
 80023e4:	080025e9 	.word	0x080025e9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80023e8:	4bb9      	ldr	r3, [pc, #740]	@ (80026d0 <HAL_RCC_GetSysClockFreq+0x358>)
 80023ea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 80023ee:	e1e7      	b.n	80027c0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80023f0:	4bb8      	ldr	r3, [pc, #736]	@ (80026d4 <HAL_RCC_GetSysClockFreq+0x35c>)
 80023f2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80023f6:	e1e3      	b.n	80027c0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023f8:	4bb4      	ldr	r3, [pc, #720]	@ (80026cc <HAL_RCC_GetSysClockFreq+0x354>)
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002400:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002404:	4bb1      	ldr	r3, [pc, #708]	@ (80026cc <HAL_RCC_GetSysClockFreq+0x354>)
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800240c:	2b00      	cmp	r3, #0
 800240e:	d071      	beq.n	80024f4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002410:	4bae      	ldr	r3, [pc, #696]	@ (80026cc <HAL_RCC_GetSysClockFreq+0x354>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	099b      	lsrs	r3, r3, #6
 8002416:	2200      	movs	r2, #0
 8002418:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800241c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002420:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002424:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002428:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800242c:	2300      	movs	r3, #0
 800242e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002432:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002436:	4622      	mov	r2, r4
 8002438:	462b      	mov	r3, r5
 800243a:	f04f 0000 	mov.w	r0, #0
 800243e:	f04f 0100 	mov.w	r1, #0
 8002442:	0159      	lsls	r1, r3, #5
 8002444:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002448:	0150      	lsls	r0, r2, #5
 800244a:	4602      	mov	r2, r0
 800244c:	460b      	mov	r3, r1
 800244e:	4621      	mov	r1, r4
 8002450:	1a51      	subs	r1, r2, r1
 8002452:	6439      	str	r1, [r7, #64]	@ 0x40
 8002454:	4629      	mov	r1, r5
 8002456:	eb63 0301 	sbc.w	r3, r3, r1
 800245a:	647b      	str	r3, [r7, #68]	@ 0x44
 800245c:	f04f 0200 	mov.w	r2, #0
 8002460:	f04f 0300 	mov.w	r3, #0
 8002464:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002468:	4649      	mov	r1, r9
 800246a:	018b      	lsls	r3, r1, #6
 800246c:	4641      	mov	r1, r8
 800246e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002472:	4641      	mov	r1, r8
 8002474:	018a      	lsls	r2, r1, #6
 8002476:	4641      	mov	r1, r8
 8002478:	1a51      	subs	r1, r2, r1
 800247a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800247c:	4649      	mov	r1, r9
 800247e:	eb63 0301 	sbc.w	r3, r3, r1
 8002482:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002484:	f04f 0200 	mov.w	r2, #0
 8002488:	f04f 0300 	mov.w	r3, #0
 800248c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002490:	4649      	mov	r1, r9
 8002492:	00cb      	lsls	r3, r1, #3
 8002494:	4641      	mov	r1, r8
 8002496:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800249a:	4641      	mov	r1, r8
 800249c:	00ca      	lsls	r2, r1, #3
 800249e:	4610      	mov	r0, r2
 80024a0:	4619      	mov	r1, r3
 80024a2:	4603      	mov	r3, r0
 80024a4:	4622      	mov	r2, r4
 80024a6:	189b      	adds	r3, r3, r2
 80024a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80024aa:	462b      	mov	r3, r5
 80024ac:	460a      	mov	r2, r1
 80024ae:	eb42 0303 	adc.w	r3, r2, r3
 80024b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80024b4:	f04f 0200 	mov.w	r2, #0
 80024b8:	f04f 0300 	mov.w	r3, #0
 80024bc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80024c0:	4629      	mov	r1, r5
 80024c2:	024b      	lsls	r3, r1, #9
 80024c4:	4621      	mov	r1, r4
 80024c6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80024ca:	4621      	mov	r1, r4
 80024cc:	024a      	lsls	r2, r1, #9
 80024ce:	4610      	mov	r0, r2
 80024d0:	4619      	mov	r1, r3
 80024d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80024d6:	2200      	movs	r2, #0
 80024d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80024dc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80024e0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80024e4:	f7fd fe8e 	bl	8000204 <__aeabi_uldivmod>
 80024e8:	4602      	mov	r2, r0
 80024ea:	460b      	mov	r3, r1
 80024ec:	4613      	mov	r3, r2
 80024ee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80024f2:	e067      	b.n	80025c4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024f4:	4b75      	ldr	r3, [pc, #468]	@ (80026cc <HAL_RCC_GetSysClockFreq+0x354>)
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	099b      	lsrs	r3, r3, #6
 80024fa:	2200      	movs	r2, #0
 80024fc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002500:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002504:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002508:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800250c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800250e:	2300      	movs	r3, #0
 8002510:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002512:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002516:	4622      	mov	r2, r4
 8002518:	462b      	mov	r3, r5
 800251a:	f04f 0000 	mov.w	r0, #0
 800251e:	f04f 0100 	mov.w	r1, #0
 8002522:	0159      	lsls	r1, r3, #5
 8002524:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002528:	0150      	lsls	r0, r2, #5
 800252a:	4602      	mov	r2, r0
 800252c:	460b      	mov	r3, r1
 800252e:	4621      	mov	r1, r4
 8002530:	1a51      	subs	r1, r2, r1
 8002532:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002534:	4629      	mov	r1, r5
 8002536:	eb63 0301 	sbc.w	r3, r3, r1
 800253a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800253c:	f04f 0200 	mov.w	r2, #0
 8002540:	f04f 0300 	mov.w	r3, #0
 8002544:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002548:	4649      	mov	r1, r9
 800254a:	018b      	lsls	r3, r1, #6
 800254c:	4641      	mov	r1, r8
 800254e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002552:	4641      	mov	r1, r8
 8002554:	018a      	lsls	r2, r1, #6
 8002556:	4641      	mov	r1, r8
 8002558:	ebb2 0a01 	subs.w	sl, r2, r1
 800255c:	4649      	mov	r1, r9
 800255e:	eb63 0b01 	sbc.w	fp, r3, r1
 8002562:	f04f 0200 	mov.w	r2, #0
 8002566:	f04f 0300 	mov.w	r3, #0
 800256a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800256e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002572:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002576:	4692      	mov	sl, r2
 8002578:	469b      	mov	fp, r3
 800257a:	4623      	mov	r3, r4
 800257c:	eb1a 0303 	adds.w	r3, sl, r3
 8002580:	623b      	str	r3, [r7, #32]
 8002582:	462b      	mov	r3, r5
 8002584:	eb4b 0303 	adc.w	r3, fp, r3
 8002588:	627b      	str	r3, [r7, #36]	@ 0x24
 800258a:	f04f 0200 	mov.w	r2, #0
 800258e:	f04f 0300 	mov.w	r3, #0
 8002592:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002596:	4629      	mov	r1, r5
 8002598:	028b      	lsls	r3, r1, #10
 800259a:	4621      	mov	r1, r4
 800259c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80025a0:	4621      	mov	r1, r4
 80025a2:	028a      	lsls	r2, r1, #10
 80025a4:	4610      	mov	r0, r2
 80025a6:	4619      	mov	r1, r3
 80025a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80025ac:	2200      	movs	r2, #0
 80025ae:	673b      	str	r3, [r7, #112]	@ 0x70
 80025b0:	677a      	str	r2, [r7, #116]	@ 0x74
 80025b2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80025b6:	f7fd fe25 	bl	8000204 <__aeabi_uldivmod>
 80025ba:	4602      	mov	r2, r0
 80025bc:	460b      	mov	r3, r1
 80025be:	4613      	mov	r3, r2
 80025c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80025c4:	4b41      	ldr	r3, [pc, #260]	@ (80026cc <HAL_RCC_GetSysClockFreq+0x354>)
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	0c1b      	lsrs	r3, r3, #16
 80025ca:	f003 0303 	and.w	r3, r3, #3
 80025ce:	3301      	adds	r3, #1
 80025d0:	005b      	lsls	r3, r3, #1
 80025d2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 80025d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80025da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80025de:	fbb2 f3f3 	udiv	r3, r2, r3
 80025e2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80025e6:	e0eb      	b.n	80027c0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025e8:	4b38      	ldr	r3, [pc, #224]	@ (80026cc <HAL_RCC_GetSysClockFreq+0x354>)
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80025f0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025f4:	4b35      	ldr	r3, [pc, #212]	@ (80026cc <HAL_RCC_GetSysClockFreq+0x354>)
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d06b      	beq.n	80026d8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002600:	4b32      	ldr	r3, [pc, #200]	@ (80026cc <HAL_RCC_GetSysClockFreq+0x354>)
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	099b      	lsrs	r3, r3, #6
 8002606:	2200      	movs	r2, #0
 8002608:	66bb      	str	r3, [r7, #104]	@ 0x68
 800260a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800260c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800260e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002612:	663b      	str	r3, [r7, #96]	@ 0x60
 8002614:	2300      	movs	r3, #0
 8002616:	667b      	str	r3, [r7, #100]	@ 0x64
 8002618:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800261c:	4622      	mov	r2, r4
 800261e:	462b      	mov	r3, r5
 8002620:	f04f 0000 	mov.w	r0, #0
 8002624:	f04f 0100 	mov.w	r1, #0
 8002628:	0159      	lsls	r1, r3, #5
 800262a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800262e:	0150      	lsls	r0, r2, #5
 8002630:	4602      	mov	r2, r0
 8002632:	460b      	mov	r3, r1
 8002634:	4621      	mov	r1, r4
 8002636:	1a51      	subs	r1, r2, r1
 8002638:	61b9      	str	r1, [r7, #24]
 800263a:	4629      	mov	r1, r5
 800263c:	eb63 0301 	sbc.w	r3, r3, r1
 8002640:	61fb      	str	r3, [r7, #28]
 8002642:	f04f 0200 	mov.w	r2, #0
 8002646:	f04f 0300 	mov.w	r3, #0
 800264a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800264e:	4659      	mov	r1, fp
 8002650:	018b      	lsls	r3, r1, #6
 8002652:	4651      	mov	r1, sl
 8002654:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002658:	4651      	mov	r1, sl
 800265a:	018a      	lsls	r2, r1, #6
 800265c:	4651      	mov	r1, sl
 800265e:	ebb2 0801 	subs.w	r8, r2, r1
 8002662:	4659      	mov	r1, fp
 8002664:	eb63 0901 	sbc.w	r9, r3, r1
 8002668:	f04f 0200 	mov.w	r2, #0
 800266c:	f04f 0300 	mov.w	r3, #0
 8002670:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002674:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002678:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800267c:	4690      	mov	r8, r2
 800267e:	4699      	mov	r9, r3
 8002680:	4623      	mov	r3, r4
 8002682:	eb18 0303 	adds.w	r3, r8, r3
 8002686:	613b      	str	r3, [r7, #16]
 8002688:	462b      	mov	r3, r5
 800268a:	eb49 0303 	adc.w	r3, r9, r3
 800268e:	617b      	str	r3, [r7, #20]
 8002690:	f04f 0200 	mov.w	r2, #0
 8002694:	f04f 0300 	mov.w	r3, #0
 8002698:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800269c:	4629      	mov	r1, r5
 800269e:	024b      	lsls	r3, r1, #9
 80026a0:	4621      	mov	r1, r4
 80026a2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80026a6:	4621      	mov	r1, r4
 80026a8:	024a      	lsls	r2, r1, #9
 80026aa:	4610      	mov	r0, r2
 80026ac:	4619      	mov	r1, r3
 80026ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80026b2:	2200      	movs	r2, #0
 80026b4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80026b6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80026b8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80026bc:	f7fd fda2 	bl	8000204 <__aeabi_uldivmod>
 80026c0:	4602      	mov	r2, r0
 80026c2:	460b      	mov	r3, r1
 80026c4:	4613      	mov	r3, r2
 80026c6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80026ca:	e065      	b.n	8002798 <HAL_RCC_GetSysClockFreq+0x420>
 80026cc:	40023800 	.word	0x40023800
 80026d0:	00f42400 	.word	0x00f42400
 80026d4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026d8:	4b3d      	ldr	r3, [pc, #244]	@ (80027d0 <HAL_RCC_GetSysClockFreq+0x458>)
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	099b      	lsrs	r3, r3, #6
 80026de:	2200      	movs	r2, #0
 80026e0:	4618      	mov	r0, r3
 80026e2:	4611      	mov	r1, r2
 80026e4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80026e8:	653b      	str	r3, [r7, #80]	@ 0x50
 80026ea:	2300      	movs	r3, #0
 80026ec:	657b      	str	r3, [r7, #84]	@ 0x54
 80026ee:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80026f2:	4642      	mov	r2, r8
 80026f4:	464b      	mov	r3, r9
 80026f6:	f04f 0000 	mov.w	r0, #0
 80026fa:	f04f 0100 	mov.w	r1, #0
 80026fe:	0159      	lsls	r1, r3, #5
 8002700:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002704:	0150      	lsls	r0, r2, #5
 8002706:	4602      	mov	r2, r0
 8002708:	460b      	mov	r3, r1
 800270a:	4641      	mov	r1, r8
 800270c:	1a51      	subs	r1, r2, r1
 800270e:	60b9      	str	r1, [r7, #8]
 8002710:	4649      	mov	r1, r9
 8002712:	eb63 0301 	sbc.w	r3, r3, r1
 8002716:	60fb      	str	r3, [r7, #12]
 8002718:	f04f 0200 	mov.w	r2, #0
 800271c:	f04f 0300 	mov.w	r3, #0
 8002720:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002724:	4659      	mov	r1, fp
 8002726:	018b      	lsls	r3, r1, #6
 8002728:	4651      	mov	r1, sl
 800272a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800272e:	4651      	mov	r1, sl
 8002730:	018a      	lsls	r2, r1, #6
 8002732:	4651      	mov	r1, sl
 8002734:	1a54      	subs	r4, r2, r1
 8002736:	4659      	mov	r1, fp
 8002738:	eb63 0501 	sbc.w	r5, r3, r1
 800273c:	f04f 0200 	mov.w	r2, #0
 8002740:	f04f 0300 	mov.w	r3, #0
 8002744:	00eb      	lsls	r3, r5, #3
 8002746:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800274a:	00e2      	lsls	r2, r4, #3
 800274c:	4614      	mov	r4, r2
 800274e:	461d      	mov	r5, r3
 8002750:	4643      	mov	r3, r8
 8002752:	18e3      	adds	r3, r4, r3
 8002754:	603b      	str	r3, [r7, #0]
 8002756:	464b      	mov	r3, r9
 8002758:	eb45 0303 	adc.w	r3, r5, r3
 800275c:	607b      	str	r3, [r7, #4]
 800275e:	f04f 0200 	mov.w	r2, #0
 8002762:	f04f 0300 	mov.w	r3, #0
 8002766:	e9d7 4500 	ldrd	r4, r5, [r7]
 800276a:	4629      	mov	r1, r5
 800276c:	028b      	lsls	r3, r1, #10
 800276e:	4621      	mov	r1, r4
 8002770:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002774:	4621      	mov	r1, r4
 8002776:	028a      	lsls	r2, r1, #10
 8002778:	4610      	mov	r0, r2
 800277a:	4619      	mov	r1, r3
 800277c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002780:	2200      	movs	r2, #0
 8002782:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002784:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002786:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800278a:	f7fd fd3b 	bl	8000204 <__aeabi_uldivmod>
 800278e:	4602      	mov	r2, r0
 8002790:	460b      	mov	r3, r1
 8002792:	4613      	mov	r3, r2
 8002794:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002798:	4b0d      	ldr	r3, [pc, #52]	@ (80027d0 <HAL_RCC_GetSysClockFreq+0x458>)
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	0f1b      	lsrs	r3, r3, #28
 800279e:	f003 0307 	and.w	r3, r3, #7
 80027a2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 80027a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80027aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80027ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80027b2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80027b6:	e003      	b.n	80027c0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80027b8:	4b06      	ldr	r3, [pc, #24]	@ (80027d4 <HAL_RCC_GetSysClockFreq+0x45c>)
 80027ba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80027be:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027c0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	37b8      	adds	r7, #184	@ 0xb8
 80027c8:	46bd      	mov	sp, r7
 80027ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027ce:	bf00      	nop
 80027d0:	40023800 	.word	0x40023800
 80027d4:	00f42400 	.word	0x00f42400

080027d8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b086      	sub	sp, #24
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d101      	bne.n	80027ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e28d      	b.n	8002d06 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0301 	and.w	r3, r3, #1
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	f000 8083 	beq.w	80028fe <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80027f8:	4b94      	ldr	r3, [pc, #592]	@ (8002a4c <HAL_RCC_OscConfig+0x274>)
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	f003 030c 	and.w	r3, r3, #12
 8002800:	2b04      	cmp	r3, #4
 8002802:	d019      	beq.n	8002838 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002804:	4b91      	ldr	r3, [pc, #580]	@ (8002a4c <HAL_RCC_OscConfig+0x274>)
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800280c:	2b08      	cmp	r3, #8
 800280e:	d106      	bne.n	800281e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002810:	4b8e      	ldr	r3, [pc, #568]	@ (8002a4c <HAL_RCC_OscConfig+0x274>)
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002818:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800281c:	d00c      	beq.n	8002838 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800281e:	4b8b      	ldr	r3, [pc, #556]	@ (8002a4c <HAL_RCC_OscConfig+0x274>)
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002826:	2b0c      	cmp	r3, #12
 8002828:	d112      	bne.n	8002850 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800282a:	4b88      	ldr	r3, [pc, #544]	@ (8002a4c <HAL_RCC_OscConfig+0x274>)
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002832:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002836:	d10b      	bne.n	8002850 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002838:	4b84      	ldr	r3, [pc, #528]	@ (8002a4c <HAL_RCC_OscConfig+0x274>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d05b      	beq.n	80028fc <HAL_RCC_OscConfig+0x124>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d157      	bne.n	80028fc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e25a      	b.n	8002d06 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002858:	d106      	bne.n	8002868 <HAL_RCC_OscConfig+0x90>
 800285a:	4b7c      	ldr	r3, [pc, #496]	@ (8002a4c <HAL_RCC_OscConfig+0x274>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a7b      	ldr	r2, [pc, #492]	@ (8002a4c <HAL_RCC_OscConfig+0x274>)
 8002860:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002864:	6013      	str	r3, [r2, #0]
 8002866:	e01d      	b.n	80028a4 <HAL_RCC_OscConfig+0xcc>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002870:	d10c      	bne.n	800288c <HAL_RCC_OscConfig+0xb4>
 8002872:	4b76      	ldr	r3, [pc, #472]	@ (8002a4c <HAL_RCC_OscConfig+0x274>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a75      	ldr	r2, [pc, #468]	@ (8002a4c <HAL_RCC_OscConfig+0x274>)
 8002878:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800287c:	6013      	str	r3, [r2, #0]
 800287e:	4b73      	ldr	r3, [pc, #460]	@ (8002a4c <HAL_RCC_OscConfig+0x274>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a72      	ldr	r2, [pc, #456]	@ (8002a4c <HAL_RCC_OscConfig+0x274>)
 8002884:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002888:	6013      	str	r3, [r2, #0]
 800288a:	e00b      	b.n	80028a4 <HAL_RCC_OscConfig+0xcc>
 800288c:	4b6f      	ldr	r3, [pc, #444]	@ (8002a4c <HAL_RCC_OscConfig+0x274>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a6e      	ldr	r2, [pc, #440]	@ (8002a4c <HAL_RCC_OscConfig+0x274>)
 8002892:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002896:	6013      	str	r3, [r2, #0]
 8002898:	4b6c      	ldr	r3, [pc, #432]	@ (8002a4c <HAL_RCC_OscConfig+0x274>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a6b      	ldr	r2, [pc, #428]	@ (8002a4c <HAL_RCC_OscConfig+0x274>)
 800289e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d013      	beq.n	80028d4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ac:	f7fe faba 	bl	8000e24 <HAL_GetTick>
 80028b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028b2:	e008      	b.n	80028c6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028b4:	f7fe fab6 	bl	8000e24 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	2b64      	cmp	r3, #100	@ 0x64
 80028c0:	d901      	bls.n	80028c6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e21f      	b.n	8002d06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028c6:	4b61      	ldr	r3, [pc, #388]	@ (8002a4c <HAL_RCC_OscConfig+0x274>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d0f0      	beq.n	80028b4 <HAL_RCC_OscConfig+0xdc>
 80028d2:	e014      	b.n	80028fe <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d4:	f7fe faa6 	bl	8000e24 <HAL_GetTick>
 80028d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028da:	e008      	b.n	80028ee <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028dc:	f7fe faa2 	bl	8000e24 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	2b64      	cmp	r3, #100	@ 0x64
 80028e8:	d901      	bls.n	80028ee <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e20b      	b.n	8002d06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028ee:	4b57      	ldr	r3, [pc, #348]	@ (8002a4c <HAL_RCC_OscConfig+0x274>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d1f0      	bne.n	80028dc <HAL_RCC_OscConfig+0x104>
 80028fa:	e000      	b.n	80028fe <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0302 	and.w	r3, r3, #2
 8002906:	2b00      	cmp	r3, #0
 8002908:	d06f      	beq.n	80029ea <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800290a:	4b50      	ldr	r3, [pc, #320]	@ (8002a4c <HAL_RCC_OscConfig+0x274>)
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	f003 030c 	and.w	r3, r3, #12
 8002912:	2b00      	cmp	r3, #0
 8002914:	d017      	beq.n	8002946 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002916:	4b4d      	ldr	r3, [pc, #308]	@ (8002a4c <HAL_RCC_OscConfig+0x274>)
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800291e:	2b08      	cmp	r3, #8
 8002920:	d105      	bne.n	800292e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002922:	4b4a      	ldr	r3, [pc, #296]	@ (8002a4c <HAL_RCC_OscConfig+0x274>)
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d00b      	beq.n	8002946 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800292e:	4b47      	ldr	r3, [pc, #284]	@ (8002a4c <HAL_RCC_OscConfig+0x274>)
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002936:	2b0c      	cmp	r3, #12
 8002938:	d11c      	bne.n	8002974 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800293a:	4b44      	ldr	r3, [pc, #272]	@ (8002a4c <HAL_RCC_OscConfig+0x274>)
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d116      	bne.n	8002974 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002946:	4b41      	ldr	r3, [pc, #260]	@ (8002a4c <HAL_RCC_OscConfig+0x274>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0302 	and.w	r3, r3, #2
 800294e:	2b00      	cmp	r3, #0
 8002950:	d005      	beq.n	800295e <HAL_RCC_OscConfig+0x186>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	2b01      	cmp	r3, #1
 8002958:	d001      	beq.n	800295e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e1d3      	b.n	8002d06 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800295e:	4b3b      	ldr	r3, [pc, #236]	@ (8002a4c <HAL_RCC_OscConfig+0x274>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	691b      	ldr	r3, [r3, #16]
 800296a:	00db      	lsls	r3, r3, #3
 800296c:	4937      	ldr	r1, [pc, #220]	@ (8002a4c <HAL_RCC_OscConfig+0x274>)
 800296e:	4313      	orrs	r3, r2
 8002970:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002972:	e03a      	b.n	80029ea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d020      	beq.n	80029be <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800297c:	4b34      	ldr	r3, [pc, #208]	@ (8002a50 <HAL_RCC_OscConfig+0x278>)
 800297e:	2201      	movs	r2, #1
 8002980:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002982:	f7fe fa4f 	bl	8000e24 <HAL_GetTick>
 8002986:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002988:	e008      	b.n	800299c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800298a:	f7fe fa4b 	bl	8000e24 <HAL_GetTick>
 800298e:	4602      	mov	r2, r0
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	2b02      	cmp	r3, #2
 8002996:	d901      	bls.n	800299c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002998:	2303      	movs	r3, #3
 800299a:	e1b4      	b.n	8002d06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800299c:	4b2b      	ldr	r3, [pc, #172]	@ (8002a4c <HAL_RCC_OscConfig+0x274>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0302 	and.w	r3, r3, #2
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d0f0      	beq.n	800298a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029a8:	4b28      	ldr	r3, [pc, #160]	@ (8002a4c <HAL_RCC_OscConfig+0x274>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	691b      	ldr	r3, [r3, #16]
 80029b4:	00db      	lsls	r3, r3, #3
 80029b6:	4925      	ldr	r1, [pc, #148]	@ (8002a4c <HAL_RCC_OscConfig+0x274>)
 80029b8:	4313      	orrs	r3, r2
 80029ba:	600b      	str	r3, [r1, #0]
 80029bc:	e015      	b.n	80029ea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029be:	4b24      	ldr	r3, [pc, #144]	@ (8002a50 <HAL_RCC_OscConfig+0x278>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c4:	f7fe fa2e 	bl	8000e24 <HAL_GetTick>
 80029c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029ca:	e008      	b.n	80029de <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029cc:	f7fe fa2a 	bl	8000e24 <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d901      	bls.n	80029de <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e193      	b.n	8002d06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029de:	4b1b      	ldr	r3, [pc, #108]	@ (8002a4c <HAL_RCC_OscConfig+0x274>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0302 	and.w	r3, r3, #2
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d1f0      	bne.n	80029cc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0308 	and.w	r3, r3, #8
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d036      	beq.n	8002a64 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	695b      	ldr	r3, [r3, #20]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d016      	beq.n	8002a2c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029fe:	4b15      	ldr	r3, [pc, #84]	@ (8002a54 <HAL_RCC_OscConfig+0x27c>)
 8002a00:	2201      	movs	r2, #1
 8002a02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a04:	f7fe fa0e 	bl	8000e24 <HAL_GetTick>
 8002a08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a0a:	e008      	b.n	8002a1e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a0c:	f7fe fa0a 	bl	8000e24 <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d901      	bls.n	8002a1e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e173      	b.n	8002d06 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a1e:	4b0b      	ldr	r3, [pc, #44]	@ (8002a4c <HAL_RCC_OscConfig+0x274>)
 8002a20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d0f0      	beq.n	8002a0c <HAL_RCC_OscConfig+0x234>
 8002a2a:	e01b      	b.n	8002a64 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a2c:	4b09      	ldr	r3, [pc, #36]	@ (8002a54 <HAL_RCC_OscConfig+0x27c>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a32:	f7fe f9f7 	bl	8000e24 <HAL_GetTick>
 8002a36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a38:	e00e      	b.n	8002a58 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a3a:	f7fe f9f3 	bl	8000e24 <HAL_GetTick>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d907      	bls.n	8002a58 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	e15c      	b.n	8002d06 <HAL_RCC_OscConfig+0x52e>
 8002a4c:	40023800 	.word	0x40023800
 8002a50:	42470000 	.word	0x42470000
 8002a54:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a58:	4b8a      	ldr	r3, [pc, #552]	@ (8002c84 <HAL_RCC_OscConfig+0x4ac>)
 8002a5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a5c:	f003 0302 	and.w	r3, r3, #2
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d1ea      	bne.n	8002a3a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0304 	and.w	r3, r3, #4
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	f000 8097 	beq.w	8002ba0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a72:	2300      	movs	r3, #0
 8002a74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a76:	4b83      	ldr	r3, [pc, #524]	@ (8002c84 <HAL_RCC_OscConfig+0x4ac>)
 8002a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d10f      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a82:	2300      	movs	r3, #0
 8002a84:	60bb      	str	r3, [r7, #8]
 8002a86:	4b7f      	ldr	r3, [pc, #508]	@ (8002c84 <HAL_RCC_OscConfig+0x4ac>)
 8002a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a8a:	4a7e      	ldr	r2, [pc, #504]	@ (8002c84 <HAL_RCC_OscConfig+0x4ac>)
 8002a8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a90:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a92:	4b7c      	ldr	r3, [pc, #496]	@ (8002c84 <HAL_RCC_OscConfig+0x4ac>)
 8002a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a9a:	60bb      	str	r3, [r7, #8]
 8002a9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aa2:	4b79      	ldr	r3, [pc, #484]	@ (8002c88 <HAL_RCC_OscConfig+0x4b0>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d118      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002aae:	4b76      	ldr	r3, [pc, #472]	@ (8002c88 <HAL_RCC_OscConfig+0x4b0>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a75      	ldr	r2, [pc, #468]	@ (8002c88 <HAL_RCC_OscConfig+0x4b0>)
 8002ab4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ab8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002aba:	f7fe f9b3 	bl	8000e24 <HAL_GetTick>
 8002abe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ac0:	e008      	b.n	8002ad4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ac2:	f7fe f9af 	bl	8000e24 <HAL_GetTick>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d901      	bls.n	8002ad4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	e118      	b.n	8002d06 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ad4:	4b6c      	ldr	r3, [pc, #432]	@ (8002c88 <HAL_RCC_OscConfig+0x4b0>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d0f0      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d106      	bne.n	8002af6 <HAL_RCC_OscConfig+0x31e>
 8002ae8:	4b66      	ldr	r3, [pc, #408]	@ (8002c84 <HAL_RCC_OscConfig+0x4ac>)
 8002aea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aec:	4a65      	ldr	r2, [pc, #404]	@ (8002c84 <HAL_RCC_OscConfig+0x4ac>)
 8002aee:	f043 0301 	orr.w	r3, r3, #1
 8002af2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002af4:	e01c      	b.n	8002b30 <HAL_RCC_OscConfig+0x358>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	2b05      	cmp	r3, #5
 8002afc:	d10c      	bne.n	8002b18 <HAL_RCC_OscConfig+0x340>
 8002afe:	4b61      	ldr	r3, [pc, #388]	@ (8002c84 <HAL_RCC_OscConfig+0x4ac>)
 8002b00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b02:	4a60      	ldr	r2, [pc, #384]	@ (8002c84 <HAL_RCC_OscConfig+0x4ac>)
 8002b04:	f043 0304 	orr.w	r3, r3, #4
 8002b08:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b0a:	4b5e      	ldr	r3, [pc, #376]	@ (8002c84 <HAL_RCC_OscConfig+0x4ac>)
 8002b0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b0e:	4a5d      	ldr	r2, [pc, #372]	@ (8002c84 <HAL_RCC_OscConfig+0x4ac>)
 8002b10:	f043 0301 	orr.w	r3, r3, #1
 8002b14:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b16:	e00b      	b.n	8002b30 <HAL_RCC_OscConfig+0x358>
 8002b18:	4b5a      	ldr	r3, [pc, #360]	@ (8002c84 <HAL_RCC_OscConfig+0x4ac>)
 8002b1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b1c:	4a59      	ldr	r2, [pc, #356]	@ (8002c84 <HAL_RCC_OscConfig+0x4ac>)
 8002b1e:	f023 0301 	bic.w	r3, r3, #1
 8002b22:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b24:	4b57      	ldr	r3, [pc, #348]	@ (8002c84 <HAL_RCC_OscConfig+0x4ac>)
 8002b26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b28:	4a56      	ldr	r2, [pc, #344]	@ (8002c84 <HAL_RCC_OscConfig+0x4ac>)
 8002b2a:	f023 0304 	bic.w	r3, r3, #4
 8002b2e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d015      	beq.n	8002b64 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b38:	f7fe f974 	bl	8000e24 <HAL_GetTick>
 8002b3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b3e:	e00a      	b.n	8002b56 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b40:	f7fe f970 	bl	8000e24 <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d901      	bls.n	8002b56 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e0d7      	b.n	8002d06 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b56:	4b4b      	ldr	r3, [pc, #300]	@ (8002c84 <HAL_RCC_OscConfig+0x4ac>)
 8002b58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b5a:	f003 0302 	and.w	r3, r3, #2
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d0ee      	beq.n	8002b40 <HAL_RCC_OscConfig+0x368>
 8002b62:	e014      	b.n	8002b8e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b64:	f7fe f95e 	bl	8000e24 <HAL_GetTick>
 8002b68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b6a:	e00a      	b.n	8002b82 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b6c:	f7fe f95a 	bl	8000e24 <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d901      	bls.n	8002b82 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e0c1      	b.n	8002d06 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b82:	4b40      	ldr	r3, [pc, #256]	@ (8002c84 <HAL_RCC_OscConfig+0x4ac>)
 8002b84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b86:	f003 0302 	and.w	r3, r3, #2
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d1ee      	bne.n	8002b6c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b8e:	7dfb      	ldrb	r3, [r7, #23]
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d105      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b94:	4b3b      	ldr	r3, [pc, #236]	@ (8002c84 <HAL_RCC_OscConfig+0x4ac>)
 8002b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b98:	4a3a      	ldr	r2, [pc, #232]	@ (8002c84 <HAL_RCC_OscConfig+0x4ac>)
 8002b9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b9e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	699b      	ldr	r3, [r3, #24]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	f000 80ad 	beq.w	8002d04 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002baa:	4b36      	ldr	r3, [pc, #216]	@ (8002c84 <HAL_RCC_OscConfig+0x4ac>)
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	f003 030c 	and.w	r3, r3, #12
 8002bb2:	2b08      	cmp	r3, #8
 8002bb4:	d060      	beq.n	8002c78 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	699b      	ldr	r3, [r3, #24]
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d145      	bne.n	8002c4a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bbe:	4b33      	ldr	r3, [pc, #204]	@ (8002c8c <HAL_RCC_OscConfig+0x4b4>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc4:	f7fe f92e 	bl	8000e24 <HAL_GetTick>
 8002bc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bca:	e008      	b.n	8002bde <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bcc:	f7fe f92a 	bl	8000e24 <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e093      	b.n	8002d06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bde:	4b29      	ldr	r3, [pc, #164]	@ (8002c84 <HAL_RCC_OscConfig+0x4ac>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d1f0      	bne.n	8002bcc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	69da      	ldr	r2, [r3, #28]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6a1b      	ldr	r3, [r3, #32]
 8002bf2:	431a      	orrs	r2, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bf8:	019b      	lsls	r3, r3, #6
 8002bfa:	431a      	orrs	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c00:	085b      	lsrs	r3, r3, #1
 8002c02:	3b01      	subs	r3, #1
 8002c04:	041b      	lsls	r3, r3, #16
 8002c06:	431a      	orrs	r2, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c0c:	061b      	lsls	r3, r3, #24
 8002c0e:	431a      	orrs	r2, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c14:	071b      	lsls	r3, r3, #28
 8002c16:	491b      	ldr	r1, [pc, #108]	@ (8002c84 <HAL_RCC_OscConfig+0x4ac>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c1c:	4b1b      	ldr	r3, [pc, #108]	@ (8002c8c <HAL_RCC_OscConfig+0x4b4>)
 8002c1e:	2201      	movs	r2, #1
 8002c20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c22:	f7fe f8ff 	bl	8000e24 <HAL_GetTick>
 8002c26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c28:	e008      	b.n	8002c3c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c2a:	f7fe f8fb 	bl	8000e24 <HAL_GetTick>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	d901      	bls.n	8002c3c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	e064      	b.n	8002d06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c3c:	4b11      	ldr	r3, [pc, #68]	@ (8002c84 <HAL_RCC_OscConfig+0x4ac>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d0f0      	beq.n	8002c2a <HAL_RCC_OscConfig+0x452>
 8002c48:	e05c      	b.n	8002d04 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c4a:	4b10      	ldr	r3, [pc, #64]	@ (8002c8c <HAL_RCC_OscConfig+0x4b4>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c50:	f7fe f8e8 	bl	8000e24 <HAL_GetTick>
 8002c54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c56:	e008      	b.n	8002c6a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c58:	f7fe f8e4 	bl	8000e24 <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e04d      	b.n	8002d06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c6a:	4b06      	ldr	r3, [pc, #24]	@ (8002c84 <HAL_RCC_OscConfig+0x4ac>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d1f0      	bne.n	8002c58 <HAL_RCC_OscConfig+0x480>
 8002c76:	e045      	b.n	8002d04 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	699b      	ldr	r3, [r3, #24]
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d107      	bne.n	8002c90 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e040      	b.n	8002d06 <HAL_RCC_OscConfig+0x52e>
 8002c84:	40023800 	.word	0x40023800
 8002c88:	40007000 	.word	0x40007000
 8002c8c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c90:	4b1f      	ldr	r3, [pc, #124]	@ (8002d10 <HAL_RCC_OscConfig+0x538>)
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	699b      	ldr	r3, [r3, #24]
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d030      	beq.n	8002d00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d129      	bne.n	8002d00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d122      	bne.n	8002d00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cba:	68fa      	ldr	r2, [r7, #12]
 8002cbc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002cc6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d119      	bne.n	8002d00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cd6:	085b      	lsrs	r3, r3, #1
 8002cd8:	3b01      	subs	r3, #1
 8002cda:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d10f      	bne.n	8002d00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d107      	bne.n	8002d00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cfa:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d001      	beq.n	8002d04 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e000      	b.n	8002d06 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3718      	adds	r7, #24
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	40023800 	.word	0x40023800

08002d14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d101      	bne.n	8002d26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e041      	b.n	8002daa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d106      	bne.n	8002d40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f7fd fec6 	bl	8000acc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2202      	movs	r2, #2
 8002d44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	3304      	adds	r3, #4
 8002d50:	4619      	mov	r1, r3
 8002d52:	4610      	mov	r0, r2
 8002d54:	f000 fa10 	bl	8003178 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3708      	adds	r7, #8
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002db2:	b580      	push	{r7, lr}
 8002db4:	b082      	sub	sp, #8
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d101      	bne.n	8002dc4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e041      	b.n	8002e48 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d106      	bne.n	8002dde <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f000 f839 	bl	8002e50 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2202      	movs	r2, #2
 8002de2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	3304      	adds	r3, #4
 8002dee:	4619      	mov	r1, r3
 8002df0:	4610      	mov	r0, r2
 8002df2:	f000 f9c1 	bl	8003178 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2201      	movs	r2, #1
 8002dfa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2201      	movs	r2, #1
 8002e02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2201      	movs	r2, #1
 8002e0a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2201      	movs	r2, #1
 8002e12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2201      	movs	r2, #1
 8002e22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2201      	movs	r2, #1
 8002e2a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2201      	movs	r2, #1
 8002e32:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2201      	movs	r2, #1
 8002e3a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2201      	movs	r2, #1
 8002e42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002e46:	2300      	movs	r3, #0
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3708      	adds	r7, #8
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002e58:	bf00      	nop
 8002e5a:	370c      	adds	r7, #12
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr

08002e64 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b086      	sub	sp, #24
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	60b9      	str	r1, [r7, #8]
 8002e6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e70:	2300      	movs	r3, #0
 8002e72:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d101      	bne.n	8002e82 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002e7e:	2302      	movs	r3, #2
 8002e80:	e0ae      	b.n	8002fe0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2201      	movs	r2, #1
 8002e86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2b0c      	cmp	r3, #12
 8002e8e:	f200 809f 	bhi.w	8002fd0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002e92:	a201      	add	r2, pc, #4	@ (adr r2, 8002e98 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e98:	08002ecd 	.word	0x08002ecd
 8002e9c:	08002fd1 	.word	0x08002fd1
 8002ea0:	08002fd1 	.word	0x08002fd1
 8002ea4:	08002fd1 	.word	0x08002fd1
 8002ea8:	08002f0d 	.word	0x08002f0d
 8002eac:	08002fd1 	.word	0x08002fd1
 8002eb0:	08002fd1 	.word	0x08002fd1
 8002eb4:	08002fd1 	.word	0x08002fd1
 8002eb8:	08002f4f 	.word	0x08002f4f
 8002ebc:	08002fd1 	.word	0x08002fd1
 8002ec0:	08002fd1 	.word	0x08002fd1
 8002ec4:	08002fd1 	.word	0x08002fd1
 8002ec8:	08002f8f 	.word	0x08002f8f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	68b9      	ldr	r1, [r7, #8]
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f000 f9fc 	bl	80032d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	699a      	ldr	r2, [r3, #24]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f042 0208 	orr.w	r2, r2, #8
 8002ee6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	699a      	ldr	r2, [r3, #24]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f022 0204 	bic.w	r2, r2, #4
 8002ef6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	6999      	ldr	r1, [r3, #24]
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	691a      	ldr	r2, [r3, #16]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	430a      	orrs	r2, r1
 8002f08:	619a      	str	r2, [r3, #24]
      break;
 8002f0a:	e064      	b.n	8002fd6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	68b9      	ldr	r1, [r7, #8]
 8002f12:	4618      	mov	r0, r3
 8002f14:	f000 fa4c 	bl	80033b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	699a      	ldr	r2, [r3, #24]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	699a      	ldr	r2, [r3, #24]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	6999      	ldr	r1, [r3, #24]
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	691b      	ldr	r3, [r3, #16]
 8002f42:	021a      	lsls	r2, r3, #8
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	430a      	orrs	r2, r1
 8002f4a:	619a      	str	r2, [r3, #24]
      break;
 8002f4c:	e043      	b.n	8002fd6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	68b9      	ldr	r1, [r7, #8]
 8002f54:	4618      	mov	r0, r3
 8002f56:	f000 faa1 	bl	800349c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	69da      	ldr	r2, [r3, #28]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f042 0208 	orr.w	r2, r2, #8
 8002f68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	69da      	ldr	r2, [r3, #28]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f022 0204 	bic.w	r2, r2, #4
 8002f78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	69d9      	ldr	r1, [r3, #28]
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	691a      	ldr	r2, [r3, #16]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	430a      	orrs	r2, r1
 8002f8a:	61da      	str	r2, [r3, #28]
      break;
 8002f8c:	e023      	b.n	8002fd6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	68b9      	ldr	r1, [r7, #8]
 8002f94:	4618      	mov	r0, r3
 8002f96:	f000 faf5 	bl	8003584 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	69da      	ldr	r2, [r3, #28]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002fa8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	69da      	ldr	r2, [r3, #28]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	69d9      	ldr	r1, [r3, #28]
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	691b      	ldr	r3, [r3, #16]
 8002fc4:	021a      	lsls	r2, r3, #8
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	430a      	orrs	r2, r1
 8002fcc:	61da      	str	r2, [r3, #28]
      break;
 8002fce:	e002      	b.n	8002fd6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	75fb      	strb	r3, [r7, #23]
      break;
 8002fd4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002fde:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3718      	adds	r7, #24
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d101      	bne.n	8003004 <HAL_TIM_ConfigClockSource+0x1c>
 8003000:	2302      	movs	r3, #2
 8003002:	e0b4      	b.n	800316e <HAL_TIM_ConfigClockSource+0x186>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2201      	movs	r2, #1
 8003008:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2202      	movs	r2, #2
 8003010:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003022:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800302a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	68ba      	ldr	r2, [r7, #8]
 8003032:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800303c:	d03e      	beq.n	80030bc <HAL_TIM_ConfigClockSource+0xd4>
 800303e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003042:	f200 8087 	bhi.w	8003154 <HAL_TIM_ConfigClockSource+0x16c>
 8003046:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800304a:	f000 8086 	beq.w	800315a <HAL_TIM_ConfigClockSource+0x172>
 800304e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003052:	d87f      	bhi.n	8003154 <HAL_TIM_ConfigClockSource+0x16c>
 8003054:	2b70      	cmp	r3, #112	@ 0x70
 8003056:	d01a      	beq.n	800308e <HAL_TIM_ConfigClockSource+0xa6>
 8003058:	2b70      	cmp	r3, #112	@ 0x70
 800305a:	d87b      	bhi.n	8003154 <HAL_TIM_ConfigClockSource+0x16c>
 800305c:	2b60      	cmp	r3, #96	@ 0x60
 800305e:	d050      	beq.n	8003102 <HAL_TIM_ConfigClockSource+0x11a>
 8003060:	2b60      	cmp	r3, #96	@ 0x60
 8003062:	d877      	bhi.n	8003154 <HAL_TIM_ConfigClockSource+0x16c>
 8003064:	2b50      	cmp	r3, #80	@ 0x50
 8003066:	d03c      	beq.n	80030e2 <HAL_TIM_ConfigClockSource+0xfa>
 8003068:	2b50      	cmp	r3, #80	@ 0x50
 800306a:	d873      	bhi.n	8003154 <HAL_TIM_ConfigClockSource+0x16c>
 800306c:	2b40      	cmp	r3, #64	@ 0x40
 800306e:	d058      	beq.n	8003122 <HAL_TIM_ConfigClockSource+0x13a>
 8003070:	2b40      	cmp	r3, #64	@ 0x40
 8003072:	d86f      	bhi.n	8003154 <HAL_TIM_ConfigClockSource+0x16c>
 8003074:	2b30      	cmp	r3, #48	@ 0x30
 8003076:	d064      	beq.n	8003142 <HAL_TIM_ConfigClockSource+0x15a>
 8003078:	2b30      	cmp	r3, #48	@ 0x30
 800307a:	d86b      	bhi.n	8003154 <HAL_TIM_ConfigClockSource+0x16c>
 800307c:	2b20      	cmp	r3, #32
 800307e:	d060      	beq.n	8003142 <HAL_TIM_ConfigClockSource+0x15a>
 8003080:	2b20      	cmp	r3, #32
 8003082:	d867      	bhi.n	8003154 <HAL_TIM_ConfigClockSource+0x16c>
 8003084:	2b00      	cmp	r3, #0
 8003086:	d05c      	beq.n	8003142 <HAL_TIM_ConfigClockSource+0x15a>
 8003088:	2b10      	cmp	r3, #16
 800308a:	d05a      	beq.n	8003142 <HAL_TIM_ConfigClockSource+0x15a>
 800308c:	e062      	b.n	8003154 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800309e:	f000 fb41 	bl	8003724 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80030b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	68ba      	ldr	r2, [r7, #8]
 80030b8:	609a      	str	r2, [r3, #8]
      break;
 80030ba:	e04f      	b.n	800315c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80030cc:	f000 fb2a 	bl	8003724 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	689a      	ldr	r2, [r3, #8]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80030de:	609a      	str	r2, [r3, #8]
      break;
 80030e0:	e03c      	b.n	800315c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030ee:	461a      	mov	r2, r3
 80030f0:	f000 fa9e 	bl	8003630 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2150      	movs	r1, #80	@ 0x50
 80030fa:	4618      	mov	r0, r3
 80030fc:	f000 faf7 	bl	80036ee <TIM_ITRx_SetConfig>
      break;
 8003100:	e02c      	b.n	800315c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800310e:	461a      	mov	r2, r3
 8003110:	f000 fabd 	bl	800368e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2160      	movs	r1, #96	@ 0x60
 800311a:	4618      	mov	r0, r3
 800311c:	f000 fae7 	bl	80036ee <TIM_ITRx_SetConfig>
      break;
 8003120:	e01c      	b.n	800315c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800312e:	461a      	mov	r2, r3
 8003130:	f000 fa7e 	bl	8003630 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2140      	movs	r1, #64	@ 0x40
 800313a:	4618      	mov	r0, r3
 800313c:	f000 fad7 	bl	80036ee <TIM_ITRx_SetConfig>
      break;
 8003140:	e00c      	b.n	800315c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4619      	mov	r1, r3
 800314c:	4610      	mov	r0, r2
 800314e:	f000 face 	bl	80036ee <TIM_ITRx_SetConfig>
      break;
 8003152:	e003      	b.n	800315c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	73fb      	strb	r3, [r7, #15]
      break;
 8003158:	e000      	b.n	800315c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800315a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800316c:	7bfb      	ldrb	r3, [r7, #15]
}
 800316e:	4618      	mov	r0, r3
 8003170:	3710      	adds	r7, #16
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
	...

08003178 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003178:	b480      	push	{r7}
 800317a:	b085      	sub	sp, #20
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	4a46      	ldr	r2, [pc, #280]	@ (80032a4 <TIM_Base_SetConfig+0x12c>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d013      	beq.n	80031b8 <TIM_Base_SetConfig+0x40>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003196:	d00f      	beq.n	80031b8 <TIM_Base_SetConfig+0x40>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	4a43      	ldr	r2, [pc, #268]	@ (80032a8 <TIM_Base_SetConfig+0x130>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d00b      	beq.n	80031b8 <TIM_Base_SetConfig+0x40>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	4a42      	ldr	r2, [pc, #264]	@ (80032ac <TIM_Base_SetConfig+0x134>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d007      	beq.n	80031b8 <TIM_Base_SetConfig+0x40>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	4a41      	ldr	r2, [pc, #260]	@ (80032b0 <TIM_Base_SetConfig+0x138>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d003      	beq.n	80031b8 <TIM_Base_SetConfig+0x40>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	4a40      	ldr	r2, [pc, #256]	@ (80032b4 <TIM_Base_SetConfig+0x13c>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d108      	bne.n	80031ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	68fa      	ldr	r2, [r7, #12]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a35      	ldr	r2, [pc, #212]	@ (80032a4 <TIM_Base_SetConfig+0x12c>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d02b      	beq.n	800322a <TIM_Base_SetConfig+0xb2>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031d8:	d027      	beq.n	800322a <TIM_Base_SetConfig+0xb2>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a32      	ldr	r2, [pc, #200]	@ (80032a8 <TIM_Base_SetConfig+0x130>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d023      	beq.n	800322a <TIM_Base_SetConfig+0xb2>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a31      	ldr	r2, [pc, #196]	@ (80032ac <TIM_Base_SetConfig+0x134>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d01f      	beq.n	800322a <TIM_Base_SetConfig+0xb2>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a30      	ldr	r2, [pc, #192]	@ (80032b0 <TIM_Base_SetConfig+0x138>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d01b      	beq.n	800322a <TIM_Base_SetConfig+0xb2>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a2f      	ldr	r2, [pc, #188]	@ (80032b4 <TIM_Base_SetConfig+0x13c>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d017      	beq.n	800322a <TIM_Base_SetConfig+0xb2>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a2e      	ldr	r2, [pc, #184]	@ (80032b8 <TIM_Base_SetConfig+0x140>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d013      	beq.n	800322a <TIM_Base_SetConfig+0xb2>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a2d      	ldr	r2, [pc, #180]	@ (80032bc <TIM_Base_SetConfig+0x144>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d00f      	beq.n	800322a <TIM_Base_SetConfig+0xb2>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4a2c      	ldr	r2, [pc, #176]	@ (80032c0 <TIM_Base_SetConfig+0x148>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d00b      	beq.n	800322a <TIM_Base_SetConfig+0xb2>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a2b      	ldr	r2, [pc, #172]	@ (80032c4 <TIM_Base_SetConfig+0x14c>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d007      	beq.n	800322a <TIM_Base_SetConfig+0xb2>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a2a      	ldr	r2, [pc, #168]	@ (80032c8 <TIM_Base_SetConfig+0x150>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d003      	beq.n	800322a <TIM_Base_SetConfig+0xb2>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a29      	ldr	r2, [pc, #164]	@ (80032cc <TIM_Base_SetConfig+0x154>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d108      	bne.n	800323c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003230:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	68fa      	ldr	r2, [r7, #12]
 8003238:	4313      	orrs	r3, r2
 800323a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	695b      	ldr	r3, [r3, #20]
 8003246:	4313      	orrs	r3, r2
 8003248:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	68fa      	ldr	r2, [r7, #12]
 800324e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	689a      	ldr	r2, [r3, #8]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	4a10      	ldr	r2, [pc, #64]	@ (80032a4 <TIM_Base_SetConfig+0x12c>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d003      	beq.n	8003270 <TIM_Base_SetConfig+0xf8>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	4a12      	ldr	r2, [pc, #72]	@ (80032b4 <TIM_Base_SetConfig+0x13c>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d103      	bne.n	8003278 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	691a      	ldr	r2, [r3, #16]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2201      	movs	r2, #1
 800327c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	691b      	ldr	r3, [r3, #16]
 8003282:	f003 0301 	and.w	r3, r3, #1
 8003286:	2b01      	cmp	r3, #1
 8003288:	d105      	bne.n	8003296 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	691b      	ldr	r3, [r3, #16]
 800328e:	f023 0201 	bic.w	r2, r3, #1
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	611a      	str	r2, [r3, #16]
  }
}
 8003296:	bf00      	nop
 8003298:	3714      	adds	r7, #20
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr
 80032a2:	bf00      	nop
 80032a4:	40010000 	.word	0x40010000
 80032a8:	40000400 	.word	0x40000400
 80032ac:	40000800 	.word	0x40000800
 80032b0:	40000c00 	.word	0x40000c00
 80032b4:	40010400 	.word	0x40010400
 80032b8:	40014000 	.word	0x40014000
 80032bc:	40014400 	.word	0x40014400
 80032c0:	40014800 	.word	0x40014800
 80032c4:	40001800 	.word	0x40001800
 80032c8:	40001c00 	.word	0x40001c00
 80032cc:	40002000 	.word	0x40002000

080032d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b087      	sub	sp, #28
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a1b      	ldr	r3, [r3, #32]
 80032de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6a1b      	ldr	r3, [r3, #32]
 80032e4:	f023 0201 	bic.w	r2, r3, #1
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	699b      	ldr	r3, [r3, #24]
 80032f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f023 0303 	bic.w	r3, r3, #3
 8003306:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	68fa      	ldr	r2, [r7, #12]
 800330e:	4313      	orrs	r3, r2
 8003310:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	f023 0302 	bic.w	r3, r3, #2
 8003318:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	697a      	ldr	r2, [r7, #20]
 8003320:	4313      	orrs	r3, r2
 8003322:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	4a20      	ldr	r2, [pc, #128]	@ (80033a8 <TIM_OC1_SetConfig+0xd8>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d003      	beq.n	8003334 <TIM_OC1_SetConfig+0x64>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	4a1f      	ldr	r2, [pc, #124]	@ (80033ac <TIM_OC1_SetConfig+0xdc>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d10c      	bne.n	800334e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	f023 0308 	bic.w	r3, r3, #8
 800333a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	697a      	ldr	r2, [r7, #20]
 8003342:	4313      	orrs	r3, r2
 8003344:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	f023 0304 	bic.w	r3, r3, #4
 800334c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a15      	ldr	r2, [pc, #84]	@ (80033a8 <TIM_OC1_SetConfig+0xd8>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d003      	beq.n	800335e <TIM_OC1_SetConfig+0x8e>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a14      	ldr	r2, [pc, #80]	@ (80033ac <TIM_OC1_SetConfig+0xdc>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d111      	bne.n	8003382 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003364:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800336c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	695b      	ldr	r3, [r3, #20]
 8003372:	693a      	ldr	r2, [r7, #16]
 8003374:	4313      	orrs	r3, r2
 8003376:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	699b      	ldr	r3, [r3, #24]
 800337c:	693a      	ldr	r2, [r7, #16]
 800337e:	4313      	orrs	r3, r2
 8003380:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	693a      	ldr	r2, [r7, #16]
 8003386:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	68fa      	ldr	r2, [r7, #12]
 800338c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	685a      	ldr	r2, [r3, #4]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	697a      	ldr	r2, [r7, #20]
 800339a:	621a      	str	r2, [r3, #32]
}
 800339c:	bf00      	nop
 800339e:	371c      	adds	r7, #28
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr
 80033a8:	40010000 	.word	0x40010000
 80033ac:	40010400 	.word	0x40010400

080033b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b087      	sub	sp, #28
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a1b      	ldr	r3, [r3, #32]
 80033be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6a1b      	ldr	r3, [r3, #32]
 80033c4:	f023 0210 	bic.w	r2, r3, #16
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	699b      	ldr	r3, [r3, #24]
 80033d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80033de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	021b      	lsls	r3, r3, #8
 80033ee:	68fa      	ldr	r2, [r7, #12]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	f023 0320 	bic.w	r3, r3, #32
 80033fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	011b      	lsls	r3, r3, #4
 8003402:	697a      	ldr	r2, [r7, #20]
 8003404:	4313      	orrs	r3, r2
 8003406:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	4a22      	ldr	r2, [pc, #136]	@ (8003494 <TIM_OC2_SetConfig+0xe4>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d003      	beq.n	8003418 <TIM_OC2_SetConfig+0x68>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	4a21      	ldr	r2, [pc, #132]	@ (8003498 <TIM_OC2_SetConfig+0xe8>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d10d      	bne.n	8003434 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800341e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	011b      	lsls	r3, r3, #4
 8003426:	697a      	ldr	r2, [r7, #20]
 8003428:	4313      	orrs	r3, r2
 800342a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003432:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	4a17      	ldr	r2, [pc, #92]	@ (8003494 <TIM_OC2_SetConfig+0xe4>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d003      	beq.n	8003444 <TIM_OC2_SetConfig+0x94>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	4a16      	ldr	r2, [pc, #88]	@ (8003498 <TIM_OC2_SetConfig+0xe8>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d113      	bne.n	800346c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800344a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003452:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	695b      	ldr	r3, [r3, #20]
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	693a      	ldr	r2, [r7, #16]
 800345c:	4313      	orrs	r3, r2
 800345e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	699b      	ldr	r3, [r3, #24]
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	693a      	ldr	r2, [r7, #16]
 8003468:	4313      	orrs	r3, r2
 800346a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	693a      	ldr	r2, [r7, #16]
 8003470:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	68fa      	ldr	r2, [r7, #12]
 8003476:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	685a      	ldr	r2, [r3, #4]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	697a      	ldr	r2, [r7, #20]
 8003484:	621a      	str	r2, [r3, #32]
}
 8003486:	bf00      	nop
 8003488:	371c      	adds	r7, #28
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr
 8003492:	bf00      	nop
 8003494:	40010000 	.word	0x40010000
 8003498:	40010400 	.word	0x40010400

0800349c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800349c:	b480      	push	{r7}
 800349e:	b087      	sub	sp, #28
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a1b      	ldr	r3, [r3, #32]
 80034aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6a1b      	ldr	r3, [r3, #32]
 80034b0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	69db      	ldr	r3, [r3, #28]
 80034c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f023 0303 	bic.w	r3, r3, #3
 80034d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	68fa      	ldr	r2, [r7, #12]
 80034da:	4313      	orrs	r3, r2
 80034dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80034e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	021b      	lsls	r3, r3, #8
 80034ec:	697a      	ldr	r2, [r7, #20]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a21      	ldr	r2, [pc, #132]	@ (800357c <TIM_OC3_SetConfig+0xe0>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d003      	beq.n	8003502 <TIM_OC3_SetConfig+0x66>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a20      	ldr	r2, [pc, #128]	@ (8003580 <TIM_OC3_SetConfig+0xe4>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d10d      	bne.n	800351e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003508:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	68db      	ldr	r3, [r3, #12]
 800350e:	021b      	lsls	r3, r3, #8
 8003510:	697a      	ldr	r2, [r7, #20]
 8003512:	4313      	orrs	r3, r2
 8003514:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800351c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a16      	ldr	r2, [pc, #88]	@ (800357c <TIM_OC3_SetConfig+0xe0>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d003      	beq.n	800352e <TIM_OC3_SetConfig+0x92>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a15      	ldr	r2, [pc, #84]	@ (8003580 <TIM_OC3_SetConfig+0xe4>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d113      	bne.n	8003556 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003534:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800353c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	695b      	ldr	r3, [r3, #20]
 8003542:	011b      	lsls	r3, r3, #4
 8003544:	693a      	ldr	r2, [r7, #16]
 8003546:	4313      	orrs	r3, r2
 8003548:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	699b      	ldr	r3, [r3, #24]
 800354e:	011b      	lsls	r3, r3, #4
 8003550:	693a      	ldr	r2, [r7, #16]
 8003552:	4313      	orrs	r3, r2
 8003554:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	693a      	ldr	r2, [r7, #16]
 800355a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	68fa      	ldr	r2, [r7, #12]
 8003560:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	685a      	ldr	r2, [r3, #4]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	697a      	ldr	r2, [r7, #20]
 800356e:	621a      	str	r2, [r3, #32]
}
 8003570:	bf00      	nop
 8003572:	371c      	adds	r7, #28
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr
 800357c:	40010000 	.word	0x40010000
 8003580:	40010400 	.word	0x40010400

08003584 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003584:	b480      	push	{r7}
 8003586:	b087      	sub	sp, #28
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6a1b      	ldr	r3, [r3, #32]
 8003592:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6a1b      	ldr	r3, [r3, #32]
 8003598:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	69db      	ldr	r3, [r3, #28]
 80035aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80035b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	021b      	lsls	r3, r3, #8
 80035c2:	68fa      	ldr	r2, [r7, #12]
 80035c4:	4313      	orrs	r3, r2
 80035c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80035ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	031b      	lsls	r3, r3, #12
 80035d6:	693a      	ldr	r2, [r7, #16]
 80035d8:	4313      	orrs	r3, r2
 80035da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	4a12      	ldr	r2, [pc, #72]	@ (8003628 <TIM_OC4_SetConfig+0xa4>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d003      	beq.n	80035ec <TIM_OC4_SetConfig+0x68>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	4a11      	ldr	r2, [pc, #68]	@ (800362c <TIM_OC4_SetConfig+0xa8>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d109      	bne.n	8003600 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80035f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	695b      	ldr	r3, [r3, #20]
 80035f8:	019b      	lsls	r3, r3, #6
 80035fa:	697a      	ldr	r2, [r7, #20]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	697a      	ldr	r2, [r7, #20]
 8003604:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	68fa      	ldr	r2, [r7, #12]
 800360a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	685a      	ldr	r2, [r3, #4]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	693a      	ldr	r2, [r7, #16]
 8003618:	621a      	str	r2, [r3, #32]
}
 800361a:	bf00      	nop
 800361c:	371c      	adds	r7, #28
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr
 8003626:	bf00      	nop
 8003628:	40010000 	.word	0x40010000
 800362c:	40010400 	.word	0x40010400

08003630 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003630:	b480      	push	{r7}
 8003632:	b087      	sub	sp, #28
 8003634:	af00      	add	r7, sp, #0
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	60b9      	str	r1, [r7, #8]
 800363a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6a1b      	ldr	r3, [r3, #32]
 8003640:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	6a1b      	ldr	r3, [r3, #32]
 8003646:	f023 0201 	bic.w	r2, r3, #1
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	699b      	ldr	r3, [r3, #24]
 8003652:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800365a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	011b      	lsls	r3, r3, #4
 8003660:	693a      	ldr	r2, [r7, #16]
 8003662:	4313      	orrs	r3, r2
 8003664:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	f023 030a 	bic.w	r3, r3, #10
 800366c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800366e:	697a      	ldr	r2, [r7, #20]
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	4313      	orrs	r3, r2
 8003674:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	693a      	ldr	r2, [r7, #16]
 800367a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	697a      	ldr	r2, [r7, #20]
 8003680:	621a      	str	r2, [r3, #32]
}
 8003682:	bf00      	nop
 8003684:	371c      	adds	r7, #28
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr

0800368e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800368e:	b480      	push	{r7}
 8003690:	b087      	sub	sp, #28
 8003692:	af00      	add	r7, sp, #0
 8003694:	60f8      	str	r0, [r7, #12]
 8003696:	60b9      	str	r1, [r7, #8]
 8003698:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6a1b      	ldr	r3, [r3, #32]
 800369e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6a1b      	ldr	r3, [r3, #32]
 80036a4:	f023 0210 	bic.w	r2, r3, #16
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	699b      	ldr	r3, [r3, #24]
 80036b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80036b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	031b      	lsls	r3, r3, #12
 80036be:	693a      	ldr	r2, [r7, #16]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80036ca:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	011b      	lsls	r3, r3, #4
 80036d0:	697a      	ldr	r2, [r7, #20]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	693a      	ldr	r2, [r7, #16]
 80036da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	697a      	ldr	r2, [r7, #20]
 80036e0:	621a      	str	r2, [r3, #32]
}
 80036e2:	bf00      	nop
 80036e4:	371c      	adds	r7, #28
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr

080036ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80036ee:	b480      	push	{r7}
 80036f0:	b085      	sub	sp, #20
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
 80036f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003704:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003706:	683a      	ldr	r2, [r7, #0]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	4313      	orrs	r3, r2
 800370c:	f043 0307 	orr.w	r3, r3, #7
 8003710:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	68fa      	ldr	r2, [r7, #12]
 8003716:	609a      	str	r2, [r3, #8]
}
 8003718:	bf00      	nop
 800371a:	3714      	adds	r7, #20
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr

08003724 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003724:	b480      	push	{r7}
 8003726:	b087      	sub	sp, #28
 8003728:	af00      	add	r7, sp, #0
 800372a:	60f8      	str	r0, [r7, #12]
 800372c:	60b9      	str	r1, [r7, #8]
 800372e:	607a      	str	r2, [r7, #4]
 8003730:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800373e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	021a      	lsls	r2, r3, #8
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	431a      	orrs	r2, r3
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	4313      	orrs	r3, r2
 800374c:	697a      	ldr	r2, [r7, #20]
 800374e:	4313      	orrs	r3, r2
 8003750:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	697a      	ldr	r2, [r7, #20]
 8003756:	609a      	str	r2, [r3, #8]
}
 8003758:	bf00      	nop
 800375a:	371c      	adds	r7, #28
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr

08003764 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003764:	b480      	push	{r7}
 8003766:	b085      	sub	sp, #20
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003774:	2b01      	cmp	r3, #1
 8003776:	d101      	bne.n	800377c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003778:	2302      	movs	r3, #2
 800377a:	e05a      	b.n	8003832 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2202      	movs	r2, #2
 8003788:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	68fa      	ldr	r2, [r7, #12]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	68fa      	ldr	r2, [r7, #12]
 80037b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a21      	ldr	r2, [pc, #132]	@ (8003840 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d022      	beq.n	8003806 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037c8:	d01d      	beq.n	8003806 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a1d      	ldr	r2, [pc, #116]	@ (8003844 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d018      	beq.n	8003806 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a1b      	ldr	r2, [pc, #108]	@ (8003848 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d013      	beq.n	8003806 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a1a      	ldr	r2, [pc, #104]	@ (800384c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d00e      	beq.n	8003806 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a18      	ldr	r2, [pc, #96]	@ (8003850 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d009      	beq.n	8003806 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a17      	ldr	r2, [pc, #92]	@ (8003854 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d004      	beq.n	8003806 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a15      	ldr	r2, [pc, #84]	@ (8003858 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d10c      	bne.n	8003820 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800380c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	68ba      	ldr	r2, [r7, #8]
 8003814:	4313      	orrs	r3, r2
 8003816:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	68ba      	ldr	r2, [r7, #8]
 800381e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003830:	2300      	movs	r3, #0
}
 8003832:	4618      	mov	r0, r3
 8003834:	3714      	adds	r7, #20
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr
 800383e:	bf00      	nop
 8003840:	40010000 	.word	0x40010000
 8003844:	40000400 	.word	0x40000400
 8003848:	40000800 	.word	0x40000800
 800384c:	40000c00 	.word	0x40000c00
 8003850:	40010400 	.word	0x40010400
 8003854:	40014000 	.word	0x40014000
 8003858:	40001800 	.word	0x40001800

0800385c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b082      	sub	sp, #8
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d101      	bne.n	800386e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e042      	b.n	80038f4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003874:	b2db      	uxtb	r3, r3
 8003876:	2b00      	cmp	r3, #0
 8003878:	d106      	bne.n	8003888 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f7fd f9aa 	bl	8000bdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2224      	movs	r2, #36	@ 0x24
 800388c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	68da      	ldr	r2, [r3, #12]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800389e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f000 f82b 	bl	80038fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	691a      	ldr	r2, [r3, #16]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80038b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	695a      	ldr	r2, [r3, #20]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80038c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	68da      	ldr	r2, [r3, #12]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80038d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2220      	movs	r2, #32
 80038e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2220      	movs	r2, #32
 80038e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80038f2:	2300      	movs	r3, #0
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3708      	adds	r7, #8
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}

080038fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003900:	b0c0      	sub	sp, #256	@ 0x100
 8003902:	af00      	add	r7, sp, #0
 8003904:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	691b      	ldr	r3, [r3, #16]
 8003910:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003918:	68d9      	ldr	r1, [r3, #12]
 800391a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	ea40 0301 	orr.w	r3, r0, r1
 8003924:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003926:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800392a:	689a      	ldr	r2, [r3, #8]
 800392c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	431a      	orrs	r2, r3
 8003934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003938:	695b      	ldr	r3, [r3, #20]
 800393a:	431a      	orrs	r2, r3
 800393c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003940:	69db      	ldr	r3, [r3, #28]
 8003942:	4313      	orrs	r3, r2
 8003944:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003954:	f021 010c 	bic.w	r1, r1, #12
 8003958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003962:	430b      	orrs	r3, r1
 8003964:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003966:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	695b      	ldr	r3, [r3, #20]
 800396e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003972:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003976:	6999      	ldr	r1, [r3, #24]
 8003978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	ea40 0301 	orr.w	r3, r0, r1
 8003982:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	4b8f      	ldr	r3, [pc, #572]	@ (8003bc8 <UART_SetConfig+0x2cc>)
 800398c:	429a      	cmp	r2, r3
 800398e:	d005      	beq.n	800399c <UART_SetConfig+0xa0>
 8003990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	4b8d      	ldr	r3, [pc, #564]	@ (8003bcc <UART_SetConfig+0x2d0>)
 8003998:	429a      	cmp	r2, r3
 800399a:	d104      	bne.n	80039a6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800399c:	f7fe fcd8 	bl	8002350 <HAL_RCC_GetPCLK2Freq>
 80039a0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80039a4:	e003      	b.n	80039ae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80039a6:	f7fe fcbf 	bl	8002328 <HAL_RCC_GetPCLK1Freq>
 80039aa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039b2:	69db      	ldr	r3, [r3, #28]
 80039b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80039b8:	f040 810c 	bne.w	8003bd4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80039bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80039c0:	2200      	movs	r2, #0
 80039c2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80039c6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80039ca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80039ce:	4622      	mov	r2, r4
 80039d0:	462b      	mov	r3, r5
 80039d2:	1891      	adds	r1, r2, r2
 80039d4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80039d6:	415b      	adcs	r3, r3
 80039d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80039da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80039de:	4621      	mov	r1, r4
 80039e0:	eb12 0801 	adds.w	r8, r2, r1
 80039e4:	4629      	mov	r1, r5
 80039e6:	eb43 0901 	adc.w	r9, r3, r1
 80039ea:	f04f 0200 	mov.w	r2, #0
 80039ee:	f04f 0300 	mov.w	r3, #0
 80039f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80039f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80039fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80039fe:	4690      	mov	r8, r2
 8003a00:	4699      	mov	r9, r3
 8003a02:	4623      	mov	r3, r4
 8003a04:	eb18 0303 	adds.w	r3, r8, r3
 8003a08:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003a0c:	462b      	mov	r3, r5
 8003a0e:	eb49 0303 	adc.w	r3, r9, r3
 8003a12:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003a16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003a22:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003a26:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003a2a:	460b      	mov	r3, r1
 8003a2c:	18db      	adds	r3, r3, r3
 8003a2e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003a30:	4613      	mov	r3, r2
 8003a32:	eb42 0303 	adc.w	r3, r2, r3
 8003a36:	657b      	str	r3, [r7, #84]	@ 0x54
 8003a38:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003a3c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003a40:	f7fc fbe0 	bl	8000204 <__aeabi_uldivmod>
 8003a44:	4602      	mov	r2, r0
 8003a46:	460b      	mov	r3, r1
 8003a48:	4b61      	ldr	r3, [pc, #388]	@ (8003bd0 <UART_SetConfig+0x2d4>)
 8003a4a:	fba3 2302 	umull	r2, r3, r3, r2
 8003a4e:	095b      	lsrs	r3, r3, #5
 8003a50:	011c      	lsls	r4, r3, #4
 8003a52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a56:	2200      	movs	r2, #0
 8003a58:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003a5c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003a60:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003a64:	4642      	mov	r2, r8
 8003a66:	464b      	mov	r3, r9
 8003a68:	1891      	adds	r1, r2, r2
 8003a6a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003a6c:	415b      	adcs	r3, r3
 8003a6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a70:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003a74:	4641      	mov	r1, r8
 8003a76:	eb12 0a01 	adds.w	sl, r2, r1
 8003a7a:	4649      	mov	r1, r9
 8003a7c:	eb43 0b01 	adc.w	fp, r3, r1
 8003a80:	f04f 0200 	mov.w	r2, #0
 8003a84:	f04f 0300 	mov.w	r3, #0
 8003a88:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003a8c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003a90:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a94:	4692      	mov	sl, r2
 8003a96:	469b      	mov	fp, r3
 8003a98:	4643      	mov	r3, r8
 8003a9a:	eb1a 0303 	adds.w	r3, sl, r3
 8003a9e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003aa2:	464b      	mov	r3, r9
 8003aa4:	eb4b 0303 	adc.w	r3, fp, r3
 8003aa8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003ab8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003abc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003ac0:	460b      	mov	r3, r1
 8003ac2:	18db      	adds	r3, r3, r3
 8003ac4:	643b      	str	r3, [r7, #64]	@ 0x40
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	eb42 0303 	adc.w	r3, r2, r3
 8003acc:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ace:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003ad2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003ad6:	f7fc fb95 	bl	8000204 <__aeabi_uldivmod>
 8003ada:	4602      	mov	r2, r0
 8003adc:	460b      	mov	r3, r1
 8003ade:	4611      	mov	r1, r2
 8003ae0:	4b3b      	ldr	r3, [pc, #236]	@ (8003bd0 <UART_SetConfig+0x2d4>)
 8003ae2:	fba3 2301 	umull	r2, r3, r3, r1
 8003ae6:	095b      	lsrs	r3, r3, #5
 8003ae8:	2264      	movs	r2, #100	@ 0x64
 8003aea:	fb02 f303 	mul.w	r3, r2, r3
 8003aee:	1acb      	subs	r3, r1, r3
 8003af0:	00db      	lsls	r3, r3, #3
 8003af2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003af6:	4b36      	ldr	r3, [pc, #216]	@ (8003bd0 <UART_SetConfig+0x2d4>)
 8003af8:	fba3 2302 	umull	r2, r3, r3, r2
 8003afc:	095b      	lsrs	r3, r3, #5
 8003afe:	005b      	lsls	r3, r3, #1
 8003b00:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003b04:	441c      	add	r4, r3
 8003b06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003b10:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003b14:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003b18:	4642      	mov	r2, r8
 8003b1a:	464b      	mov	r3, r9
 8003b1c:	1891      	adds	r1, r2, r2
 8003b1e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003b20:	415b      	adcs	r3, r3
 8003b22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b24:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003b28:	4641      	mov	r1, r8
 8003b2a:	1851      	adds	r1, r2, r1
 8003b2c:	6339      	str	r1, [r7, #48]	@ 0x30
 8003b2e:	4649      	mov	r1, r9
 8003b30:	414b      	adcs	r3, r1
 8003b32:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b34:	f04f 0200 	mov.w	r2, #0
 8003b38:	f04f 0300 	mov.w	r3, #0
 8003b3c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003b40:	4659      	mov	r1, fp
 8003b42:	00cb      	lsls	r3, r1, #3
 8003b44:	4651      	mov	r1, sl
 8003b46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b4a:	4651      	mov	r1, sl
 8003b4c:	00ca      	lsls	r2, r1, #3
 8003b4e:	4610      	mov	r0, r2
 8003b50:	4619      	mov	r1, r3
 8003b52:	4603      	mov	r3, r0
 8003b54:	4642      	mov	r2, r8
 8003b56:	189b      	adds	r3, r3, r2
 8003b58:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003b5c:	464b      	mov	r3, r9
 8003b5e:	460a      	mov	r2, r1
 8003b60:	eb42 0303 	adc.w	r3, r2, r3
 8003b64:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003b74:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003b78:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003b7c:	460b      	mov	r3, r1
 8003b7e:	18db      	adds	r3, r3, r3
 8003b80:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b82:	4613      	mov	r3, r2
 8003b84:	eb42 0303 	adc.w	r3, r2, r3
 8003b88:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b8a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003b8e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003b92:	f7fc fb37 	bl	8000204 <__aeabi_uldivmod>
 8003b96:	4602      	mov	r2, r0
 8003b98:	460b      	mov	r3, r1
 8003b9a:	4b0d      	ldr	r3, [pc, #52]	@ (8003bd0 <UART_SetConfig+0x2d4>)
 8003b9c:	fba3 1302 	umull	r1, r3, r3, r2
 8003ba0:	095b      	lsrs	r3, r3, #5
 8003ba2:	2164      	movs	r1, #100	@ 0x64
 8003ba4:	fb01 f303 	mul.w	r3, r1, r3
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	00db      	lsls	r3, r3, #3
 8003bac:	3332      	adds	r3, #50	@ 0x32
 8003bae:	4a08      	ldr	r2, [pc, #32]	@ (8003bd0 <UART_SetConfig+0x2d4>)
 8003bb0:	fba2 2303 	umull	r2, r3, r2, r3
 8003bb4:	095b      	lsrs	r3, r3, #5
 8003bb6:	f003 0207 	and.w	r2, r3, #7
 8003bba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4422      	add	r2, r4
 8003bc2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003bc4:	e106      	b.n	8003dd4 <UART_SetConfig+0x4d8>
 8003bc6:	bf00      	nop
 8003bc8:	40011000 	.word	0x40011000
 8003bcc:	40011400 	.word	0x40011400
 8003bd0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003bd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003bde:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003be2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003be6:	4642      	mov	r2, r8
 8003be8:	464b      	mov	r3, r9
 8003bea:	1891      	adds	r1, r2, r2
 8003bec:	6239      	str	r1, [r7, #32]
 8003bee:	415b      	adcs	r3, r3
 8003bf0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bf2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003bf6:	4641      	mov	r1, r8
 8003bf8:	1854      	adds	r4, r2, r1
 8003bfa:	4649      	mov	r1, r9
 8003bfc:	eb43 0501 	adc.w	r5, r3, r1
 8003c00:	f04f 0200 	mov.w	r2, #0
 8003c04:	f04f 0300 	mov.w	r3, #0
 8003c08:	00eb      	lsls	r3, r5, #3
 8003c0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c0e:	00e2      	lsls	r2, r4, #3
 8003c10:	4614      	mov	r4, r2
 8003c12:	461d      	mov	r5, r3
 8003c14:	4643      	mov	r3, r8
 8003c16:	18e3      	adds	r3, r4, r3
 8003c18:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003c1c:	464b      	mov	r3, r9
 8003c1e:	eb45 0303 	adc.w	r3, r5, r3
 8003c22:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003c26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003c32:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003c36:	f04f 0200 	mov.w	r2, #0
 8003c3a:	f04f 0300 	mov.w	r3, #0
 8003c3e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003c42:	4629      	mov	r1, r5
 8003c44:	008b      	lsls	r3, r1, #2
 8003c46:	4621      	mov	r1, r4
 8003c48:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c4c:	4621      	mov	r1, r4
 8003c4e:	008a      	lsls	r2, r1, #2
 8003c50:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003c54:	f7fc fad6 	bl	8000204 <__aeabi_uldivmod>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	460b      	mov	r3, r1
 8003c5c:	4b60      	ldr	r3, [pc, #384]	@ (8003de0 <UART_SetConfig+0x4e4>)
 8003c5e:	fba3 2302 	umull	r2, r3, r3, r2
 8003c62:	095b      	lsrs	r3, r3, #5
 8003c64:	011c      	lsls	r4, r3, #4
 8003c66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003c70:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003c74:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003c78:	4642      	mov	r2, r8
 8003c7a:	464b      	mov	r3, r9
 8003c7c:	1891      	adds	r1, r2, r2
 8003c7e:	61b9      	str	r1, [r7, #24]
 8003c80:	415b      	adcs	r3, r3
 8003c82:	61fb      	str	r3, [r7, #28]
 8003c84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c88:	4641      	mov	r1, r8
 8003c8a:	1851      	adds	r1, r2, r1
 8003c8c:	6139      	str	r1, [r7, #16]
 8003c8e:	4649      	mov	r1, r9
 8003c90:	414b      	adcs	r3, r1
 8003c92:	617b      	str	r3, [r7, #20]
 8003c94:	f04f 0200 	mov.w	r2, #0
 8003c98:	f04f 0300 	mov.w	r3, #0
 8003c9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ca0:	4659      	mov	r1, fp
 8003ca2:	00cb      	lsls	r3, r1, #3
 8003ca4:	4651      	mov	r1, sl
 8003ca6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003caa:	4651      	mov	r1, sl
 8003cac:	00ca      	lsls	r2, r1, #3
 8003cae:	4610      	mov	r0, r2
 8003cb0:	4619      	mov	r1, r3
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	4642      	mov	r2, r8
 8003cb6:	189b      	adds	r3, r3, r2
 8003cb8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003cbc:	464b      	mov	r3, r9
 8003cbe:	460a      	mov	r2, r1
 8003cc0:	eb42 0303 	adc.w	r3, r2, r3
 8003cc4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003cd2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003cd4:	f04f 0200 	mov.w	r2, #0
 8003cd8:	f04f 0300 	mov.w	r3, #0
 8003cdc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003ce0:	4649      	mov	r1, r9
 8003ce2:	008b      	lsls	r3, r1, #2
 8003ce4:	4641      	mov	r1, r8
 8003ce6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003cea:	4641      	mov	r1, r8
 8003cec:	008a      	lsls	r2, r1, #2
 8003cee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003cf2:	f7fc fa87 	bl	8000204 <__aeabi_uldivmod>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	460b      	mov	r3, r1
 8003cfa:	4611      	mov	r1, r2
 8003cfc:	4b38      	ldr	r3, [pc, #224]	@ (8003de0 <UART_SetConfig+0x4e4>)
 8003cfe:	fba3 2301 	umull	r2, r3, r3, r1
 8003d02:	095b      	lsrs	r3, r3, #5
 8003d04:	2264      	movs	r2, #100	@ 0x64
 8003d06:	fb02 f303 	mul.w	r3, r2, r3
 8003d0a:	1acb      	subs	r3, r1, r3
 8003d0c:	011b      	lsls	r3, r3, #4
 8003d0e:	3332      	adds	r3, #50	@ 0x32
 8003d10:	4a33      	ldr	r2, [pc, #204]	@ (8003de0 <UART_SetConfig+0x4e4>)
 8003d12:	fba2 2303 	umull	r2, r3, r2, r3
 8003d16:	095b      	lsrs	r3, r3, #5
 8003d18:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d1c:	441c      	add	r4, r3
 8003d1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d22:	2200      	movs	r2, #0
 8003d24:	673b      	str	r3, [r7, #112]	@ 0x70
 8003d26:	677a      	str	r2, [r7, #116]	@ 0x74
 8003d28:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003d2c:	4642      	mov	r2, r8
 8003d2e:	464b      	mov	r3, r9
 8003d30:	1891      	adds	r1, r2, r2
 8003d32:	60b9      	str	r1, [r7, #8]
 8003d34:	415b      	adcs	r3, r3
 8003d36:	60fb      	str	r3, [r7, #12]
 8003d38:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d3c:	4641      	mov	r1, r8
 8003d3e:	1851      	adds	r1, r2, r1
 8003d40:	6039      	str	r1, [r7, #0]
 8003d42:	4649      	mov	r1, r9
 8003d44:	414b      	adcs	r3, r1
 8003d46:	607b      	str	r3, [r7, #4]
 8003d48:	f04f 0200 	mov.w	r2, #0
 8003d4c:	f04f 0300 	mov.w	r3, #0
 8003d50:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003d54:	4659      	mov	r1, fp
 8003d56:	00cb      	lsls	r3, r1, #3
 8003d58:	4651      	mov	r1, sl
 8003d5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d5e:	4651      	mov	r1, sl
 8003d60:	00ca      	lsls	r2, r1, #3
 8003d62:	4610      	mov	r0, r2
 8003d64:	4619      	mov	r1, r3
 8003d66:	4603      	mov	r3, r0
 8003d68:	4642      	mov	r2, r8
 8003d6a:	189b      	adds	r3, r3, r2
 8003d6c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003d6e:	464b      	mov	r3, r9
 8003d70:	460a      	mov	r2, r1
 8003d72:	eb42 0303 	adc.w	r3, r2, r3
 8003d76:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	663b      	str	r3, [r7, #96]	@ 0x60
 8003d82:	667a      	str	r2, [r7, #100]	@ 0x64
 8003d84:	f04f 0200 	mov.w	r2, #0
 8003d88:	f04f 0300 	mov.w	r3, #0
 8003d8c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003d90:	4649      	mov	r1, r9
 8003d92:	008b      	lsls	r3, r1, #2
 8003d94:	4641      	mov	r1, r8
 8003d96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d9a:	4641      	mov	r1, r8
 8003d9c:	008a      	lsls	r2, r1, #2
 8003d9e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003da2:	f7fc fa2f 	bl	8000204 <__aeabi_uldivmod>
 8003da6:	4602      	mov	r2, r0
 8003da8:	460b      	mov	r3, r1
 8003daa:	4b0d      	ldr	r3, [pc, #52]	@ (8003de0 <UART_SetConfig+0x4e4>)
 8003dac:	fba3 1302 	umull	r1, r3, r3, r2
 8003db0:	095b      	lsrs	r3, r3, #5
 8003db2:	2164      	movs	r1, #100	@ 0x64
 8003db4:	fb01 f303 	mul.w	r3, r1, r3
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	011b      	lsls	r3, r3, #4
 8003dbc:	3332      	adds	r3, #50	@ 0x32
 8003dbe:	4a08      	ldr	r2, [pc, #32]	@ (8003de0 <UART_SetConfig+0x4e4>)
 8003dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8003dc4:	095b      	lsrs	r3, r3, #5
 8003dc6:	f003 020f 	and.w	r2, r3, #15
 8003dca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4422      	add	r2, r4
 8003dd2:	609a      	str	r2, [r3, #8]
}
 8003dd4:	bf00      	nop
 8003dd6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003de0:	51eb851f 	.word	0x51eb851f

08003de4 <memset>:
 8003de4:	4402      	add	r2, r0
 8003de6:	4603      	mov	r3, r0
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d100      	bne.n	8003dee <memset+0xa>
 8003dec:	4770      	bx	lr
 8003dee:	f803 1b01 	strb.w	r1, [r3], #1
 8003df2:	e7f9      	b.n	8003de8 <memset+0x4>

08003df4 <__libc_init_array>:
 8003df4:	b570      	push	{r4, r5, r6, lr}
 8003df6:	4d0d      	ldr	r5, [pc, #52]	@ (8003e2c <__libc_init_array+0x38>)
 8003df8:	4c0d      	ldr	r4, [pc, #52]	@ (8003e30 <__libc_init_array+0x3c>)
 8003dfa:	1b64      	subs	r4, r4, r5
 8003dfc:	10a4      	asrs	r4, r4, #2
 8003dfe:	2600      	movs	r6, #0
 8003e00:	42a6      	cmp	r6, r4
 8003e02:	d109      	bne.n	8003e18 <__libc_init_array+0x24>
 8003e04:	4d0b      	ldr	r5, [pc, #44]	@ (8003e34 <__libc_init_array+0x40>)
 8003e06:	4c0c      	ldr	r4, [pc, #48]	@ (8003e38 <__libc_init_array+0x44>)
 8003e08:	f000 f818 	bl	8003e3c <_init>
 8003e0c:	1b64      	subs	r4, r4, r5
 8003e0e:	10a4      	asrs	r4, r4, #2
 8003e10:	2600      	movs	r6, #0
 8003e12:	42a6      	cmp	r6, r4
 8003e14:	d105      	bne.n	8003e22 <__libc_init_array+0x2e>
 8003e16:	bd70      	pop	{r4, r5, r6, pc}
 8003e18:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e1c:	4798      	blx	r3
 8003e1e:	3601      	adds	r6, #1
 8003e20:	e7ee      	b.n	8003e00 <__libc_init_array+0xc>
 8003e22:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e26:	4798      	blx	r3
 8003e28:	3601      	adds	r6, #1
 8003e2a:	e7f2      	b.n	8003e12 <__libc_init_array+0x1e>
 8003e2c:	08003e7c 	.word	0x08003e7c
 8003e30:	08003e7c 	.word	0x08003e7c
 8003e34:	08003e7c 	.word	0x08003e7c
 8003e38:	08003e80 	.word	0x08003e80

08003e3c <_init>:
 8003e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e3e:	bf00      	nop
 8003e40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e42:	bc08      	pop	{r3}
 8003e44:	469e      	mov	lr, r3
 8003e46:	4770      	bx	lr

08003e48 <_fini>:
 8003e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e4a:	bf00      	nop
 8003e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e4e:	bc08      	pop	{r3}
 8003e50:	469e      	mov	lr, r3
 8003e52:	4770      	bx	lr
