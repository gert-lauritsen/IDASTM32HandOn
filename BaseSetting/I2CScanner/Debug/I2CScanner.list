
I2CScanner.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004710  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  080048e0  080048e0  000058e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800493c  0800493c  00006088  2**0
                  CONTENTS
  4 .ARM          00000008  0800493c  0800493c  0000593c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004944  08004944  00006088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004944  08004944  00005944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004948  08004948  00005948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  0800494c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002cc  20000088  080049d4  00006088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000354  080049d4  00006354  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fea0  00000000  00000000  000060b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000218b  00000000  00000000  00015f58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f68  00000000  00000000  000180e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c3d  00000000  00000000  00019050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000224c8  00000000  00000000  00019c8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013705  00000000  00000000  0003c155  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3628  00000000  00000000  0004f85a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00122e82  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004744  00000000  00000000  00122ec8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0012760c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000088 	.word	0x20000088
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080048c8 	.word	0x080048c8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000008c 	.word	0x2000008c
 800020c:	080048c8 	.word	0x080048c8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	uint8_t i = 0, ret;
 80005a6:	2300      	movs	r3, #0
 80005a8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005aa:	f000 fc29 	bl	8000e00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ae:	f000 f85d 	bl	800066c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b2:	f000 f9b5 	bl	8000920 <MX_GPIO_Init>
  MX_DMA_Init();
 80005b6:	f000 f993 	bl	80008e0 <MX_DMA_Init>
  MX_TIM2_Init();
 80005ba:	f000 f8f3 	bl	80007a4 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80005be:	f000 f965 	bl	800088c <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80005c2:	f000 f8c1 	bl	8000748 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(1000);
 80005c6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005ca:	f000 fc8b 	bl	8000ee4 <HAL_Delay>

  /*-[ I2C Bus Scanning ]-*/
  HAL_UART_Transmit(&huart1, StartMSG, sizeof(StartMSG), 10000);
 80005ce:	f242 7310 	movw	r3, #10000	@ 0x2710
 80005d2:	221a      	movs	r2, #26
 80005d4:	491e      	ldr	r1, [pc, #120]	@ (8000650 <main+0xb0>)
 80005d6:	481f      	ldr	r0, [pc, #124]	@ (8000654 <main+0xb4>)
 80005d8:	f003 f91a 	bl	8003810 <HAL_UART_Transmit>
  for(i=1; i<128; i++)
 80005dc:	2301      	movs	r3, #1
 80005de:	71fb      	strb	r3, [r7, #7]
 80005e0:	e028      	b.n	8000634 <main+0x94>
  {
      ret = HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(i<<1), 3, 5);
 80005e2:	79fb      	ldrb	r3, [r7, #7]
 80005e4:	b29b      	uxth	r3, r3
 80005e6:	005b      	lsls	r3, r3, #1
 80005e8:	b299      	uxth	r1, r3
 80005ea:	2305      	movs	r3, #5
 80005ec:	2203      	movs	r2, #3
 80005ee:	481a      	ldr	r0, [pc, #104]	@ (8000658 <main+0xb8>)
 80005f0:	f001 fb8a 	bl	8001d08 <HAL_I2C_IsDeviceReady>
 80005f4:	4603      	mov	r3, r0
 80005f6:	71bb      	strb	r3, [r7, #6]
      if (ret != HAL_OK) /* No ACK Received At That Address */
 80005f8:	79bb      	ldrb	r3, [r7, #6]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d007      	beq.n	800060e <main+0x6e>
      {
          HAL_UART_Transmit(&huart1, Space, sizeof(Space), 10000);
 80005fe:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000602:	2204      	movs	r2, #4
 8000604:	4915      	ldr	r1, [pc, #84]	@ (800065c <main+0xbc>)
 8000606:	4813      	ldr	r0, [pc, #76]	@ (8000654 <main+0xb4>)
 8000608:	f003 f902 	bl	8003810 <HAL_UART_Transmit>
 800060c:	e00f      	b.n	800062e <main+0x8e>
      }
      else if(ret == HAL_OK)
 800060e:	79bb      	ldrb	r3, [r7, #6]
 8000610:	2b00      	cmp	r3, #0
 8000612:	d10c      	bne.n	800062e <main+0x8e>
      {
          sprintf(Buffer, "0x%X", i);
 8000614:	79fb      	ldrb	r3, [r7, #7]
 8000616:	461a      	mov	r2, r3
 8000618:	4911      	ldr	r1, [pc, #68]	@ (8000660 <main+0xc0>)
 800061a:	4812      	ldr	r0, [pc, #72]	@ (8000664 <main+0xc4>)
 800061c:	f003 fcb4 	bl	8003f88 <siprintf>
          HAL_UART_Transmit(&huart1, Buffer, sizeof(Buffer), 10000);
 8000620:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000624:	2219      	movs	r2, #25
 8000626:	490f      	ldr	r1, [pc, #60]	@ (8000664 <main+0xc4>)
 8000628:	480a      	ldr	r0, [pc, #40]	@ (8000654 <main+0xb4>)
 800062a:	f003 f8f1 	bl	8003810 <HAL_UART_Transmit>
  for(i=1; i<128; i++)
 800062e:	79fb      	ldrb	r3, [r7, #7]
 8000630:	3301      	adds	r3, #1
 8000632:	71fb      	strb	r3, [r7, #7]
 8000634:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000638:	2b00      	cmp	r3, #0
 800063a:	dad2      	bge.n	80005e2 <main+0x42>
      }
  }
  HAL_UART_Transmit(&huart1, EndMSG, sizeof(EndMSG), 10000);
 800063c:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000640:	220b      	movs	r2, #11
 8000642:	4909      	ldr	r1, [pc, #36]	@ (8000668 <main+0xc8>)
 8000644:	4803      	ldr	r0, [pc, #12]	@ (8000654 <main+0xb4>)
 8000646:	f003 f8e3 	bl	8003810 <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800064a:	bf00      	nop
 800064c:	e7fd      	b.n	800064a <main+0xaa>
 800064e:	bf00      	nop
 8000650:	20000004 	.word	0x20000004
 8000654:	200001a0 	.word	0x200001a0
 8000658:	200000a4 	.word	0x200000a4
 800065c:	20000000 	.word	0x20000000
 8000660:	080048e0 	.word	0x080048e0
 8000664:	200001e8 	.word	0x200001e8
 8000668:	20000020 	.word	0x20000020

0800066c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b094      	sub	sp, #80	@ 0x50
 8000670:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000672:	f107 031c 	add.w	r3, r7, #28
 8000676:	2234      	movs	r2, #52	@ 0x34
 8000678:	2100      	movs	r1, #0
 800067a:	4618      	mov	r0, r3
 800067c:	f003 fca4 	bl	8003fc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000680:	f107 0308 	add.w	r3, r7, #8
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	605a      	str	r2, [r3, #4]
 800068a:	609a      	str	r2, [r3, #8]
 800068c:	60da      	str	r2, [r3, #12]
 800068e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000690:	2300      	movs	r3, #0
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	4b2a      	ldr	r3, [pc, #168]	@ (8000740 <SystemClock_Config+0xd4>)
 8000696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000698:	4a29      	ldr	r2, [pc, #164]	@ (8000740 <SystemClock_Config+0xd4>)
 800069a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800069e:	6413      	str	r3, [r2, #64]	@ 0x40
 80006a0:	4b27      	ldr	r3, [pc, #156]	@ (8000740 <SystemClock_Config+0xd4>)
 80006a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006a8:	607b      	str	r3, [r7, #4]
 80006aa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006ac:	2300      	movs	r3, #0
 80006ae:	603b      	str	r3, [r7, #0]
 80006b0:	4b24      	ldr	r3, [pc, #144]	@ (8000744 <SystemClock_Config+0xd8>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006b8:	4a22      	ldr	r2, [pc, #136]	@ (8000744 <SystemClock_Config+0xd8>)
 80006ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006be:	6013      	str	r3, [r2, #0]
 80006c0:	4b20      	ldr	r3, [pc, #128]	@ (8000744 <SystemClock_Config+0xd8>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006c8:	603b      	str	r3, [r7, #0]
 80006ca:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006cc:	2302      	movs	r3, #2
 80006ce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006d0:	2301      	movs	r3, #1
 80006d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006d4:	2310      	movs	r3, #16
 80006d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d8:	2302      	movs	r3, #2
 80006da:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006dc:	2300      	movs	r3, #0
 80006de:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006e0:	2308      	movs	r3, #8
 80006e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80006e4:	2360      	movs	r3, #96	@ 0x60
 80006e6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006e8:	2302      	movs	r3, #2
 80006ea:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006ec:	2302      	movs	r3, #2
 80006ee:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006f0:	2302      	movs	r3, #2
 80006f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f4:	f107 031c 	add.w	r3, r7, #28
 80006f8:	4618      	mov	r0, r3
 80006fa:	f001 fff7 	bl	80026ec <HAL_RCC_OscConfig>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000704:	f000 f98a 	bl	8000a1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000708:	230f      	movs	r3, #15
 800070a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800070c:	2302      	movs	r3, #2
 800070e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000710:	2300      	movs	r3, #0
 8000712:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000714:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000718:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800071a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800071e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000720:	f107 0308 	add.w	r3, r7, #8
 8000724:	2103      	movs	r1, #3
 8000726:	4618      	mov	r0, r3
 8000728:	f001 fc96 	bl	8002058 <HAL_RCC_ClockConfig>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000732:	f000 f973 	bl	8000a1c <Error_Handler>
  }
}
 8000736:	bf00      	nop
 8000738:	3750      	adds	r7, #80	@ 0x50
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	40023800 	.word	0x40023800
 8000744:	40007000 	.word	0x40007000

08000748 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800074c:	4b12      	ldr	r3, [pc, #72]	@ (8000798 <MX_I2C1_Init+0x50>)
 800074e:	4a13      	ldr	r2, [pc, #76]	@ (800079c <MX_I2C1_Init+0x54>)
 8000750:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000752:	4b11      	ldr	r3, [pc, #68]	@ (8000798 <MX_I2C1_Init+0x50>)
 8000754:	4a12      	ldr	r2, [pc, #72]	@ (80007a0 <MX_I2C1_Init+0x58>)
 8000756:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000758:	4b0f      	ldr	r3, [pc, #60]	@ (8000798 <MX_I2C1_Init+0x50>)
 800075a:	2200      	movs	r2, #0
 800075c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800075e:	4b0e      	ldr	r3, [pc, #56]	@ (8000798 <MX_I2C1_Init+0x50>)
 8000760:	2200      	movs	r2, #0
 8000762:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000764:	4b0c      	ldr	r3, [pc, #48]	@ (8000798 <MX_I2C1_Init+0x50>)
 8000766:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800076a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800076c:	4b0a      	ldr	r3, [pc, #40]	@ (8000798 <MX_I2C1_Init+0x50>)
 800076e:	2200      	movs	r2, #0
 8000770:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000772:	4b09      	ldr	r3, [pc, #36]	@ (8000798 <MX_I2C1_Init+0x50>)
 8000774:	2200      	movs	r2, #0
 8000776:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000778:	4b07      	ldr	r3, [pc, #28]	@ (8000798 <MX_I2C1_Init+0x50>)
 800077a:	2200      	movs	r2, #0
 800077c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800077e:	4b06      	ldr	r3, [pc, #24]	@ (8000798 <MX_I2C1_Init+0x50>)
 8000780:	2200      	movs	r2, #0
 8000782:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000784:	4804      	ldr	r0, [pc, #16]	@ (8000798 <MX_I2C1_Init+0x50>)
 8000786:	f001 f97b 	bl	8001a80 <HAL_I2C_Init>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000790:	f000 f944 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000794:	bf00      	nop
 8000796:	bd80      	pop	{r7, pc}
 8000798:	200000a4 	.word	0x200000a4
 800079c:	40005400 	.word	0x40005400
 80007a0:	000186a0 	.word	0x000186a0

080007a4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b08e      	sub	sp, #56	@ 0x38
 80007a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007aa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	605a      	str	r2, [r3, #4]
 80007b4:	609a      	str	r2, [r3, #8]
 80007b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007b8:	f107 0320 	add.w	r3, r7, #32
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]
 80007c0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007c2:	1d3b      	adds	r3, r7, #4
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
 80007c8:	605a      	str	r2, [r3, #4]
 80007ca:	609a      	str	r2, [r3, #8]
 80007cc:	60da      	str	r2, [r3, #12]
 80007ce:	611a      	str	r2, [r3, #16]
 80007d0:	615a      	str	r2, [r3, #20]
 80007d2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007d4:	4b2c      	ldr	r3, [pc, #176]	@ (8000888 <MX_TIM2_Init+0xe4>)
 80007d6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80007da:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80007dc:	4b2a      	ldr	r3, [pc, #168]	@ (8000888 <MX_TIM2_Init+0xe4>)
 80007de:	2200      	movs	r2, #0
 80007e0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007e2:	4b29      	ldr	r3, [pc, #164]	@ (8000888 <MX_TIM2_Init+0xe4>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 60-1;
 80007e8:	4b27      	ldr	r3, [pc, #156]	@ (8000888 <MX_TIM2_Init+0xe4>)
 80007ea:	223b      	movs	r2, #59	@ 0x3b
 80007ec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007ee:	4b26      	ldr	r3, [pc, #152]	@ (8000888 <MX_TIM2_Init+0xe4>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007f4:	4b24      	ldr	r3, [pc, #144]	@ (8000888 <MX_TIM2_Init+0xe4>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007fa:	4823      	ldr	r0, [pc, #140]	@ (8000888 <MX_TIM2_Init+0xe4>)
 80007fc:	f002 fa14 	bl	8002c28 <HAL_TIM_Base_Init>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8000806:	f000 f909 	bl	8000a1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800080a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800080e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000810:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000814:	4619      	mov	r1, r3
 8000816:	481c      	ldr	r0, [pc, #112]	@ (8000888 <MX_TIM2_Init+0xe4>)
 8000818:	f002 fb70 	bl	8002efc <HAL_TIM_ConfigClockSource>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8000822:	f000 f8fb 	bl	8000a1c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000826:	4818      	ldr	r0, [pc, #96]	@ (8000888 <MX_TIM2_Init+0xe4>)
 8000828:	f002 fa4d 	bl	8002cc6 <HAL_TIM_PWM_Init>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8000832:	f000 f8f3 	bl	8000a1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000836:	2300      	movs	r3, #0
 8000838:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800083a:	2300      	movs	r3, #0
 800083c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800083e:	f107 0320 	add.w	r3, r7, #32
 8000842:	4619      	mov	r1, r3
 8000844:	4810      	ldr	r0, [pc, #64]	@ (8000888 <MX_TIM2_Init+0xe4>)
 8000846:	f002 ff17 	bl	8003678 <HAL_TIMEx_MasterConfigSynchronization>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8000850:	f000 f8e4 	bl	8000a1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000854:	2360      	movs	r3, #96	@ 0x60
 8000856:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000858:	2300      	movs	r3, #0
 800085a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800085c:	2300      	movs	r3, #0
 800085e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000860:	2300      	movs	r3, #0
 8000862:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000864:	1d3b      	adds	r3, r7, #4
 8000866:	2200      	movs	r2, #0
 8000868:	4619      	mov	r1, r3
 800086a:	4807      	ldr	r0, [pc, #28]	@ (8000888 <MX_TIM2_Init+0xe4>)
 800086c:	f002 fa84 	bl	8002d78 <HAL_TIM_PWM_ConfigChannel>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8000876:	f000 f8d1 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800087a:	4803      	ldr	r0, [pc, #12]	@ (8000888 <MX_TIM2_Init+0xe4>)
 800087c:	f000 f994 	bl	8000ba8 <HAL_TIM_MspPostInit>

}
 8000880:	bf00      	nop
 8000882:	3738      	adds	r7, #56	@ 0x38
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	200000f8 	.word	0x200000f8

0800088c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000890:	4b11      	ldr	r3, [pc, #68]	@ (80008d8 <MX_USART1_UART_Init+0x4c>)
 8000892:	4a12      	ldr	r2, [pc, #72]	@ (80008dc <MX_USART1_UART_Init+0x50>)
 8000894:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000896:	4b10      	ldr	r3, [pc, #64]	@ (80008d8 <MX_USART1_UART_Init+0x4c>)
 8000898:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800089c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800089e:	4b0e      	ldr	r3, [pc, #56]	@ (80008d8 <MX_USART1_UART_Init+0x4c>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008a4:	4b0c      	ldr	r3, [pc, #48]	@ (80008d8 <MX_USART1_UART_Init+0x4c>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008aa:	4b0b      	ldr	r3, [pc, #44]	@ (80008d8 <MX_USART1_UART_Init+0x4c>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 80008b0:	4b09      	ldr	r3, [pc, #36]	@ (80008d8 <MX_USART1_UART_Init+0x4c>)
 80008b2:	2208      	movs	r2, #8
 80008b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008b6:	4b08      	ldr	r3, [pc, #32]	@ (80008d8 <MX_USART1_UART_Init+0x4c>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008bc:	4b06      	ldr	r3, [pc, #24]	@ (80008d8 <MX_USART1_UART_Init+0x4c>)
 80008be:	2200      	movs	r2, #0
 80008c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008c2:	4805      	ldr	r0, [pc, #20]	@ (80008d8 <MX_USART1_UART_Init+0x4c>)
 80008c4:	f002 ff54 	bl	8003770 <HAL_UART_Init>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80008ce:	f000 f8a5 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	200001a0 	.word	0x200001a0
 80008dc:	40011000 	.word	0x40011000

080008e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	607b      	str	r3, [r7, #4]
 80008ea:	4b0c      	ldr	r3, [pc, #48]	@ (800091c <MX_DMA_Init+0x3c>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ee:	4a0b      	ldr	r2, [pc, #44]	@ (800091c <MX_DMA_Init+0x3c>)
 80008f0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80008f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008f6:	4b09      	ldr	r3, [pc, #36]	@ (800091c <MX_DMA_Init+0x3c>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80008fe:	607b      	str	r3, [r7, #4]
 8000900:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000902:	2200      	movs	r2, #0
 8000904:	2100      	movs	r1, #0
 8000906:	2010      	movs	r0, #16
 8000908:	f000 fbeb 	bl	80010e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800090c:	2010      	movs	r0, #16
 800090e:	f000 fc04 	bl	800111a <HAL_NVIC_EnableIRQ>

}
 8000912:	bf00      	nop
 8000914:	3708      	adds	r7, #8
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	40023800 	.word	0x40023800

08000920 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b08a      	sub	sp, #40	@ 0x28
 8000924:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000926:	f107 0314 	add.w	r3, r7, #20
 800092a:	2200      	movs	r2, #0
 800092c:	601a      	str	r2, [r3, #0]
 800092e:	605a      	str	r2, [r3, #4]
 8000930:	609a      	str	r2, [r3, #8]
 8000932:	60da      	str	r2, [r3, #12]
 8000934:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	613b      	str	r3, [r7, #16]
 800093a:	4b35      	ldr	r3, [pc, #212]	@ (8000a10 <MX_GPIO_Init+0xf0>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093e:	4a34      	ldr	r2, [pc, #208]	@ (8000a10 <MX_GPIO_Init+0xf0>)
 8000940:	f043 0304 	orr.w	r3, r3, #4
 8000944:	6313      	str	r3, [r2, #48]	@ 0x30
 8000946:	4b32      	ldr	r3, [pc, #200]	@ (8000a10 <MX_GPIO_Init+0xf0>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094a:	f003 0304 	and.w	r3, r3, #4
 800094e:	613b      	str	r3, [r7, #16]
 8000950:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	60fb      	str	r3, [r7, #12]
 8000956:	4b2e      	ldr	r3, [pc, #184]	@ (8000a10 <MX_GPIO_Init+0xf0>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095a:	4a2d      	ldr	r2, [pc, #180]	@ (8000a10 <MX_GPIO_Init+0xf0>)
 800095c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000960:	6313      	str	r3, [r2, #48]	@ 0x30
 8000962:	4b2b      	ldr	r3, [pc, #172]	@ (8000a10 <MX_GPIO_Init+0xf0>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000966:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800096a:	60fb      	str	r3, [r7, #12]
 800096c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	60bb      	str	r3, [r7, #8]
 8000972:	4b27      	ldr	r3, [pc, #156]	@ (8000a10 <MX_GPIO_Init+0xf0>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000976:	4a26      	ldr	r2, [pc, #152]	@ (8000a10 <MX_GPIO_Init+0xf0>)
 8000978:	f043 0301 	orr.w	r3, r3, #1
 800097c:	6313      	str	r3, [r2, #48]	@ 0x30
 800097e:	4b24      	ldr	r3, [pc, #144]	@ (8000a10 <MX_GPIO_Init+0xf0>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000982:	f003 0301 	and.w	r3, r3, #1
 8000986:	60bb      	str	r3, [r7, #8]
 8000988:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	607b      	str	r3, [r7, #4]
 800098e:	4b20      	ldr	r3, [pc, #128]	@ (8000a10 <MX_GPIO_Init+0xf0>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000992:	4a1f      	ldr	r2, [pc, #124]	@ (8000a10 <MX_GPIO_Init+0xf0>)
 8000994:	f043 0302 	orr.w	r3, r3, #2
 8000998:	6313      	str	r3, [r2, #48]	@ 0x30
 800099a:	4b1d      	ldr	r3, [pc, #116]	@ (8000a10 <MX_GPIO_Init+0xf0>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099e:	f003 0302 	and.w	r3, r3, #2
 80009a2:	607b      	str	r3, [r7, #4]
 80009a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LED1_Pin, GPIO_PIN_RESET);
 80009a6:	2200      	movs	r2, #0
 80009a8:	21a0      	movs	r1, #160	@ 0xa0
 80009aa:	481a      	ldr	r0, [pc, #104]	@ (8000a14 <MX_GPIO_Init+0xf4>)
 80009ac:	f001 f84e 	bl	8001a4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009b6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80009ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009c0:	f107 0314 	add.w	r3, r7, #20
 80009c4:	4619      	mov	r1, r3
 80009c6:	4814      	ldr	r0, [pc, #80]	@ (8000a18 <MX_GPIO_Init+0xf8>)
 80009c8:	f000 feac 	bl	8001724 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009cc:	230c      	movs	r3, #12
 80009ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d0:	2302      	movs	r3, #2
 80009d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d8:	2303      	movs	r3, #3
 80009da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009dc:	2307      	movs	r3, #7
 80009de:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e0:	f107 0314 	add.w	r3, r7, #20
 80009e4:	4619      	mov	r1, r3
 80009e6:	480b      	ldr	r0, [pc, #44]	@ (8000a14 <MX_GPIO_Init+0xf4>)
 80009e8:	f000 fe9c 	bl	8001724 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LED1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LED1_Pin;
 80009ec:	23a0      	movs	r3, #160	@ 0xa0
 80009ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f0:	2301      	movs	r3, #1
 80009f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f8:	2300      	movs	r3, #0
 80009fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009fc:	f107 0314 	add.w	r3, r7, #20
 8000a00:	4619      	mov	r1, r3
 8000a02:	4804      	ldr	r0, [pc, #16]	@ (8000a14 <MX_GPIO_Init+0xf4>)
 8000a04:	f000 fe8e 	bl	8001724 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a08:	bf00      	nop
 8000a0a:	3728      	adds	r7, #40	@ 0x28
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	40023800 	.word	0x40023800
 8000a14:	40020000 	.word	0x40020000
 8000a18:	40020800 	.word	0x40020800

08000a1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a20:	b672      	cpsid	i
}
 8000a22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a24:	bf00      	nop
 8000a26:	e7fd      	b.n	8000a24 <Error_Handler+0x8>

08000a28 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	607b      	str	r3, [r7, #4]
 8000a32:	4b10      	ldr	r3, [pc, #64]	@ (8000a74 <HAL_MspInit+0x4c>)
 8000a34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a36:	4a0f      	ldr	r2, [pc, #60]	@ (8000a74 <HAL_MspInit+0x4c>)
 8000a38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a3e:	4b0d      	ldr	r3, [pc, #52]	@ (8000a74 <HAL_MspInit+0x4c>)
 8000a40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a46:	607b      	str	r3, [r7, #4]
 8000a48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	603b      	str	r3, [r7, #0]
 8000a4e:	4b09      	ldr	r3, [pc, #36]	@ (8000a74 <HAL_MspInit+0x4c>)
 8000a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a52:	4a08      	ldr	r2, [pc, #32]	@ (8000a74 <HAL_MspInit+0x4c>)
 8000a54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a58:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a5a:	4b06      	ldr	r3, [pc, #24]	@ (8000a74 <HAL_MspInit+0x4c>)
 8000a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a62:	603b      	str	r3, [r7, #0]
 8000a64:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a66:	2007      	movs	r0, #7
 8000a68:	f000 fb30 	bl	80010cc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a6c:	bf00      	nop
 8000a6e:	3708      	adds	r7, #8
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	40023800 	.word	0x40023800

08000a78 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b08a      	sub	sp, #40	@ 0x28
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a80:	f107 0314 	add.w	r3, r7, #20
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	605a      	str	r2, [r3, #4]
 8000a8a:	609a      	str	r2, [r3, #8]
 8000a8c:	60da      	str	r2, [r3, #12]
 8000a8e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a19      	ldr	r2, [pc, #100]	@ (8000afc <HAL_I2C_MspInit+0x84>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d12c      	bne.n	8000af4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	613b      	str	r3, [r7, #16]
 8000a9e:	4b18      	ldr	r3, [pc, #96]	@ (8000b00 <HAL_I2C_MspInit+0x88>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa2:	4a17      	ldr	r2, [pc, #92]	@ (8000b00 <HAL_I2C_MspInit+0x88>)
 8000aa4:	f043 0302 	orr.w	r3, r3, #2
 8000aa8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aaa:	4b15      	ldr	r3, [pc, #84]	@ (8000b00 <HAL_I2C_MspInit+0x88>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aae:	f003 0302 	and.w	r3, r3, #2
 8000ab2:	613b      	str	r3, [r7, #16]
 8000ab4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ab6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000aba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000abc:	2312      	movs	r3, #18
 8000abe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac4:	2303      	movs	r3, #3
 8000ac6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ac8:	2304      	movs	r3, #4
 8000aca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000acc:	f107 0314 	add.w	r3, r7, #20
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	480c      	ldr	r0, [pc, #48]	@ (8000b04 <HAL_I2C_MspInit+0x8c>)
 8000ad4:	f000 fe26 	bl	8001724 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ad8:	2300      	movs	r3, #0
 8000ada:	60fb      	str	r3, [r7, #12]
 8000adc:	4b08      	ldr	r3, [pc, #32]	@ (8000b00 <HAL_I2C_MspInit+0x88>)
 8000ade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ae0:	4a07      	ldr	r2, [pc, #28]	@ (8000b00 <HAL_I2C_MspInit+0x88>)
 8000ae2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ae6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ae8:	4b05      	ldr	r3, [pc, #20]	@ (8000b00 <HAL_I2C_MspInit+0x88>)
 8000aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000af0:	60fb      	str	r3, [r7, #12]
 8000af2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000af4:	bf00      	nop
 8000af6:	3728      	adds	r7, #40	@ 0x28
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	40005400 	.word	0x40005400
 8000b00:	40023800 	.word	0x40023800
 8000b04:	40020400 	.word	0x40020400

08000b08 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b084      	sub	sp, #16
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000b18:	d13c      	bne.n	8000b94 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	60fb      	str	r3, [r7, #12]
 8000b1e:	4b1f      	ldr	r3, [pc, #124]	@ (8000b9c <HAL_TIM_Base_MspInit+0x94>)
 8000b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b22:	4a1e      	ldr	r2, [pc, #120]	@ (8000b9c <HAL_TIM_Base_MspInit+0x94>)
 8000b24:	f043 0301 	orr.w	r3, r3, #1
 8000b28:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b2a:	4b1c      	ldr	r3, [pc, #112]	@ (8000b9c <HAL_TIM_Base_MspInit+0x94>)
 8000b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b2e:	f003 0301 	and.w	r3, r3, #1
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 8000b36:	4b1a      	ldr	r3, [pc, #104]	@ (8000ba0 <HAL_TIM_Base_MspInit+0x98>)
 8000b38:	4a1a      	ldr	r2, [pc, #104]	@ (8000ba4 <HAL_TIM_Base_MspInit+0x9c>)
 8000b3a:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 8000b3c:	4b18      	ldr	r3, [pc, #96]	@ (8000ba0 <HAL_TIM_Base_MspInit+0x98>)
 8000b3e:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8000b42:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b44:	4b16      	ldr	r3, [pc, #88]	@ (8000ba0 <HAL_TIM_Base_MspInit+0x98>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b4a:	4b15      	ldr	r3, [pc, #84]	@ (8000ba0 <HAL_TIM_Base_MspInit+0x98>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000b50:	4b13      	ldr	r3, [pc, #76]	@ (8000ba0 <HAL_TIM_Base_MspInit+0x98>)
 8000b52:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b56:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b58:	4b11      	ldr	r3, [pc, #68]	@ (8000ba0 <HAL_TIM_Base_MspInit+0x98>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b5e:	4b10      	ldr	r3, [pc, #64]	@ (8000ba0 <HAL_TIM_Base_MspInit+0x98>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8000b64:	4b0e      	ldr	r3, [pc, #56]	@ (8000ba0 <HAL_TIM_Base_MspInit+0x98>)
 8000b66:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b6a:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000b6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba0 <HAL_TIM_Base_MspInit+0x98>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b72:	4b0b      	ldr	r3, [pc, #44]	@ (8000ba0 <HAL_TIM_Base_MspInit+0x98>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8000b78:	4809      	ldr	r0, [pc, #36]	@ (8000ba0 <HAL_TIM_Base_MspInit+0x98>)
 8000b7a:	f000 fae9 	bl	8001150 <HAL_DMA_Init>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <HAL_TIM_Base_MspInit+0x80>
    {
      Error_Handler();
 8000b84:	f7ff ff4a 	bl	8000a1c <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	4a05      	ldr	r2, [pc, #20]	@ (8000ba0 <HAL_TIM_Base_MspInit+0x98>)
 8000b8c:	625a      	str	r2, [r3, #36]	@ 0x24
 8000b8e:	4a04      	ldr	r2, [pc, #16]	@ (8000ba0 <HAL_TIM_Base_MspInit+0x98>)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000b94:	bf00      	nop
 8000b96:	3710      	adds	r7, #16
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	40023800 	.word	0x40023800
 8000ba0:	20000140 	.word	0x20000140
 8000ba4:	40026088 	.word	0x40026088

08000ba8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b088      	sub	sp, #32
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb0:	f107 030c 	add.w	r3, r7, #12
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	605a      	str	r2, [r3, #4]
 8000bba:	609a      	str	r2, [r3, #8]
 8000bbc:	60da      	str	r2, [r3, #12]
 8000bbe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000bc8:	d11d      	bne.n	8000c06 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	60bb      	str	r3, [r7, #8]
 8000bce:	4b10      	ldr	r3, [pc, #64]	@ (8000c10 <HAL_TIM_MspPostInit+0x68>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd2:	4a0f      	ldr	r2, [pc, #60]	@ (8000c10 <HAL_TIM_MspPostInit+0x68>)
 8000bd4:	f043 0301 	orr.w	r3, r3, #1
 8000bd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bda:	4b0d      	ldr	r3, [pc, #52]	@ (8000c10 <HAL_TIM_MspPostInit+0x68>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bde:	f003 0301 	and.w	r3, r3, #1
 8000be2:	60bb      	str	r3, [r7, #8]
 8000be4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000be6:	2301      	movs	r3, #1
 8000be8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bea:	2302      	movs	r3, #2
 8000bec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfa:	f107 030c 	add.w	r3, r7, #12
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4804      	ldr	r0, [pc, #16]	@ (8000c14 <HAL_TIM_MspPostInit+0x6c>)
 8000c02:	f000 fd8f 	bl	8001724 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000c06:	bf00      	nop
 8000c08:	3720      	adds	r7, #32
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40023800 	.word	0x40023800
 8000c14:	40020000 	.word	0x40020000

08000c18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b08a      	sub	sp, #40	@ 0x28
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c20:	f107 0314 	add.w	r3, r7, #20
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	605a      	str	r2, [r3, #4]
 8000c2a:	609a      	str	r2, [r3, #8]
 8000c2c:	60da      	str	r2, [r3, #12]
 8000c2e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a19      	ldr	r2, [pc, #100]	@ (8000c9c <HAL_UART_MspInit+0x84>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d12c      	bne.n	8000c94 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	613b      	str	r3, [r7, #16]
 8000c3e:	4b18      	ldr	r3, [pc, #96]	@ (8000ca0 <HAL_UART_MspInit+0x88>)
 8000c40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c42:	4a17      	ldr	r2, [pc, #92]	@ (8000ca0 <HAL_UART_MspInit+0x88>)
 8000c44:	f043 0310 	orr.w	r3, r3, #16
 8000c48:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c4a:	4b15      	ldr	r3, [pc, #84]	@ (8000ca0 <HAL_UART_MspInit+0x88>)
 8000c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c4e:	f003 0310 	and.w	r3, r3, #16
 8000c52:	613b      	str	r3, [r7, #16]
 8000c54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	60fb      	str	r3, [r7, #12]
 8000c5a:	4b11      	ldr	r3, [pc, #68]	@ (8000ca0 <HAL_UART_MspInit+0x88>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5e:	4a10      	ldr	r2, [pc, #64]	@ (8000ca0 <HAL_UART_MspInit+0x88>)
 8000c60:	f043 0301 	orr.w	r3, r3, #1
 8000c64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c66:	4b0e      	ldr	r3, [pc, #56]	@ (8000ca0 <HAL_UART_MspInit+0x88>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6a:	f003 0301 	and.w	r3, r3, #1
 8000c6e:	60fb      	str	r3, [r7, #12]
 8000c70:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000c72:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000c76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c78:	2302      	movs	r3, #2
 8000c7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c80:	2303      	movs	r3, #3
 8000c82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c84:	2307      	movs	r3, #7
 8000c86:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c88:	f107 0314 	add.w	r3, r7, #20
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4805      	ldr	r0, [pc, #20]	@ (8000ca4 <HAL_UART_MspInit+0x8c>)
 8000c90:	f000 fd48 	bl	8001724 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c94:	bf00      	nop
 8000c96:	3728      	adds	r7, #40	@ 0x28
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	40011000 	.word	0x40011000
 8000ca0:	40023800 	.word	0x40023800
 8000ca4:	40020000 	.word	0x40020000

08000ca8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cac:	bf00      	nop
 8000cae:	e7fd      	b.n	8000cac <NMI_Handler+0x4>

08000cb0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cb4:	bf00      	nop
 8000cb6:	e7fd      	b.n	8000cb4 <HardFault_Handler+0x4>

08000cb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cbc:	bf00      	nop
 8000cbe:	e7fd      	b.n	8000cbc <MemManage_Handler+0x4>

08000cc0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cc4:	bf00      	nop
 8000cc6:	e7fd      	b.n	8000cc4 <BusFault_Handler+0x4>

08000cc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ccc:	bf00      	nop
 8000cce:	e7fd      	b.n	8000ccc <UsageFault_Handler+0x4>

08000cd0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cd4:	bf00      	nop
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr

08000cde <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ce2:	bf00      	nop
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr

08000cec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr

08000cfa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cfa:	b580      	push	{r7, lr}
 8000cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cfe:	f000 f8d1 	bl	8000ea4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d02:	bf00      	nop
 8000d04:	bd80      	pop	{r7, pc}
	...

08000d08 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8000d0c:	4802      	ldr	r0, [pc, #8]	@ (8000d18 <DMA1_Stream5_IRQHandler+0x10>)
 8000d0e:	f000 facd 	bl	80012ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000d12:	bf00      	nop
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	20000140 	.word	0x20000140

08000d1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b086      	sub	sp, #24
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d24:	4a14      	ldr	r2, [pc, #80]	@ (8000d78 <_sbrk+0x5c>)
 8000d26:	4b15      	ldr	r3, [pc, #84]	@ (8000d7c <_sbrk+0x60>)
 8000d28:	1ad3      	subs	r3, r2, r3
 8000d2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d30:	4b13      	ldr	r3, [pc, #76]	@ (8000d80 <_sbrk+0x64>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d102      	bne.n	8000d3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d38:	4b11      	ldr	r3, [pc, #68]	@ (8000d80 <_sbrk+0x64>)
 8000d3a:	4a12      	ldr	r2, [pc, #72]	@ (8000d84 <_sbrk+0x68>)
 8000d3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d3e:	4b10      	ldr	r3, [pc, #64]	@ (8000d80 <_sbrk+0x64>)
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4413      	add	r3, r2
 8000d46:	693a      	ldr	r2, [r7, #16]
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	d207      	bcs.n	8000d5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d4c:	f003 f944 	bl	8003fd8 <__errno>
 8000d50:	4603      	mov	r3, r0
 8000d52:	220c      	movs	r2, #12
 8000d54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d56:	f04f 33ff 	mov.w	r3, #4294967295
 8000d5a:	e009      	b.n	8000d70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d5c:	4b08      	ldr	r3, [pc, #32]	@ (8000d80 <_sbrk+0x64>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d62:	4b07      	ldr	r3, [pc, #28]	@ (8000d80 <_sbrk+0x64>)
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4413      	add	r3, r2
 8000d6a:	4a05      	ldr	r2, [pc, #20]	@ (8000d80 <_sbrk+0x64>)
 8000d6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d6e:	68fb      	ldr	r3, [r7, #12]
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	3718      	adds	r7, #24
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	20020000 	.word	0x20020000
 8000d7c:	00000400 	.word	0x00000400
 8000d80:	20000204 	.word	0x20000204
 8000d84:	20000358 	.word	0x20000358

08000d88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d8c:	4b06      	ldr	r3, [pc, #24]	@ (8000da8 <SystemInit+0x20>)
 8000d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d92:	4a05      	ldr	r2, [pc, #20]	@ (8000da8 <SystemInit+0x20>)
 8000d94:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d98:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	e000ed00 	.word	0xe000ed00

08000dac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000dac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000de4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000db0:	f7ff ffea 	bl	8000d88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000db4:	480c      	ldr	r0, [pc, #48]	@ (8000de8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000db6:	490d      	ldr	r1, [pc, #52]	@ (8000dec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000db8:	4a0d      	ldr	r2, [pc, #52]	@ (8000df0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dbc:	e002      	b.n	8000dc4 <LoopCopyDataInit>

08000dbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dc2:	3304      	adds	r3, #4

08000dc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dc8:	d3f9      	bcc.n	8000dbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dca:	4a0a      	ldr	r2, [pc, #40]	@ (8000df4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000dcc:	4c0a      	ldr	r4, [pc, #40]	@ (8000df8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dd0:	e001      	b.n	8000dd6 <LoopFillZerobss>

08000dd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dd4:	3204      	adds	r2, #4

08000dd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dd8:	d3fb      	bcc.n	8000dd2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000dda:	f003 f903 	bl	8003fe4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dde:	f7ff fbdf 	bl	80005a0 <main>
  bx  lr    
 8000de2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000de4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000de8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dec:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000df0:	0800494c 	.word	0x0800494c
  ldr r2, =_sbss
 8000df4:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8000df8:	20000354 	.word	0x20000354

08000dfc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dfc:	e7fe      	b.n	8000dfc <ADC_IRQHandler>
	...

08000e00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e04:	4b0e      	ldr	r3, [pc, #56]	@ (8000e40 <HAL_Init+0x40>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a0d      	ldr	r2, [pc, #52]	@ (8000e40 <HAL_Init+0x40>)
 8000e0a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e10:	4b0b      	ldr	r3, [pc, #44]	@ (8000e40 <HAL_Init+0x40>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a0a      	ldr	r2, [pc, #40]	@ (8000e40 <HAL_Init+0x40>)
 8000e16:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e1c:	4b08      	ldr	r3, [pc, #32]	@ (8000e40 <HAL_Init+0x40>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a07      	ldr	r2, [pc, #28]	@ (8000e40 <HAL_Init+0x40>)
 8000e22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e28:	2003      	movs	r0, #3
 8000e2a:	f000 f94f 	bl	80010cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e2e:	2000      	movs	r0, #0
 8000e30:	f000 f808 	bl	8000e44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e34:	f7ff fdf8 	bl	8000a28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e38:	2300      	movs	r3, #0
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	40023c00 	.word	0x40023c00

08000e44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e4c:	4b12      	ldr	r3, [pc, #72]	@ (8000e98 <HAL_InitTick+0x54>)
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	4b12      	ldr	r3, [pc, #72]	@ (8000e9c <HAL_InitTick+0x58>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	4619      	mov	r1, r3
 8000e56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e62:	4618      	mov	r0, r3
 8000e64:	f000 f967 	bl	8001136 <HAL_SYSTICK_Config>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e00e      	b.n	8000e90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2b0f      	cmp	r3, #15
 8000e76:	d80a      	bhi.n	8000e8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	6879      	ldr	r1, [r7, #4]
 8000e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e80:	f000 f92f 	bl	80010e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e84:	4a06      	ldr	r2, [pc, #24]	@ (8000ea0 <HAL_InitTick+0x5c>)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	e000      	b.n	8000e90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3708      	adds	r7, #8
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	2000002c 	.word	0x2000002c
 8000e9c:	20000034 	.word	0x20000034
 8000ea0:	20000030 	.word	0x20000030

08000ea4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ea8:	4b06      	ldr	r3, [pc, #24]	@ (8000ec4 <HAL_IncTick+0x20>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	461a      	mov	r2, r3
 8000eae:	4b06      	ldr	r3, [pc, #24]	@ (8000ec8 <HAL_IncTick+0x24>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	4a04      	ldr	r2, [pc, #16]	@ (8000ec8 <HAL_IncTick+0x24>)
 8000eb6:	6013      	str	r3, [r2, #0]
}
 8000eb8:	bf00      	nop
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	20000034 	.word	0x20000034
 8000ec8:	20000208 	.word	0x20000208

08000ecc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  return uwTick;
 8000ed0:	4b03      	ldr	r3, [pc, #12]	@ (8000ee0 <HAL_GetTick+0x14>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	20000208 	.word	0x20000208

08000ee4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000eec:	f7ff ffee 	bl	8000ecc <HAL_GetTick>
 8000ef0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000efc:	d005      	beq.n	8000f0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000efe:	4b0a      	ldr	r3, [pc, #40]	@ (8000f28 <HAL_Delay+0x44>)
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	461a      	mov	r2, r3
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	4413      	add	r3, r2
 8000f08:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f0a:	bf00      	nop
 8000f0c:	f7ff ffde 	bl	8000ecc <HAL_GetTick>
 8000f10:	4602      	mov	r2, r0
 8000f12:	68bb      	ldr	r3, [r7, #8]
 8000f14:	1ad3      	subs	r3, r2, r3
 8000f16:	68fa      	ldr	r2, [r7, #12]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	d8f7      	bhi.n	8000f0c <HAL_Delay+0x28>
  {
  }
}
 8000f1c:	bf00      	nop
 8000f1e:	bf00      	nop
 8000f20:	3710      	adds	r7, #16
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	20000034 	.word	0x20000034

08000f2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b085      	sub	sp, #20
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	f003 0307 	and.w	r3, r3, #7
 8000f3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f3c:	4b0c      	ldr	r3, [pc, #48]	@ (8000f70 <__NVIC_SetPriorityGrouping+0x44>)
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f42:	68ba      	ldr	r2, [r7, #8]
 8000f44:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f48:	4013      	ands	r3, r2
 8000f4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f54:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f5e:	4a04      	ldr	r2, [pc, #16]	@ (8000f70 <__NVIC_SetPriorityGrouping+0x44>)
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	60d3      	str	r3, [r2, #12]
}
 8000f64:	bf00      	nop
 8000f66:	3714      	adds	r7, #20
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr
 8000f70:	e000ed00 	.word	0xe000ed00

08000f74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f78:	4b04      	ldr	r3, [pc, #16]	@ (8000f8c <__NVIC_GetPriorityGrouping+0x18>)
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	0a1b      	lsrs	r3, r3, #8
 8000f7e:	f003 0307 	and.w	r3, r3, #7
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr
 8000f8c:	e000ed00 	.word	0xe000ed00

08000f90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	db0b      	blt.n	8000fba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fa2:	79fb      	ldrb	r3, [r7, #7]
 8000fa4:	f003 021f 	and.w	r2, r3, #31
 8000fa8:	4907      	ldr	r1, [pc, #28]	@ (8000fc8 <__NVIC_EnableIRQ+0x38>)
 8000faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fae:	095b      	lsrs	r3, r3, #5
 8000fb0:	2001      	movs	r0, #1
 8000fb2:	fa00 f202 	lsl.w	r2, r0, r2
 8000fb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fba:	bf00      	nop
 8000fbc:	370c      	adds	r7, #12
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	e000e100 	.word	0xe000e100

08000fcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	6039      	str	r1, [r7, #0]
 8000fd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	db0a      	blt.n	8000ff6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	b2da      	uxtb	r2, r3
 8000fe4:	490c      	ldr	r1, [pc, #48]	@ (8001018 <__NVIC_SetPriority+0x4c>)
 8000fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fea:	0112      	lsls	r2, r2, #4
 8000fec:	b2d2      	uxtb	r2, r2
 8000fee:	440b      	add	r3, r1
 8000ff0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ff4:	e00a      	b.n	800100c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	b2da      	uxtb	r2, r3
 8000ffa:	4908      	ldr	r1, [pc, #32]	@ (800101c <__NVIC_SetPriority+0x50>)
 8000ffc:	79fb      	ldrb	r3, [r7, #7]
 8000ffe:	f003 030f 	and.w	r3, r3, #15
 8001002:	3b04      	subs	r3, #4
 8001004:	0112      	lsls	r2, r2, #4
 8001006:	b2d2      	uxtb	r2, r2
 8001008:	440b      	add	r3, r1
 800100a:	761a      	strb	r2, [r3, #24]
}
 800100c:	bf00      	nop
 800100e:	370c      	adds	r7, #12
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr
 8001018:	e000e100 	.word	0xe000e100
 800101c:	e000ed00 	.word	0xe000ed00

08001020 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001020:	b480      	push	{r7}
 8001022:	b089      	sub	sp, #36	@ 0x24
 8001024:	af00      	add	r7, sp, #0
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	60b9      	str	r1, [r7, #8]
 800102a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	f003 0307 	and.w	r3, r3, #7
 8001032:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	f1c3 0307 	rsb	r3, r3, #7
 800103a:	2b04      	cmp	r3, #4
 800103c:	bf28      	it	cs
 800103e:	2304      	movcs	r3, #4
 8001040:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	3304      	adds	r3, #4
 8001046:	2b06      	cmp	r3, #6
 8001048:	d902      	bls.n	8001050 <NVIC_EncodePriority+0x30>
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	3b03      	subs	r3, #3
 800104e:	e000      	b.n	8001052 <NVIC_EncodePriority+0x32>
 8001050:	2300      	movs	r3, #0
 8001052:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001054:	f04f 32ff 	mov.w	r2, #4294967295
 8001058:	69bb      	ldr	r3, [r7, #24]
 800105a:	fa02 f303 	lsl.w	r3, r2, r3
 800105e:	43da      	mvns	r2, r3
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	401a      	ands	r2, r3
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001068:	f04f 31ff 	mov.w	r1, #4294967295
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	fa01 f303 	lsl.w	r3, r1, r3
 8001072:	43d9      	mvns	r1, r3
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001078:	4313      	orrs	r3, r2
         );
}
 800107a:	4618      	mov	r0, r3
 800107c:	3724      	adds	r7, #36	@ 0x24
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
	...

08001088 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	3b01      	subs	r3, #1
 8001094:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001098:	d301      	bcc.n	800109e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800109a:	2301      	movs	r3, #1
 800109c:	e00f      	b.n	80010be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800109e:	4a0a      	ldr	r2, [pc, #40]	@ (80010c8 <SysTick_Config+0x40>)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	3b01      	subs	r3, #1
 80010a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010a6:	210f      	movs	r1, #15
 80010a8:	f04f 30ff 	mov.w	r0, #4294967295
 80010ac:	f7ff ff8e 	bl	8000fcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010b0:	4b05      	ldr	r3, [pc, #20]	@ (80010c8 <SysTick_Config+0x40>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010b6:	4b04      	ldr	r3, [pc, #16]	@ (80010c8 <SysTick_Config+0x40>)
 80010b8:	2207      	movs	r2, #7
 80010ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010bc:	2300      	movs	r3, #0
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	e000e010 	.word	0xe000e010

080010cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f7ff ff29 	bl	8000f2c <__NVIC_SetPriorityGrouping>
}
 80010da:	bf00      	nop
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b086      	sub	sp, #24
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	4603      	mov	r3, r0
 80010ea:	60b9      	str	r1, [r7, #8]
 80010ec:	607a      	str	r2, [r7, #4]
 80010ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010f0:	2300      	movs	r3, #0
 80010f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010f4:	f7ff ff3e 	bl	8000f74 <__NVIC_GetPriorityGrouping>
 80010f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010fa:	687a      	ldr	r2, [r7, #4]
 80010fc:	68b9      	ldr	r1, [r7, #8]
 80010fe:	6978      	ldr	r0, [r7, #20]
 8001100:	f7ff ff8e 	bl	8001020 <NVIC_EncodePriority>
 8001104:	4602      	mov	r2, r0
 8001106:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800110a:	4611      	mov	r1, r2
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff ff5d 	bl	8000fcc <__NVIC_SetPriority>
}
 8001112:	bf00      	nop
 8001114:	3718      	adds	r7, #24
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}

0800111a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800111a:	b580      	push	{r7, lr}
 800111c:	b082      	sub	sp, #8
 800111e:	af00      	add	r7, sp, #0
 8001120:	4603      	mov	r3, r0
 8001122:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001124:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff ff31 	bl	8000f90 <__NVIC_EnableIRQ>
}
 800112e:	bf00      	nop
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b082      	sub	sp, #8
 800113a:	af00      	add	r7, sp, #0
 800113c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	f7ff ffa2 	bl	8001088 <SysTick_Config>
 8001144:	4603      	mov	r3, r0
}
 8001146:	4618      	mov	r0, r3
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
	...

08001150 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b086      	sub	sp, #24
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001158:	2300      	movs	r3, #0
 800115a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800115c:	f7ff feb6 	bl	8000ecc <HAL_GetTick>
 8001160:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d101      	bne.n	800116c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001168:	2301      	movs	r3, #1
 800116a:	e099      	b.n	80012a0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2202      	movs	r2, #2
 8001170:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2200      	movs	r2, #0
 8001178:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f022 0201 	bic.w	r2, r2, #1
 800118a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800118c:	e00f      	b.n	80011ae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800118e:	f7ff fe9d 	bl	8000ecc <HAL_GetTick>
 8001192:	4602      	mov	r2, r0
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	1ad3      	subs	r3, r2, r3
 8001198:	2b05      	cmp	r3, #5
 800119a:	d908      	bls.n	80011ae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2220      	movs	r2, #32
 80011a0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2203      	movs	r2, #3
 80011a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80011aa:	2303      	movs	r3, #3
 80011ac:	e078      	b.n	80012a0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f003 0301 	and.w	r3, r3, #1
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d1e8      	bne.n	800118e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80011c4:	697a      	ldr	r2, [r7, #20]
 80011c6:	4b38      	ldr	r3, [pc, #224]	@ (80012a8 <HAL_DMA_Init+0x158>)
 80011c8:	4013      	ands	r3, r2
 80011ca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	685a      	ldr	r2, [r3, #4]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011da:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	691b      	ldr	r3, [r3, #16]
 80011e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	699b      	ldr	r3, [r3, #24]
 80011ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6a1b      	ldr	r3, [r3, #32]
 80011f8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011fa:	697a      	ldr	r2, [r7, #20]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001204:	2b04      	cmp	r3, #4
 8001206:	d107      	bne.n	8001218 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001210:	4313      	orrs	r3, r2
 8001212:	697a      	ldr	r2, [r7, #20]
 8001214:	4313      	orrs	r3, r2
 8001216:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	697a      	ldr	r2, [r7, #20]
 800121e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	695b      	ldr	r3, [r3, #20]
 8001226:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	f023 0307 	bic.w	r3, r3, #7
 800122e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001234:	697a      	ldr	r2, [r7, #20]
 8001236:	4313      	orrs	r3, r2
 8001238:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800123e:	2b04      	cmp	r3, #4
 8001240:	d117      	bne.n	8001272 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001246:	697a      	ldr	r2, [r7, #20]
 8001248:	4313      	orrs	r3, r2
 800124a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001250:	2b00      	cmp	r3, #0
 8001252:	d00e      	beq.n	8001272 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	f000 f9e9 	bl	800162c <DMA_CheckFifoParam>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d008      	beq.n	8001272 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2240      	movs	r2, #64	@ 0x40
 8001264:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2201      	movs	r2, #1
 800126a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800126e:	2301      	movs	r3, #1
 8001270:	e016      	b.n	80012a0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	697a      	ldr	r2, [r7, #20]
 8001278:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f000 f9a0 	bl	80015c0 <DMA_CalcBaseAndBitshift>
 8001280:	4603      	mov	r3, r0
 8001282:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001288:	223f      	movs	r2, #63	@ 0x3f
 800128a:	409a      	lsls	r2, r3
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2200      	movs	r2, #0
 8001294:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2201      	movs	r2, #1
 800129a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800129e:	2300      	movs	r3, #0
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3718      	adds	r7, #24
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	f010803f 	.word	0xf010803f

080012ac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b086      	sub	sp, #24
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80012b4:	2300      	movs	r3, #0
 80012b6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80012b8:	4b8e      	ldr	r3, [pc, #568]	@ (80014f4 <HAL_DMA_IRQHandler+0x248>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a8e      	ldr	r2, [pc, #568]	@ (80014f8 <HAL_DMA_IRQHandler+0x24c>)
 80012be:	fba2 2303 	umull	r2, r3, r2, r3
 80012c2:	0a9b      	lsrs	r3, r3, #10
 80012c4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012ca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012d6:	2208      	movs	r2, #8
 80012d8:	409a      	lsls	r2, r3
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	4013      	ands	r3, r2
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d01a      	beq.n	8001318 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f003 0304 	and.w	r3, r3, #4
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d013      	beq.n	8001318 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f022 0204 	bic.w	r2, r2, #4
 80012fe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001304:	2208      	movs	r2, #8
 8001306:	409a      	lsls	r2, r3
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001310:	f043 0201 	orr.w	r2, r3, #1
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800131c:	2201      	movs	r2, #1
 800131e:	409a      	lsls	r2, r3
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	4013      	ands	r3, r2
 8001324:	2b00      	cmp	r3, #0
 8001326:	d012      	beq.n	800134e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	695b      	ldr	r3, [r3, #20]
 800132e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001332:	2b00      	cmp	r3, #0
 8001334:	d00b      	beq.n	800134e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800133a:	2201      	movs	r2, #1
 800133c:	409a      	lsls	r2, r3
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001346:	f043 0202 	orr.w	r2, r3, #2
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001352:	2204      	movs	r2, #4
 8001354:	409a      	lsls	r2, r3
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	4013      	ands	r3, r2
 800135a:	2b00      	cmp	r3, #0
 800135c:	d012      	beq.n	8001384 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f003 0302 	and.w	r3, r3, #2
 8001368:	2b00      	cmp	r3, #0
 800136a:	d00b      	beq.n	8001384 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001370:	2204      	movs	r2, #4
 8001372:	409a      	lsls	r2, r3
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800137c:	f043 0204 	orr.w	r2, r3, #4
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001388:	2210      	movs	r2, #16
 800138a:	409a      	lsls	r2, r3
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	4013      	ands	r3, r2
 8001390:	2b00      	cmp	r3, #0
 8001392:	d043      	beq.n	800141c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f003 0308 	and.w	r3, r3, #8
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d03c      	beq.n	800141c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013a6:	2210      	movs	r2, #16
 80013a8:	409a      	lsls	r2, r3
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d018      	beq.n	80013ee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d108      	bne.n	80013dc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d024      	beq.n	800141c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	4798      	blx	r3
 80013da:	e01f      	b.n	800141c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d01b      	beq.n	800141c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	4798      	blx	r3
 80013ec:	e016      	b.n	800141c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d107      	bne.n	800140c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f022 0208 	bic.w	r2, r2, #8
 800140a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001410:	2b00      	cmp	r3, #0
 8001412:	d003      	beq.n	800141c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001420:	2220      	movs	r2, #32
 8001422:	409a      	lsls	r2, r3
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	4013      	ands	r3, r2
 8001428:	2b00      	cmp	r3, #0
 800142a:	f000 808f 	beq.w	800154c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 0310 	and.w	r3, r3, #16
 8001438:	2b00      	cmp	r3, #0
 800143a:	f000 8087 	beq.w	800154c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001442:	2220      	movs	r2, #32
 8001444:	409a      	lsls	r2, r3
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001450:	b2db      	uxtb	r3, r3
 8001452:	2b05      	cmp	r3, #5
 8001454:	d136      	bne.n	80014c4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f022 0216 	bic.w	r2, r2, #22
 8001464:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	695a      	ldr	r2, [r3, #20]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001474:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800147a:	2b00      	cmp	r3, #0
 800147c:	d103      	bne.n	8001486 <HAL_DMA_IRQHandler+0x1da>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001482:	2b00      	cmp	r3, #0
 8001484:	d007      	beq.n	8001496 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f022 0208 	bic.w	r2, r2, #8
 8001494:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800149a:	223f      	movs	r2, #63	@ 0x3f
 800149c:	409a      	lsls	r2, r3
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2201      	movs	r2, #1
 80014a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2200      	movs	r2, #0
 80014ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d07e      	beq.n	80015b8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	4798      	blx	r3
        }
        return;
 80014c2:	e079      	b.n	80015b8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d01d      	beq.n	800150e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d10d      	bne.n	80014fc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d031      	beq.n	800154c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	4798      	blx	r3
 80014f0:	e02c      	b.n	800154c <HAL_DMA_IRQHandler+0x2a0>
 80014f2:	bf00      	nop
 80014f4:	2000002c 	.word	0x2000002c
 80014f8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001500:	2b00      	cmp	r3, #0
 8001502:	d023      	beq.n	800154c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	4798      	blx	r3
 800150c:	e01e      	b.n	800154c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001518:	2b00      	cmp	r3, #0
 800151a:	d10f      	bne.n	800153c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f022 0210 	bic.w	r2, r2, #16
 800152a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2201      	movs	r2, #1
 8001530:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2200      	movs	r2, #0
 8001538:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001540:	2b00      	cmp	r3, #0
 8001542:	d003      	beq.n	800154c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001550:	2b00      	cmp	r3, #0
 8001552:	d032      	beq.n	80015ba <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001558:	f003 0301 	and.w	r3, r3, #1
 800155c:	2b00      	cmp	r3, #0
 800155e:	d022      	beq.n	80015a6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2205      	movs	r2, #5
 8001564:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f022 0201 	bic.w	r2, r2, #1
 8001576:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	3301      	adds	r3, #1
 800157c:	60bb      	str	r3, [r7, #8]
 800157e:	697a      	ldr	r2, [r7, #20]
 8001580:	429a      	cmp	r2, r3
 8001582:	d307      	bcc.n	8001594 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 0301 	and.w	r3, r3, #1
 800158e:	2b00      	cmp	r3, #0
 8001590:	d1f2      	bne.n	8001578 <HAL_DMA_IRQHandler+0x2cc>
 8001592:	e000      	b.n	8001596 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001594:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2201      	movs	r2, #1
 800159a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2200      	movs	r2, #0
 80015a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d005      	beq.n	80015ba <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	4798      	blx	r3
 80015b6:	e000      	b.n	80015ba <HAL_DMA_IRQHandler+0x30e>
        return;
 80015b8:	bf00      	nop
    }
  }
}
 80015ba:	3718      	adds	r7, #24
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}

080015c0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b085      	sub	sp, #20
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	3b10      	subs	r3, #16
 80015d0:	4a14      	ldr	r2, [pc, #80]	@ (8001624 <DMA_CalcBaseAndBitshift+0x64>)
 80015d2:	fba2 2303 	umull	r2, r3, r2, r3
 80015d6:	091b      	lsrs	r3, r3, #4
 80015d8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80015da:	4a13      	ldr	r2, [pc, #76]	@ (8001628 <DMA_CalcBaseAndBitshift+0x68>)
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	4413      	add	r3, r2
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	461a      	mov	r2, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	2b03      	cmp	r3, #3
 80015ec:	d909      	bls.n	8001602 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80015f6:	f023 0303 	bic.w	r3, r3, #3
 80015fa:	1d1a      	adds	r2, r3, #4
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	659a      	str	r2, [r3, #88]	@ 0x58
 8001600:	e007      	b.n	8001612 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800160a:	f023 0303 	bic.w	r3, r3, #3
 800160e:	687a      	ldr	r2, [r7, #4]
 8001610:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001616:	4618      	mov	r0, r3
 8001618:	3714      	adds	r7, #20
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	aaaaaaab 	.word	0xaaaaaaab
 8001628:	08004900 	.word	0x08004900

0800162c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800162c:	b480      	push	{r7}
 800162e:	b085      	sub	sp, #20
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001634:	2300      	movs	r3, #0
 8001636:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800163c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	699b      	ldr	r3, [r3, #24]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d11f      	bne.n	8001686 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001646:	68bb      	ldr	r3, [r7, #8]
 8001648:	2b03      	cmp	r3, #3
 800164a:	d856      	bhi.n	80016fa <DMA_CheckFifoParam+0xce>
 800164c:	a201      	add	r2, pc, #4	@ (adr r2, 8001654 <DMA_CheckFifoParam+0x28>)
 800164e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001652:	bf00      	nop
 8001654:	08001665 	.word	0x08001665
 8001658:	08001677 	.word	0x08001677
 800165c:	08001665 	.word	0x08001665
 8001660:	080016fb 	.word	0x080016fb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001668:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800166c:	2b00      	cmp	r3, #0
 800166e:	d046      	beq.n	80016fe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001674:	e043      	b.n	80016fe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800167a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800167e:	d140      	bne.n	8001702 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001684:	e03d      	b.n	8001702 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	699b      	ldr	r3, [r3, #24]
 800168a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800168e:	d121      	bne.n	80016d4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	2b03      	cmp	r3, #3
 8001694:	d837      	bhi.n	8001706 <DMA_CheckFifoParam+0xda>
 8001696:	a201      	add	r2, pc, #4	@ (adr r2, 800169c <DMA_CheckFifoParam+0x70>)
 8001698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800169c:	080016ad 	.word	0x080016ad
 80016a0:	080016b3 	.word	0x080016b3
 80016a4:	080016ad 	.word	0x080016ad
 80016a8:	080016c5 	.word	0x080016c5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	73fb      	strb	r3, [r7, #15]
      break;
 80016b0:	e030      	b.n	8001714 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016b6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d025      	beq.n	800170a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80016c2:	e022      	b.n	800170a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016c8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80016cc:	d11f      	bne.n	800170e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80016d2:	e01c      	b.n	800170e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d903      	bls.n	80016e2 <DMA_CheckFifoParam+0xb6>
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	2b03      	cmp	r3, #3
 80016de:	d003      	beq.n	80016e8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80016e0:	e018      	b.n	8001714 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	73fb      	strb	r3, [r7, #15]
      break;
 80016e6:	e015      	b.n	8001714 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016ec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d00e      	beq.n	8001712 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	73fb      	strb	r3, [r7, #15]
      break;
 80016f8:	e00b      	b.n	8001712 <DMA_CheckFifoParam+0xe6>
      break;
 80016fa:	bf00      	nop
 80016fc:	e00a      	b.n	8001714 <DMA_CheckFifoParam+0xe8>
      break;
 80016fe:	bf00      	nop
 8001700:	e008      	b.n	8001714 <DMA_CheckFifoParam+0xe8>
      break;
 8001702:	bf00      	nop
 8001704:	e006      	b.n	8001714 <DMA_CheckFifoParam+0xe8>
      break;
 8001706:	bf00      	nop
 8001708:	e004      	b.n	8001714 <DMA_CheckFifoParam+0xe8>
      break;
 800170a:	bf00      	nop
 800170c:	e002      	b.n	8001714 <DMA_CheckFifoParam+0xe8>
      break;   
 800170e:	bf00      	nop
 8001710:	e000      	b.n	8001714 <DMA_CheckFifoParam+0xe8>
      break;
 8001712:	bf00      	nop
    }
  } 
  
  return status; 
 8001714:	7bfb      	ldrb	r3, [r7, #15]
}
 8001716:	4618      	mov	r0, r3
 8001718:	3714      	adds	r7, #20
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop

08001724 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001724:	b480      	push	{r7}
 8001726:	b089      	sub	sp, #36	@ 0x24
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800172e:	2300      	movs	r3, #0
 8001730:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001732:	2300      	movs	r3, #0
 8001734:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001736:	2300      	movs	r3, #0
 8001738:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800173a:	2300      	movs	r3, #0
 800173c:	61fb      	str	r3, [r7, #28]
 800173e:	e165      	b.n	8001a0c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001740:	2201      	movs	r2, #1
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	697a      	ldr	r2, [r7, #20]
 8001750:	4013      	ands	r3, r2
 8001752:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001754:	693a      	ldr	r2, [r7, #16]
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	429a      	cmp	r2, r3
 800175a:	f040 8154 	bne.w	8001a06 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f003 0303 	and.w	r3, r3, #3
 8001766:	2b01      	cmp	r3, #1
 8001768:	d005      	beq.n	8001776 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001772:	2b02      	cmp	r3, #2
 8001774:	d130      	bne.n	80017d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	005b      	lsls	r3, r3, #1
 8001780:	2203      	movs	r2, #3
 8001782:	fa02 f303 	lsl.w	r3, r2, r3
 8001786:	43db      	mvns	r3, r3
 8001788:	69ba      	ldr	r2, [r7, #24]
 800178a:	4013      	ands	r3, r2
 800178c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	68da      	ldr	r2, [r3, #12]
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	005b      	lsls	r3, r3, #1
 8001796:	fa02 f303 	lsl.w	r3, r2, r3
 800179a:	69ba      	ldr	r2, [r7, #24]
 800179c:	4313      	orrs	r3, r2
 800179e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	69ba      	ldr	r2, [r7, #24]
 80017a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017ac:	2201      	movs	r2, #1
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	fa02 f303 	lsl.w	r3, r2, r3
 80017b4:	43db      	mvns	r3, r3
 80017b6:	69ba      	ldr	r2, [r7, #24]
 80017b8:	4013      	ands	r3, r2
 80017ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	091b      	lsrs	r3, r3, #4
 80017c2:	f003 0201 	and.w	r2, r3, #1
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	fa02 f303 	lsl.w	r3, r2, r3
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	4313      	orrs	r3, r2
 80017d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	69ba      	ldr	r2, [r7, #24]
 80017d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f003 0303 	and.w	r3, r3, #3
 80017e0:	2b03      	cmp	r3, #3
 80017e2:	d017      	beq.n	8001814 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	005b      	lsls	r3, r3, #1
 80017ee:	2203      	movs	r2, #3
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	43db      	mvns	r3, r3
 80017f6:	69ba      	ldr	r2, [r7, #24]
 80017f8:	4013      	ands	r3, r2
 80017fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	689a      	ldr	r2, [r3, #8]
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	fa02 f303 	lsl.w	r3, r2, r3
 8001808:	69ba      	ldr	r2, [r7, #24]
 800180a:	4313      	orrs	r3, r2
 800180c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	69ba      	ldr	r2, [r7, #24]
 8001812:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f003 0303 	and.w	r3, r3, #3
 800181c:	2b02      	cmp	r3, #2
 800181e:	d123      	bne.n	8001868 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	08da      	lsrs	r2, r3, #3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	3208      	adds	r2, #8
 8001828:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800182c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	f003 0307 	and.w	r3, r3, #7
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	220f      	movs	r2, #15
 8001838:	fa02 f303 	lsl.w	r3, r2, r3
 800183c:	43db      	mvns	r3, r3
 800183e:	69ba      	ldr	r2, [r7, #24]
 8001840:	4013      	ands	r3, r2
 8001842:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	691a      	ldr	r2, [r3, #16]
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	f003 0307 	and.w	r3, r3, #7
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	fa02 f303 	lsl.w	r3, r2, r3
 8001854:	69ba      	ldr	r2, [r7, #24]
 8001856:	4313      	orrs	r3, r2
 8001858:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	08da      	lsrs	r2, r3, #3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	3208      	adds	r2, #8
 8001862:	69b9      	ldr	r1, [r7, #24]
 8001864:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	005b      	lsls	r3, r3, #1
 8001872:	2203      	movs	r2, #3
 8001874:	fa02 f303 	lsl.w	r3, r2, r3
 8001878:	43db      	mvns	r3, r3
 800187a:	69ba      	ldr	r2, [r7, #24]
 800187c:	4013      	ands	r3, r2
 800187e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f003 0203 	and.w	r2, r3, #3
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	005b      	lsls	r3, r3, #1
 800188c:	fa02 f303 	lsl.w	r3, r2, r3
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	4313      	orrs	r3, r2
 8001894:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	69ba      	ldr	r2, [r7, #24]
 800189a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	f000 80ae 	beq.w	8001a06 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018aa:	2300      	movs	r3, #0
 80018ac:	60fb      	str	r3, [r7, #12]
 80018ae:	4b5d      	ldr	r3, [pc, #372]	@ (8001a24 <HAL_GPIO_Init+0x300>)
 80018b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018b2:	4a5c      	ldr	r2, [pc, #368]	@ (8001a24 <HAL_GPIO_Init+0x300>)
 80018b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80018ba:	4b5a      	ldr	r3, [pc, #360]	@ (8001a24 <HAL_GPIO_Init+0x300>)
 80018bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018c2:	60fb      	str	r3, [r7, #12]
 80018c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018c6:	4a58      	ldr	r2, [pc, #352]	@ (8001a28 <HAL_GPIO_Init+0x304>)
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	089b      	lsrs	r3, r3, #2
 80018cc:	3302      	adds	r3, #2
 80018ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	f003 0303 	and.w	r3, r3, #3
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	220f      	movs	r2, #15
 80018de:	fa02 f303 	lsl.w	r3, r2, r3
 80018e2:	43db      	mvns	r3, r3
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	4013      	ands	r3, r2
 80018e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4a4f      	ldr	r2, [pc, #316]	@ (8001a2c <HAL_GPIO_Init+0x308>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d025      	beq.n	800193e <HAL_GPIO_Init+0x21a>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4a4e      	ldr	r2, [pc, #312]	@ (8001a30 <HAL_GPIO_Init+0x30c>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d01f      	beq.n	800193a <HAL_GPIO_Init+0x216>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4a4d      	ldr	r2, [pc, #308]	@ (8001a34 <HAL_GPIO_Init+0x310>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d019      	beq.n	8001936 <HAL_GPIO_Init+0x212>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4a4c      	ldr	r2, [pc, #304]	@ (8001a38 <HAL_GPIO_Init+0x314>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d013      	beq.n	8001932 <HAL_GPIO_Init+0x20e>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4a4b      	ldr	r2, [pc, #300]	@ (8001a3c <HAL_GPIO_Init+0x318>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d00d      	beq.n	800192e <HAL_GPIO_Init+0x20a>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4a4a      	ldr	r2, [pc, #296]	@ (8001a40 <HAL_GPIO_Init+0x31c>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d007      	beq.n	800192a <HAL_GPIO_Init+0x206>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4a49      	ldr	r2, [pc, #292]	@ (8001a44 <HAL_GPIO_Init+0x320>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d101      	bne.n	8001926 <HAL_GPIO_Init+0x202>
 8001922:	2306      	movs	r3, #6
 8001924:	e00c      	b.n	8001940 <HAL_GPIO_Init+0x21c>
 8001926:	2307      	movs	r3, #7
 8001928:	e00a      	b.n	8001940 <HAL_GPIO_Init+0x21c>
 800192a:	2305      	movs	r3, #5
 800192c:	e008      	b.n	8001940 <HAL_GPIO_Init+0x21c>
 800192e:	2304      	movs	r3, #4
 8001930:	e006      	b.n	8001940 <HAL_GPIO_Init+0x21c>
 8001932:	2303      	movs	r3, #3
 8001934:	e004      	b.n	8001940 <HAL_GPIO_Init+0x21c>
 8001936:	2302      	movs	r3, #2
 8001938:	e002      	b.n	8001940 <HAL_GPIO_Init+0x21c>
 800193a:	2301      	movs	r3, #1
 800193c:	e000      	b.n	8001940 <HAL_GPIO_Init+0x21c>
 800193e:	2300      	movs	r3, #0
 8001940:	69fa      	ldr	r2, [r7, #28]
 8001942:	f002 0203 	and.w	r2, r2, #3
 8001946:	0092      	lsls	r2, r2, #2
 8001948:	4093      	lsls	r3, r2
 800194a:	69ba      	ldr	r2, [r7, #24]
 800194c:	4313      	orrs	r3, r2
 800194e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001950:	4935      	ldr	r1, [pc, #212]	@ (8001a28 <HAL_GPIO_Init+0x304>)
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	089b      	lsrs	r3, r3, #2
 8001956:	3302      	adds	r3, #2
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800195e:	4b3a      	ldr	r3, [pc, #232]	@ (8001a48 <HAL_GPIO_Init+0x324>)
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	43db      	mvns	r3, r3
 8001968:	69ba      	ldr	r2, [r7, #24]
 800196a:	4013      	ands	r3, r2
 800196c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d003      	beq.n	8001982 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	4313      	orrs	r3, r2
 8001980:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001982:	4a31      	ldr	r2, [pc, #196]	@ (8001a48 <HAL_GPIO_Init+0x324>)
 8001984:	69bb      	ldr	r3, [r7, #24]
 8001986:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001988:	4b2f      	ldr	r3, [pc, #188]	@ (8001a48 <HAL_GPIO_Init+0x324>)
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	43db      	mvns	r3, r3
 8001992:	69ba      	ldr	r2, [r7, #24]
 8001994:	4013      	ands	r3, r2
 8001996:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d003      	beq.n	80019ac <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019ac:	4a26      	ldr	r2, [pc, #152]	@ (8001a48 <HAL_GPIO_Init+0x324>)
 80019ae:	69bb      	ldr	r3, [r7, #24]
 80019b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019b2:	4b25      	ldr	r3, [pc, #148]	@ (8001a48 <HAL_GPIO_Init+0x324>)
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	43db      	mvns	r3, r3
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	4013      	ands	r3, r2
 80019c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d003      	beq.n	80019d6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80019ce:	69ba      	ldr	r2, [r7, #24]
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019d6:	4a1c      	ldr	r2, [pc, #112]	@ (8001a48 <HAL_GPIO_Init+0x324>)
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019dc:	4b1a      	ldr	r3, [pc, #104]	@ (8001a48 <HAL_GPIO_Init+0x324>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	43db      	mvns	r3, r3
 80019e6:	69ba      	ldr	r2, [r7, #24]
 80019e8:	4013      	ands	r3, r2
 80019ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d003      	beq.n	8001a00 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	4313      	orrs	r3, r2
 80019fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a00:	4a11      	ldr	r2, [pc, #68]	@ (8001a48 <HAL_GPIO_Init+0x324>)
 8001a02:	69bb      	ldr	r3, [r7, #24]
 8001a04:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	3301      	adds	r3, #1
 8001a0a:	61fb      	str	r3, [r7, #28]
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	2b0f      	cmp	r3, #15
 8001a10:	f67f ae96 	bls.w	8001740 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a14:	bf00      	nop
 8001a16:	bf00      	nop
 8001a18:	3724      	adds	r7, #36	@ 0x24
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	40023800 	.word	0x40023800
 8001a28:	40013800 	.word	0x40013800
 8001a2c:	40020000 	.word	0x40020000
 8001a30:	40020400 	.word	0x40020400
 8001a34:	40020800 	.word	0x40020800
 8001a38:	40020c00 	.word	0x40020c00
 8001a3c:	40021000 	.word	0x40021000
 8001a40:	40021400 	.word	0x40021400
 8001a44:	40021800 	.word	0x40021800
 8001a48:	40013c00 	.word	0x40013c00

08001a4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	460b      	mov	r3, r1
 8001a56:	807b      	strh	r3, [r7, #2]
 8001a58:	4613      	mov	r3, r2
 8001a5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a5c:	787b      	ldrb	r3, [r7, #1]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d003      	beq.n	8001a6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a62:	887a      	ldrh	r2, [r7, #2]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a68:	e003      	b.n	8001a72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a6a:	887b      	ldrh	r3, [r7, #2]
 8001a6c:	041a      	lsls	r2, r3, #16
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	619a      	str	r2, [r3, #24]
}
 8001a72:	bf00      	nop
 8001a74:	370c      	adds	r7, #12
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
	...

08001a80 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d101      	bne.n	8001a92 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e12b      	b.n	8001cea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d106      	bne.n	8001aac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f7fe ffe6 	bl	8000a78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2224      	movs	r2, #36	@ 0x24
 8001ab0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f022 0201 	bic.w	r2, r2, #1
 8001ac2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001ad2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001ae2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ae4:	f000 fbaa 	bl	800223c <HAL_RCC_GetPCLK1Freq>
 8001ae8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	4a81      	ldr	r2, [pc, #516]	@ (8001cf4 <HAL_I2C_Init+0x274>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d807      	bhi.n	8001b04 <HAL_I2C_Init+0x84>
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	4a80      	ldr	r2, [pc, #512]	@ (8001cf8 <HAL_I2C_Init+0x278>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	bf94      	ite	ls
 8001afc:	2301      	movls	r3, #1
 8001afe:	2300      	movhi	r3, #0
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	e006      	b.n	8001b12 <HAL_I2C_Init+0x92>
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	4a7d      	ldr	r2, [pc, #500]	@ (8001cfc <HAL_I2C_Init+0x27c>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	bf94      	ite	ls
 8001b0c:	2301      	movls	r3, #1
 8001b0e:	2300      	movhi	r3, #0
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e0e7      	b.n	8001cea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	4a78      	ldr	r2, [pc, #480]	@ (8001d00 <HAL_I2C_Init+0x280>)
 8001b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b22:	0c9b      	lsrs	r3, r3, #18
 8001b24:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	68ba      	ldr	r2, [r7, #8]
 8001b36:	430a      	orrs	r2, r1
 8001b38:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	6a1b      	ldr	r3, [r3, #32]
 8001b40:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	4a6a      	ldr	r2, [pc, #424]	@ (8001cf4 <HAL_I2C_Init+0x274>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d802      	bhi.n	8001b54 <HAL_I2C_Init+0xd4>
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	3301      	adds	r3, #1
 8001b52:	e009      	b.n	8001b68 <HAL_I2C_Init+0xe8>
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001b5a:	fb02 f303 	mul.w	r3, r2, r3
 8001b5e:	4a69      	ldr	r2, [pc, #420]	@ (8001d04 <HAL_I2C_Init+0x284>)
 8001b60:	fba2 2303 	umull	r2, r3, r2, r3
 8001b64:	099b      	lsrs	r3, r3, #6
 8001b66:	3301      	adds	r3, #1
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	6812      	ldr	r2, [r2, #0]
 8001b6c:	430b      	orrs	r3, r1
 8001b6e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	69db      	ldr	r3, [r3, #28]
 8001b76:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001b7a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	495c      	ldr	r1, [pc, #368]	@ (8001cf4 <HAL_I2C_Init+0x274>)
 8001b84:	428b      	cmp	r3, r1
 8001b86:	d819      	bhi.n	8001bbc <HAL_I2C_Init+0x13c>
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	1e59      	subs	r1, r3, #1
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b96:	1c59      	adds	r1, r3, #1
 8001b98:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001b9c:	400b      	ands	r3, r1
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d00a      	beq.n	8001bb8 <HAL_I2C_Init+0x138>
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	1e59      	subs	r1, r3, #1
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	005b      	lsls	r3, r3, #1
 8001bac:	fbb1 f3f3 	udiv	r3, r1, r3
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bb6:	e051      	b.n	8001c5c <HAL_I2C_Init+0x1dc>
 8001bb8:	2304      	movs	r3, #4
 8001bba:	e04f      	b.n	8001c5c <HAL_I2C_Init+0x1dc>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d111      	bne.n	8001be8 <HAL_I2C_Init+0x168>
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	1e58      	subs	r0, r3, #1
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6859      	ldr	r1, [r3, #4]
 8001bcc:	460b      	mov	r3, r1
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	440b      	add	r3, r1
 8001bd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	bf0c      	ite	eq
 8001be0:	2301      	moveq	r3, #1
 8001be2:	2300      	movne	r3, #0
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	e012      	b.n	8001c0e <HAL_I2C_Init+0x18e>
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	1e58      	subs	r0, r3, #1
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6859      	ldr	r1, [r3, #4]
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	440b      	add	r3, r1
 8001bf6:	0099      	lsls	r1, r3, #2
 8001bf8:	440b      	add	r3, r1
 8001bfa:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bfe:	3301      	adds	r3, #1
 8001c00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	bf0c      	ite	eq
 8001c08:	2301      	moveq	r3, #1
 8001c0a:	2300      	movne	r3, #0
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <HAL_I2C_Init+0x196>
 8001c12:	2301      	movs	r3, #1
 8001c14:	e022      	b.n	8001c5c <HAL_I2C_Init+0x1dc>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d10e      	bne.n	8001c3c <HAL_I2C_Init+0x1bc>
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	1e58      	subs	r0, r3, #1
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6859      	ldr	r1, [r3, #4]
 8001c26:	460b      	mov	r3, r1
 8001c28:	005b      	lsls	r3, r3, #1
 8001c2a:	440b      	add	r3, r1
 8001c2c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c30:	3301      	adds	r3, #1
 8001c32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c36:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c3a:	e00f      	b.n	8001c5c <HAL_I2C_Init+0x1dc>
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	1e58      	subs	r0, r3, #1
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6859      	ldr	r1, [r3, #4]
 8001c44:	460b      	mov	r3, r1
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	440b      	add	r3, r1
 8001c4a:	0099      	lsls	r1, r3, #2
 8001c4c:	440b      	add	r3, r1
 8001c4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c52:	3301      	adds	r3, #1
 8001c54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c58:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001c5c:	6879      	ldr	r1, [r7, #4]
 8001c5e:	6809      	ldr	r1, [r1, #0]
 8001c60:	4313      	orrs	r3, r2
 8001c62:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	69da      	ldr	r2, [r3, #28]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6a1b      	ldr	r3, [r3, #32]
 8001c76:	431a      	orrs	r2, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	430a      	orrs	r2, r1
 8001c7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001c8a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	6911      	ldr	r1, [r2, #16]
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	68d2      	ldr	r2, [r2, #12]
 8001c96:	4311      	orrs	r1, r2
 8001c98:	687a      	ldr	r2, [r7, #4]
 8001c9a:	6812      	ldr	r2, [r2, #0]
 8001c9c:	430b      	orrs	r3, r1
 8001c9e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	68db      	ldr	r3, [r3, #12]
 8001ca6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	695a      	ldr	r2, [r3, #20]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	699b      	ldr	r3, [r3, #24]
 8001cb2:	431a      	orrs	r2, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	430a      	orrs	r2, r1
 8001cba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f042 0201 	orr.w	r2, r2, #1
 8001cca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2220      	movs	r2, #32
 8001cd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001ce8:	2300      	movs	r3, #0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3710      	adds	r7, #16
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	000186a0 	.word	0x000186a0
 8001cf8:	001e847f 	.word	0x001e847f
 8001cfc:	003d08ff 	.word	0x003d08ff
 8001d00:	431bde83 	.word	0x431bde83
 8001d04:	10624dd3 	.word	0x10624dd3

08001d08 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b08a      	sub	sp, #40	@ 0x28
 8001d0c:	af02      	add	r7, sp, #8
 8001d0e:	60f8      	str	r0, [r7, #12]
 8001d10:	607a      	str	r2, [r7, #4]
 8001d12:	603b      	str	r3, [r7, #0]
 8001d14:	460b      	mov	r3, r1
 8001d16:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001d18:	f7ff f8d8 	bl	8000ecc <HAL_GetTick>
 8001d1c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	2b20      	cmp	r3, #32
 8001d2c:	f040 8111 	bne.w	8001f52 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	9300      	str	r3, [sp, #0]
 8001d34:	2319      	movs	r3, #25
 8001d36:	2201      	movs	r2, #1
 8001d38:	4988      	ldr	r1, [pc, #544]	@ (8001f5c <HAL_I2C_IsDeviceReady+0x254>)
 8001d3a:	68f8      	ldr	r0, [r7, #12]
 8001d3c:	f000 f912 	bl	8001f64 <I2C_WaitOnFlagUntilTimeout>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001d46:	2302      	movs	r3, #2
 8001d48:	e104      	b.n	8001f54 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d101      	bne.n	8001d58 <HAL_I2C_IsDeviceReady+0x50>
 8001d54:	2302      	movs	r3, #2
 8001d56:	e0fd      	b.n	8001f54 <HAL_I2C_IsDeviceReady+0x24c>
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0301 	and.w	r3, r3, #1
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d007      	beq.n	8001d7e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f042 0201 	orr.w	r2, r2, #1
 8001d7c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d8c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	2224      	movs	r2, #36	@ 0x24
 8001d92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	4a70      	ldr	r2, [pc, #448]	@ (8001f60 <HAL_I2C_IsDeviceReady+0x258>)
 8001da0:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001db0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	9300      	str	r3, [sp, #0]
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	2200      	movs	r2, #0
 8001dba:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001dbe:	68f8      	ldr	r0, [r7, #12]
 8001dc0:	f000 f8d0 	bl	8001f64 <I2C_WaitOnFlagUntilTimeout>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d00d      	beq.n	8001de6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dd4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001dd8:	d103      	bne.n	8001de2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001de0:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e0b6      	b.n	8001f54 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001de6:	897b      	ldrh	r3, [r7, #10]
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	461a      	mov	r2, r3
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001df4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001df6:	f7ff f869 	bl	8000ecc <HAL_GetTick>
 8001dfa:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	695b      	ldr	r3, [r3, #20]
 8001e02:	f003 0302 	and.w	r3, r3, #2
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	bf0c      	ite	eq
 8001e0a:	2301      	moveq	r3, #1
 8001e0c:	2300      	movne	r3, #0
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	695b      	ldr	r3, [r3, #20]
 8001e18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e20:	bf0c      	ite	eq
 8001e22:	2301      	moveq	r3, #1
 8001e24:	2300      	movne	r3, #0
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001e2a:	e025      	b.n	8001e78 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001e2c:	f7ff f84e 	bl	8000ecc <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	683a      	ldr	r2, [r7, #0]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d302      	bcc.n	8001e42 <HAL_I2C_IsDeviceReady+0x13a>
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d103      	bne.n	8001e4a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	22a0      	movs	r2, #160	@ 0xa0
 8001e46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	695b      	ldr	r3, [r3, #20]
 8001e50:	f003 0302 	and.w	r3, r3, #2
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	bf0c      	ite	eq
 8001e58:	2301      	moveq	r3, #1
 8001e5a:	2300      	movne	r3, #0
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	695b      	ldr	r3, [r3, #20]
 8001e66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e6e:	bf0c      	ite	eq
 8001e70:	2301      	moveq	r3, #1
 8001e72:	2300      	movne	r3, #0
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	2ba0      	cmp	r3, #160	@ 0xa0
 8001e82:	d005      	beq.n	8001e90 <HAL_I2C_IsDeviceReady+0x188>
 8001e84:	7dfb      	ldrb	r3, [r7, #23]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d102      	bne.n	8001e90 <HAL_I2C_IsDeviceReady+0x188>
 8001e8a:	7dbb      	ldrb	r3, [r7, #22]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d0cd      	beq.n	8001e2c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2220      	movs	r2, #32
 8001e94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	695b      	ldr	r3, [r3, #20]
 8001e9e:	f003 0302 	and.w	r3, r3, #2
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d129      	bne.n	8001efa <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001eb4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	613b      	str	r3, [r7, #16]
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	695b      	ldr	r3, [r3, #20]
 8001ec0:	613b      	str	r3, [r7, #16]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	699b      	ldr	r3, [r3, #24]
 8001ec8:	613b      	str	r3, [r7, #16]
 8001eca:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	9300      	str	r3, [sp, #0]
 8001ed0:	2319      	movs	r3, #25
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	4921      	ldr	r1, [pc, #132]	@ (8001f5c <HAL_I2C_IsDeviceReady+0x254>)
 8001ed6:	68f8      	ldr	r0, [r7, #12]
 8001ed8:	f000 f844 	bl	8001f64 <I2C_WaitOnFlagUntilTimeout>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d001      	beq.n	8001ee6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e036      	b.n	8001f54 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2220      	movs	r2, #32
 8001eea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	e02c      	b.n	8001f54 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f08:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001f12:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	9300      	str	r3, [sp, #0]
 8001f18:	2319      	movs	r3, #25
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	490f      	ldr	r1, [pc, #60]	@ (8001f5c <HAL_I2C_IsDeviceReady+0x254>)
 8001f1e:	68f8      	ldr	r0, [r7, #12]
 8001f20:	f000 f820 	bl	8001f64 <I2C_WaitOnFlagUntilTimeout>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e012      	b.n	8001f54 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	3301      	adds	r3, #1
 8001f32:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	f4ff af32 	bcc.w	8001da2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2220      	movs	r2, #32
 8001f42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e000      	b.n	8001f54 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001f52:	2302      	movs	r3, #2
  }
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3720      	adds	r7, #32
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	00100002 	.word	0x00100002
 8001f60:	ffff0000 	.word	0xffff0000

08001f64 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b084      	sub	sp, #16
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	60f8      	str	r0, [r7, #12]
 8001f6c:	60b9      	str	r1, [r7, #8]
 8001f6e:	603b      	str	r3, [r7, #0]
 8001f70:	4613      	mov	r3, r2
 8001f72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f74:	e048      	b.n	8002008 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f7c:	d044      	beq.n	8002008 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f7e:	f7fe ffa5 	bl	8000ecc <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	69bb      	ldr	r3, [r7, #24]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	683a      	ldr	r2, [r7, #0]
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d302      	bcc.n	8001f94 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d139      	bne.n	8002008 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	0c1b      	lsrs	r3, r3, #16
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d10d      	bne.n	8001fba <I2C_WaitOnFlagUntilTimeout+0x56>
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	695b      	ldr	r3, [r3, #20]
 8001fa4:	43da      	mvns	r2, r3
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	4013      	ands	r3, r2
 8001faa:	b29b      	uxth	r3, r3
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	bf0c      	ite	eq
 8001fb0:	2301      	moveq	r3, #1
 8001fb2:	2300      	movne	r3, #0
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	e00c      	b.n	8001fd4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	699b      	ldr	r3, [r3, #24]
 8001fc0:	43da      	mvns	r2, r3
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	b29b      	uxth	r3, r3
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	bf0c      	ite	eq
 8001fcc:	2301      	moveq	r3, #1
 8001fce:	2300      	movne	r3, #0
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	79fb      	ldrb	r3, [r7, #7]
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d116      	bne.n	8002008 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2220      	movs	r2, #32
 8001fe4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2200      	movs	r2, #0
 8001fec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff4:	f043 0220 	orr.w	r2, r3, #32
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2200      	movs	r2, #0
 8002000:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e023      	b.n	8002050 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	0c1b      	lsrs	r3, r3, #16
 800200c:	b2db      	uxtb	r3, r3
 800200e:	2b01      	cmp	r3, #1
 8002010:	d10d      	bne.n	800202e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	695b      	ldr	r3, [r3, #20]
 8002018:	43da      	mvns	r2, r3
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	4013      	ands	r3, r2
 800201e:	b29b      	uxth	r3, r3
 8002020:	2b00      	cmp	r3, #0
 8002022:	bf0c      	ite	eq
 8002024:	2301      	moveq	r3, #1
 8002026:	2300      	movne	r3, #0
 8002028:	b2db      	uxtb	r3, r3
 800202a:	461a      	mov	r2, r3
 800202c:	e00c      	b.n	8002048 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	699b      	ldr	r3, [r3, #24]
 8002034:	43da      	mvns	r2, r3
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	4013      	ands	r3, r2
 800203a:	b29b      	uxth	r3, r3
 800203c:	2b00      	cmp	r3, #0
 800203e:	bf0c      	ite	eq
 8002040:	2301      	moveq	r3, #1
 8002042:	2300      	movne	r3, #0
 8002044:	b2db      	uxtb	r3, r3
 8002046:	461a      	mov	r2, r3
 8002048:	79fb      	ldrb	r3, [r7, #7]
 800204a:	429a      	cmp	r2, r3
 800204c:	d093      	beq.n	8001f76 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800204e:	2300      	movs	r3, #0
}
 8002050:	4618      	mov	r0, r3
 8002052:	3710      	adds	r7, #16
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d101      	bne.n	800206c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e0cc      	b.n	8002206 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800206c:	4b68      	ldr	r3, [pc, #416]	@ (8002210 <HAL_RCC_ClockConfig+0x1b8>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 030f 	and.w	r3, r3, #15
 8002074:	683a      	ldr	r2, [r7, #0]
 8002076:	429a      	cmp	r2, r3
 8002078:	d90c      	bls.n	8002094 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800207a:	4b65      	ldr	r3, [pc, #404]	@ (8002210 <HAL_RCC_ClockConfig+0x1b8>)
 800207c:	683a      	ldr	r2, [r7, #0]
 800207e:	b2d2      	uxtb	r2, r2
 8002080:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002082:	4b63      	ldr	r3, [pc, #396]	@ (8002210 <HAL_RCC_ClockConfig+0x1b8>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 030f 	and.w	r3, r3, #15
 800208a:	683a      	ldr	r2, [r7, #0]
 800208c:	429a      	cmp	r2, r3
 800208e:	d001      	beq.n	8002094 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e0b8      	b.n	8002206 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0302 	and.w	r3, r3, #2
 800209c:	2b00      	cmp	r3, #0
 800209e:	d020      	beq.n	80020e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0304 	and.w	r3, r3, #4
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d005      	beq.n	80020b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020ac:	4b59      	ldr	r3, [pc, #356]	@ (8002214 <HAL_RCC_ClockConfig+0x1bc>)
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	4a58      	ldr	r2, [pc, #352]	@ (8002214 <HAL_RCC_ClockConfig+0x1bc>)
 80020b2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80020b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0308 	and.w	r3, r3, #8
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d005      	beq.n	80020d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020c4:	4b53      	ldr	r3, [pc, #332]	@ (8002214 <HAL_RCC_ClockConfig+0x1bc>)
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	4a52      	ldr	r2, [pc, #328]	@ (8002214 <HAL_RCC_ClockConfig+0x1bc>)
 80020ca:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80020ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020d0:	4b50      	ldr	r3, [pc, #320]	@ (8002214 <HAL_RCC_ClockConfig+0x1bc>)
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	494d      	ldr	r1, [pc, #308]	@ (8002214 <HAL_RCC_ClockConfig+0x1bc>)
 80020de:	4313      	orrs	r3, r2
 80020e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0301 	and.w	r3, r3, #1
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d044      	beq.n	8002178 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d107      	bne.n	8002106 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020f6:	4b47      	ldr	r3, [pc, #284]	@ (8002214 <HAL_RCC_ClockConfig+0x1bc>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d119      	bne.n	8002136 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e07f      	b.n	8002206 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	2b02      	cmp	r3, #2
 800210c:	d003      	beq.n	8002116 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002112:	2b03      	cmp	r3, #3
 8002114:	d107      	bne.n	8002126 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002116:	4b3f      	ldr	r3, [pc, #252]	@ (8002214 <HAL_RCC_ClockConfig+0x1bc>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d109      	bne.n	8002136 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e06f      	b.n	8002206 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002126:	4b3b      	ldr	r3, [pc, #236]	@ (8002214 <HAL_RCC_ClockConfig+0x1bc>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0302 	and.w	r3, r3, #2
 800212e:	2b00      	cmp	r3, #0
 8002130:	d101      	bne.n	8002136 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e067      	b.n	8002206 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002136:	4b37      	ldr	r3, [pc, #220]	@ (8002214 <HAL_RCC_ClockConfig+0x1bc>)
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	f023 0203 	bic.w	r2, r3, #3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	4934      	ldr	r1, [pc, #208]	@ (8002214 <HAL_RCC_ClockConfig+0x1bc>)
 8002144:	4313      	orrs	r3, r2
 8002146:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002148:	f7fe fec0 	bl	8000ecc <HAL_GetTick>
 800214c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800214e:	e00a      	b.n	8002166 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002150:	f7fe febc 	bl	8000ecc <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800215e:	4293      	cmp	r3, r2
 8002160:	d901      	bls.n	8002166 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e04f      	b.n	8002206 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002166:	4b2b      	ldr	r3, [pc, #172]	@ (8002214 <HAL_RCC_ClockConfig+0x1bc>)
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	f003 020c 	and.w	r2, r3, #12
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	429a      	cmp	r2, r3
 8002176:	d1eb      	bne.n	8002150 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002178:	4b25      	ldr	r3, [pc, #148]	@ (8002210 <HAL_RCC_ClockConfig+0x1b8>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 030f 	and.w	r3, r3, #15
 8002180:	683a      	ldr	r2, [r7, #0]
 8002182:	429a      	cmp	r2, r3
 8002184:	d20c      	bcs.n	80021a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002186:	4b22      	ldr	r3, [pc, #136]	@ (8002210 <HAL_RCC_ClockConfig+0x1b8>)
 8002188:	683a      	ldr	r2, [r7, #0]
 800218a:	b2d2      	uxtb	r2, r2
 800218c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800218e:	4b20      	ldr	r3, [pc, #128]	@ (8002210 <HAL_RCC_ClockConfig+0x1b8>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 030f 	and.w	r3, r3, #15
 8002196:	683a      	ldr	r2, [r7, #0]
 8002198:	429a      	cmp	r2, r3
 800219a:	d001      	beq.n	80021a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e032      	b.n	8002206 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0304 	and.w	r3, r3, #4
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d008      	beq.n	80021be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021ac:	4b19      	ldr	r3, [pc, #100]	@ (8002214 <HAL_RCC_ClockConfig+0x1bc>)
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	4916      	ldr	r1, [pc, #88]	@ (8002214 <HAL_RCC_ClockConfig+0x1bc>)
 80021ba:	4313      	orrs	r3, r2
 80021bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0308 	and.w	r3, r3, #8
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d009      	beq.n	80021de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021ca:	4b12      	ldr	r3, [pc, #72]	@ (8002214 <HAL_RCC_ClockConfig+0x1bc>)
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	691b      	ldr	r3, [r3, #16]
 80021d6:	00db      	lsls	r3, r3, #3
 80021d8:	490e      	ldr	r1, [pc, #56]	@ (8002214 <HAL_RCC_ClockConfig+0x1bc>)
 80021da:	4313      	orrs	r3, r2
 80021dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80021de:	f000 f855 	bl	800228c <HAL_RCC_GetSysClockFreq>
 80021e2:	4602      	mov	r2, r0
 80021e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002214 <HAL_RCC_ClockConfig+0x1bc>)
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	091b      	lsrs	r3, r3, #4
 80021ea:	f003 030f 	and.w	r3, r3, #15
 80021ee:	490a      	ldr	r1, [pc, #40]	@ (8002218 <HAL_RCC_ClockConfig+0x1c0>)
 80021f0:	5ccb      	ldrb	r3, [r1, r3]
 80021f2:	fa22 f303 	lsr.w	r3, r2, r3
 80021f6:	4a09      	ldr	r2, [pc, #36]	@ (800221c <HAL_RCC_ClockConfig+0x1c4>)
 80021f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80021fa:	4b09      	ldr	r3, [pc, #36]	@ (8002220 <HAL_RCC_ClockConfig+0x1c8>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4618      	mov	r0, r3
 8002200:	f7fe fe20 	bl	8000e44 <HAL_InitTick>

  return HAL_OK;
 8002204:	2300      	movs	r3, #0
}
 8002206:	4618      	mov	r0, r3
 8002208:	3710      	adds	r7, #16
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	40023c00 	.word	0x40023c00
 8002214:	40023800 	.word	0x40023800
 8002218:	080048e8 	.word	0x080048e8
 800221c:	2000002c 	.word	0x2000002c
 8002220:	20000030 	.word	0x20000030

08002224 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002228:	4b03      	ldr	r3, [pc, #12]	@ (8002238 <HAL_RCC_GetHCLKFreq+0x14>)
 800222a:	681b      	ldr	r3, [r3, #0]
}
 800222c:	4618      	mov	r0, r3
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	2000002c 	.word	0x2000002c

0800223c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002240:	f7ff fff0 	bl	8002224 <HAL_RCC_GetHCLKFreq>
 8002244:	4602      	mov	r2, r0
 8002246:	4b05      	ldr	r3, [pc, #20]	@ (800225c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	0a9b      	lsrs	r3, r3, #10
 800224c:	f003 0307 	and.w	r3, r3, #7
 8002250:	4903      	ldr	r1, [pc, #12]	@ (8002260 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002252:	5ccb      	ldrb	r3, [r1, r3]
 8002254:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002258:	4618      	mov	r0, r3
 800225a:	bd80      	pop	{r7, pc}
 800225c:	40023800 	.word	0x40023800
 8002260:	080048f8 	.word	0x080048f8

08002264 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002268:	f7ff ffdc 	bl	8002224 <HAL_RCC_GetHCLKFreq>
 800226c:	4602      	mov	r2, r0
 800226e:	4b05      	ldr	r3, [pc, #20]	@ (8002284 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	0b5b      	lsrs	r3, r3, #13
 8002274:	f003 0307 	and.w	r3, r3, #7
 8002278:	4903      	ldr	r1, [pc, #12]	@ (8002288 <HAL_RCC_GetPCLK2Freq+0x24>)
 800227a:	5ccb      	ldrb	r3, [r1, r3]
 800227c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002280:	4618      	mov	r0, r3
 8002282:	bd80      	pop	{r7, pc}
 8002284:	40023800 	.word	0x40023800
 8002288:	080048f8 	.word	0x080048f8

0800228c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800228c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002290:	b0ae      	sub	sp, #184	@ 0xb8
 8002292:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002294:	2300      	movs	r3, #0
 8002296:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800229a:	2300      	movs	r3, #0
 800229c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80022a0:	2300      	movs	r3, #0
 80022a2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80022a6:	2300      	movs	r3, #0
 80022a8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80022ac:	2300      	movs	r3, #0
 80022ae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022b2:	4bcb      	ldr	r3, [pc, #812]	@ (80025e0 <HAL_RCC_GetSysClockFreq+0x354>)
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	f003 030c 	and.w	r3, r3, #12
 80022ba:	2b0c      	cmp	r3, #12
 80022bc:	f200 8206 	bhi.w	80026cc <HAL_RCC_GetSysClockFreq+0x440>
 80022c0:	a201      	add	r2, pc, #4	@ (adr r2, 80022c8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80022c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022c6:	bf00      	nop
 80022c8:	080022fd 	.word	0x080022fd
 80022cc:	080026cd 	.word	0x080026cd
 80022d0:	080026cd 	.word	0x080026cd
 80022d4:	080026cd 	.word	0x080026cd
 80022d8:	08002305 	.word	0x08002305
 80022dc:	080026cd 	.word	0x080026cd
 80022e0:	080026cd 	.word	0x080026cd
 80022e4:	080026cd 	.word	0x080026cd
 80022e8:	0800230d 	.word	0x0800230d
 80022ec:	080026cd 	.word	0x080026cd
 80022f0:	080026cd 	.word	0x080026cd
 80022f4:	080026cd 	.word	0x080026cd
 80022f8:	080024fd 	.word	0x080024fd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022fc:	4bb9      	ldr	r3, [pc, #740]	@ (80025e4 <HAL_RCC_GetSysClockFreq+0x358>)
 80022fe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8002302:	e1e7      	b.n	80026d4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002304:	4bb8      	ldr	r3, [pc, #736]	@ (80025e8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002306:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800230a:	e1e3      	b.n	80026d4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800230c:	4bb4      	ldr	r3, [pc, #720]	@ (80025e0 <HAL_RCC_GetSysClockFreq+0x354>)
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002314:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002318:	4bb1      	ldr	r3, [pc, #708]	@ (80025e0 <HAL_RCC_GetSysClockFreq+0x354>)
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d071      	beq.n	8002408 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002324:	4bae      	ldr	r3, [pc, #696]	@ (80025e0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	099b      	lsrs	r3, r3, #6
 800232a:	2200      	movs	r2, #0
 800232c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002330:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002334:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002338:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800233c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002340:	2300      	movs	r3, #0
 8002342:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002346:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800234a:	4622      	mov	r2, r4
 800234c:	462b      	mov	r3, r5
 800234e:	f04f 0000 	mov.w	r0, #0
 8002352:	f04f 0100 	mov.w	r1, #0
 8002356:	0159      	lsls	r1, r3, #5
 8002358:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800235c:	0150      	lsls	r0, r2, #5
 800235e:	4602      	mov	r2, r0
 8002360:	460b      	mov	r3, r1
 8002362:	4621      	mov	r1, r4
 8002364:	1a51      	subs	r1, r2, r1
 8002366:	6439      	str	r1, [r7, #64]	@ 0x40
 8002368:	4629      	mov	r1, r5
 800236a:	eb63 0301 	sbc.w	r3, r3, r1
 800236e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002370:	f04f 0200 	mov.w	r2, #0
 8002374:	f04f 0300 	mov.w	r3, #0
 8002378:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800237c:	4649      	mov	r1, r9
 800237e:	018b      	lsls	r3, r1, #6
 8002380:	4641      	mov	r1, r8
 8002382:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002386:	4641      	mov	r1, r8
 8002388:	018a      	lsls	r2, r1, #6
 800238a:	4641      	mov	r1, r8
 800238c:	1a51      	subs	r1, r2, r1
 800238e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002390:	4649      	mov	r1, r9
 8002392:	eb63 0301 	sbc.w	r3, r3, r1
 8002396:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002398:	f04f 0200 	mov.w	r2, #0
 800239c:	f04f 0300 	mov.w	r3, #0
 80023a0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80023a4:	4649      	mov	r1, r9
 80023a6:	00cb      	lsls	r3, r1, #3
 80023a8:	4641      	mov	r1, r8
 80023aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80023ae:	4641      	mov	r1, r8
 80023b0:	00ca      	lsls	r2, r1, #3
 80023b2:	4610      	mov	r0, r2
 80023b4:	4619      	mov	r1, r3
 80023b6:	4603      	mov	r3, r0
 80023b8:	4622      	mov	r2, r4
 80023ba:	189b      	adds	r3, r3, r2
 80023bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80023be:	462b      	mov	r3, r5
 80023c0:	460a      	mov	r2, r1
 80023c2:	eb42 0303 	adc.w	r3, r2, r3
 80023c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80023c8:	f04f 0200 	mov.w	r2, #0
 80023cc:	f04f 0300 	mov.w	r3, #0
 80023d0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80023d4:	4629      	mov	r1, r5
 80023d6:	024b      	lsls	r3, r1, #9
 80023d8:	4621      	mov	r1, r4
 80023da:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80023de:	4621      	mov	r1, r4
 80023e0:	024a      	lsls	r2, r1, #9
 80023e2:	4610      	mov	r0, r2
 80023e4:	4619      	mov	r1, r3
 80023e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80023ea:	2200      	movs	r2, #0
 80023ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80023f0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80023f4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80023f8:	f7fd ff5a 	bl	80002b0 <__aeabi_uldivmod>
 80023fc:	4602      	mov	r2, r0
 80023fe:	460b      	mov	r3, r1
 8002400:	4613      	mov	r3, r2
 8002402:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002406:	e067      	b.n	80024d8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002408:	4b75      	ldr	r3, [pc, #468]	@ (80025e0 <HAL_RCC_GetSysClockFreq+0x354>)
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	099b      	lsrs	r3, r3, #6
 800240e:	2200      	movs	r2, #0
 8002410:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002414:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002418:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800241c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002420:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002422:	2300      	movs	r3, #0
 8002424:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002426:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800242a:	4622      	mov	r2, r4
 800242c:	462b      	mov	r3, r5
 800242e:	f04f 0000 	mov.w	r0, #0
 8002432:	f04f 0100 	mov.w	r1, #0
 8002436:	0159      	lsls	r1, r3, #5
 8002438:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800243c:	0150      	lsls	r0, r2, #5
 800243e:	4602      	mov	r2, r0
 8002440:	460b      	mov	r3, r1
 8002442:	4621      	mov	r1, r4
 8002444:	1a51      	subs	r1, r2, r1
 8002446:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002448:	4629      	mov	r1, r5
 800244a:	eb63 0301 	sbc.w	r3, r3, r1
 800244e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002450:	f04f 0200 	mov.w	r2, #0
 8002454:	f04f 0300 	mov.w	r3, #0
 8002458:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800245c:	4649      	mov	r1, r9
 800245e:	018b      	lsls	r3, r1, #6
 8002460:	4641      	mov	r1, r8
 8002462:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002466:	4641      	mov	r1, r8
 8002468:	018a      	lsls	r2, r1, #6
 800246a:	4641      	mov	r1, r8
 800246c:	ebb2 0a01 	subs.w	sl, r2, r1
 8002470:	4649      	mov	r1, r9
 8002472:	eb63 0b01 	sbc.w	fp, r3, r1
 8002476:	f04f 0200 	mov.w	r2, #0
 800247a:	f04f 0300 	mov.w	r3, #0
 800247e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002482:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002486:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800248a:	4692      	mov	sl, r2
 800248c:	469b      	mov	fp, r3
 800248e:	4623      	mov	r3, r4
 8002490:	eb1a 0303 	adds.w	r3, sl, r3
 8002494:	623b      	str	r3, [r7, #32]
 8002496:	462b      	mov	r3, r5
 8002498:	eb4b 0303 	adc.w	r3, fp, r3
 800249c:	627b      	str	r3, [r7, #36]	@ 0x24
 800249e:	f04f 0200 	mov.w	r2, #0
 80024a2:	f04f 0300 	mov.w	r3, #0
 80024a6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80024aa:	4629      	mov	r1, r5
 80024ac:	028b      	lsls	r3, r1, #10
 80024ae:	4621      	mov	r1, r4
 80024b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80024b4:	4621      	mov	r1, r4
 80024b6:	028a      	lsls	r2, r1, #10
 80024b8:	4610      	mov	r0, r2
 80024ba:	4619      	mov	r1, r3
 80024bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80024c0:	2200      	movs	r2, #0
 80024c2:	673b      	str	r3, [r7, #112]	@ 0x70
 80024c4:	677a      	str	r2, [r7, #116]	@ 0x74
 80024c6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80024ca:	f7fd fef1 	bl	80002b0 <__aeabi_uldivmod>
 80024ce:	4602      	mov	r2, r0
 80024d0:	460b      	mov	r3, r1
 80024d2:	4613      	mov	r3, r2
 80024d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80024d8:	4b41      	ldr	r3, [pc, #260]	@ (80025e0 <HAL_RCC_GetSysClockFreq+0x354>)
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	0c1b      	lsrs	r3, r3, #16
 80024de:	f003 0303 	and.w	r3, r3, #3
 80024e2:	3301      	adds	r3, #1
 80024e4:	005b      	lsls	r3, r3, #1
 80024e6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 80024ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80024ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80024f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80024f6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80024fa:	e0eb      	b.n	80026d4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024fc:	4b38      	ldr	r3, [pc, #224]	@ (80025e0 <HAL_RCC_GetSysClockFreq+0x354>)
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002504:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002508:	4b35      	ldr	r3, [pc, #212]	@ (80025e0 <HAL_RCC_GetSysClockFreq+0x354>)
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d06b      	beq.n	80025ec <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002514:	4b32      	ldr	r3, [pc, #200]	@ (80025e0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	099b      	lsrs	r3, r3, #6
 800251a:	2200      	movs	r2, #0
 800251c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800251e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002520:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002522:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002526:	663b      	str	r3, [r7, #96]	@ 0x60
 8002528:	2300      	movs	r3, #0
 800252a:	667b      	str	r3, [r7, #100]	@ 0x64
 800252c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002530:	4622      	mov	r2, r4
 8002532:	462b      	mov	r3, r5
 8002534:	f04f 0000 	mov.w	r0, #0
 8002538:	f04f 0100 	mov.w	r1, #0
 800253c:	0159      	lsls	r1, r3, #5
 800253e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002542:	0150      	lsls	r0, r2, #5
 8002544:	4602      	mov	r2, r0
 8002546:	460b      	mov	r3, r1
 8002548:	4621      	mov	r1, r4
 800254a:	1a51      	subs	r1, r2, r1
 800254c:	61b9      	str	r1, [r7, #24]
 800254e:	4629      	mov	r1, r5
 8002550:	eb63 0301 	sbc.w	r3, r3, r1
 8002554:	61fb      	str	r3, [r7, #28]
 8002556:	f04f 0200 	mov.w	r2, #0
 800255a:	f04f 0300 	mov.w	r3, #0
 800255e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002562:	4659      	mov	r1, fp
 8002564:	018b      	lsls	r3, r1, #6
 8002566:	4651      	mov	r1, sl
 8002568:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800256c:	4651      	mov	r1, sl
 800256e:	018a      	lsls	r2, r1, #6
 8002570:	4651      	mov	r1, sl
 8002572:	ebb2 0801 	subs.w	r8, r2, r1
 8002576:	4659      	mov	r1, fp
 8002578:	eb63 0901 	sbc.w	r9, r3, r1
 800257c:	f04f 0200 	mov.w	r2, #0
 8002580:	f04f 0300 	mov.w	r3, #0
 8002584:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002588:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800258c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002590:	4690      	mov	r8, r2
 8002592:	4699      	mov	r9, r3
 8002594:	4623      	mov	r3, r4
 8002596:	eb18 0303 	adds.w	r3, r8, r3
 800259a:	613b      	str	r3, [r7, #16]
 800259c:	462b      	mov	r3, r5
 800259e:	eb49 0303 	adc.w	r3, r9, r3
 80025a2:	617b      	str	r3, [r7, #20]
 80025a4:	f04f 0200 	mov.w	r2, #0
 80025a8:	f04f 0300 	mov.w	r3, #0
 80025ac:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80025b0:	4629      	mov	r1, r5
 80025b2:	024b      	lsls	r3, r1, #9
 80025b4:	4621      	mov	r1, r4
 80025b6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80025ba:	4621      	mov	r1, r4
 80025bc:	024a      	lsls	r2, r1, #9
 80025be:	4610      	mov	r0, r2
 80025c0:	4619      	mov	r1, r3
 80025c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80025c6:	2200      	movs	r2, #0
 80025c8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80025ca:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80025cc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80025d0:	f7fd fe6e 	bl	80002b0 <__aeabi_uldivmod>
 80025d4:	4602      	mov	r2, r0
 80025d6:	460b      	mov	r3, r1
 80025d8:	4613      	mov	r3, r2
 80025da:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80025de:	e065      	b.n	80026ac <HAL_RCC_GetSysClockFreq+0x420>
 80025e0:	40023800 	.word	0x40023800
 80025e4:	00f42400 	.word	0x00f42400
 80025e8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025ec:	4b3d      	ldr	r3, [pc, #244]	@ (80026e4 <HAL_RCC_GetSysClockFreq+0x458>)
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	099b      	lsrs	r3, r3, #6
 80025f2:	2200      	movs	r2, #0
 80025f4:	4618      	mov	r0, r3
 80025f6:	4611      	mov	r1, r2
 80025f8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80025fc:	653b      	str	r3, [r7, #80]	@ 0x50
 80025fe:	2300      	movs	r3, #0
 8002600:	657b      	str	r3, [r7, #84]	@ 0x54
 8002602:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002606:	4642      	mov	r2, r8
 8002608:	464b      	mov	r3, r9
 800260a:	f04f 0000 	mov.w	r0, #0
 800260e:	f04f 0100 	mov.w	r1, #0
 8002612:	0159      	lsls	r1, r3, #5
 8002614:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002618:	0150      	lsls	r0, r2, #5
 800261a:	4602      	mov	r2, r0
 800261c:	460b      	mov	r3, r1
 800261e:	4641      	mov	r1, r8
 8002620:	1a51      	subs	r1, r2, r1
 8002622:	60b9      	str	r1, [r7, #8]
 8002624:	4649      	mov	r1, r9
 8002626:	eb63 0301 	sbc.w	r3, r3, r1
 800262a:	60fb      	str	r3, [r7, #12]
 800262c:	f04f 0200 	mov.w	r2, #0
 8002630:	f04f 0300 	mov.w	r3, #0
 8002634:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002638:	4659      	mov	r1, fp
 800263a:	018b      	lsls	r3, r1, #6
 800263c:	4651      	mov	r1, sl
 800263e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002642:	4651      	mov	r1, sl
 8002644:	018a      	lsls	r2, r1, #6
 8002646:	4651      	mov	r1, sl
 8002648:	1a54      	subs	r4, r2, r1
 800264a:	4659      	mov	r1, fp
 800264c:	eb63 0501 	sbc.w	r5, r3, r1
 8002650:	f04f 0200 	mov.w	r2, #0
 8002654:	f04f 0300 	mov.w	r3, #0
 8002658:	00eb      	lsls	r3, r5, #3
 800265a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800265e:	00e2      	lsls	r2, r4, #3
 8002660:	4614      	mov	r4, r2
 8002662:	461d      	mov	r5, r3
 8002664:	4643      	mov	r3, r8
 8002666:	18e3      	adds	r3, r4, r3
 8002668:	603b      	str	r3, [r7, #0]
 800266a:	464b      	mov	r3, r9
 800266c:	eb45 0303 	adc.w	r3, r5, r3
 8002670:	607b      	str	r3, [r7, #4]
 8002672:	f04f 0200 	mov.w	r2, #0
 8002676:	f04f 0300 	mov.w	r3, #0
 800267a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800267e:	4629      	mov	r1, r5
 8002680:	028b      	lsls	r3, r1, #10
 8002682:	4621      	mov	r1, r4
 8002684:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002688:	4621      	mov	r1, r4
 800268a:	028a      	lsls	r2, r1, #10
 800268c:	4610      	mov	r0, r2
 800268e:	4619      	mov	r1, r3
 8002690:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002694:	2200      	movs	r2, #0
 8002696:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002698:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800269a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800269e:	f7fd fe07 	bl	80002b0 <__aeabi_uldivmod>
 80026a2:	4602      	mov	r2, r0
 80026a4:	460b      	mov	r3, r1
 80026a6:	4613      	mov	r3, r2
 80026a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80026ac:	4b0d      	ldr	r3, [pc, #52]	@ (80026e4 <HAL_RCC_GetSysClockFreq+0x458>)
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	0f1b      	lsrs	r3, r3, #28
 80026b2:	f003 0307 	and.w	r3, r3, #7
 80026b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 80026ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80026be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80026c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80026c6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80026ca:	e003      	b.n	80026d4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026cc:	4b06      	ldr	r3, [pc, #24]	@ (80026e8 <HAL_RCC_GetSysClockFreq+0x45c>)
 80026ce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80026d2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026d4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80026d8:	4618      	mov	r0, r3
 80026da:	37b8      	adds	r7, #184	@ 0xb8
 80026dc:	46bd      	mov	sp, r7
 80026de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026e2:	bf00      	nop
 80026e4:	40023800 	.word	0x40023800
 80026e8:	00f42400 	.word	0x00f42400

080026ec <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b086      	sub	sp, #24
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d101      	bne.n	80026fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e28d      	b.n	8002c1a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0301 	and.w	r3, r3, #1
 8002706:	2b00      	cmp	r3, #0
 8002708:	f000 8083 	beq.w	8002812 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800270c:	4b94      	ldr	r3, [pc, #592]	@ (8002960 <HAL_RCC_OscConfig+0x274>)
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	f003 030c 	and.w	r3, r3, #12
 8002714:	2b04      	cmp	r3, #4
 8002716:	d019      	beq.n	800274c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002718:	4b91      	ldr	r3, [pc, #580]	@ (8002960 <HAL_RCC_OscConfig+0x274>)
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002720:	2b08      	cmp	r3, #8
 8002722:	d106      	bne.n	8002732 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002724:	4b8e      	ldr	r3, [pc, #568]	@ (8002960 <HAL_RCC_OscConfig+0x274>)
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800272c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002730:	d00c      	beq.n	800274c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002732:	4b8b      	ldr	r3, [pc, #556]	@ (8002960 <HAL_RCC_OscConfig+0x274>)
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800273a:	2b0c      	cmp	r3, #12
 800273c:	d112      	bne.n	8002764 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800273e:	4b88      	ldr	r3, [pc, #544]	@ (8002960 <HAL_RCC_OscConfig+0x274>)
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002746:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800274a:	d10b      	bne.n	8002764 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800274c:	4b84      	ldr	r3, [pc, #528]	@ (8002960 <HAL_RCC_OscConfig+0x274>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d05b      	beq.n	8002810 <HAL_RCC_OscConfig+0x124>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d157      	bne.n	8002810 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e25a      	b.n	8002c1a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800276c:	d106      	bne.n	800277c <HAL_RCC_OscConfig+0x90>
 800276e:	4b7c      	ldr	r3, [pc, #496]	@ (8002960 <HAL_RCC_OscConfig+0x274>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a7b      	ldr	r2, [pc, #492]	@ (8002960 <HAL_RCC_OscConfig+0x274>)
 8002774:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002778:	6013      	str	r3, [r2, #0]
 800277a:	e01d      	b.n	80027b8 <HAL_RCC_OscConfig+0xcc>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002784:	d10c      	bne.n	80027a0 <HAL_RCC_OscConfig+0xb4>
 8002786:	4b76      	ldr	r3, [pc, #472]	@ (8002960 <HAL_RCC_OscConfig+0x274>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a75      	ldr	r2, [pc, #468]	@ (8002960 <HAL_RCC_OscConfig+0x274>)
 800278c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002790:	6013      	str	r3, [r2, #0]
 8002792:	4b73      	ldr	r3, [pc, #460]	@ (8002960 <HAL_RCC_OscConfig+0x274>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a72      	ldr	r2, [pc, #456]	@ (8002960 <HAL_RCC_OscConfig+0x274>)
 8002798:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800279c:	6013      	str	r3, [r2, #0]
 800279e:	e00b      	b.n	80027b8 <HAL_RCC_OscConfig+0xcc>
 80027a0:	4b6f      	ldr	r3, [pc, #444]	@ (8002960 <HAL_RCC_OscConfig+0x274>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a6e      	ldr	r2, [pc, #440]	@ (8002960 <HAL_RCC_OscConfig+0x274>)
 80027a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027aa:	6013      	str	r3, [r2, #0]
 80027ac:	4b6c      	ldr	r3, [pc, #432]	@ (8002960 <HAL_RCC_OscConfig+0x274>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a6b      	ldr	r2, [pc, #428]	@ (8002960 <HAL_RCC_OscConfig+0x274>)
 80027b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d013      	beq.n	80027e8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c0:	f7fe fb84 	bl	8000ecc <HAL_GetTick>
 80027c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027c6:	e008      	b.n	80027da <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027c8:	f7fe fb80 	bl	8000ecc <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	2b64      	cmp	r3, #100	@ 0x64
 80027d4:	d901      	bls.n	80027da <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e21f      	b.n	8002c1a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027da:	4b61      	ldr	r3, [pc, #388]	@ (8002960 <HAL_RCC_OscConfig+0x274>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d0f0      	beq.n	80027c8 <HAL_RCC_OscConfig+0xdc>
 80027e6:	e014      	b.n	8002812 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e8:	f7fe fb70 	bl	8000ecc <HAL_GetTick>
 80027ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027ee:	e008      	b.n	8002802 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027f0:	f7fe fb6c 	bl	8000ecc <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	2b64      	cmp	r3, #100	@ 0x64
 80027fc:	d901      	bls.n	8002802 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e20b      	b.n	8002c1a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002802:	4b57      	ldr	r3, [pc, #348]	@ (8002960 <HAL_RCC_OscConfig+0x274>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d1f0      	bne.n	80027f0 <HAL_RCC_OscConfig+0x104>
 800280e:	e000      	b.n	8002812 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002810:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0302 	and.w	r3, r3, #2
 800281a:	2b00      	cmp	r3, #0
 800281c:	d06f      	beq.n	80028fe <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800281e:	4b50      	ldr	r3, [pc, #320]	@ (8002960 <HAL_RCC_OscConfig+0x274>)
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f003 030c 	and.w	r3, r3, #12
 8002826:	2b00      	cmp	r3, #0
 8002828:	d017      	beq.n	800285a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800282a:	4b4d      	ldr	r3, [pc, #308]	@ (8002960 <HAL_RCC_OscConfig+0x274>)
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002832:	2b08      	cmp	r3, #8
 8002834:	d105      	bne.n	8002842 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002836:	4b4a      	ldr	r3, [pc, #296]	@ (8002960 <HAL_RCC_OscConfig+0x274>)
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d00b      	beq.n	800285a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002842:	4b47      	ldr	r3, [pc, #284]	@ (8002960 <HAL_RCC_OscConfig+0x274>)
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800284a:	2b0c      	cmp	r3, #12
 800284c:	d11c      	bne.n	8002888 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800284e:	4b44      	ldr	r3, [pc, #272]	@ (8002960 <HAL_RCC_OscConfig+0x274>)
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d116      	bne.n	8002888 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800285a:	4b41      	ldr	r3, [pc, #260]	@ (8002960 <HAL_RCC_OscConfig+0x274>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0302 	and.w	r3, r3, #2
 8002862:	2b00      	cmp	r3, #0
 8002864:	d005      	beq.n	8002872 <HAL_RCC_OscConfig+0x186>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	2b01      	cmp	r3, #1
 800286c:	d001      	beq.n	8002872 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e1d3      	b.n	8002c1a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002872:	4b3b      	ldr	r3, [pc, #236]	@ (8002960 <HAL_RCC_OscConfig+0x274>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	691b      	ldr	r3, [r3, #16]
 800287e:	00db      	lsls	r3, r3, #3
 8002880:	4937      	ldr	r1, [pc, #220]	@ (8002960 <HAL_RCC_OscConfig+0x274>)
 8002882:	4313      	orrs	r3, r2
 8002884:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002886:	e03a      	b.n	80028fe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d020      	beq.n	80028d2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002890:	4b34      	ldr	r3, [pc, #208]	@ (8002964 <HAL_RCC_OscConfig+0x278>)
 8002892:	2201      	movs	r2, #1
 8002894:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002896:	f7fe fb19 	bl	8000ecc <HAL_GetTick>
 800289a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800289c:	e008      	b.n	80028b0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800289e:	f7fe fb15 	bl	8000ecc <HAL_GetTick>
 80028a2:	4602      	mov	r2, r0
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	2b02      	cmp	r3, #2
 80028aa:	d901      	bls.n	80028b0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80028ac:	2303      	movs	r3, #3
 80028ae:	e1b4      	b.n	8002c1a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028b0:	4b2b      	ldr	r3, [pc, #172]	@ (8002960 <HAL_RCC_OscConfig+0x274>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0302 	and.w	r3, r3, #2
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d0f0      	beq.n	800289e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028bc:	4b28      	ldr	r3, [pc, #160]	@ (8002960 <HAL_RCC_OscConfig+0x274>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	691b      	ldr	r3, [r3, #16]
 80028c8:	00db      	lsls	r3, r3, #3
 80028ca:	4925      	ldr	r1, [pc, #148]	@ (8002960 <HAL_RCC_OscConfig+0x274>)
 80028cc:	4313      	orrs	r3, r2
 80028ce:	600b      	str	r3, [r1, #0]
 80028d0:	e015      	b.n	80028fe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028d2:	4b24      	ldr	r3, [pc, #144]	@ (8002964 <HAL_RCC_OscConfig+0x278>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d8:	f7fe faf8 	bl	8000ecc <HAL_GetTick>
 80028dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028de:	e008      	b.n	80028f2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028e0:	f7fe faf4 	bl	8000ecc <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e193      	b.n	8002c1a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028f2:	4b1b      	ldr	r3, [pc, #108]	@ (8002960 <HAL_RCC_OscConfig+0x274>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0302 	and.w	r3, r3, #2
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d1f0      	bne.n	80028e0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0308 	and.w	r3, r3, #8
 8002906:	2b00      	cmp	r3, #0
 8002908:	d036      	beq.n	8002978 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	695b      	ldr	r3, [r3, #20]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d016      	beq.n	8002940 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002912:	4b15      	ldr	r3, [pc, #84]	@ (8002968 <HAL_RCC_OscConfig+0x27c>)
 8002914:	2201      	movs	r2, #1
 8002916:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002918:	f7fe fad8 	bl	8000ecc <HAL_GetTick>
 800291c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800291e:	e008      	b.n	8002932 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002920:	f7fe fad4 	bl	8000ecc <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	2b02      	cmp	r3, #2
 800292c:	d901      	bls.n	8002932 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e173      	b.n	8002c1a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002932:	4b0b      	ldr	r3, [pc, #44]	@ (8002960 <HAL_RCC_OscConfig+0x274>)
 8002934:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002936:	f003 0302 	and.w	r3, r3, #2
 800293a:	2b00      	cmp	r3, #0
 800293c:	d0f0      	beq.n	8002920 <HAL_RCC_OscConfig+0x234>
 800293e:	e01b      	b.n	8002978 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002940:	4b09      	ldr	r3, [pc, #36]	@ (8002968 <HAL_RCC_OscConfig+0x27c>)
 8002942:	2200      	movs	r2, #0
 8002944:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002946:	f7fe fac1 	bl	8000ecc <HAL_GetTick>
 800294a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800294c:	e00e      	b.n	800296c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800294e:	f7fe fabd 	bl	8000ecc <HAL_GetTick>
 8002952:	4602      	mov	r2, r0
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	2b02      	cmp	r3, #2
 800295a:	d907      	bls.n	800296c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800295c:	2303      	movs	r3, #3
 800295e:	e15c      	b.n	8002c1a <HAL_RCC_OscConfig+0x52e>
 8002960:	40023800 	.word	0x40023800
 8002964:	42470000 	.word	0x42470000
 8002968:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800296c:	4b8a      	ldr	r3, [pc, #552]	@ (8002b98 <HAL_RCC_OscConfig+0x4ac>)
 800296e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002970:	f003 0302 	and.w	r3, r3, #2
 8002974:	2b00      	cmp	r3, #0
 8002976:	d1ea      	bne.n	800294e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0304 	and.w	r3, r3, #4
 8002980:	2b00      	cmp	r3, #0
 8002982:	f000 8097 	beq.w	8002ab4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002986:	2300      	movs	r3, #0
 8002988:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800298a:	4b83      	ldr	r3, [pc, #524]	@ (8002b98 <HAL_RCC_OscConfig+0x4ac>)
 800298c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800298e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d10f      	bne.n	80029b6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002996:	2300      	movs	r3, #0
 8002998:	60bb      	str	r3, [r7, #8]
 800299a:	4b7f      	ldr	r3, [pc, #508]	@ (8002b98 <HAL_RCC_OscConfig+0x4ac>)
 800299c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800299e:	4a7e      	ldr	r2, [pc, #504]	@ (8002b98 <HAL_RCC_OscConfig+0x4ac>)
 80029a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80029a6:	4b7c      	ldr	r3, [pc, #496]	@ (8002b98 <HAL_RCC_OscConfig+0x4ac>)
 80029a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029ae:	60bb      	str	r3, [r7, #8]
 80029b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029b2:	2301      	movs	r3, #1
 80029b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029b6:	4b79      	ldr	r3, [pc, #484]	@ (8002b9c <HAL_RCC_OscConfig+0x4b0>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d118      	bne.n	80029f4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029c2:	4b76      	ldr	r3, [pc, #472]	@ (8002b9c <HAL_RCC_OscConfig+0x4b0>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a75      	ldr	r2, [pc, #468]	@ (8002b9c <HAL_RCC_OscConfig+0x4b0>)
 80029c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029ce:	f7fe fa7d 	bl	8000ecc <HAL_GetTick>
 80029d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029d4:	e008      	b.n	80029e8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029d6:	f7fe fa79 	bl	8000ecc <HAL_GetTick>
 80029da:	4602      	mov	r2, r0
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d901      	bls.n	80029e8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	e118      	b.n	8002c1a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029e8:	4b6c      	ldr	r3, [pc, #432]	@ (8002b9c <HAL_RCC_OscConfig+0x4b0>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d0f0      	beq.n	80029d6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d106      	bne.n	8002a0a <HAL_RCC_OscConfig+0x31e>
 80029fc:	4b66      	ldr	r3, [pc, #408]	@ (8002b98 <HAL_RCC_OscConfig+0x4ac>)
 80029fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a00:	4a65      	ldr	r2, [pc, #404]	@ (8002b98 <HAL_RCC_OscConfig+0x4ac>)
 8002a02:	f043 0301 	orr.w	r3, r3, #1
 8002a06:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a08:	e01c      	b.n	8002a44 <HAL_RCC_OscConfig+0x358>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	2b05      	cmp	r3, #5
 8002a10:	d10c      	bne.n	8002a2c <HAL_RCC_OscConfig+0x340>
 8002a12:	4b61      	ldr	r3, [pc, #388]	@ (8002b98 <HAL_RCC_OscConfig+0x4ac>)
 8002a14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a16:	4a60      	ldr	r2, [pc, #384]	@ (8002b98 <HAL_RCC_OscConfig+0x4ac>)
 8002a18:	f043 0304 	orr.w	r3, r3, #4
 8002a1c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a1e:	4b5e      	ldr	r3, [pc, #376]	@ (8002b98 <HAL_RCC_OscConfig+0x4ac>)
 8002a20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a22:	4a5d      	ldr	r2, [pc, #372]	@ (8002b98 <HAL_RCC_OscConfig+0x4ac>)
 8002a24:	f043 0301 	orr.w	r3, r3, #1
 8002a28:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a2a:	e00b      	b.n	8002a44 <HAL_RCC_OscConfig+0x358>
 8002a2c:	4b5a      	ldr	r3, [pc, #360]	@ (8002b98 <HAL_RCC_OscConfig+0x4ac>)
 8002a2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a30:	4a59      	ldr	r2, [pc, #356]	@ (8002b98 <HAL_RCC_OscConfig+0x4ac>)
 8002a32:	f023 0301 	bic.w	r3, r3, #1
 8002a36:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a38:	4b57      	ldr	r3, [pc, #348]	@ (8002b98 <HAL_RCC_OscConfig+0x4ac>)
 8002a3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a3c:	4a56      	ldr	r2, [pc, #344]	@ (8002b98 <HAL_RCC_OscConfig+0x4ac>)
 8002a3e:	f023 0304 	bic.w	r3, r3, #4
 8002a42:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d015      	beq.n	8002a78 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a4c:	f7fe fa3e 	bl	8000ecc <HAL_GetTick>
 8002a50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a52:	e00a      	b.n	8002a6a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a54:	f7fe fa3a 	bl	8000ecc <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d901      	bls.n	8002a6a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e0d7      	b.n	8002c1a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a6a:	4b4b      	ldr	r3, [pc, #300]	@ (8002b98 <HAL_RCC_OscConfig+0x4ac>)
 8002a6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a6e:	f003 0302 	and.w	r3, r3, #2
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d0ee      	beq.n	8002a54 <HAL_RCC_OscConfig+0x368>
 8002a76:	e014      	b.n	8002aa2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a78:	f7fe fa28 	bl	8000ecc <HAL_GetTick>
 8002a7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a7e:	e00a      	b.n	8002a96 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a80:	f7fe fa24 	bl	8000ecc <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d901      	bls.n	8002a96 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	e0c1      	b.n	8002c1a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a96:	4b40      	ldr	r3, [pc, #256]	@ (8002b98 <HAL_RCC_OscConfig+0x4ac>)
 8002a98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a9a:	f003 0302 	and.w	r3, r3, #2
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d1ee      	bne.n	8002a80 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002aa2:	7dfb      	ldrb	r3, [r7, #23]
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d105      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002aa8:	4b3b      	ldr	r3, [pc, #236]	@ (8002b98 <HAL_RCC_OscConfig+0x4ac>)
 8002aaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aac:	4a3a      	ldr	r2, [pc, #232]	@ (8002b98 <HAL_RCC_OscConfig+0x4ac>)
 8002aae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ab2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	699b      	ldr	r3, [r3, #24]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	f000 80ad 	beq.w	8002c18 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002abe:	4b36      	ldr	r3, [pc, #216]	@ (8002b98 <HAL_RCC_OscConfig+0x4ac>)
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f003 030c 	and.w	r3, r3, #12
 8002ac6:	2b08      	cmp	r3, #8
 8002ac8:	d060      	beq.n	8002b8c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	699b      	ldr	r3, [r3, #24]
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d145      	bne.n	8002b5e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ad2:	4b33      	ldr	r3, [pc, #204]	@ (8002ba0 <HAL_RCC_OscConfig+0x4b4>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ad8:	f7fe f9f8 	bl	8000ecc <HAL_GetTick>
 8002adc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ade:	e008      	b.n	8002af2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ae0:	f7fe f9f4 	bl	8000ecc <HAL_GetTick>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d901      	bls.n	8002af2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e093      	b.n	8002c1a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002af2:	4b29      	ldr	r3, [pc, #164]	@ (8002b98 <HAL_RCC_OscConfig+0x4ac>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d1f0      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	69da      	ldr	r2, [r3, #28]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a1b      	ldr	r3, [r3, #32]
 8002b06:	431a      	orrs	r2, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b0c:	019b      	lsls	r3, r3, #6
 8002b0e:	431a      	orrs	r2, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b14:	085b      	lsrs	r3, r3, #1
 8002b16:	3b01      	subs	r3, #1
 8002b18:	041b      	lsls	r3, r3, #16
 8002b1a:	431a      	orrs	r2, r3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b20:	061b      	lsls	r3, r3, #24
 8002b22:	431a      	orrs	r2, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b28:	071b      	lsls	r3, r3, #28
 8002b2a:	491b      	ldr	r1, [pc, #108]	@ (8002b98 <HAL_RCC_OscConfig+0x4ac>)
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b30:	4b1b      	ldr	r3, [pc, #108]	@ (8002ba0 <HAL_RCC_OscConfig+0x4b4>)
 8002b32:	2201      	movs	r2, #1
 8002b34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b36:	f7fe f9c9 	bl	8000ecc <HAL_GetTick>
 8002b3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b3c:	e008      	b.n	8002b50 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b3e:	f7fe f9c5 	bl	8000ecc <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d901      	bls.n	8002b50 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	e064      	b.n	8002c1a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b50:	4b11      	ldr	r3, [pc, #68]	@ (8002b98 <HAL_RCC_OscConfig+0x4ac>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d0f0      	beq.n	8002b3e <HAL_RCC_OscConfig+0x452>
 8002b5c:	e05c      	b.n	8002c18 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b5e:	4b10      	ldr	r3, [pc, #64]	@ (8002ba0 <HAL_RCC_OscConfig+0x4b4>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b64:	f7fe f9b2 	bl	8000ecc <HAL_GetTick>
 8002b68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b6a:	e008      	b.n	8002b7e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b6c:	f7fe f9ae 	bl	8000ecc <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d901      	bls.n	8002b7e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e04d      	b.n	8002c1a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b7e:	4b06      	ldr	r3, [pc, #24]	@ (8002b98 <HAL_RCC_OscConfig+0x4ac>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d1f0      	bne.n	8002b6c <HAL_RCC_OscConfig+0x480>
 8002b8a:	e045      	b.n	8002c18 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	699b      	ldr	r3, [r3, #24]
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d107      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e040      	b.n	8002c1a <HAL_RCC_OscConfig+0x52e>
 8002b98:	40023800 	.word	0x40023800
 8002b9c:	40007000 	.word	0x40007000
 8002ba0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ba4:	4b1f      	ldr	r3, [pc, #124]	@ (8002c24 <HAL_RCC_OscConfig+0x538>)
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	699b      	ldr	r3, [r3, #24]
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d030      	beq.n	8002c14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d129      	bne.n	8002c14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d122      	bne.n	8002c14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bce:	68fa      	ldr	r2, [r7, #12]
 8002bd0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002bda:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d119      	bne.n	8002c14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bea:	085b      	lsrs	r3, r3, #1
 8002bec:	3b01      	subs	r3, #1
 8002bee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d10f      	bne.n	8002c14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bfe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d107      	bne.n	8002c14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c0e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d001      	beq.n	8002c18 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e000      	b.n	8002c1a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3718      	adds	r7, #24
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	40023800 	.word	0x40023800

08002c28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d101      	bne.n	8002c3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e041      	b.n	8002cbe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d106      	bne.n	8002c54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f7fd ff5a 	bl	8000b08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2202      	movs	r2, #2
 8002c58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	3304      	adds	r3, #4
 8002c64:	4619      	mov	r1, r3
 8002c66:	4610      	mov	r0, r2
 8002c68:	f000 fa10 	bl	800308c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2201      	movs	r2, #1
 8002c88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3708      	adds	r7, #8
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}

08002cc6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002cc6:	b580      	push	{r7, lr}
 8002cc8:	b082      	sub	sp, #8
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d101      	bne.n	8002cd8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e041      	b.n	8002d5c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d106      	bne.n	8002cf2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f000 f839 	bl	8002d64 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2202      	movs	r2, #2
 8002cf6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	3304      	adds	r3, #4
 8002d02:	4619      	mov	r1, r3
 8002d04:	4610      	mov	r0, r2
 8002d06:	f000 f9c1 	bl	800308c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2201      	movs	r2, #1
 8002d16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2201      	movs	r2, #1
 8002d26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2201      	movs	r2, #1
 8002d36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2201      	movs	r2, #1
 8002d46:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2201      	movs	r2, #1
 8002d56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002d5a:	2300      	movs	r3, #0
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3708      	adds	r7, #8
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002d6c:	bf00      	nop
 8002d6e:	370c      	adds	r7, #12
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr

08002d78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b086      	sub	sp, #24
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	60b9      	str	r1, [r7, #8]
 8002d82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d84:	2300      	movs	r3, #0
 8002d86:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d101      	bne.n	8002d96 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002d92:	2302      	movs	r3, #2
 8002d94:	e0ae      	b.n	8002ef4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2201      	movs	r2, #1
 8002d9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2b0c      	cmp	r3, #12
 8002da2:	f200 809f 	bhi.w	8002ee4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002da6:	a201      	add	r2, pc, #4	@ (adr r2, 8002dac <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dac:	08002de1 	.word	0x08002de1
 8002db0:	08002ee5 	.word	0x08002ee5
 8002db4:	08002ee5 	.word	0x08002ee5
 8002db8:	08002ee5 	.word	0x08002ee5
 8002dbc:	08002e21 	.word	0x08002e21
 8002dc0:	08002ee5 	.word	0x08002ee5
 8002dc4:	08002ee5 	.word	0x08002ee5
 8002dc8:	08002ee5 	.word	0x08002ee5
 8002dcc:	08002e63 	.word	0x08002e63
 8002dd0:	08002ee5 	.word	0x08002ee5
 8002dd4:	08002ee5 	.word	0x08002ee5
 8002dd8:	08002ee5 	.word	0x08002ee5
 8002ddc:	08002ea3 	.word	0x08002ea3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	68b9      	ldr	r1, [r7, #8]
 8002de6:	4618      	mov	r0, r3
 8002de8:	f000 f9fc 	bl	80031e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	699a      	ldr	r2, [r3, #24]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f042 0208 	orr.w	r2, r2, #8
 8002dfa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	699a      	ldr	r2, [r3, #24]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f022 0204 	bic.w	r2, r2, #4
 8002e0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	6999      	ldr	r1, [r3, #24]
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	691a      	ldr	r2, [r3, #16]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	430a      	orrs	r2, r1
 8002e1c:	619a      	str	r2, [r3, #24]
      break;
 8002e1e:	e064      	b.n	8002eea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	68b9      	ldr	r1, [r7, #8]
 8002e26:	4618      	mov	r0, r3
 8002e28:	f000 fa4c 	bl	80032c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	699a      	ldr	r2, [r3, #24]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002e3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	699a      	ldr	r2, [r3, #24]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	6999      	ldr	r1, [r3, #24]
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	691b      	ldr	r3, [r3, #16]
 8002e56:	021a      	lsls	r2, r3, #8
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	430a      	orrs	r2, r1
 8002e5e:	619a      	str	r2, [r3, #24]
      break;
 8002e60:	e043      	b.n	8002eea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	68b9      	ldr	r1, [r7, #8]
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f000 faa1 	bl	80033b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	69da      	ldr	r2, [r3, #28]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f042 0208 	orr.w	r2, r2, #8
 8002e7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	69da      	ldr	r2, [r3, #28]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f022 0204 	bic.w	r2, r2, #4
 8002e8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	69d9      	ldr	r1, [r3, #28]
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	691a      	ldr	r2, [r3, #16]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	430a      	orrs	r2, r1
 8002e9e:	61da      	str	r2, [r3, #28]
      break;
 8002ea0:	e023      	b.n	8002eea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	68b9      	ldr	r1, [r7, #8]
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f000 faf5 	bl	8003498 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	69da      	ldr	r2, [r3, #28]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002ebc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	69da      	ldr	r2, [r3, #28]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ecc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	69d9      	ldr	r1, [r3, #28]
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	691b      	ldr	r3, [r3, #16]
 8002ed8:	021a      	lsls	r2, r3, #8
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	430a      	orrs	r2, r1
 8002ee0:	61da      	str	r2, [r3, #28]
      break;
 8002ee2:	e002      	b.n	8002eea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	75fb      	strb	r3, [r7, #23]
      break;
 8002ee8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002ef2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3718      	adds	r7, #24
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}

08002efc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f06:	2300      	movs	r3, #0
 8002f08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d101      	bne.n	8002f18 <HAL_TIM_ConfigClockSource+0x1c>
 8002f14:	2302      	movs	r3, #2
 8002f16:	e0b4      	b.n	8003082 <HAL_TIM_ConfigClockSource+0x186>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2202      	movs	r2, #2
 8002f24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002f36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002f3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	68ba      	ldr	r2, [r7, #8]
 8002f46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f50:	d03e      	beq.n	8002fd0 <HAL_TIM_ConfigClockSource+0xd4>
 8002f52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f56:	f200 8087 	bhi.w	8003068 <HAL_TIM_ConfigClockSource+0x16c>
 8002f5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f5e:	f000 8086 	beq.w	800306e <HAL_TIM_ConfigClockSource+0x172>
 8002f62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f66:	d87f      	bhi.n	8003068 <HAL_TIM_ConfigClockSource+0x16c>
 8002f68:	2b70      	cmp	r3, #112	@ 0x70
 8002f6a:	d01a      	beq.n	8002fa2 <HAL_TIM_ConfigClockSource+0xa6>
 8002f6c:	2b70      	cmp	r3, #112	@ 0x70
 8002f6e:	d87b      	bhi.n	8003068 <HAL_TIM_ConfigClockSource+0x16c>
 8002f70:	2b60      	cmp	r3, #96	@ 0x60
 8002f72:	d050      	beq.n	8003016 <HAL_TIM_ConfigClockSource+0x11a>
 8002f74:	2b60      	cmp	r3, #96	@ 0x60
 8002f76:	d877      	bhi.n	8003068 <HAL_TIM_ConfigClockSource+0x16c>
 8002f78:	2b50      	cmp	r3, #80	@ 0x50
 8002f7a:	d03c      	beq.n	8002ff6 <HAL_TIM_ConfigClockSource+0xfa>
 8002f7c:	2b50      	cmp	r3, #80	@ 0x50
 8002f7e:	d873      	bhi.n	8003068 <HAL_TIM_ConfigClockSource+0x16c>
 8002f80:	2b40      	cmp	r3, #64	@ 0x40
 8002f82:	d058      	beq.n	8003036 <HAL_TIM_ConfigClockSource+0x13a>
 8002f84:	2b40      	cmp	r3, #64	@ 0x40
 8002f86:	d86f      	bhi.n	8003068 <HAL_TIM_ConfigClockSource+0x16c>
 8002f88:	2b30      	cmp	r3, #48	@ 0x30
 8002f8a:	d064      	beq.n	8003056 <HAL_TIM_ConfigClockSource+0x15a>
 8002f8c:	2b30      	cmp	r3, #48	@ 0x30
 8002f8e:	d86b      	bhi.n	8003068 <HAL_TIM_ConfigClockSource+0x16c>
 8002f90:	2b20      	cmp	r3, #32
 8002f92:	d060      	beq.n	8003056 <HAL_TIM_ConfigClockSource+0x15a>
 8002f94:	2b20      	cmp	r3, #32
 8002f96:	d867      	bhi.n	8003068 <HAL_TIM_ConfigClockSource+0x16c>
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d05c      	beq.n	8003056 <HAL_TIM_ConfigClockSource+0x15a>
 8002f9c:	2b10      	cmp	r3, #16
 8002f9e:	d05a      	beq.n	8003056 <HAL_TIM_ConfigClockSource+0x15a>
 8002fa0:	e062      	b.n	8003068 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002fb2:	f000 fb41 	bl	8003638 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002fc4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	68ba      	ldr	r2, [r7, #8]
 8002fcc:	609a      	str	r2, [r3, #8]
      break;
 8002fce:	e04f      	b.n	8003070 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002fe0:	f000 fb2a 	bl	8003638 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	689a      	ldr	r2, [r3, #8]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002ff2:	609a      	str	r2, [r3, #8]
      break;
 8002ff4:	e03c      	b.n	8003070 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003002:	461a      	mov	r2, r3
 8003004:	f000 fa9e 	bl	8003544 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	2150      	movs	r1, #80	@ 0x50
 800300e:	4618      	mov	r0, r3
 8003010:	f000 faf7 	bl	8003602 <TIM_ITRx_SetConfig>
      break;
 8003014:	e02c      	b.n	8003070 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003022:	461a      	mov	r2, r3
 8003024:	f000 fabd 	bl	80035a2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2160      	movs	r1, #96	@ 0x60
 800302e:	4618      	mov	r0, r3
 8003030:	f000 fae7 	bl	8003602 <TIM_ITRx_SetConfig>
      break;
 8003034:	e01c      	b.n	8003070 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003042:	461a      	mov	r2, r3
 8003044:	f000 fa7e 	bl	8003544 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2140      	movs	r1, #64	@ 0x40
 800304e:	4618      	mov	r0, r3
 8003050:	f000 fad7 	bl	8003602 <TIM_ITRx_SetConfig>
      break;
 8003054:	e00c      	b.n	8003070 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4619      	mov	r1, r3
 8003060:	4610      	mov	r0, r2
 8003062:	f000 face 	bl	8003602 <TIM_ITRx_SetConfig>
      break;
 8003066:	e003      	b.n	8003070 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	73fb      	strb	r3, [r7, #15]
      break;
 800306c:	e000      	b.n	8003070 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800306e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003080:	7bfb      	ldrb	r3, [r7, #15]
}
 8003082:	4618      	mov	r0, r3
 8003084:	3710      	adds	r7, #16
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
	...

0800308c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800308c:	b480      	push	{r7}
 800308e:	b085      	sub	sp, #20
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	4a46      	ldr	r2, [pc, #280]	@ (80031b8 <TIM_Base_SetConfig+0x12c>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d013      	beq.n	80030cc <TIM_Base_SetConfig+0x40>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030aa:	d00f      	beq.n	80030cc <TIM_Base_SetConfig+0x40>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	4a43      	ldr	r2, [pc, #268]	@ (80031bc <TIM_Base_SetConfig+0x130>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d00b      	beq.n	80030cc <TIM_Base_SetConfig+0x40>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	4a42      	ldr	r2, [pc, #264]	@ (80031c0 <TIM_Base_SetConfig+0x134>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d007      	beq.n	80030cc <TIM_Base_SetConfig+0x40>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	4a41      	ldr	r2, [pc, #260]	@ (80031c4 <TIM_Base_SetConfig+0x138>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d003      	beq.n	80030cc <TIM_Base_SetConfig+0x40>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	4a40      	ldr	r2, [pc, #256]	@ (80031c8 <TIM_Base_SetConfig+0x13c>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d108      	bne.n	80030de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	68fa      	ldr	r2, [r7, #12]
 80030da:	4313      	orrs	r3, r2
 80030dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a35      	ldr	r2, [pc, #212]	@ (80031b8 <TIM_Base_SetConfig+0x12c>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d02b      	beq.n	800313e <TIM_Base_SetConfig+0xb2>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030ec:	d027      	beq.n	800313e <TIM_Base_SetConfig+0xb2>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a32      	ldr	r2, [pc, #200]	@ (80031bc <TIM_Base_SetConfig+0x130>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d023      	beq.n	800313e <TIM_Base_SetConfig+0xb2>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a31      	ldr	r2, [pc, #196]	@ (80031c0 <TIM_Base_SetConfig+0x134>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d01f      	beq.n	800313e <TIM_Base_SetConfig+0xb2>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a30      	ldr	r2, [pc, #192]	@ (80031c4 <TIM_Base_SetConfig+0x138>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d01b      	beq.n	800313e <TIM_Base_SetConfig+0xb2>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a2f      	ldr	r2, [pc, #188]	@ (80031c8 <TIM_Base_SetConfig+0x13c>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d017      	beq.n	800313e <TIM_Base_SetConfig+0xb2>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a2e      	ldr	r2, [pc, #184]	@ (80031cc <TIM_Base_SetConfig+0x140>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d013      	beq.n	800313e <TIM_Base_SetConfig+0xb2>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a2d      	ldr	r2, [pc, #180]	@ (80031d0 <TIM_Base_SetConfig+0x144>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d00f      	beq.n	800313e <TIM_Base_SetConfig+0xb2>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a2c      	ldr	r2, [pc, #176]	@ (80031d4 <TIM_Base_SetConfig+0x148>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d00b      	beq.n	800313e <TIM_Base_SetConfig+0xb2>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a2b      	ldr	r2, [pc, #172]	@ (80031d8 <TIM_Base_SetConfig+0x14c>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d007      	beq.n	800313e <TIM_Base_SetConfig+0xb2>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a2a      	ldr	r2, [pc, #168]	@ (80031dc <TIM_Base_SetConfig+0x150>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d003      	beq.n	800313e <TIM_Base_SetConfig+0xb2>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a29      	ldr	r2, [pc, #164]	@ (80031e0 <TIM_Base_SetConfig+0x154>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d108      	bne.n	8003150 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003144:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	68fa      	ldr	r2, [r7, #12]
 800314c:	4313      	orrs	r3, r2
 800314e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	695b      	ldr	r3, [r3, #20]
 800315a:	4313      	orrs	r3, r2
 800315c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	68fa      	ldr	r2, [r7, #12]
 8003162:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	689a      	ldr	r2, [r3, #8]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	4a10      	ldr	r2, [pc, #64]	@ (80031b8 <TIM_Base_SetConfig+0x12c>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d003      	beq.n	8003184 <TIM_Base_SetConfig+0xf8>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	4a12      	ldr	r2, [pc, #72]	@ (80031c8 <TIM_Base_SetConfig+0x13c>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d103      	bne.n	800318c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	691a      	ldr	r2, [r3, #16]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	691b      	ldr	r3, [r3, #16]
 8003196:	f003 0301 	and.w	r3, r3, #1
 800319a:	2b01      	cmp	r3, #1
 800319c:	d105      	bne.n	80031aa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	691b      	ldr	r3, [r3, #16]
 80031a2:	f023 0201 	bic.w	r2, r3, #1
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	611a      	str	r2, [r3, #16]
  }
}
 80031aa:	bf00      	nop
 80031ac:	3714      	adds	r7, #20
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr
 80031b6:	bf00      	nop
 80031b8:	40010000 	.word	0x40010000
 80031bc:	40000400 	.word	0x40000400
 80031c0:	40000800 	.word	0x40000800
 80031c4:	40000c00 	.word	0x40000c00
 80031c8:	40010400 	.word	0x40010400
 80031cc:	40014000 	.word	0x40014000
 80031d0:	40014400 	.word	0x40014400
 80031d4:	40014800 	.word	0x40014800
 80031d8:	40001800 	.word	0x40001800
 80031dc:	40001c00 	.word	0x40001c00
 80031e0:	40002000 	.word	0x40002000

080031e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b087      	sub	sp, #28
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a1b      	ldr	r3, [r3, #32]
 80031f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6a1b      	ldr	r3, [r3, #32]
 80031f8:	f023 0201 	bic.w	r2, r3, #1
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	699b      	ldr	r3, [r3, #24]
 800320a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003212:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f023 0303 	bic.w	r3, r3, #3
 800321a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	68fa      	ldr	r2, [r7, #12]
 8003222:	4313      	orrs	r3, r2
 8003224:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	f023 0302 	bic.w	r3, r3, #2
 800322c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	697a      	ldr	r2, [r7, #20]
 8003234:	4313      	orrs	r3, r2
 8003236:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	4a20      	ldr	r2, [pc, #128]	@ (80032bc <TIM_OC1_SetConfig+0xd8>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d003      	beq.n	8003248 <TIM_OC1_SetConfig+0x64>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	4a1f      	ldr	r2, [pc, #124]	@ (80032c0 <TIM_OC1_SetConfig+0xdc>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d10c      	bne.n	8003262 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	f023 0308 	bic.w	r3, r3, #8
 800324e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	697a      	ldr	r2, [r7, #20]
 8003256:	4313      	orrs	r3, r2
 8003258:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	f023 0304 	bic.w	r3, r3, #4
 8003260:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a15      	ldr	r2, [pc, #84]	@ (80032bc <TIM_OC1_SetConfig+0xd8>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d003      	beq.n	8003272 <TIM_OC1_SetConfig+0x8e>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4a14      	ldr	r2, [pc, #80]	@ (80032c0 <TIM_OC1_SetConfig+0xdc>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d111      	bne.n	8003296 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003278:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003280:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	695b      	ldr	r3, [r3, #20]
 8003286:	693a      	ldr	r2, [r7, #16]
 8003288:	4313      	orrs	r3, r2
 800328a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	699b      	ldr	r3, [r3, #24]
 8003290:	693a      	ldr	r2, [r7, #16]
 8003292:	4313      	orrs	r3, r2
 8003294:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	693a      	ldr	r2, [r7, #16]
 800329a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	68fa      	ldr	r2, [r7, #12]
 80032a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	685a      	ldr	r2, [r3, #4]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	697a      	ldr	r2, [r7, #20]
 80032ae:	621a      	str	r2, [r3, #32]
}
 80032b0:	bf00      	nop
 80032b2:	371c      	adds	r7, #28
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr
 80032bc:	40010000 	.word	0x40010000
 80032c0:	40010400 	.word	0x40010400

080032c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b087      	sub	sp, #28
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a1b      	ldr	r3, [r3, #32]
 80032d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a1b      	ldr	r3, [r3, #32]
 80032d8:	f023 0210 	bic.w	r2, r3, #16
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	699b      	ldr	r3, [r3, #24]
 80032ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80032f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	021b      	lsls	r3, r3, #8
 8003302:	68fa      	ldr	r2, [r7, #12]
 8003304:	4313      	orrs	r3, r2
 8003306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	f023 0320 	bic.w	r3, r3, #32
 800330e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	011b      	lsls	r3, r3, #4
 8003316:	697a      	ldr	r2, [r7, #20]
 8003318:	4313      	orrs	r3, r2
 800331a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	4a22      	ldr	r2, [pc, #136]	@ (80033a8 <TIM_OC2_SetConfig+0xe4>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d003      	beq.n	800332c <TIM_OC2_SetConfig+0x68>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	4a21      	ldr	r2, [pc, #132]	@ (80033ac <TIM_OC2_SetConfig+0xe8>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d10d      	bne.n	8003348 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003332:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	011b      	lsls	r3, r3, #4
 800333a:	697a      	ldr	r2, [r7, #20]
 800333c:	4313      	orrs	r3, r2
 800333e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003346:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4a17      	ldr	r2, [pc, #92]	@ (80033a8 <TIM_OC2_SetConfig+0xe4>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d003      	beq.n	8003358 <TIM_OC2_SetConfig+0x94>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	4a16      	ldr	r2, [pc, #88]	@ (80033ac <TIM_OC2_SetConfig+0xe8>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d113      	bne.n	8003380 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800335e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003366:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	695b      	ldr	r3, [r3, #20]
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	693a      	ldr	r2, [r7, #16]
 8003370:	4313      	orrs	r3, r2
 8003372:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	699b      	ldr	r3, [r3, #24]
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	693a      	ldr	r2, [r7, #16]
 800337c:	4313      	orrs	r3, r2
 800337e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	693a      	ldr	r2, [r7, #16]
 8003384:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	68fa      	ldr	r2, [r7, #12]
 800338a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	685a      	ldr	r2, [r3, #4]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	697a      	ldr	r2, [r7, #20]
 8003398:	621a      	str	r2, [r3, #32]
}
 800339a:	bf00      	nop
 800339c:	371c      	adds	r7, #28
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr
 80033a6:	bf00      	nop
 80033a8:	40010000 	.word	0x40010000
 80033ac:	40010400 	.word	0x40010400

080033b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b087      	sub	sp, #28
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a1b      	ldr	r3, [r3, #32]
 80033be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6a1b      	ldr	r3, [r3, #32]
 80033c4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	69db      	ldr	r3, [r3, #28]
 80033d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f023 0303 	bic.w	r3, r3, #3
 80033e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	68fa      	ldr	r2, [r7, #12]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80033f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	021b      	lsls	r3, r3, #8
 8003400:	697a      	ldr	r2, [r7, #20]
 8003402:	4313      	orrs	r3, r2
 8003404:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a21      	ldr	r2, [pc, #132]	@ (8003490 <TIM_OC3_SetConfig+0xe0>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d003      	beq.n	8003416 <TIM_OC3_SetConfig+0x66>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4a20      	ldr	r2, [pc, #128]	@ (8003494 <TIM_OC3_SetConfig+0xe4>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d10d      	bne.n	8003432 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800341c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	021b      	lsls	r3, r3, #8
 8003424:	697a      	ldr	r2, [r7, #20]
 8003426:	4313      	orrs	r3, r2
 8003428:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003430:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a16      	ldr	r2, [pc, #88]	@ (8003490 <TIM_OC3_SetConfig+0xe0>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d003      	beq.n	8003442 <TIM_OC3_SetConfig+0x92>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4a15      	ldr	r2, [pc, #84]	@ (8003494 <TIM_OC3_SetConfig+0xe4>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d113      	bne.n	800346a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003448:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003450:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	695b      	ldr	r3, [r3, #20]
 8003456:	011b      	lsls	r3, r3, #4
 8003458:	693a      	ldr	r2, [r7, #16]
 800345a:	4313      	orrs	r3, r2
 800345c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	699b      	ldr	r3, [r3, #24]
 8003462:	011b      	lsls	r3, r3, #4
 8003464:	693a      	ldr	r2, [r7, #16]
 8003466:	4313      	orrs	r3, r2
 8003468:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	693a      	ldr	r2, [r7, #16]
 800346e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	68fa      	ldr	r2, [r7, #12]
 8003474:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	685a      	ldr	r2, [r3, #4]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	697a      	ldr	r2, [r7, #20]
 8003482:	621a      	str	r2, [r3, #32]
}
 8003484:	bf00      	nop
 8003486:	371c      	adds	r7, #28
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr
 8003490:	40010000 	.word	0x40010000
 8003494:	40010400 	.word	0x40010400

08003498 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003498:	b480      	push	{r7}
 800349a:	b087      	sub	sp, #28
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6a1b      	ldr	r3, [r3, #32]
 80034a6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6a1b      	ldr	r3, [r3, #32]
 80034ac:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	69db      	ldr	r3, [r3, #28]
 80034be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80034c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	021b      	lsls	r3, r3, #8
 80034d6:	68fa      	ldr	r2, [r7, #12]
 80034d8:	4313      	orrs	r3, r2
 80034da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80034e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	031b      	lsls	r3, r3, #12
 80034ea:	693a      	ldr	r2, [r7, #16]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	4a12      	ldr	r2, [pc, #72]	@ (800353c <TIM_OC4_SetConfig+0xa4>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d003      	beq.n	8003500 <TIM_OC4_SetConfig+0x68>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	4a11      	ldr	r2, [pc, #68]	@ (8003540 <TIM_OC4_SetConfig+0xa8>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d109      	bne.n	8003514 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003506:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	695b      	ldr	r3, [r3, #20]
 800350c:	019b      	lsls	r3, r3, #6
 800350e:	697a      	ldr	r2, [r7, #20]
 8003510:	4313      	orrs	r3, r2
 8003512:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	697a      	ldr	r2, [r7, #20]
 8003518:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	68fa      	ldr	r2, [r7, #12]
 800351e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	685a      	ldr	r2, [r3, #4]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	693a      	ldr	r2, [r7, #16]
 800352c:	621a      	str	r2, [r3, #32]
}
 800352e:	bf00      	nop
 8003530:	371c      	adds	r7, #28
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr
 800353a:	bf00      	nop
 800353c:	40010000 	.word	0x40010000
 8003540:	40010400 	.word	0x40010400

08003544 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003544:	b480      	push	{r7}
 8003546:	b087      	sub	sp, #28
 8003548:	af00      	add	r7, sp, #0
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	60b9      	str	r1, [r7, #8]
 800354e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6a1b      	ldr	r3, [r3, #32]
 8003554:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6a1b      	ldr	r3, [r3, #32]
 800355a:	f023 0201 	bic.w	r2, r3, #1
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	699b      	ldr	r3, [r3, #24]
 8003566:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800356e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	011b      	lsls	r3, r3, #4
 8003574:	693a      	ldr	r2, [r7, #16]
 8003576:	4313      	orrs	r3, r2
 8003578:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	f023 030a 	bic.w	r3, r3, #10
 8003580:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003582:	697a      	ldr	r2, [r7, #20]
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	4313      	orrs	r3, r2
 8003588:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	693a      	ldr	r2, [r7, #16]
 800358e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	697a      	ldr	r2, [r7, #20]
 8003594:	621a      	str	r2, [r3, #32]
}
 8003596:	bf00      	nop
 8003598:	371c      	adds	r7, #28
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr

080035a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035a2:	b480      	push	{r7}
 80035a4:	b087      	sub	sp, #28
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	60f8      	str	r0, [r7, #12]
 80035aa:	60b9      	str	r1, [r7, #8]
 80035ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	6a1b      	ldr	r3, [r3, #32]
 80035b2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6a1b      	ldr	r3, [r3, #32]
 80035b8:	f023 0210 	bic.w	r2, r3, #16
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	699b      	ldr	r3, [r3, #24]
 80035c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80035cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	031b      	lsls	r3, r3, #12
 80035d2:	693a      	ldr	r2, [r7, #16]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80035de:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	011b      	lsls	r3, r3, #4
 80035e4:	697a      	ldr	r2, [r7, #20]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	693a      	ldr	r2, [r7, #16]
 80035ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	697a      	ldr	r2, [r7, #20]
 80035f4:	621a      	str	r2, [r3, #32]
}
 80035f6:	bf00      	nop
 80035f8:	371c      	adds	r7, #28
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr

08003602 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003602:	b480      	push	{r7}
 8003604:	b085      	sub	sp, #20
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
 800360a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003618:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800361a:	683a      	ldr	r2, [r7, #0]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	4313      	orrs	r3, r2
 8003620:	f043 0307 	orr.w	r3, r3, #7
 8003624:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	68fa      	ldr	r2, [r7, #12]
 800362a:	609a      	str	r2, [r3, #8]
}
 800362c:	bf00      	nop
 800362e:	3714      	adds	r7, #20
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr

08003638 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003638:	b480      	push	{r7}
 800363a:	b087      	sub	sp, #28
 800363c:	af00      	add	r7, sp, #0
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	60b9      	str	r1, [r7, #8]
 8003642:	607a      	str	r2, [r7, #4]
 8003644:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003652:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	021a      	lsls	r2, r3, #8
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	431a      	orrs	r2, r3
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	4313      	orrs	r3, r2
 8003660:	697a      	ldr	r2, [r7, #20]
 8003662:	4313      	orrs	r3, r2
 8003664:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	697a      	ldr	r2, [r7, #20]
 800366a:	609a      	str	r2, [r3, #8]
}
 800366c:	bf00      	nop
 800366e:	371c      	adds	r7, #28
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr

08003678 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003678:	b480      	push	{r7}
 800367a:	b085      	sub	sp, #20
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003688:	2b01      	cmp	r3, #1
 800368a:	d101      	bne.n	8003690 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800368c:	2302      	movs	r3, #2
 800368e:	e05a      	b.n	8003746 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2202      	movs	r2, #2
 800369c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	68fa      	ldr	r2, [r7, #12]
 80036be:	4313      	orrs	r3, r2
 80036c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	68fa      	ldr	r2, [r7, #12]
 80036c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a21      	ldr	r2, [pc, #132]	@ (8003754 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d022      	beq.n	800371a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036dc:	d01d      	beq.n	800371a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a1d      	ldr	r2, [pc, #116]	@ (8003758 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d018      	beq.n	800371a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a1b      	ldr	r2, [pc, #108]	@ (800375c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d013      	beq.n	800371a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a1a      	ldr	r2, [pc, #104]	@ (8003760 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d00e      	beq.n	800371a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a18      	ldr	r2, [pc, #96]	@ (8003764 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d009      	beq.n	800371a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a17      	ldr	r2, [pc, #92]	@ (8003768 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d004      	beq.n	800371a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a15      	ldr	r2, [pc, #84]	@ (800376c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d10c      	bne.n	8003734 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003720:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	68ba      	ldr	r2, [r7, #8]
 8003728:	4313      	orrs	r3, r2
 800372a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	68ba      	ldr	r2, [r7, #8]
 8003732:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003744:	2300      	movs	r3, #0
}
 8003746:	4618      	mov	r0, r3
 8003748:	3714      	adds	r7, #20
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr
 8003752:	bf00      	nop
 8003754:	40010000 	.word	0x40010000
 8003758:	40000400 	.word	0x40000400
 800375c:	40000800 	.word	0x40000800
 8003760:	40000c00 	.word	0x40000c00
 8003764:	40010400 	.word	0x40010400
 8003768:	40014000 	.word	0x40014000
 800376c:	40001800 	.word	0x40001800

08003770 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b082      	sub	sp, #8
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d101      	bne.n	8003782 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e042      	b.n	8003808 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003788:	b2db      	uxtb	r3, r3
 800378a:	2b00      	cmp	r3, #0
 800378c:	d106      	bne.n	800379c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f7fd fa3e 	bl	8000c18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2224      	movs	r2, #36	@ 0x24
 80037a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	68da      	ldr	r2, [r3, #12]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80037b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f000 f973 	bl	8003aa0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	691a      	ldr	r2, [r3, #16]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80037c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	695a      	ldr	r2, [r3, #20]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80037d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	68da      	ldr	r2, [r3, #12]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80037e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2220      	movs	r2, #32
 80037f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2220      	movs	r2, #32
 80037fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003806:	2300      	movs	r3, #0
}
 8003808:	4618      	mov	r0, r3
 800380a:	3708      	adds	r7, #8
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}

08003810 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b08a      	sub	sp, #40	@ 0x28
 8003814:	af02      	add	r7, sp, #8
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	60b9      	str	r1, [r7, #8]
 800381a:	603b      	str	r3, [r7, #0]
 800381c:	4613      	mov	r3, r2
 800381e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003820:	2300      	movs	r3, #0
 8003822:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800382a:	b2db      	uxtb	r3, r3
 800382c:	2b20      	cmp	r3, #32
 800382e:	d175      	bne.n	800391c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d002      	beq.n	800383c <HAL_UART_Transmit+0x2c>
 8003836:	88fb      	ldrh	r3, [r7, #6]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d101      	bne.n	8003840 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	e06e      	b.n	800391e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2200      	movs	r2, #0
 8003844:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2221      	movs	r2, #33	@ 0x21
 800384a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800384e:	f7fd fb3d 	bl	8000ecc <HAL_GetTick>
 8003852:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	88fa      	ldrh	r2, [r7, #6]
 8003858:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	88fa      	ldrh	r2, [r7, #6]
 800385e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003868:	d108      	bne.n	800387c <HAL_UART_Transmit+0x6c>
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	691b      	ldr	r3, [r3, #16]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d104      	bne.n	800387c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003872:	2300      	movs	r3, #0
 8003874:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	61bb      	str	r3, [r7, #24]
 800387a:	e003      	b.n	8003884 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003880:	2300      	movs	r3, #0
 8003882:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003884:	e02e      	b.n	80038e4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	9300      	str	r3, [sp, #0]
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	2200      	movs	r2, #0
 800388e:	2180      	movs	r1, #128	@ 0x80
 8003890:	68f8      	ldr	r0, [r7, #12]
 8003892:	f000 f848 	bl	8003926 <UART_WaitOnFlagUntilTimeout>
 8003896:	4603      	mov	r3, r0
 8003898:	2b00      	cmp	r3, #0
 800389a:	d005      	beq.n	80038a8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2220      	movs	r2, #32
 80038a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80038a4:	2303      	movs	r3, #3
 80038a6:	e03a      	b.n	800391e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d10b      	bne.n	80038c6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038ae:	69bb      	ldr	r3, [r7, #24]
 80038b0:	881b      	ldrh	r3, [r3, #0]
 80038b2:	461a      	mov	r2, r3
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038bc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80038be:	69bb      	ldr	r3, [r7, #24]
 80038c0:	3302      	adds	r3, #2
 80038c2:	61bb      	str	r3, [r7, #24]
 80038c4:	e007      	b.n	80038d6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	781a      	ldrb	r2, [r3, #0]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80038d0:	69fb      	ldr	r3, [r7, #28]
 80038d2:	3301      	adds	r3, #1
 80038d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80038da:	b29b      	uxth	r3, r3
 80038dc:	3b01      	subs	r3, #1
 80038de:	b29a      	uxth	r2, r3
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d1cb      	bne.n	8003886 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	9300      	str	r3, [sp, #0]
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	2200      	movs	r2, #0
 80038f6:	2140      	movs	r1, #64	@ 0x40
 80038f8:	68f8      	ldr	r0, [r7, #12]
 80038fa:	f000 f814 	bl	8003926 <UART_WaitOnFlagUntilTimeout>
 80038fe:	4603      	mov	r3, r0
 8003900:	2b00      	cmp	r3, #0
 8003902:	d005      	beq.n	8003910 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2220      	movs	r2, #32
 8003908:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800390c:	2303      	movs	r3, #3
 800390e:	e006      	b.n	800391e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2220      	movs	r2, #32
 8003914:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003918:	2300      	movs	r3, #0
 800391a:	e000      	b.n	800391e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800391c:	2302      	movs	r3, #2
  }
}
 800391e:	4618      	mov	r0, r3
 8003920:	3720      	adds	r7, #32
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}

08003926 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003926:	b580      	push	{r7, lr}
 8003928:	b086      	sub	sp, #24
 800392a:	af00      	add	r7, sp, #0
 800392c:	60f8      	str	r0, [r7, #12]
 800392e:	60b9      	str	r1, [r7, #8]
 8003930:	603b      	str	r3, [r7, #0]
 8003932:	4613      	mov	r3, r2
 8003934:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003936:	e03b      	b.n	80039b0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003938:	6a3b      	ldr	r3, [r7, #32]
 800393a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800393e:	d037      	beq.n	80039b0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003940:	f7fd fac4 	bl	8000ecc <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	6a3a      	ldr	r2, [r7, #32]
 800394c:	429a      	cmp	r2, r3
 800394e:	d302      	bcc.n	8003956 <UART_WaitOnFlagUntilTimeout+0x30>
 8003950:	6a3b      	ldr	r3, [r7, #32]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d101      	bne.n	800395a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e03a      	b.n	80039d0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	f003 0304 	and.w	r3, r3, #4
 8003964:	2b00      	cmp	r3, #0
 8003966:	d023      	beq.n	80039b0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	2b80      	cmp	r3, #128	@ 0x80
 800396c:	d020      	beq.n	80039b0 <UART_WaitOnFlagUntilTimeout+0x8a>
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	2b40      	cmp	r3, #64	@ 0x40
 8003972:	d01d      	beq.n	80039b0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0308 	and.w	r3, r3, #8
 800397e:	2b08      	cmp	r3, #8
 8003980:	d116      	bne.n	80039b0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003982:	2300      	movs	r3, #0
 8003984:	617b      	str	r3, [r7, #20]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	617b      	str	r3, [r7, #20]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	617b      	str	r3, [r7, #20]
 8003996:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003998:	68f8      	ldr	r0, [r7, #12]
 800399a:	f000 f81d 	bl	80039d8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2208      	movs	r2, #8
 80039a2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2200      	movs	r2, #0
 80039a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e00f      	b.n	80039d0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	4013      	ands	r3, r2
 80039ba:	68ba      	ldr	r2, [r7, #8]
 80039bc:	429a      	cmp	r2, r3
 80039be:	bf0c      	ite	eq
 80039c0:	2301      	moveq	r3, #1
 80039c2:	2300      	movne	r3, #0
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	461a      	mov	r2, r3
 80039c8:	79fb      	ldrb	r3, [r7, #7]
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d0b4      	beq.n	8003938 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039ce:	2300      	movs	r3, #0
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3718      	adds	r7, #24
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80039d8:	b480      	push	{r7}
 80039da:	b095      	sub	sp, #84	@ 0x54
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	330c      	adds	r3, #12
 80039e6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039ea:	e853 3f00 	ldrex	r3, [r3]
 80039ee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80039f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039f2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80039f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	330c      	adds	r3, #12
 80039fe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003a00:	643a      	str	r2, [r7, #64]	@ 0x40
 8003a02:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a04:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003a06:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003a08:	e841 2300 	strex	r3, r2, [r1]
 8003a0c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003a0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d1e5      	bne.n	80039e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	3314      	adds	r3, #20
 8003a1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a1c:	6a3b      	ldr	r3, [r7, #32]
 8003a1e:	e853 3f00 	ldrex	r3, [r3]
 8003a22:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a24:	69fb      	ldr	r3, [r7, #28]
 8003a26:	f023 0301 	bic.w	r3, r3, #1
 8003a2a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	3314      	adds	r3, #20
 8003a32:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003a34:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003a36:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a38:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a3c:	e841 2300 	strex	r3, r2, [r1]
 8003a40:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d1e5      	bne.n	8003a14 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d119      	bne.n	8003a84 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	330c      	adds	r3, #12
 8003a56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	e853 3f00 	ldrex	r3, [r3]
 8003a5e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	f023 0310 	bic.w	r3, r3, #16
 8003a66:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	330c      	adds	r3, #12
 8003a6e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003a70:	61ba      	str	r2, [r7, #24]
 8003a72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a74:	6979      	ldr	r1, [r7, #20]
 8003a76:	69ba      	ldr	r2, [r7, #24]
 8003a78:	e841 2300 	strex	r3, r2, [r1]
 8003a7c:	613b      	str	r3, [r7, #16]
   return(result);
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d1e5      	bne.n	8003a50 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2220      	movs	r2, #32
 8003a88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003a92:	bf00      	nop
 8003a94:	3754      	adds	r7, #84	@ 0x54
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr
	...

08003aa0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003aa0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003aa4:	b0c0      	sub	sp, #256	@ 0x100
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	691b      	ldr	r3, [r3, #16]
 8003ab4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003abc:	68d9      	ldr	r1, [r3, #12]
 8003abe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	ea40 0301 	orr.w	r3, r0, r1
 8003ac8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003aca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ace:	689a      	ldr	r2, [r3, #8]
 8003ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ad4:	691b      	ldr	r3, [r3, #16]
 8003ad6:	431a      	orrs	r2, r3
 8003ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003adc:	695b      	ldr	r3, [r3, #20]
 8003ade:	431a      	orrs	r2, r3
 8003ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ae4:	69db      	ldr	r3, [r3, #28]
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003af8:	f021 010c 	bic.w	r1, r1, #12
 8003afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003b06:	430b      	orrs	r3, r1
 8003b08:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	695b      	ldr	r3, [r3, #20]
 8003b12:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003b16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b1a:	6999      	ldr	r1, [r3, #24]
 8003b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	ea40 0301 	orr.w	r3, r0, r1
 8003b26:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	4b8f      	ldr	r3, [pc, #572]	@ (8003d6c <UART_SetConfig+0x2cc>)
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d005      	beq.n	8003b40 <UART_SetConfig+0xa0>
 8003b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	4b8d      	ldr	r3, [pc, #564]	@ (8003d70 <UART_SetConfig+0x2d0>)
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d104      	bne.n	8003b4a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b40:	f7fe fb90 	bl	8002264 <HAL_RCC_GetPCLK2Freq>
 8003b44:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003b48:	e003      	b.n	8003b52 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b4a:	f7fe fb77 	bl	800223c <HAL_RCC_GetPCLK1Freq>
 8003b4e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b56:	69db      	ldr	r3, [r3, #28]
 8003b58:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b5c:	f040 810c 	bne.w	8003d78 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b64:	2200      	movs	r2, #0
 8003b66:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003b6a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003b6e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003b72:	4622      	mov	r2, r4
 8003b74:	462b      	mov	r3, r5
 8003b76:	1891      	adds	r1, r2, r2
 8003b78:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003b7a:	415b      	adcs	r3, r3
 8003b7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003b7e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003b82:	4621      	mov	r1, r4
 8003b84:	eb12 0801 	adds.w	r8, r2, r1
 8003b88:	4629      	mov	r1, r5
 8003b8a:	eb43 0901 	adc.w	r9, r3, r1
 8003b8e:	f04f 0200 	mov.w	r2, #0
 8003b92:	f04f 0300 	mov.w	r3, #0
 8003b96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ba2:	4690      	mov	r8, r2
 8003ba4:	4699      	mov	r9, r3
 8003ba6:	4623      	mov	r3, r4
 8003ba8:	eb18 0303 	adds.w	r3, r8, r3
 8003bac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003bb0:	462b      	mov	r3, r5
 8003bb2:	eb49 0303 	adc.w	r3, r9, r3
 8003bb6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003bba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003bc6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003bca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003bce:	460b      	mov	r3, r1
 8003bd0:	18db      	adds	r3, r3, r3
 8003bd2:	653b      	str	r3, [r7, #80]	@ 0x50
 8003bd4:	4613      	mov	r3, r2
 8003bd6:	eb42 0303 	adc.w	r3, r2, r3
 8003bda:	657b      	str	r3, [r7, #84]	@ 0x54
 8003bdc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003be0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003be4:	f7fc fb64 	bl	80002b0 <__aeabi_uldivmod>
 8003be8:	4602      	mov	r2, r0
 8003bea:	460b      	mov	r3, r1
 8003bec:	4b61      	ldr	r3, [pc, #388]	@ (8003d74 <UART_SetConfig+0x2d4>)
 8003bee:	fba3 2302 	umull	r2, r3, r3, r2
 8003bf2:	095b      	lsrs	r3, r3, #5
 8003bf4:	011c      	lsls	r4, r3, #4
 8003bf6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003c00:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003c04:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003c08:	4642      	mov	r2, r8
 8003c0a:	464b      	mov	r3, r9
 8003c0c:	1891      	adds	r1, r2, r2
 8003c0e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003c10:	415b      	adcs	r3, r3
 8003c12:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c14:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003c18:	4641      	mov	r1, r8
 8003c1a:	eb12 0a01 	adds.w	sl, r2, r1
 8003c1e:	4649      	mov	r1, r9
 8003c20:	eb43 0b01 	adc.w	fp, r3, r1
 8003c24:	f04f 0200 	mov.w	r2, #0
 8003c28:	f04f 0300 	mov.w	r3, #0
 8003c2c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003c30:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003c34:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c38:	4692      	mov	sl, r2
 8003c3a:	469b      	mov	fp, r3
 8003c3c:	4643      	mov	r3, r8
 8003c3e:	eb1a 0303 	adds.w	r3, sl, r3
 8003c42:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003c46:	464b      	mov	r3, r9
 8003c48:	eb4b 0303 	adc.w	r3, fp, r3
 8003c4c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003c5c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003c60:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003c64:	460b      	mov	r3, r1
 8003c66:	18db      	adds	r3, r3, r3
 8003c68:	643b      	str	r3, [r7, #64]	@ 0x40
 8003c6a:	4613      	mov	r3, r2
 8003c6c:	eb42 0303 	adc.w	r3, r2, r3
 8003c70:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c72:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003c76:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003c7a:	f7fc fb19 	bl	80002b0 <__aeabi_uldivmod>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	460b      	mov	r3, r1
 8003c82:	4611      	mov	r1, r2
 8003c84:	4b3b      	ldr	r3, [pc, #236]	@ (8003d74 <UART_SetConfig+0x2d4>)
 8003c86:	fba3 2301 	umull	r2, r3, r3, r1
 8003c8a:	095b      	lsrs	r3, r3, #5
 8003c8c:	2264      	movs	r2, #100	@ 0x64
 8003c8e:	fb02 f303 	mul.w	r3, r2, r3
 8003c92:	1acb      	subs	r3, r1, r3
 8003c94:	00db      	lsls	r3, r3, #3
 8003c96:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003c9a:	4b36      	ldr	r3, [pc, #216]	@ (8003d74 <UART_SetConfig+0x2d4>)
 8003c9c:	fba3 2302 	umull	r2, r3, r3, r2
 8003ca0:	095b      	lsrs	r3, r3, #5
 8003ca2:	005b      	lsls	r3, r3, #1
 8003ca4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003ca8:	441c      	add	r4, r3
 8003caa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003cb4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003cb8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003cbc:	4642      	mov	r2, r8
 8003cbe:	464b      	mov	r3, r9
 8003cc0:	1891      	adds	r1, r2, r2
 8003cc2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003cc4:	415b      	adcs	r3, r3
 8003cc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003cc8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003ccc:	4641      	mov	r1, r8
 8003cce:	1851      	adds	r1, r2, r1
 8003cd0:	6339      	str	r1, [r7, #48]	@ 0x30
 8003cd2:	4649      	mov	r1, r9
 8003cd4:	414b      	adcs	r3, r1
 8003cd6:	637b      	str	r3, [r7, #52]	@ 0x34
 8003cd8:	f04f 0200 	mov.w	r2, #0
 8003cdc:	f04f 0300 	mov.w	r3, #0
 8003ce0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003ce4:	4659      	mov	r1, fp
 8003ce6:	00cb      	lsls	r3, r1, #3
 8003ce8:	4651      	mov	r1, sl
 8003cea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003cee:	4651      	mov	r1, sl
 8003cf0:	00ca      	lsls	r2, r1, #3
 8003cf2:	4610      	mov	r0, r2
 8003cf4:	4619      	mov	r1, r3
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	4642      	mov	r2, r8
 8003cfa:	189b      	adds	r3, r3, r2
 8003cfc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003d00:	464b      	mov	r3, r9
 8003d02:	460a      	mov	r2, r1
 8003d04:	eb42 0303 	adc.w	r3, r2, r3
 8003d08:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003d18:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003d1c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003d20:	460b      	mov	r3, r1
 8003d22:	18db      	adds	r3, r3, r3
 8003d24:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d26:	4613      	mov	r3, r2
 8003d28:	eb42 0303 	adc.w	r3, r2, r3
 8003d2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d2e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003d32:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003d36:	f7fc fabb 	bl	80002b0 <__aeabi_uldivmod>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	460b      	mov	r3, r1
 8003d3e:	4b0d      	ldr	r3, [pc, #52]	@ (8003d74 <UART_SetConfig+0x2d4>)
 8003d40:	fba3 1302 	umull	r1, r3, r3, r2
 8003d44:	095b      	lsrs	r3, r3, #5
 8003d46:	2164      	movs	r1, #100	@ 0x64
 8003d48:	fb01 f303 	mul.w	r3, r1, r3
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	00db      	lsls	r3, r3, #3
 8003d50:	3332      	adds	r3, #50	@ 0x32
 8003d52:	4a08      	ldr	r2, [pc, #32]	@ (8003d74 <UART_SetConfig+0x2d4>)
 8003d54:	fba2 2303 	umull	r2, r3, r2, r3
 8003d58:	095b      	lsrs	r3, r3, #5
 8003d5a:	f003 0207 	and.w	r2, r3, #7
 8003d5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4422      	add	r2, r4
 8003d66:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003d68:	e106      	b.n	8003f78 <UART_SetConfig+0x4d8>
 8003d6a:	bf00      	nop
 8003d6c:	40011000 	.word	0x40011000
 8003d70:	40011400 	.word	0x40011400
 8003d74:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003d82:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003d86:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003d8a:	4642      	mov	r2, r8
 8003d8c:	464b      	mov	r3, r9
 8003d8e:	1891      	adds	r1, r2, r2
 8003d90:	6239      	str	r1, [r7, #32]
 8003d92:	415b      	adcs	r3, r3
 8003d94:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d96:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003d9a:	4641      	mov	r1, r8
 8003d9c:	1854      	adds	r4, r2, r1
 8003d9e:	4649      	mov	r1, r9
 8003da0:	eb43 0501 	adc.w	r5, r3, r1
 8003da4:	f04f 0200 	mov.w	r2, #0
 8003da8:	f04f 0300 	mov.w	r3, #0
 8003dac:	00eb      	lsls	r3, r5, #3
 8003dae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003db2:	00e2      	lsls	r2, r4, #3
 8003db4:	4614      	mov	r4, r2
 8003db6:	461d      	mov	r5, r3
 8003db8:	4643      	mov	r3, r8
 8003dba:	18e3      	adds	r3, r4, r3
 8003dbc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003dc0:	464b      	mov	r3, r9
 8003dc2:	eb45 0303 	adc.w	r3, r5, r3
 8003dc6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003dca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003dd6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003dda:	f04f 0200 	mov.w	r2, #0
 8003dde:	f04f 0300 	mov.w	r3, #0
 8003de2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003de6:	4629      	mov	r1, r5
 8003de8:	008b      	lsls	r3, r1, #2
 8003dea:	4621      	mov	r1, r4
 8003dec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003df0:	4621      	mov	r1, r4
 8003df2:	008a      	lsls	r2, r1, #2
 8003df4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003df8:	f7fc fa5a 	bl	80002b0 <__aeabi_uldivmod>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	460b      	mov	r3, r1
 8003e00:	4b60      	ldr	r3, [pc, #384]	@ (8003f84 <UART_SetConfig+0x4e4>)
 8003e02:	fba3 2302 	umull	r2, r3, r3, r2
 8003e06:	095b      	lsrs	r3, r3, #5
 8003e08:	011c      	lsls	r4, r3, #4
 8003e0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003e14:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003e18:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003e1c:	4642      	mov	r2, r8
 8003e1e:	464b      	mov	r3, r9
 8003e20:	1891      	adds	r1, r2, r2
 8003e22:	61b9      	str	r1, [r7, #24]
 8003e24:	415b      	adcs	r3, r3
 8003e26:	61fb      	str	r3, [r7, #28]
 8003e28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e2c:	4641      	mov	r1, r8
 8003e2e:	1851      	adds	r1, r2, r1
 8003e30:	6139      	str	r1, [r7, #16]
 8003e32:	4649      	mov	r1, r9
 8003e34:	414b      	adcs	r3, r1
 8003e36:	617b      	str	r3, [r7, #20]
 8003e38:	f04f 0200 	mov.w	r2, #0
 8003e3c:	f04f 0300 	mov.w	r3, #0
 8003e40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e44:	4659      	mov	r1, fp
 8003e46:	00cb      	lsls	r3, r1, #3
 8003e48:	4651      	mov	r1, sl
 8003e4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e4e:	4651      	mov	r1, sl
 8003e50:	00ca      	lsls	r2, r1, #3
 8003e52:	4610      	mov	r0, r2
 8003e54:	4619      	mov	r1, r3
 8003e56:	4603      	mov	r3, r0
 8003e58:	4642      	mov	r2, r8
 8003e5a:	189b      	adds	r3, r3, r2
 8003e5c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003e60:	464b      	mov	r3, r9
 8003e62:	460a      	mov	r2, r1
 8003e64:	eb42 0303 	adc.w	r3, r2, r3
 8003e68:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	2200      	movs	r2, #0
 8003e74:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003e76:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003e78:	f04f 0200 	mov.w	r2, #0
 8003e7c:	f04f 0300 	mov.w	r3, #0
 8003e80:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003e84:	4649      	mov	r1, r9
 8003e86:	008b      	lsls	r3, r1, #2
 8003e88:	4641      	mov	r1, r8
 8003e8a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e8e:	4641      	mov	r1, r8
 8003e90:	008a      	lsls	r2, r1, #2
 8003e92:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003e96:	f7fc fa0b 	bl	80002b0 <__aeabi_uldivmod>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	460b      	mov	r3, r1
 8003e9e:	4611      	mov	r1, r2
 8003ea0:	4b38      	ldr	r3, [pc, #224]	@ (8003f84 <UART_SetConfig+0x4e4>)
 8003ea2:	fba3 2301 	umull	r2, r3, r3, r1
 8003ea6:	095b      	lsrs	r3, r3, #5
 8003ea8:	2264      	movs	r2, #100	@ 0x64
 8003eaa:	fb02 f303 	mul.w	r3, r2, r3
 8003eae:	1acb      	subs	r3, r1, r3
 8003eb0:	011b      	lsls	r3, r3, #4
 8003eb2:	3332      	adds	r3, #50	@ 0x32
 8003eb4:	4a33      	ldr	r2, [pc, #204]	@ (8003f84 <UART_SetConfig+0x4e4>)
 8003eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8003eba:	095b      	lsrs	r3, r3, #5
 8003ebc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003ec0:	441c      	add	r4, r3
 8003ec2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	673b      	str	r3, [r7, #112]	@ 0x70
 8003eca:	677a      	str	r2, [r7, #116]	@ 0x74
 8003ecc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003ed0:	4642      	mov	r2, r8
 8003ed2:	464b      	mov	r3, r9
 8003ed4:	1891      	adds	r1, r2, r2
 8003ed6:	60b9      	str	r1, [r7, #8]
 8003ed8:	415b      	adcs	r3, r3
 8003eda:	60fb      	str	r3, [r7, #12]
 8003edc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ee0:	4641      	mov	r1, r8
 8003ee2:	1851      	adds	r1, r2, r1
 8003ee4:	6039      	str	r1, [r7, #0]
 8003ee6:	4649      	mov	r1, r9
 8003ee8:	414b      	adcs	r3, r1
 8003eea:	607b      	str	r3, [r7, #4]
 8003eec:	f04f 0200 	mov.w	r2, #0
 8003ef0:	f04f 0300 	mov.w	r3, #0
 8003ef4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003ef8:	4659      	mov	r1, fp
 8003efa:	00cb      	lsls	r3, r1, #3
 8003efc:	4651      	mov	r1, sl
 8003efe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f02:	4651      	mov	r1, sl
 8003f04:	00ca      	lsls	r2, r1, #3
 8003f06:	4610      	mov	r0, r2
 8003f08:	4619      	mov	r1, r3
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	4642      	mov	r2, r8
 8003f0e:	189b      	adds	r3, r3, r2
 8003f10:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003f12:	464b      	mov	r3, r9
 8003f14:	460a      	mov	r2, r1
 8003f16:	eb42 0303 	adc.w	r3, r2, r3
 8003f1a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	2200      	movs	r2, #0
 8003f24:	663b      	str	r3, [r7, #96]	@ 0x60
 8003f26:	667a      	str	r2, [r7, #100]	@ 0x64
 8003f28:	f04f 0200 	mov.w	r2, #0
 8003f2c:	f04f 0300 	mov.w	r3, #0
 8003f30:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003f34:	4649      	mov	r1, r9
 8003f36:	008b      	lsls	r3, r1, #2
 8003f38:	4641      	mov	r1, r8
 8003f3a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f3e:	4641      	mov	r1, r8
 8003f40:	008a      	lsls	r2, r1, #2
 8003f42:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003f46:	f7fc f9b3 	bl	80002b0 <__aeabi_uldivmod>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	460b      	mov	r3, r1
 8003f4e:	4b0d      	ldr	r3, [pc, #52]	@ (8003f84 <UART_SetConfig+0x4e4>)
 8003f50:	fba3 1302 	umull	r1, r3, r3, r2
 8003f54:	095b      	lsrs	r3, r3, #5
 8003f56:	2164      	movs	r1, #100	@ 0x64
 8003f58:	fb01 f303 	mul.w	r3, r1, r3
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	011b      	lsls	r3, r3, #4
 8003f60:	3332      	adds	r3, #50	@ 0x32
 8003f62:	4a08      	ldr	r2, [pc, #32]	@ (8003f84 <UART_SetConfig+0x4e4>)
 8003f64:	fba2 2303 	umull	r2, r3, r2, r3
 8003f68:	095b      	lsrs	r3, r3, #5
 8003f6a:	f003 020f 	and.w	r2, r3, #15
 8003f6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4422      	add	r2, r4
 8003f76:	609a      	str	r2, [r3, #8]
}
 8003f78:	bf00      	nop
 8003f7a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f84:	51eb851f 	.word	0x51eb851f

08003f88 <siprintf>:
 8003f88:	b40e      	push	{r1, r2, r3}
 8003f8a:	b500      	push	{lr}
 8003f8c:	b09c      	sub	sp, #112	@ 0x70
 8003f8e:	ab1d      	add	r3, sp, #116	@ 0x74
 8003f90:	9002      	str	r0, [sp, #8]
 8003f92:	9006      	str	r0, [sp, #24]
 8003f94:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003f98:	4809      	ldr	r0, [pc, #36]	@ (8003fc0 <siprintf+0x38>)
 8003f9a:	9107      	str	r1, [sp, #28]
 8003f9c:	9104      	str	r1, [sp, #16]
 8003f9e:	4909      	ldr	r1, [pc, #36]	@ (8003fc4 <siprintf+0x3c>)
 8003fa0:	f853 2b04 	ldr.w	r2, [r3], #4
 8003fa4:	9105      	str	r1, [sp, #20]
 8003fa6:	6800      	ldr	r0, [r0, #0]
 8003fa8:	9301      	str	r3, [sp, #4]
 8003faa:	a902      	add	r1, sp, #8
 8003fac:	f000 f994 	bl	80042d8 <_svfiprintf_r>
 8003fb0:	9b02      	ldr	r3, [sp, #8]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	701a      	strb	r2, [r3, #0]
 8003fb6:	b01c      	add	sp, #112	@ 0x70
 8003fb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8003fbc:	b003      	add	sp, #12
 8003fbe:	4770      	bx	lr
 8003fc0:	20000038 	.word	0x20000038
 8003fc4:	ffff0208 	.word	0xffff0208

08003fc8 <memset>:
 8003fc8:	4402      	add	r2, r0
 8003fca:	4603      	mov	r3, r0
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d100      	bne.n	8003fd2 <memset+0xa>
 8003fd0:	4770      	bx	lr
 8003fd2:	f803 1b01 	strb.w	r1, [r3], #1
 8003fd6:	e7f9      	b.n	8003fcc <memset+0x4>

08003fd8 <__errno>:
 8003fd8:	4b01      	ldr	r3, [pc, #4]	@ (8003fe0 <__errno+0x8>)
 8003fda:	6818      	ldr	r0, [r3, #0]
 8003fdc:	4770      	bx	lr
 8003fde:	bf00      	nop
 8003fe0:	20000038 	.word	0x20000038

08003fe4 <__libc_init_array>:
 8003fe4:	b570      	push	{r4, r5, r6, lr}
 8003fe6:	4d0d      	ldr	r5, [pc, #52]	@ (800401c <__libc_init_array+0x38>)
 8003fe8:	4c0d      	ldr	r4, [pc, #52]	@ (8004020 <__libc_init_array+0x3c>)
 8003fea:	1b64      	subs	r4, r4, r5
 8003fec:	10a4      	asrs	r4, r4, #2
 8003fee:	2600      	movs	r6, #0
 8003ff0:	42a6      	cmp	r6, r4
 8003ff2:	d109      	bne.n	8004008 <__libc_init_array+0x24>
 8003ff4:	4d0b      	ldr	r5, [pc, #44]	@ (8004024 <__libc_init_array+0x40>)
 8003ff6:	4c0c      	ldr	r4, [pc, #48]	@ (8004028 <__libc_init_array+0x44>)
 8003ff8:	f000 fc66 	bl	80048c8 <_init>
 8003ffc:	1b64      	subs	r4, r4, r5
 8003ffe:	10a4      	asrs	r4, r4, #2
 8004000:	2600      	movs	r6, #0
 8004002:	42a6      	cmp	r6, r4
 8004004:	d105      	bne.n	8004012 <__libc_init_array+0x2e>
 8004006:	bd70      	pop	{r4, r5, r6, pc}
 8004008:	f855 3b04 	ldr.w	r3, [r5], #4
 800400c:	4798      	blx	r3
 800400e:	3601      	adds	r6, #1
 8004010:	e7ee      	b.n	8003ff0 <__libc_init_array+0xc>
 8004012:	f855 3b04 	ldr.w	r3, [r5], #4
 8004016:	4798      	blx	r3
 8004018:	3601      	adds	r6, #1
 800401a:	e7f2      	b.n	8004002 <__libc_init_array+0x1e>
 800401c:	08004944 	.word	0x08004944
 8004020:	08004944 	.word	0x08004944
 8004024:	08004944 	.word	0x08004944
 8004028:	08004948 	.word	0x08004948

0800402c <__retarget_lock_acquire_recursive>:
 800402c:	4770      	bx	lr

0800402e <__retarget_lock_release_recursive>:
 800402e:	4770      	bx	lr

08004030 <_free_r>:
 8004030:	b538      	push	{r3, r4, r5, lr}
 8004032:	4605      	mov	r5, r0
 8004034:	2900      	cmp	r1, #0
 8004036:	d041      	beq.n	80040bc <_free_r+0x8c>
 8004038:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800403c:	1f0c      	subs	r4, r1, #4
 800403e:	2b00      	cmp	r3, #0
 8004040:	bfb8      	it	lt
 8004042:	18e4      	addlt	r4, r4, r3
 8004044:	f000 f8e0 	bl	8004208 <__malloc_lock>
 8004048:	4a1d      	ldr	r2, [pc, #116]	@ (80040c0 <_free_r+0x90>)
 800404a:	6813      	ldr	r3, [r2, #0]
 800404c:	b933      	cbnz	r3, 800405c <_free_r+0x2c>
 800404e:	6063      	str	r3, [r4, #4]
 8004050:	6014      	str	r4, [r2, #0]
 8004052:	4628      	mov	r0, r5
 8004054:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004058:	f000 b8dc 	b.w	8004214 <__malloc_unlock>
 800405c:	42a3      	cmp	r3, r4
 800405e:	d908      	bls.n	8004072 <_free_r+0x42>
 8004060:	6820      	ldr	r0, [r4, #0]
 8004062:	1821      	adds	r1, r4, r0
 8004064:	428b      	cmp	r3, r1
 8004066:	bf01      	itttt	eq
 8004068:	6819      	ldreq	r1, [r3, #0]
 800406a:	685b      	ldreq	r3, [r3, #4]
 800406c:	1809      	addeq	r1, r1, r0
 800406e:	6021      	streq	r1, [r4, #0]
 8004070:	e7ed      	b.n	800404e <_free_r+0x1e>
 8004072:	461a      	mov	r2, r3
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	b10b      	cbz	r3, 800407c <_free_r+0x4c>
 8004078:	42a3      	cmp	r3, r4
 800407a:	d9fa      	bls.n	8004072 <_free_r+0x42>
 800407c:	6811      	ldr	r1, [r2, #0]
 800407e:	1850      	adds	r0, r2, r1
 8004080:	42a0      	cmp	r0, r4
 8004082:	d10b      	bne.n	800409c <_free_r+0x6c>
 8004084:	6820      	ldr	r0, [r4, #0]
 8004086:	4401      	add	r1, r0
 8004088:	1850      	adds	r0, r2, r1
 800408a:	4283      	cmp	r3, r0
 800408c:	6011      	str	r1, [r2, #0]
 800408e:	d1e0      	bne.n	8004052 <_free_r+0x22>
 8004090:	6818      	ldr	r0, [r3, #0]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	6053      	str	r3, [r2, #4]
 8004096:	4408      	add	r0, r1
 8004098:	6010      	str	r0, [r2, #0]
 800409a:	e7da      	b.n	8004052 <_free_r+0x22>
 800409c:	d902      	bls.n	80040a4 <_free_r+0x74>
 800409e:	230c      	movs	r3, #12
 80040a0:	602b      	str	r3, [r5, #0]
 80040a2:	e7d6      	b.n	8004052 <_free_r+0x22>
 80040a4:	6820      	ldr	r0, [r4, #0]
 80040a6:	1821      	adds	r1, r4, r0
 80040a8:	428b      	cmp	r3, r1
 80040aa:	bf04      	itt	eq
 80040ac:	6819      	ldreq	r1, [r3, #0]
 80040ae:	685b      	ldreq	r3, [r3, #4]
 80040b0:	6063      	str	r3, [r4, #4]
 80040b2:	bf04      	itt	eq
 80040b4:	1809      	addeq	r1, r1, r0
 80040b6:	6021      	streq	r1, [r4, #0]
 80040b8:	6054      	str	r4, [r2, #4]
 80040ba:	e7ca      	b.n	8004052 <_free_r+0x22>
 80040bc:	bd38      	pop	{r3, r4, r5, pc}
 80040be:	bf00      	nop
 80040c0:	20000350 	.word	0x20000350

080040c4 <sbrk_aligned>:
 80040c4:	b570      	push	{r4, r5, r6, lr}
 80040c6:	4e0f      	ldr	r6, [pc, #60]	@ (8004104 <sbrk_aligned+0x40>)
 80040c8:	460c      	mov	r4, r1
 80040ca:	6831      	ldr	r1, [r6, #0]
 80040cc:	4605      	mov	r5, r0
 80040ce:	b911      	cbnz	r1, 80040d6 <sbrk_aligned+0x12>
 80040d0:	f000 fba6 	bl	8004820 <_sbrk_r>
 80040d4:	6030      	str	r0, [r6, #0]
 80040d6:	4621      	mov	r1, r4
 80040d8:	4628      	mov	r0, r5
 80040da:	f000 fba1 	bl	8004820 <_sbrk_r>
 80040de:	1c43      	adds	r3, r0, #1
 80040e0:	d103      	bne.n	80040ea <sbrk_aligned+0x26>
 80040e2:	f04f 34ff 	mov.w	r4, #4294967295
 80040e6:	4620      	mov	r0, r4
 80040e8:	bd70      	pop	{r4, r5, r6, pc}
 80040ea:	1cc4      	adds	r4, r0, #3
 80040ec:	f024 0403 	bic.w	r4, r4, #3
 80040f0:	42a0      	cmp	r0, r4
 80040f2:	d0f8      	beq.n	80040e6 <sbrk_aligned+0x22>
 80040f4:	1a21      	subs	r1, r4, r0
 80040f6:	4628      	mov	r0, r5
 80040f8:	f000 fb92 	bl	8004820 <_sbrk_r>
 80040fc:	3001      	adds	r0, #1
 80040fe:	d1f2      	bne.n	80040e6 <sbrk_aligned+0x22>
 8004100:	e7ef      	b.n	80040e2 <sbrk_aligned+0x1e>
 8004102:	bf00      	nop
 8004104:	2000034c 	.word	0x2000034c

08004108 <_malloc_r>:
 8004108:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800410c:	1ccd      	adds	r5, r1, #3
 800410e:	f025 0503 	bic.w	r5, r5, #3
 8004112:	3508      	adds	r5, #8
 8004114:	2d0c      	cmp	r5, #12
 8004116:	bf38      	it	cc
 8004118:	250c      	movcc	r5, #12
 800411a:	2d00      	cmp	r5, #0
 800411c:	4606      	mov	r6, r0
 800411e:	db01      	blt.n	8004124 <_malloc_r+0x1c>
 8004120:	42a9      	cmp	r1, r5
 8004122:	d904      	bls.n	800412e <_malloc_r+0x26>
 8004124:	230c      	movs	r3, #12
 8004126:	6033      	str	r3, [r6, #0]
 8004128:	2000      	movs	r0, #0
 800412a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800412e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004204 <_malloc_r+0xfc>
 8004132:	f000 f869 	bl	8004208 <__malloc_lock>
 8004136:	f8d8 3000 	ldr.w	r3, [r8]
 800413a:	461c      	mov	r4, r3
 800413c:	bb44      	cbnz	r4, 8004190 <_malloc_r+0x88>
 800413e:	4629      	mov	r1, r5
 8004140:	4630      	mov	r0, r6
 8004142:	f7ff ffbf 	bl	80040c4 <sbrk_aligned>
 8004146:	1c43      	adds	r3, r0, #1
 8004148:	4604      	mov	r4, r0
 800414a:	d158      	bne.n	80041fe <_malloc_r+0xf6>
 800414c:	f8d8 4000 	ldr.w	r4, [r8]
 8004150:	4627      	mov	r7, r4
 8004152:	2f00      	cmp	r7, #0
 8004154:	d143      	bne.n	80041de <_malloc_r+0xd6>
 8004156:	2c00      	cmp	r4, #0
 8004158:	d04b      	beq.n	80041f2 <_malloc_r+0xea>
 800415a:	6823      	ldr	r3, [r4, #0]
 800415c:	4639      	mov	r1, r7
 800415e:	4630      	mov	r0, r6
 8004160:	eb04 0903 	add.w	r9, r4, r3
 8004164:	f000 fb5c 	bl	8004820 <_sbrk_r>
 8004168:	4581      	cmp	r9, r0
 800416a:	d142      	bne.n	80041f2 <_malloc_r+0xea>
 800416c:	6821      	ldr	r1, [r4, #0]
 800416e:	1a6d      	subs	r5, r5, r1
 8004170:	4629      	mov	r1, r5
 8004172:	4630      	mov	r0, r6
 8004174:	f7ff ffa6 	bl	80040c4 <sbrk_aligned>
 8004178:	3001      	adds	r0, #1
 800417a:	d03a      	beq.n	80041f2 <_malloc_r+0xea>
 800417c:	6823      	ldr	r3, [r4, #0]
 800417e:	442b      	add	r3, r5
 8004180:	6023      	str	r3, [r4, #0]
 8004182:	f8d8 3000 	ldr.w	r3, [r8]
 8004186:	685a      	ldr	r2, [r3, #4]
 8004188:	bb62      	cbnz	r2, 80041e4 <_malloc_r+0xdc>
 800418a:	f8c8 7000 	str.w	r7, [r8]
 800418e:	e00f      	b.n	80041b0 <_malloc_r+0xa8>
 8004190:	6822      	ldr	r2, [r4, #0]
 8004192:	1b52      	subs	r2, r2, r5
 8004194:	d420      	bmi.n	80041d8 <_malloc_r+0xd0>
 8004196:	2a0b      	cmp	r2, #11
 8004198:	d917      	bls.n	80041ca <_malloc_r+0xc2>
 800419a:	1961      	adds	r1, r4, r5
 800419c:	42a3      	cmp	r3, r4
 800419e:	6025      	str	r5, [r4, #0]
 80041a0:	bf18      	it	ne
 80041a2:	6059      	strne	r1, [r3, #4]
 80041a4:	6863      	ldr	r3, [r4, #4]
 80041a6:	bf08      	it	eq
 80041a8:	f8c8 1000 	streq.w	r1, [r8]
 80041ac:	5162      	str	r2, [r4, r5]
 80041ae:	604b      	str	r3, [r1, #4]
 80041b0:	4630      	mov	r0, r6
 80041b2:	f000 f82f 	bl	8004214 <__malloc_unlock>
 80041b6:	f104 000b 	add.w	r0, r4, #11
 80041ba:	1d23      	adds	r3, r4, #4
 80041bc:	f020 0007 	bic.w	r0, r0, #7
 80041c0:	1ac2      	subs	r2, r0, r3
 80041c2:	bf1c      	itt	ne
 80041c4:	1a1b      	subne	r3, r3, r0
 80041c6:	50a3      	strne	r3, [r4, r2]
 80041c8:	e7af      	b.n	800412a <_malloc_r+0x22>
 80041ca:	6862      	ldr	r2, [r4, #4]
 80041cc:	42a3      	cmp	r3, r4
 80041ce:	bf0c      	ite	eq
 80041d0:	f8c8 2000 	streq.w	r2, [r8]
 80041d4:	605a      	strne	r2, [r3, #4]
 80041d6:	e7eb      	b.n	80041b0 <_malloc_r+0xa8>
 80041d8:	4623      	mov	r3, r4
 80041da:	6864      	ldr	r4, [r4, #4]
 80041dc:	e7ae      	b.n	800413c <_malloc_r+0x34>
 80041de:	463c      	mov	r4, r7
 80041e0:	687f      	ldr	r7, [r7, #4]
 80041e2:	e7b6      	b.n	8004152 <_malloc_r+0x4a>
 80041e4:	461a      	mov	r2, r3
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	42a3      	cmp	r3, r4
 80041ea:	d1fb      	bne.n	80041e4 <_malloc_r+0xdc>
 80041ec:	2300      	movs	r3, #0
 80041ee:	6053      	str	r3, [r2, #4]
 80041f0:	e7de      	b.n	80041b0 <_malloc_r+0xa8>
 80041f2:	230c      	movs	r3, #12
 80041f4:	6033      	str	r3, [r6, #0]
 80041f6:	4630      	mov	r0, r6
 80041f8:	f000 f80c 	bl	8004214 <__malloc_unlock>
 80041fc:	e794      	b.n	8004128 <_malloc_r+0x20>
 80041fe:	6005      	str	r5, [r0, #0]
 8004200:	e7d6      	b.n	80041b0 <_malloc_r+0xa8>
 8004202:	bf00      	nop
 8004204:	20000350 	.word	0x20000350

08004208 <__malloc_lock>:
 8004208:	4801      	ldr	r0, [pc, #4]	@ (8004210 <__malloc_lock+0x8>)
 800420a:	f7ff bf0f 	b.w	800402c <__retarget_lock_acquire_recursive>
 800420e:	bf00      	nop
 8004210:	20000348 	.word	0x20000348

08004214 <__malloc_unlock>:
 8004214:	4801      	ldr	r0, [pc, #4]	@ (800421c <__malloc_unlock+0x8>)
 8004216:	f7ff bf0a 	b.w	800402e <__retarget_lock_release_recursive>
 800421a:	bf00      	nop
 800421c:	20000348 	.word	0x20000348

08004220 <__ssputs_r>:
 8004220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004224:	688e      	ldr	r6, [r1, #8]
 8004226:	461f      	mov	r7, r3
 8004228:	42be      	cmp	r6, r7
 800422a:	680b      	ldr	r3, [r1, #0]
 800422c:	4682      	mov	sl, r0
 800422e:	460c      	mov	r4, r1
 8004230:	4690      	mov	r8, r2
 8004232:	d82d      	bhi.n	8004290 <__ssputs_r+0x70>
 8004234:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004238:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800423c:	d026      	beq.n	800428c <__ssputs_r+0x6c>
 800423e:	6965      	ldr	r5, [r4, #20]
 8004240:	6909      	ldr	r1, [r1, #16]
 8004242:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004246:	eba3 0901 	sub.w	r9, r3, r1
 800424a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800424e:	1c7b      	adds	r3, r7, #1
 8004250:	444b      	add	r3, r9
 8004252:	106d      	asrs	r5, r5, #1
 8004254:	429d      	cmp	r5, r3
 8004256:	bf38      	it	cc
 8004258:	461d      	movcc	r5, r3
 800425a:	0553      	lsls	r3, r2, #21
 800425c:	d527      	bpl.n	80042ae <__ssputs_r+0x8e>
 800425e:	4629      	mov	r1, r5
 8004260:	f7ff ff52 	bl	8004108 <_malloc_r>
 8004264:	4606      	mov	r6, r0
 8004266:	b360      	cbz	r0, 80042c2 <__ssputs_r+0xa2>
 8004268:	6921      	ldr	r1, [r4, #16]
 800426a:	464a      	mov	r2, r9
 800426c:	f000 fae8 	bl	8004840 <memcpy>
 8004270:	89a3      	ldrh	r3, [r4, #12]
 8004272:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004276:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800427a:	81a3      	strh	r3, [r4, #12]
 800427c:	6126      	str	r6, [r4, #16]
 800427e:	6165      	str	r5, [r4, #20]
 8004280:	444e      	add	r6, r9
 8004282:	eba5 0509 	sub.w	r5, r5, r9
 8004286:	6026      	str	r6, [r4, #0]
 8004288:	60a5      	str	r5, [r4, #8]
 800428a:	463e      	mov	r6, r7
 800428c:	42be      	cmp	r6, r7
 800428e:	d900      	bls.n	8004292 <__ssputs_r+0x72>
 8004290:	463e      	mov	r6, r7
 8004292:	6820      	ldr	r0, [r4, #0]
 8004294:	4632      	mov	r2, r6
 8004296:	4641      	mov	r1, r8
 8004298:	f000 faa8 	bl	80047ec <memmove>
 800429c:	68a3      	ldr	r3, [r4, #8]
 800429e:	1b9b      	subs	r3, r3, r6
 80042a0:	60a3      	str	r3, [r4, #8]
 80042a2:	6823      	ldr	r3, [r4, #0]
 80042a4:	4433      	add	r3, r6
 80042a6:	6023      	str	r3, [r4, #0]
 80042a8:	2000      	movs	r0, #0
 80042aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042ae:	462a      	mov	r2, r5
 80042b0:	f000 fad4 	bl	800485c <_realloc_r>
 80042b4:	4606      	mov	r6, r0
 80042b6:	2800      	cmp	r0, #0
 80042b8:	d1e0      	bne.n	800427c <__ssputs_r+0x5c>
 80042ba:	6921      	ldr	r1, [r4, #16]
 80042bc:	4650      	mov	r0, sl
 80042be:	f7ff feb7 	bl	8004030 <_free_r>
 80042c2:	230c      	movs	r3, #12
 80042c4:	f8ca 3000 	str.w	r3, [sl]
 80042c8:	89a3      	ldrh	r3, [r4, #12]
 80042ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80042ce:	81a3      	strh	r3, [r4, #12]
 80042d0:	f04f 30ff 	mov.w	r0, #4294967295
 80042d4:	e7e9      	b.n	80042aa <__ssputs_r+0x8a>
	...

080042d8 <_svfiprintf_r>:
 80042d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042dc:	4698      	mov	r8, r3
 80042de:	898b      	ldrh	r3, [r1, #12]
 80042e0:	061b      	lsls	r3, r3, #24
 80042e2:	b09d      	sub	sp, #116	@ 0x74
 80042e4:	4607      	mov	r7, r0
 80042e6:	460d      	mov	r5, r1
 80042e8:	4614      	mov	r4, r2
 80042ea:	d510      	bpl.n	800430e <_svfiprintf_r+0x36>
 80042ec:	690b      	ldr	r3, [r1, #16]
 80042ee:	b973      	cbnz	r3, 800430e <_svfiprintf_r+0x36>
 80042f0:	2140      	movs	r1, #64	@ 0x40
 80042f2:	f7ff ff09 	bl	8004108 <_malloc_r>
 80042f6:	6028      	str	r0, [r5, #0]
 80042f8:	6128      	str	r0, [r5, #16]
 80042fa:	b930      	cbnz	r0, 800430a <_svfiprintf_r+0x32>
 80042fc:	230c      	movs	r3, #12
 80042fe:	603b      	str	r3, [r7, #0]
 8004300:	f04f 30ff 	mov.w	r0, #4294967295
 8004304:	b01d      	add	sp, #116	@ 0x74
 8004306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800430a:	2340      	movs	r3, #64	@ 0x40
 800430c:	616b      	str	r3, [r5, #20]
 800430e:	2300      	movs	r3, #0
 8004310:	9309      	str	r3, [sp, #36]	@ 0x24
 8004312:	2320      	movs	r3, #32
 8004314:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004318:	f8cd 800c 	str.w	r8, [sp, #12]
 800431c:	2330      	movs	r3, #48	@ 0x30
 800431e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80044bc <_svfiprintf_r+0x1e4>
 8004322:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004326:	f04f 0901 	mov.w	r9, #1
 800432a:	4623      	mov	r3, r4
 800432c:	469a      	mov	sl, r3
 800432e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004332:	b10a      	cbz	r2, 8004338 <_svfiprintf_r+0x60>
 8004334:	2a25      	cmp	r2, #37	@ 0x25
 8004336:	d1f9      	bne.n	800432c <_svfiprintf_r+0x54>
 8004338:	ebba 0b04 	subs.w	fp, sl, r4
 800433c:	d00b      	beq.n	8004356 <_svfiprintf_r+0x7e>
 800433e:	465b      	mov	r3, fp
 8004340:	4622      	mov	r2, r4
 8004342:	4629      	mov	r1, r5
 8004344:	4638      	mov	r0, r7
 8004346:	f7ff ff6b 	bl	8004220 <__ssputs_r>
 800434a:	3001      	adds	r0, #1
 800434c:	f000 80a7 	beq.w	800449e <_svfiprintf_r+0x1c6>
 8004350:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004352:	445a      	add	r2, fp
 8004354:	9209      	str	r2, [sp, #36]	@ 0x24
 8004356:	f89a 3000 	ldrb.w	r3, [sl]
 800435a:	2b00      	cmp	r3, #0
 800435c:	f000 809f 	beq.w	800449e <_svfiprintf_r+0x1c6>
 8004360:	2300      	movs	r3, #0
 8004362:	f04f 32ff 	mov.w	r2, #4294967295
 8004366:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800436a:	f10a 0a01 	add.w	sl, sl, #1
 800436e:	9304      	str	r3, [sp, #16]
 8004370:	9307      	str	r3, [sp, #28]
 8004372:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004376:	931a      	str	r3, [sp, #104]	@ 0x68
 8004378:	4654      	mov	r4, sl
 800437a:	2205      	movs	r2, #5
 800437c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004380:	484e      	ldr	r0, [pc, #312]	@ (80044bc <_svfiprintf_r+0x1e4>)
 8004382:	f7fb ff45 	bl	8000210 <memchr>
 8004386:	9a04      	ldr	r2, [sp, #16]
 8004388:	b9d8      	cbnz	r0, 80043c2 <_svfiprintf_r+0xea>
 800438a:	06d0      	lsls	r0, r2, #27
 800438c:	bf44      	itt	mi
 800438e:	2320      	movmi	r3, #32
 8004390:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004394:	0711      	lsls	r1, r2, #28
 8004396:	bf44      	itt	mi
 8004398:	232b      	movmi	r3, #43	@ 0x2b
 800439a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800439e:	f89a 3000 	ldrb.w	r3, [sl]
 80043a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80043a4:	d015      	beq.n	80043d2 <_svfiprintf_r+0xfa>
 80043a6:	9a07      	ldr	r2, [sp, #28]
 80043a8:	4654      	mov	r4, sl
 80043aa:	2000      	movs	r0, #0
 80043ac:	f04f 0c0a 	mov.w	ip, #10
 80043b0:	4621      	mov	r1, r4
 80043b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80043b6:	3b30      	subs	r3, #48	@ 0x30
 80043b8:	2b09      	cmp	r3, #9
 80043ba:	d94b      	bls.n	8004454 <_svfiprintf_r+0x17c>
 80043bc:	b1b0      	cbz	r0, 80043ec <_svfiprintf_r+0x114>
 80043be:	9207      	str	r2, [sp, #28]
 80043c0:	e014      	b.n	80043ec <_svfiprintf_r+0x114>
 80043c2:	eba0 0308 	sub.w	r3, r0, r8
 80043c6:	fa09 f303 	lsl.w	r3, r9, r3
 80043ca:	4313      	orrs	r3, r2
 80043cc:	9304      	str	r3, [sp, #16]
 80043ce:	46a2      	mov	sl, r4
 80043d0:	e7d2      	b.n	8004378 <_svfiprintf_r+0xa0>
 80043d2:	9b03      	ldr	r3, [sp, #12]
 80043d4:	1d19      	adds	r1, r3, #4
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	9103      	str	r1, [sp, #12]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	bfbb      	ittet	lt
 80043de:	425b      	neglt	r3, r3
 80043e0:	f042 0202 	orrlt.w	r2, r2, #2
 80043e4:	9307      	strge	r3, [sp, #28]
 80043e6:	9307      	strlt	r3, [sp, #28]
 80043e8:	bfb8      	it	lt
 80043ea:	9204      	strlt	r2, [sp, #16]
 80043ec:	7823      	ldrb	r3, [r4, #0]
 80043ee:	2b2e      	cmp	r3, #46	@ 0x2e
 80043f0:	d10a      	bne.n	8004408 <_svfiprintf_r+0x130>
 80043f2:	7863      	ldrb	r3, [r4, #1]
 80043f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80043f6:	d132      	bne.n	800445e <_svfiprintf_r+0x186>
 80043f8:	9b03      	ldr	r3, [sp, #12]
 80043fa:	1d1a      	adds	r2, r3, #4
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	9203      	str	r2, [sp, #12]
 8004400:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004404:	3402      	adds	r4, #2
 8004406:	9305      	str	r3, [sp, #20]
 8004408:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80044cc <_svfiprintf_r+0x1f4>
 800440c:	7821      	ldrb	r1, [r4, #0]
 800440e:	2203      	movs	r2, #3
 8004410:	4650      	mov	r0, sl
 8004412:	f7fb fefd 	bl	8000210 <memchr>
 8004416:	b138      	cbz	r0, 8004428 <_svfiprintf_r+0x150>
 8004418:	9b04      	ldr	r3, [sp, #16]
 800441a:	eba0 000a 	sub.w	r0, r0, sl
 800441e:	2240      	movs	r2, #64	@ 0x40
 8004420:	4082      	lsls	r2, r0
 8004422:	4313      	orrs	r3, r2
 8004424:	3401      	adds	r4, #1
 8004426:	9304      	str	r3, [sp, #16]
 8004428:	f814 1b01 	ldrb.w	r1, [r4], #1
 800442c:	4824      	ldr	r0, [pc, #144]	@ (80044c0 <_svfiprintf_r+0x1e8>)
 800442e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004432:	2206      	movs	r2, #6
 8004434:	f7fb feec 	bl	8000210 <memchr>
 8004438:	2800      	cmp	r0, #0
 800443a:	d036      	beq.n	80044aa <_svfiprintf_r+0x1d2>
 800443c:	4b21      	ldr	r3, [pc, #132]	@ (80044c4 <_svfiprintf_r+0x1ec>)
 800443e:	bb1b      	cbnz	r3, 8004488 <_svfiprintf_r+0x1b0>
 8004440:	9b03      	ldr	r3, [sp, #12]
 8004442:	3307      	adds	r3, #7
 8004444:	f023 0307 	bic.w	r3, r3, #7
 8004448:	3308      	adds	r3, #8
 800444a:	9303      	str	r3, [sp, #12]
 800444c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800444e:	4433      	add	r3, r6
 8004450:	9309      	str	r3, [sp, #36]	@ 0x24
 8004452:	e76a      	b.n	800432a <_svfiprintf_r+0x52>
 8004454:	fb0c 3202 	mla	r2, ip, r2, r3
 8004458:	460c      	mov	r4, r1
 800445a:	2001      	movs	r0, #1
 800445c:	e7a8      	b.n	80043b0 <_svfiprintf_r+0xd8>
 800445e:	2300      	movs	r3, #0
 8004460:	3401      	adds	r4, #1
 8004462:	9305      	str	r3, [sp, #20]
 8004464:	4619      	mov	r1, r3
 8004466:	f04f 0c0a 	mov.w	ip, #10
 800446a:	4620      	mov	r0, r4
 800446c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004470:	3a30      	subs	r2, #48	@ 0x30
 8004472:	2a09      	cmp	r2, #9
 8004474:	d903      	bls.n	800447e <_svfiprintf_r+0x1a6>
 8004476:	2b00      	cmp	r3, #0
 8004478:	d0c6      	beq.n	8004408 <_svfiprintf_r+0x130>
 800447a:	9105      	str	r1, [sp, #20]
 800447c:	e7c4      	b.n	8004408 <_svfiprintf_r+0x130>
 800447e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004482:	4604      	mov	r4, r0
 8004484:	2301      	movs	r3, #1
 8004486:	e7f0      	b.n	800446a <_svfiprintf_r+0x192>
 8004488:	ab03      	add	r3, sp, #12
 800448a:	9300      	str	r3, [sp, #0]
 800448c:	462a      	mov	r2, r5
 800448e:	4b0e      	ldr	r3, [pc, #56]	@ (80044c8 <_svfiprintf_r+0x1f0>)
 8004490:	a904      	add	r1, sp, #16
 8004492:	4638      	mov	r0, r7
 8004494:	f3af 8000 	nop.w
 8004498:	1c42      	adds	r2, r0, #1
 800449a:	4606      	mov	r6, r0
 800449c:	d1d6      	bne.n	800444c <_svfiprintf_r+0x174>
 800449e:	89ab      	ldrh	r3, [r5, #12]
 80044a0:	065b      	lsls	r3, r3, #25
 80044a2:	f53f af2d 	bmi.w	8004300 <_svfiprintf_r+0x28>
 80044a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80044a8:	e72c      	b.n	8004304 <_svfiprintf_r+0x2c>
 80044aa:	ab03      	add	r3, sp, #12
 80044ac:	9300      	str	r3, [sp, #0]
 80044ae:	462a      	mov	r2, r5
 80044b0:	4b05      	ldr	r3, [pc, #20]	@ (80044c8 <_svfiprintf_r+0x1f0>)
 80044b2:	a904      	add	r1, sp, #16
 80044b4:	4638      	mov	r0, r7
 80044b6:	f000 f879 	bl	80045ac <_printf_i>
 80044ba:	e7ed      	b.n	8004498 <_svfiprintf_r+0x1c0>
 80044bc:	08004908 	.word	0x08004908
 80044c0:	08004912 	.word	0x08004912
 80044c4:	00000000 	.word	0x00000000
 80044c8:	08004221 	.word	0x08004221
 80044cc:	0800490e 	.word	0x0800490e

080044d0 <_printf_common>:
 80044d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044d4:	4616      	mov	r6, r2
 80044d6:	4698      	mov	r8, r3
 80044d8:	688a      	ldr	r2, [r1, #8]
 80044da:	690b      	ldr	r3, [r1, #16]
 80044dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80044e0:	4293      	cmp	r3, r2
 80044e2:	bfb8      	it	lt
 80044e4:	4613      	movlt	r3, r2
 80044e6:	6033      	str	r3, [r6, #0]
 80044e8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80044ec:	4607      	mov	r7, r0
 80044ee:	460c      	mov	r4, r1
 80044f0:	b10a      	cbz	r2, 80044f6 <_printf_common+0x26>
 80044f2:	3301      	adds	r3, #1
 80044f4:	6033      	str	r3, [r6, #0]
 80044f6:	6823      	ldr	r3, [r4, #0]
 80044f8:	0699      	lsls	r1, r3, #26
 80044fa:	bf42      	ittt	mi
 80044fc:	6833      	ldrmi	r3, [r6, #0]
 80044fe:	3302      	addmi	r3, #2
 8004500:	6033      	strmi	r3, [r6, #0]
 8004502:	6825      	ldr	r5, [r4, #0]
 8004504:	f015 0506 	ands.w	r5, r5, #6
 8004508:	d106      	bne.n	8004518 <_printf_common+0x48>
 800450a:	f104 0a19 	add.w	sl, r4, #25
 800450e:	68e3      	ldr	r3, [r4, #12]
 8004510:	6832      	ldr	r2, [r6, #0]
 8004512:	1a9b      	subs	r3, r3, r2
 8004514:	42ab      	cmp	r3, r5
 8004516:	dc26      	bgt.n	8004566 <_printf_common+0x96>
 8004518:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800451c:	6822      	ldr	r2, [r4, #0]
 800451e:	3b00      	subs	r3, #0
 8004520:	bf18      	it	ne
 8004522:	2301      	movne	r3, #1
 8004524:	0692      	lsls	r2, r2, #26
 8004526:	d42b      	bmi.n	8004580 <_printf_common+0xb0>
 8004528:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800452c:	4641      	mov	r1, r8
 800452e:	4638      	mov	r0, r7
 8004530:	47c8      	blx	r9
 8004532:	3001      	adds	r0, #1
 8004534:	d01e      	beq.n	8004574 <_printf_common+0xa4>
 8004536:	6823      	ldr	r3, [r4, #0]
 8004538:	6922      	ldr	r2, [r4, #16]
 800453a:	f003 0306 	and.w	r3, r3, #6
 800453e:	2b04      	cmp	r3, #4
 8004540:	bf02      	ittt	eq
 8004542:	68e5      	ldreq	r5, [r4, #12]
 8004544:	6833      	ldreq	r3, [r6, #0]
 8004546:	1aed      	subeq	r5, r5, r3
 8004548:	68a3      	ldr	r3, [r4, #8]
 800454a:	bf0c      	ite	eq
 800454c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004550:	2500      	movne	r5, #0
 8004552:	4293      	cmp	r3, r2
 8004554:	bfc4      	itt	gt
 8004556:	1a9b      	subgt	r3, r3, r2
 8004558:	18ed      	addgt	r5, r5, r3
 800455a:	2600      	movs	r6, #0
 800455c:	341a      	adds	r4, #26
 800455e:	42b5      	cmp	r5, r6
 8004560:	d11a      	bne.n	8004598 <_printf_common+0xc8>
 8004562:	2000      	movs	r0, #0
 8004564:	e008      	b.n	8004578 <_printf_common+0xa8>
 8004566:	2301      	movs	r3, #1
 8004568:	4652      	mov	r2, sl
 800456a:	4641      	mov	r1, r8
 800456c:	4638      	mov	r0, r7
 800456e:	47c8      	blx	r9
 8004570:	3001      	adds	r0, #1
 8004572:	d103      	bne.n	800457c <_printf_common+0xac>
 8004574:	f04f 30ff 	mov.w	r0, #4294967295
 8004578:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800457c:	3501      	adds	r5, #1
 800457e:	e7c6      	b.n	800450e <_printf_common+0x3e>
 8004580:	18e1      	adds	r1, r4, r3
 8004582:	1c5a      	adds	r2, r3, #1
 8004584:	2030      	movs	r0, #48	@ 0x30
 8004586:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800458a:	4422      	add	r2, r4
 800458c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004590:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004594:	3302      	adds	r3, #2
 8004596:	e7c7      	b.n	8004528 <_printf_common+0x58>
 8004598:	2301      	movs	r3, #1
 800459a:	4622      	mov	r2, r4
 800459c:	4641      	mov	r1, r8
 800459e:	4638      	mov	r0, r7
 80045a0:	47c8      	blx	r9
 80045a2:	3001      	adds	r0, #1
 80045a4:	d0e6      	beq.n	8004574 <_printf_common+0xa4>
 80045a6:	3601      	adds	r6, #1
 80045a8:	e7d9      	b.n	800455e <_printf_common+0x8e>
	...

080045ac <_printf_i>:
 80045ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80045b0:	7e0f      	ldrb	r7, [r1, #24]
 80045b2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80045b4:	2f78      	cmp	r7, #120	@ 0x78
 80045b6:	4691      	mov	r9, r2
 80045b8:	4680      	mov	r8, r0
 80045ba:	460c      	mov	r4, r1
 80045bc:	469a      	mov	sl, r3
 80045be:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80045c2:	d807      	bhi.n	80045d4 <_printf_i+0x28>
 80045c4:	2f62      	cmp	r7, #98	@ 0x62
 80045c6:	d80a      	bhi.n	80045de <_printf_i+0x32>
 80045c8:	2f00      	cmp	r7, #0
 80045ca:	f000 80d2 	beq.w	8004772 <_printf_i+0x1c6>
 80045ce:	2f58      	cmp	r7, #88	@ 0x58
 80045d0:	f000 80b9 	beq.w	8004746 <_printf_i+0x19a>
 80045d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80045d8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80045dc:	e03a      	b.n	8004654 <_printf_i+0xa8>
 80045de:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80045e2:	2b15      	cmp	r3, #21
 80045e4:	d8f6      	bhi.n	80045d4 <_printf_i+0x28>
 80045e6:	a101      	add	r1, pc, #4	@ (adr r1, 80045ec <_printf_i+0x40>)
 80045e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80045ec:	08004645 	.word	0x08004645
 80045f0:	08004659 	.word	0x08004659
 80045f4:	080045d5 	.word	0x080045d5
 80045f8:	080045d5 	.word	0x080045d5
 80045fc:	080045d5 	.word	0x080045d5
 8004600:	080045d5 	.word	0x080045d5
 8004604:	08004659 	.word	0x08004659
 8004608:	080045d5 	.word	0x080045d5
 800460c:	080045d5 	.word	0x080045d5
 8004610:	080045d5 	.word	0x080045d5
 8004614:	080045d5 	.word	0x080045d5
 8004618:	08004759 	.word	0x08004759
 800461c:	08004683 	.word	0x08004683
 8004620:	08004713 	.word	0x08004713
 8004624:	080045d5 	.word	0x080045d5
 8004628:	080045d5 	.word	0x080045d5
 800462c:	0800477b 	.word	0x0800477b
 8004630:	080045d5 	.word	0x080045d5
 8004634:	08004683 	.word	0x08004683
 8004638:	080045d5 	.word	0x080045d5
 800463c:	080045d5 	.word	0x080045d5
 8004640:	0800471b 	.word	0x0800471b
 8004644:	6833      	ldr	r3, [r6, #0]
 8004646:	1d1a      	adds	r2, r3, #4
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	6032      	str	r2, [r6, #0]
 800464c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004650:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004654:	2301      	movs	r3, #1
 8004656:	e09d      	b.n	8004794 <_printf_i+0x1e8>
 8004658:	6833      	ldr	r3, [r6, #0]
 800465a:	6820      	ldr	r0, [r4, #0]
 800465c:	1d19      	adds	r1, r3, #4
 800465e:	6031      	str	r1, [r6, #0]
 8004660:	0606      	lsls	r6, r0, #24
 8004662:	d501      	bpl.n	8004668 <_printf_i+0xbc>
 8004664:	681d      	ldr	r5, [r3, #0]
 8004666:	e003      	b.n	8004670 <_printf_i+0xc4>
 8004668:	0645      	lsls	r5, r0, #25
 800466a:	d5fb      	bpl.n	8004664 <_printf_i+0xb8>
 800466c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004670:	2d00      	cmp	r5, #0
 8004672:	da03      	bge.n	800467c <_printf_i+0xd0>
 8004674:	232d      	movs	r3, #45	@ 0x2d
 8004676:	426d      	negs	r5, r5
 8004678:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800467c:	4859      	ldr	r0, [pc, #356]	@ (80047e4 <_printf_i+0x238>)
 800467e:	230a      	movs	r3, #10
 8004680:	e011      	b.n	80046a6 <_printf_i+0xfa>
 8004682:	6821      	ldr	r1, [r4, #0]
 8004684:	6833      	ldr	r3, [r6, #0]
 8004686:	0608      	lsls	r0, r1, #24
 8004688:	f853 5b04 	ldr.w	r5, [r3], #4
 800468c:	d402      	bmi.n	8004694 <_printf_i+0xe8>
 800468e:	0649      	lsls	r1, r1, #25
 8004690:	bf48      	it	mi
 8004692:	b2ad      	uxthmi	r5, r5
 8004694:	2f6f      	cmp	r7, #111	@ 0x6f
 8004696:	4853      	ldr	r0, [pc, #332]	@ (80047e4 <_printf_i+0x238>)
 8004698:	6033      	str	r3, [r6, #0]
 800469a:	bf14      	ite	ne
 800469c:	230a      	movne	r3, #10
 800469e:	2308      	moveq	r3, #8
 80046a0:	2100      	movs	r1, #0
 80046a2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80046a6:	6866      	ldr	r6, [r4, #4]
 80046a8:	60a6      	str	r6, [r4, #8]
 80046aa:	2e00      	cmp	r6, #0
 80046ac:	bfa2      	ittt	ge
 80046ae:	6821      	ldrge	r1, [r4, #0]
 80046b0:	f021 0104 	bicge.w	r1, r1, #4
 80046b4:	6021      	strge	r1, [r4, #0]
 80046b6:	b90d      	cbnz	r5, 80046bc <_printf_i+0x110>
 80046b8:	2e00      	cmp	r6, #0
 80046ba:	d04b      	beq.n	8004754 <_printf_i+0x1a8>
 80046bc:	4616      	mov	r6, r2
 80046be:	fbb5 f1f3 	udiv	r1, r5, r3
 80046c2:	fb03 5711 	mls	r7, r3, r1, r5
 80046c6:	5dc7      	ldrb	r7, [r0, r7]
 80046c8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80046cc:	462f      	mov	r7, r5
 80046ce:	42bb      	cmp	r3, r7
 80046d0:	460d      	mov	r5, r1
 80046d2:	d9f4      	bls.n	80046be <_printf_i+0x112>
 80046d4:	2b08      	cmp	r3, #8
 80046d6:	d10b      	bne.n	80046f0 <_printf_i+0x144>
 80046d8:	6823      	ldr	r3, [r4, #0]
 80046da:	07df      	lsls	r7, r3, #31
 80046dc:	d508      	bpl.n	80046f0 <_printf_i+0x144>
 80046de:	6923      	ldr	r3, [r4, #16]
 80046e0:	6861      	ldr	r1, [r4, #4]
 80046e2:	4299      	cmp	r1, r3
 80046e4:	bfde      	ittt	le
 80046e6:	2330      	movle	r3, #48	@ 0x30
 80046e8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80046ec:	f106 36ff 	addle.w	r6, r6, #4294967295
 80046f0:	1b92      	subs	r2, r2, r6
 80046f2:	6122      	str	r2, [r4, #16]
 80046f4:	f8cd a000 	str.w	sl, [sp]
 80046f8:	464b      	mov	r3, r9
 80046fa:	aa03      	add	r2, sp, #12
 80046fc:	4621      	mov	r1, r4
 80046fe:	4640      	mov	r0, r8
 8004700:	f7ff fee6 	bl	80044d0 <_printf_common>
 8004704:	3001      	adds	r0, #1
 8004706:	d14a      	bne.n	800479e <_printf_i+0x1f2>
 8004708:	f04f 30ff 	mov.w	r0, #4294967295
 800470c:	b004      	add	sp, #16
 800470e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004712:	6823      	ldr	r3, [r4, #0]
 8004714:	f043 0320 	orr.w	r3, r3, #32
 8004718:	6023      	str	r3, [r4, #0]
 800471a:	4833      	ldr	r0, [pc, #204]	@ (80047e8 <_printf_i+0x23c>)
 800471c:	2778      	movs	r7, #120	@ 0x78
 800471e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004722:	6823      	ldr	r3, [r4, #0]
 8004724:	6831      	ldr	r1, [r6, #0]
 8004726:	061f      	lsls	r7, r3, #24
 8004728:	f851 5b04 	ldr.w	r5, [r1], #4
 800472c:	d402      	bmi.n	8004734 <_printf_i+0x188>
 800472e:	065f      	lsls	r7, r3, #25
 8004730:	bf48      	it	mi
 8004732:	b2ad      	uxthmi	r5, r5
 8004734:	6031      	str	r1, [r6, #0]
 8004736:	07d9      	lsls	r1, r3, #31
 8004738:	bf44      	itt	mi
 800473a:	f043 0320 	orrmi.w	r3, r3, #32
 800473e:	6023      	strmi	r3, [r4, #0]
 8004740:	b11d      	cbz	r5, 800474a <_printf_i+0x19e>
 8004742:	2310      	movs	r3, #16
 8004744:	e7ac      	b.n	80046a0 <_printf_i+0xf4>
 8004746:	4827      	ldr	r0, [pc, #156]	@ (80047e4 <_printf_i+0x238>)
 8004748:	e7e9      	b.n	800471e <_printf_i+0x172>
 800474a:	6823      	ldr	r3, [r4, #0]
 800474c:	f023 0320 	bic.w	r3, r3, #32
 8004750:	6023      	str	r3, [r4, #0]
 8004752:	e7f6      	b.n	8004742 <_printf_i+0x196>
 8004754:	4616      	mov	r6, r2
 8004756:	e7bd      	b.n	80046d4 <_printf_i+0x128>
 8004758:	6833      	ldr	r3, [r6, #0]
 800475a:	6825      	ldr	r5, [r4, #0]
 800475c:	6961      	ldr	r1, [r4, #20]
 800475e:	1d18      	adds	r0, r3, #4
 8004760:	6030      	str	r0, [r6, #0]
 8004762:	062e      	lsls	r6, r5, #24
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	d501      	bpl.n	800476c <_printf_i+0x1c0>
 8004768:	6019      	str	r1, [r3, #0]
 800476a:	e002      	b.n	8004772 <_printf_i+0x1c6>
 800476c:	0668      	lsls	r0, r5, #25
 800476e:	d5fb      	bpl.n	8004768 <_printf_i+0x1bc>
 8004770:	8019      	strh	r1, [r3, #0]
 8004772:	2300      	movs	r3, #0
 8004774:	6123      	str	r3, [r4, #16]
 8004776:	4616      	mov	r6, r2
 8004778:	e7bc      	b.n	80046f4 <_printf_i+0x148>
 800477a:	6833      	ldr	r3, [r6, #0]
 800477c:	1d1a      	adds	r2, r3, #4
 800477e:	6032      	str	r2, [r6, #0]
 8004780:	681e      	ldr	r6, [r3, #0]
 8004782:	6862      	ldr	r2, [r4, #4]
 8004784:	2100      	movs	r1, #0
 8004786:	4630      	mov	r0, r6
 8004788:	f7fb fd42 	bl	8000210 <memchr>
 800478c:	b108      	cbz	r0, 8004792 <_printf_i+0x1e6>
 800478e:	1b80      	subs	r0, r0, r6
 8004790:	6060      	str	r0, [r4, #4]
 8004792:	6863      	ldr	r3, [r4, #4]
 8004794:	6123      	str	r3, [r4, #16]
 8004796:	2300      	movs	r3, #0
 8004798:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800479c:	e7aa      	b.n	80046f4 <_printf_i+0x148>
 800479e:	6923      	ldr	r3, [r4, #16]
 80047a0:	4632      	mov	r2, r6
 80047a2:	4649      	mov	r1, r9
 80047a4:	4640      	mov	r0, r8
 80047a6:	47d0      	blx	sl
 80047a8:	3001      	adds	r0, #1
 80047aa:	d0ad      	beq.n	8004708 <_printf_i+0x15c>
 80047ac:	6823      	ldr	r3, [r4, #0]
 80047ae:	079b      	lsls	r3, r3, #30
 80047b0:	d413      	bmi.n	80047da <_printf_i+0x22e>
 80047b2:	68e0      	ldr	r0, [r4, #12]
 80047b4:	9b03      	ldr	r3, [sp, #12]
 80047b6:	4298      	cmp	r0, r3
 80047b8:	bfb8      	it	lt
 80047ba:	4618      	movlt	r0, r3
 80047bc:	e7a6      	b.n	800470c <_printf_i+0x160>
 80047be:	2301      	movs	r3, #1
 80047c0:	4632      	mov	r2, r6
 80047c2:	4649      	mov	r1, r9
 80047c4:	4640      	mov	r0, r8
 80047c6:	47d0      	blx	sl
 80047c8:	3001      	adds	r0, #1
 80047ca:	d09d      	beq.n	8004708 <_printf_i+0x15c>
 80047cc:	3501      	adds	r5, #1
 80047ce:	68e3      	ldr	r3, [r4, #12]
 80047d0:	9903      	ldr	r1, [sp, #12]
 80047d2:	1a5b      	subs	r3, r3, r1
 80047d4:	42ab      	cmp	r3, r5
 80047d6:	dcf2      	bgt.n	80047be <_printf_i+0x212>
 80047d8:	e7eb      	b.n	80047b2 <_printf_i+0x206>
 80047da:	2500      	movs	r5, #0
 80047dc:	f104 0619 	add.w	r6, r4, #25
 80047e0:	e7f5      	b.n	80047ce <_printf_i+0x222>
 80047e2:	bf00      	nop
 80047e4:	08004919 	.word	0x08004919
 80047e8:	0800492a 	.word	0x0800492a

080047ec <memmove>:
 80047ec:	4288      	cmp	r0, r1
 80047ee:	b510      	push	{r4, lr}
 80047f0:	eb01 0402 	add.w	r4, r1, r2
 80047f4:	d902      	bls.n	80047fc <memmove+0x10>
 80047f6:	4284      	cmp	r4, r0
 80047f8:	4623      	mov	r3, r4
 80047fa:	d807      	bhi.n	800480c <memmove+0x20>
 80047fc:	1e43      	subs	r3, r0, #1
 80047fe:	42a1      	cmp	r1, r4
 8004800:	d008      	beq.n	8004814 <memmove+0x28>
 8004802:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004806:	f803 2f01 	strb.w	r2, [r3, #1]!
 800480a:	e7f8      	b.n	80047fe <memmove+0x12>
 800480c:	4402      	add	r2, r0
 800480e:	4601      	mov	r1, r0
 8004810:	428a      	cmp	r2, r1
 8004812:	d100      	bne.n	8004816 <memmove+0x2a>
 8004814:	bd10      	pop	{r4, pc}
 8004816:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800481a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800481e:	e7f7      	b.n	8004810 <memmove+0x24>

08004820 <_sbrk_r>:
 8004820:	b538      	push	{r3, r4, r5, lr}
 8004822:	4d06      	ldr	r5, [pc, #24]	@ (800483c <_sbrk_r+0x1c>)
 8004824:	2300      	movs	r3, #0
 8004826:	4604      	mov	r4, r0
 8004828:	4608      	mov	r0, r1
 800482a:	602b      	str	r3, [r5, #0]
 800482c:	f7fc fa76 	bl	8000d1c <_sbrk>
 8004830:	1c43      	adds	r3, r0, #1
 8004832:	d102      	bne.n	800483a <_sbrk_r+0x1a>
 8004834:	682b      	ldr	r3, [r5, #0]
 8004836:	b103      	cbz	r3, 800483a <_sbrk_r+0x1a>
 8004838:	6023      	str	r3, [r4, #0]
 800483a:	bd38      	pop	{r3, r4, r5, pc}
 800483c:	20000344 	.word	0x20000344

08004840 <memcpy>:
 8004840:	440a      	add	r2, r1
 8004842:	4291      	cmp	r1, r2
 8004844:	f100 33ff 	add.w	r3, r0, #4294967295
 8004848:	d100      	bne.n	800484c <memcpy+0xc>
 800484a:	4770      	bx	lr
 800484c:	b510      	push	{r4, lr}
 800484e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004852:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004856:	4291      	cmp	r1, r2
 8004858:	d1f9      	bne.n	800484e <memcpy+0xe>
 800485a:	bd10      	pop	{r4, pc}

0800485c <_realloc_r>:
 800485c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004860:	4680      	mov	r8, r0
 8004862:	4615      	mov	r5, r2
 8004864:	460c      	mov	r4, r1
 8004866:	b921      	cbnz	r1, 8004872 <_realloc_r+0x16>
 8004868:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800486c:	4611      	mov	r1, r2
 800486e:	f7ff bc4b 	b.w	8004108 <_malloc_r>
 8004872:	b92a      	cbnz	r2, 8004880 <_realloc_r+0x24>
 8004874:	f7ff fbdc 	bl	8004030 <_free_r>
 8004878:	2400      	movs	r4, #0
 800487a:	4620      	mov	r0, r4
 800487c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004880:	f000 f81a 	bl	80048b8 <_malloc_usable_size_r>
 8004884:	4285      	cmp	r5, r0
 8004886:	4606      	mov	r6, r0
 8004888:	d802      	bhi.n	8004890 <_realloc_r+0x34>
 800488a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800488e:	d8f4      	bhi.n	800487a <_realloc_r+0x1e>
 8004890:	4629      	mov	r1, r5
 8004892:	4640      	mov	r0, r8
 8004894:	f7ff fc38 	bl	8004108 <_malloc_r>
 8004898:	4607      	mov	r7, r0
 800489a:	2800      	cmp	r0, #0
 800489c:	d0ec      	beq.n	8004878 <_realloc_r+0x1c>
 800489e:	42b5      	cmp	r5, r6
 80048a0:	462a      	mov	r2, r5
 80048a2:	4621      	mov	r1, r4
 80048a4:	bf28      	it	cs
 80048a6:	4632      	movcs	r2, r6
 80048a8:	f7ff ffca 	bl	8004840 <memcpy>
 80048ac:	4621      	mov	r1, r4
 80048ae:	4640      	mov	r0, r8
 80048b0:	f7ff fbbe 	bl	8004030 <_free_r>
 80048b4:	463c      	mov	r4, r7
 80048b6:	e7e0      	b.n	800487a <_realloc_r+0x1e>

080048b8 <_malloc_usable_size_r>:
 80048b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048bc:	1f18      	subs	r0, r3, #4
 80048be:	2b00      	cmp	r3, #0
 80048c0:	bfbc      	itt	lt
 80048c2:	580b      	ldrlt	r3, [r1, r0]
 80048c4:	18c0      	addlt	r0, r0, r3
 80048c6:	4770      	bx	lr

080048c8 <_init>:
 80048c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048ca:	bf00      	nop
 80048cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048ce:	bc08      	pop	{r3}
 80048d0:	469e      	mov	lr, r3
 80048d2:	4770      	bx	lr

080048d4 <_fini>:
 80048d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048d6:	bf00      	nop
 80048d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048da:	bc08      	pop	{r3}
 80048dc:	469e      	mov	lr, r3
 80048de:	4770      	bx	lr
