
USB_demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d1b8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000410  0800d388  0800d388  0000e388  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d798  0800d798  0000f2d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800d798  0800d798  0000e798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d7a0  0800d7a0  0000f2d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d7a0  0800d7a0  0000e7a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d7a4  0800d7a4  0000e7a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002d4  20000000  0800d7a8  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001fb8  200002d4  0800da7c  0000f2d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000228c  0800da7c  0001028c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f2d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bc22  00000000  00000000  0000f304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000401d  00000000  00000000  0002af26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001878  00000000  00000000  0002ef48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001308  00000000  00000000  000307c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027ad1  00000000  00000000  00031ac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020906  00000000  00000000  00059599  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e5f99  00000000  00000000  00079e9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015fe38  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007974  00000000  00000000  0015fe7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  001677f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200002d4 	.word	0x200002d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800d370 	.word	0x0800d370

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200002d8 	.word	0x200002d8
 800020c:	0800d370 	.word	0x0800d370

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96a 	b.w	8000ed4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	460c      	mov	r4, r1
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d14e      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c24:	4694      	mov	ip, r2
 8000c26:	458c      	cmp	ip, r1
 8000c28:	4686      	mov	lr, r0
 8000c2a:	fab2 f282 	clz	r2, r2
 8000c2e:	d962      	bls.n	8000cf6 <__udivmoddi4+0xde>
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0320 	rsb	r3, r2, #32
 8000c36:	4091      	lsls	r1, r2
 8000c38:	fa20 f303 	lsr.w	r3, r0, r3
 8000c3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c40:	4319      	orrs	r1, r3
 8000c42:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4a:	fa1f f68c 	uxth.w	r6, ip
 8000c4e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c56:	fb07 1114 	mls	r1, r7, r4, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb04 f106 	mul.w	r1, r4, r6
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c6e:	f080 8112 	bcs.w	8000e96 <__udivmoddi4+0x27e>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 810f 	bls.w	8000e96 <__udivmoddi4+0x27e>
 8000c78:	3c02      	subs	r4, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a59      	subs	r1, r3, r1
 8000c7e:	fa1f f38e 	uxth.w	r3, lr
 8000c82:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c86:	fb07 1110 	mls	r1, r7, r0, r1
 8000c8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8e:	fb00 f606 	mul.w	r6, r0, r6
 8000c92:	429e      	cmp	r6, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x94>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c9e:	f080 80fc 	bcs.w	8000e9a <__udivmoddi4+0x282>
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	f240 80f9 	bls.w	8000e9a <__udivmoddi4+0x282>
 8000ca8:	4463      	add	r3, ip
 8000caa:	3802      	subs	r0, #2
 8000cac:	1b9b      	subs	r3, r3, r6
 8000cae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	b11d      	cbz	r5, 8000cbe <__udivmoddi4+0xa6>
 8000cb6:	40d3      	lsrs	r3, r2
 8000cb8:	2200      	movs	r2, #0
 8000cba:	e9c5 3200 	strd	r3, r2, [r5]
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d905      	bls.n	8000cd2 <__udivmoddi4+0xba>
 8000cc6:	b10d      	cbz	r5, 8000ccc <__udivmoddi4+0xb4>
 8000cc8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e7f5      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cd2:	fab3 f183 	clz	r1, r3
 8000cd6:	2900      	cmp	r1, #0
 8000cd8:	d146      	bne.n	8000d68 <__udivmoddi4+0x150>
 8000cda:	42a3      	cmp	r3, r4
 8000cdc:	d302      	bcc.n	8000ce4 <__udivmoddi4+0xcc>
 8000cde:	4290      	cmp	r0, r2
 8000ce0:	f0c0 80f0 	bcc.w	8000ec4 <__udivmoddi4+0x2ac>
 8000ce4:	1a86      	subs	r6, r0, r2
 8000ce6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cea:	2001      	movs	r0, #1
 8000cec:	2d00      	cmp	r5, #0
 8000cee:	d0e6      	beq.n	8000cbe <__udivmoddi4+0xa6>
 8000cf0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cf4:	e7e3      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cf6:	2a00      	cmp	r2, #0
 8000cf8:	f040 8090 	bne.w	8000e1c <__udivmoddi4+0x204>
 8000cfc:	eba1 040c 	sub.w	r4, r1, ip
 8000d00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d04:	fa1f f78c 	uxth.w	r7, ip
 8000d08:	2101      	movs	r1, #1
 8000d0a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d12:	fb08 4416 	mls	r4, r8, r6, r4
 8000d16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d1a:	fb07 f006 	mul.w	r0, r7, r6
 8000d1e:	4298      	cmp	r0, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x11c>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x11a>
 8000d2c:	4298      	cmp	r0, r3
 8000d2e:	f200 80cd 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000d32:	4626      	mov	r6, r4
 8000d34:	1a1c      	subs	r4, r3, r0
 8000d36:	fa1f f38e 	uxth.w	r3, lr
 8000d3a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d3e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d46:	fb00 f707 	mul.w	r7, r0, r7
 8000d4a:	429f      	cmp	r7, r3
 8000d4c:	d908      	bls.n	8000d60 <__udivmoddi4+0x148>
 8000d4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d52:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d56:	d202      	bcs.n	8000d5e <__udivmoddi4+0x146>
 8000d58:	429f      	cmp	r7, r3
 8000d5a:	f200 80b0 	bhi.w	8000ebe <__udivmoddi4+0x2a6>
 8000d5e:	4620      	mov	r0, r4
 8000d60:	1bdb      	subs	r3, r3, r7
 8000d62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d66:	e7a5      	b.n	8000cb4 <__udivmoddi4+0x9c>
 8000d68:	f1c1 0620 	rsb	r6, r1, #32
 8000d6c:	408b      	lsls	r3, r1
 8000d6e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d72:	431f      	orrs	r7, r3
 8000d74:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d78:	fa04 f301 	lsl.w	r3, r4, r1
 8000d7c:	ea43 030c 	orr.w	r3, r3, ip
 8000d80:	40f4      	lsrs	r4, r6
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	0c38      	lsrs	r0, r7, #16
 8000d88:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d8c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d90:	fa1f fc87 	uxth.w	ip, r7
 8000d94:	fb00 441e 	mls	r4, r0, lr, r4
 8000d98:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d9c:	fb0e f90c 	mul.w	r9, lr, ip
 8000da0:	45a1      	cmp	r9, r4
 8000da2:	fa02 f201 	lsl.w	r2, r2, r1
 8000da6:	d90a      	bls.n	8000dbe <__udivmoddi4+0x1a6>
 8000da8:	193c      	adds	r4, r7, r4
 8000daa:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dae:	f080 8084 	bcs.w	8000eba <__udivmoddi4+0x2a2>
 8000db2:	45a1      	cmp	r9, r4
 8000db4:	f240 8081 	bls.w	8000eba <__udivmoddi4+0x2a2>
 8000db8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dbc:	443c      	add	r4, r7
 8000dbe:	eba4 0409 	sub.w	r4, r4, r9
 8000dc2:	fa1f f983 	uxth.w	r9, r3
 8000dc6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dca:	fb00 4413 	mls	r4, r0, r3, r4
 8000dce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dd2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd6:	45a4      	cmp	ip, r4
 8000dd8:	d907      	bls.n	8000dea <__udivmoddi4+0x1d2>
 8000dda:	193c      	adds	r4, r7, r4
 8000ddc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000de0:	d267      	bcs.n	8000eb2 <__udivmoddi4+0x29a>
 8000de2:	45a4      	cmp	ip, r4
 8000de4:	d965      	bls.n	8000eb2 <__udivmoddi4+0x29a>
 8000de6:	3b02      	subs	r3, #2
 8000de8:	443c      	add	r4, r7
 8000dea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dee:	fba0 9302 	umull	r9, r3, r0, r2
 8000df2:	eba4 040c 	sub.w	r4, r4, ip
 8000df6:	429c      	cmp	r4, r3
 8000df8:	46ce      	mov	lr, r9
 8000dfa:	469c      	mov	ip, r3
 8000dfc:	d351      	bcc.n	8000ea2 <__udivmoddi4+0x28a>
 8000dfe:	d04e      	beq.n	8000e9e <__udivmoddi4+0x286>
 8000e00:	b155      	cbz	r5, 8000e18 <__udivmoddi4+0x200>
 8000e02:	ebb8 030e 	subs.w	r3, r8, lr
 8000e06:	eb64 040c 	sbc.w	r4, r4, ip
 8000e0a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0e:	40cb      	lsrs	r3, r1
 8000e10:	431e      	orrs	r6, r3
 8000e12:	40cc      	lsrs	r4, r1
 8000e14:	e9c5 6400 	strd	r6, r4, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	e750      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f103 	lsr.w	r1, r0, r3
 8000e24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e28:	fa24 f303 	lsr.w	r3, r4, r3
 8000e2c:	4094      	lsls	r4, r2
 8000e2e:	430c      	orrs	r4, r1
 8000e30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e34:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e38:	fa1f f78c 	uxth.w	r7, ip
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3110 	mls	r1, r8, r0, r3
 8000e44:	0c23      	lsrs	r3, r4, #16
 8000e46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4a:	fb00 f107 	mul.w	r1, r0, r7
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	d908      	bls.n	8000e64 <__udivmoddi4+0x24c>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e5a:	d22c      	bcs.n	8000eb6 <__udivmoddi4+0x29e>
 8000e5c:	4299      	cmp	r1, r3
 8000e5e:	d92a      	bls.n	8000eb6 <__udivmoddi4+0x29e>
 8000e60:	3802      	subs	r0, #2
 8000e62:	4463      	add	r3, ip
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e6c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e74:	fb01 f307 	mul.w	r3, r1, r7
 8000e78:	42a3      	cmp	r3, r4
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x276>
 8000e7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e80:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e84:	d213      	bcs.n	8000eae <__udivmoddi4+0x296>
 8000e86:	42a3      	cmp	r3, r4
 8000e88:	d911      	bls.n	8000eae <__udivmoddi4+0x296>
 8000e8a:	3902      	subs	r1, #2
 8000e8c:	4464      	add	r4, ip
 8000e8e:	1ae4      	subs	r4, r4, r3
 8000e90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e94:	e739      	b.n	8000d0a <__udivmoddi4+0xf2>
 8000e96:	4604      	mov	r4, r0
 8000e98:	e6f0      	b.n	8000c7c <__udivmoddi4+0x64>
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	e706      	b.n	8000cac <__udivmoddi4+0x94>
 8000e9e:	45c8      	cmp	r8, r9
 8000ea0:	d2ae      	bcs.n	8000e00 <__udivmoddi4+0x1e8>
 8000ea2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ea6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eaa:	3801      	subs	r0, #1
 8000eac:	e7a8      	b.n	8000e00 <__udivmoddi4+0x1e8>
 8000eae:	4631      	mov	r1, r6
 8000eb0:	e7ed      	b.n	8000e8e <__udivmoddi4+0x276>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	e799      	b.n	8000dea <__udivmoddi4+0x1d2>
 8000eb6:	4630      	mov	r0, r6
 8000eb8:	e7d4      	b.n	8000e64 <__udivmoddi4+0x24c>
 8000eba:	46d6      	mov	lr, sl
 8000ebc:	e77f      	b.n	8000dbe <__udivmoddi4+0x1a6>
 8000ebe:	4463      	add	r3, ip
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	e74d      	b.n	8000d60 <__udivmoddi4+0x148>
 8000ec4:	4606      	mov	r6, r0
 8000ec6:	4623      	mov	r3, r4
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e70f      	b.n	8000cec <__udivmoddi4+0xd4>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	4463      	add	r3, ip
 8000ed0:	e730      	b.n	8000d34 <__udivmoddi4+0x11c>
 8000ed2:	bf00      	nop

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ed8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000edc:	b088      	sub	sp, #32
 8000ede:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ee0:	f000 fd36 	bl	8001950 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ee4:	f000 f84a 	bl	8000f7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ee8:	f000 f9f4 	bl	80012d4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000eec:	f000 f9d2 	bl	8001294 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000ef0:	f000 f9a6 	bl	8001240 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000ef4:	f000 f930 	bl	8001158 <MX_TIM2_Init>
  MX_ADC1_Init();
 8000ef8:	f000 f8ae 	bl	8001058 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000efc:	f000 f8fe 	bl	80010fc <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8000f00:	f008 fe5e 	bl	8009bc0 <MX_USB_DEVICE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  int len=sprintf(&buffer[0],"{\"temp1\":%.2f,\"temp2\":%.2f,\"temp3\":%.2f,\"temp4\":%.2f}\r\n",temperature[3],temperature[0],temperature[1],temperature[2]);
 8000f04:	4b1a      	ldr	r3, [pc, #104]	@ (8000f70 <main+0x98>)
 8000f06:	68db      	ldr	r3, [r3, #12]
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f7ff fb3d 	bl	8000588 <__aeabi_f2d>
 8000f0e:	4682      	mov	sl, r0
 8000f10:	468b      	mov	fp, r1
 8000f12:	4b17      	ldr	r3, [pc, #92]	@ (8000f70 <main+0x98>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4618      	mov	r0, r3
 8000f18:	f7ff fb36 	bl	8000588 <__aeabi_f2d>
 8000f1c:	4604      	mov	r4, r0
 8000f1e:	460d      	mov	r5, r1
 8000f20:	4b13      	ldr	r3, [pc, #76]	@ (8000f70 <main+0x98>)
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff fb2f 	bl	8000588 <__aeabi_f2d>
 8000f2a:	4680      	mov	r8, r0
 8000f2c:	4689      	mov	r9, r1
 8000f2e:	4b10      	ldr	r3, [pc, #64]	@ (8000f70 <main+0x98>)
 8000f30:	689b      	ldr	r3, [r3, #8]
 8000f32:	4618      	mov	r0, r3
 8000f34:	f7ff fb28 	bl	8000588 <__aeabi_f2d>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	460b      	mov	r3, r1
 8000f3c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8000f40:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8000f44:	e9cd 4500 	strd	r4, r5, [sp]
 8000f48:	4652      	mov	r2, sl
 8000f4a:	465b      	mov	r3, fp
 8000f4c:	4909      	ldr	r1, [pc, #36]	@ (8000f74 <main+0x9c>)
 8000f4e:	480a      	ldr	r0, [pc, #40]	@ (8000f78 <main+0xa0>)
 8000f50:	f00a f8e0 	bl	800b114 <siprintf>
 8000f54:	6078      	str	r0, [r7, #4]
	  CDC_Transmit_FS((uint8_t*)&buffer[0], len);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	b29b      	uxth	r3, r3
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4806      	ldr	r0, [pc, #24]	@ (8000f78 <main+0xa0>)
 8000f5e:	f008 feed 	bl	8009d3c <CDC_Transmit_FS>
	  HAL_Delay(300);
 8000f62:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000f66:	f000 fd65 	bl	8001a34 <HAL_Delay>
  {
 8000f6a:	bf00      	nop
 8000f6c:	e7ca      	b.n	8000f04 <main+0x2c>
 8000f6e:	bf00      	nop
 8000f70:	2000047c 	.word	0x2000047c
 8000f74:	0800d388 	.word	0x0800d388
 8000f78:	2000048c 	.word	0x2000048c

08000f7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b094      	sub	sp, #80	@ 0x50
 8000f80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f82:	f107 031c 	add.w	r3, r7, #28
 8000f86:	2234      	movs	r2, #52	@ 0x34
 8000f88:	2100      	movs	r1, #0
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f00a f925 	bl	800b1da <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f90:	f107 0308 	add.w	r3, r7, #8
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	60da      	str	r2, [r3, #12]
 8000f9e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	607b      	str	r3, [r7, #4]
 8000fa4:	4b2a      	ldr	r3, [pc, #168]	@ (8001050 <SystemClock_Config+0xd4>)
 8000fa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fa8:	4a29      	ldr	r2, [pc, #164]	@ (8001050 <SystemClock_Config+0xd4>)
 8000faa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fae:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fb0:	4b27      	ldr	r3, [pc, #156]	@ (8001050 <SystemClock_Config+0xd4>)
 8000fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fb8:	607b      	str	r3, [r7, #4]
 8000fba:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	603b      	str	r3, [r7, #0]
 8000fc0:	4b24      	ldr	r3, [pc, #144]	@ (8001054 <SystemClock_Config+0xd8>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000fc8:	4a22      	ldr	r2, [pc, #136]	@ (8001054 <SystemClock_Config+0xd8>)
 8000fca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fce:	6013      	str	r3, [r2, #0]
 8000fd0:	4b20      	ldr	r3, [pc, #128]	@ (8001054 <SystemClock_Config+0xd8>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000fd8:	603b      	str	r3, [r7, #0]
 8000fda:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fe0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000fe4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fea:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000fee:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ff0:	2304      	movs	r3, #4
 8000ff2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000ff4:	23c0      	movs	r3, #192	@ 0xc0
 8000ff6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8000ff8:	2306      	movs	r3, #6
 8000ffa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000ffc:	2308      	movs	r3, #8
 8000ffe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001000:	2302      	movs	r3, #2
 8001002:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001004:	f107 031c 	add.w	r3, r7, #28
 8001008:	4618      	mov	r0, r3
 800100a:	f003 ffa7 	bl	8004f5c <HAL_RCC_OscConfig>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001014:	f000 f9cc 	bl	80013b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001018:	230f      	movs	r3, #15
 800101a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800101c:	2302      	movs	r3, #2
 800101e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001020:	2300      	movs	r3, #0
 8001022:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001024:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001028:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800102a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800102e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001030:	f107 0308 	add.w	r3, r7, #8
 8001034:	2102      	movs	r1, #2
 8001036:	4618      	mov	r0, r3
 8001038:	f003 f91c 	bl	8004274 <HAL_RCC_ClockConfig>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001042:	f000 f9b5 	bl	80013b0 <Error_Handler>
  }
}
 8001046:	bf00      	nop
 8001048:	3750      	adds	r7, #80	@ 0x50
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40023800 	.word	0x40023800
 8001054:	40007000 	.word	0x40007000

08001058 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800105e:	463b      	mov	r3, r7
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	605a      	str	r2, [r3, #4]
 8001066:	609a      	str	r2, [r3, #8]
 8001068:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800106a:	4b21      	ldr	r3, [pc, #132]	@ (80010f0 <MX_ADC1_Init+0x98>)
 800106c:	4a21      	ldr	r2, [pc, #132]	@ (80010f4 <MX_ADC1_Init+0x9c>)
 800106e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001070:	4b1f      	ldr	r3, [pc, #124]	@ (80010f0 <MX_ADC1_Init+0x98>)
 8001072:	2200      	movs	r2, #0
 8001074:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001076:	4b1e      	ldr	r3, [pc, #120]	@ (80010f0 <MX_ADC1_Init+0x98>)
 8001078:	2200      	movs	r2, #0
 800107a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800107c:	4b1c      	ldr	r3, [pc, #112]	@ (80010f0 <MX_ADC1_Init+0x98>)
 800107e:	2200      	movs	r2, #0
 8001080:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001082:	4b1b      	ldr	r3, [pc, #108]	@ (80010f0 <MX_ADC1_Init+0x98>)
 8001084:	2200      	movs	r2, #0
 8001086:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001088:	4b19      	ldr	r3, [pc, #100]	@ (80010f0 <MX_ADC1_Init+0x98>)
 800108a:	2200      	movs	r2, #0
 800108c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001090:	4b17      	ldr	r3, [pc, #92]	@ (80010f0 <MX_ADC1_Init+0x98>)
 8001092:	2200      	movs	r2, #0
 8001094:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001096:	4b16      	ldr	r3, [pc, #88]	@ (80010f0 <MX_ADC1_Init+0x98>)
 8001098:	4a17      	ldr	r2, [pc, #92]	@ (80010f8 <MX_ADC1_Init+0xa0>)
 800109a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800109c:	4b14      	ldr	r3, [pc, #80]	@ (80010f0 <MX_ADC1_Init+0x98>)
 800109e:	2200      	movs	r2, #0
 80010a0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80010a2:	4b13      	ldr	r3, [pc, #76]	@ (80010f0 <MX_ADC1_Init+0x98>)
 80010a4:	2201      	movs	r2, #1
 80010a6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010a8:	4b11      	ldr	r3, [pc, #68]	@ (80010f0 <MX_ADC1_Init+0x98>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010b0:	4b0f      	ldr	r3, [pc, #60]	@ (80010f0 <MX_ADC1_Init+0x98>)
 80010b2:	2201      	movs	r2, #1
 80010b4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010b6:	480e      	ldr	r0, [pc, #56]	@ (80010f0 <MX_ADC1_Init+0x98>)
 80010b8:	f000 fce0 	bl	8001a7c <HAL_ADC_Init>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80010c2:	f000 f975 	bl	80013b0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80010c6:	2301      	movs	r3, #1
 80010c8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010ca:	2301      	movs	r3, #1
 80010cc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010ce:	2300      	movs	r3, #0
 80010d0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010d2:	463b      	mov	r3, r7
 80010d4:	4619      	mov	r1, r3
 80010d6:	4806      	ldr	r0, [pc, #24]	@ (80010f0 <MX_ADC1_Init+0x98>)
 80010d8:	f000 fd14 	bl	8001b04 <HAL_ADC_ConfigChannel>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80010e2:	f000 f965 	bl	80013b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010e6:	bf00      	nop
 80010e8:	3710      	adds	r7, #16
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	200002f0 	.word	0x200002f0
 80010f4:	40012000 	.word	0x40012000
 80010f8:	0f000001 	.word	0x0f000001

080010fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001100:	4b12      	ldr	r3, [pc, #72]	@ (800114c <MX_I2C1_Init+0x50>)
 8001102:	4a13      	ldr	r2, [pc, #76]	@ (8001150 <MX_I2C1_Init+0x54>)
 8001104:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001106:	4b11      	ldr	r3, [pc, #68]	@ (800114c <MX_I2C1_Init+0x50>)
 8001108:	4a12      	ldr	r2, [pc, #72]	@ (8001154 <MX_I2C1_Init+0x58>)
 800110a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800110c:	4b0f      	ldr	r3, [pc, #60]	@ (800114c <MX_I2C1_Init+0x50>)
 800110e:	2200      	movs	r2, #0
 8001110:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001112:	4b0e      	ldr	r3, [pc, #56]	@ (800114c <MX_I2C1_Init+0x50>)
 8001114:	2200      	movs	r2, #0
 8001116:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001118:	4b0c      	ldr	r3, [pc, #48]	@ (800114c <MX_I2C1_Init+0x50>)
 800111a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800111e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001120:	4b0a      	ldr	r3, [pc, #40]	@ (800114c <MX_I2C1_Init+0x50>)
 8001122:	2200      	movs	r2, #0
 8001124:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001126:	4b09      	ldr	r3, [pc, #36]	@ (800114c <MX_I2C1_Init+0x50>)
 8001128:	2200      	movs	r2, #0
 800112a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800112c:	4b07      	ldr	r3, [pc, #28]	@ (800114c <MX_I2C1_Init+0x50>)
 800112e:	2200      	movs	r2, #0
 8001130:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001132:	4b06      	ldr	r3, [pc, #24]	@ (800114c <MX_I2C1_Init+0x50>)
 8001134:	2200      	movs	r2, #0
 8001136:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001138:	4804      	ldr	r0, [pc, #16]	@ (800114c <MX_I2C1_Init+0x50>)
 800113a:	f001 fcbb 	bl	8002ab4 <HAL_I2C_Init>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001144:	f000 f934 	bl	80013b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001148:	bf00      	nop
 800114a:	bd80      	pop	{r7, pc}
 800114c:	20000338 	.word	0x20000338
 8001150:	40005400 	.word	0x40005400
 8001154:	000186a0 	.word	0x000186a0

08001158 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b08e      	sub	sp, #56	@ 0x38
 800115c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800115e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001162:	2200      	movs	r2, #0
 8001164:	601a      	str	r2, [r3, #0]
 8001166:	605a      	str	r2, [r3, #4]
 8001168:	609a      	str	r2, [r3, #8]
 800116a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800116c:	f107 0320 	add.w	r3, r7, #32
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001176:	1d3b      	adds	r3, r7, #4
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	60da      	str	r2, [r3, #12]
 8001182:	611a      	str	r2, [r3, #16]
 8001184:	615a      	str	r2, [r3, #20]
 8001186:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001188:	4b2c      	ldr	r3, [pc, #176]	@ (800123c <MX_TIM2_Init+0xe4>)
 800118a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800118e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001190:	4b2a      	ldr	r3, [pc, #168]	@ (800123c <MX_TIM2_Init+0xe4>)
 8001192:	2200      	movs	r2, #0
 8001194:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001196:	4b29      	ldr	r3, [pc, #164]	@ (800123c <MX_TIM2_Init+0xe4>)
 8001198:	2200      	movs	r2, #0
 800119a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 60-1;
 800119c:	4b27      	ldr	r3, [pc, #156]	@ (800123c <MX_TIM2_Init+0xe4>)
 800119e:	223b      	movs	r2, #59	@ 0x3b
 80011a0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011a2:	4b26      	ldr	r3, [pc, #152]	@ (800123c <MX_TIM2_Init+0xe4>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011a8:	4b24      	ldr	r3, [pc, #144]	@ (800123c <MX_TIM2_Init+0xe4>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011ae:	4823      	ldr	r0, [pc, #140]	@ (800123c <MX_TIM2_Init+0xe4>)
 80011b0:	f004 f972 	bl	8005498 <HAL_TIM_Base_Init>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80011ba:	f000 f8f9 	bl	80013b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011c4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011c8:	4619      	mov	r1, r3
 80011ca:	481c      	ldr	r0, [pc, #112]	@ (800123c <MX_TIM2_Init+0xe4>)
 80011cc:	f004 face 	bl	800576c <HAL_TIM_ConfigClockSource>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80011d6:	f000 f8eb 	bl	80013b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80011da:	4818      	ldr	r0, [pc, #96]	@ (800123c <MX_TIM2_Init+0xe4>)
 80011dc:	f004 f9ab 	bl	8005536 <HAL_TIM_PWM_Init>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80011e6:	f000 f8e3 	bl	80013b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011ea:	2300      	movs	r3, #0
 80011ec:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ee:	2300      	movs	r3, #0
 80011f0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011f2:	f107 0320 	add.w	r3, r7, #32
 80011f6:	4619      	mov	r1, r3
 80011f8:	4810      	ldr	r0, [pc, #64]	@ (800123c <MX_TIM2_Init+0xe4>)
 80011fa:	f004 fe75 	bl	8005ee8 <HAL_TIMEx_MasterConfigSynchronization>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8001204:	f000 f8d4 	bl	80013b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001208:	2360      	movs	r3, #96	@ 0x60
 800120a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800120c:	2300      	movs	r3, #0
 800120e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001210:	2300      	movs	r3, #0
 8001212:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001214:	2300      	movs	r3, #0
 8001216:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001218:	1d3b      	adds	r3, r7, #4
 800121a:	2200      	movs	r2, #0
 800121c:	4619      	mov	r1, r3
 800121e:	4807      	ldr	r0, [pc, #28]	@ (800123c <MX_TIM2_Init+0xe4>)
 8001220:	f004 f9e2 	bl	80055e8 <HAL_TIM_PWM_ConfigChannel>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 800122a:	f000 f8c1 	bl	80013b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800122e:	4803      	ldr	r0, [pc, #12]	@ (800123c <MX_TIM2_Init+0xe4>)
 8001230:	f000 f9c8 	bl	80015c4 <HAL_TIM_MspPostInit>

}
 8001234:	bf00      	nop
 8001236:	3738      	adds	r7, #56	@ 0x38
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	2000038c 	.word	0x2000038c

08001240 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001244:	4b11      	ldr	r3, [pc, #68]	@ (800128c <MX_USART2_UART_Init+0x4c>)
 8001246:	4a12      	ldr	r2, [pc, #72]	@ (8001290 <MX_USART2_UART_Init+0x50>)
 8001248:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800124a:	4b10      	ldr	r3, [pc, #64]	@ (800128c <MX_USART2_UART_Init+0x4c>)
 800124c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001250:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001252:	4b0e      	ldr	r3, [pc, #56]	@ (800128c <MX_USART2_UART_Init+0x4c>)
 8001254:	2200      	movs	r2, #0
 8001256:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001258:	4b0c      	ldr	r3, [pc, #48]	@ (800128c <MX_USART2_UART_Init+0x4c>)
 800125a:	2200      	movs	r2, #0
 800125c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800125e:	4b0b      	ldr	r3, [pc, #44]	@ (800128c <MX_USART2_UART_Init+0x4c>)
 8001260:	2200      	movs	r2, #0
 8001262:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001264:	4b09      	ldr	r3, [pc, #36]	@ (800128c <MX_USART2_UART_Init+0x4c>)
 8001266:	220c      	movs	r2, #12
 8001268:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800126a:	4b08      	ldr	r3, [pc, #32]	@ (800128c <MX_USART2_UART_Init+0x4c>)
 800126c:	2200      	movs	r2, #0
 800126e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001270:	4b06      	ldr	r3, [pc, #24]	@ (800128c <MX_USART2_UART_Init+0x4c>)
 8001272:	2200      	movs	r2, #0
 8001274:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001276:	4805      	ldr	r0, [pc, #20]	@ (800128c <MX_USART2_UART_Init+0x4c>)
 8001278:	f004 feb2 	bl	8005fe0 <HAL_UART_Init>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001282:	f000 f895 	bl	80013b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001286:	bf00      	nop
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	20000434 	.word	0x20000434
 8001290:	40004400 	.word	0x40004400

08001294 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	607b      	str	r3, [r7, #4]
 800129e:	4b0c      	ldr	r3, [pc, #48]	@ (80012d0 <MX_DMA_Init+0x3c>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a2:	4a0b      	ldr	r2, [pc, #44]	@ (80012d0 <MX_DMA_Init+0x3c>)
 80012a4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80012a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012aa:	4b09      	ldr	r3, [pc, #36]	@ (80012d0 <MX_DMA_Init+0x3c>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012b2:	607b      	str	r3, [r7, #4]
 80012b4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80012b6:	2200      	movs	r2, #0
 80012b8:	2100      	movs	r1, #0
 80012ba:	2010      	movs	r0, #16
 80012bc:	f000 ff2b 	bl	8002116 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80012c0:	2010      	movs	r0, #16
 80012c2:	f000 ff44 	bl	800214e <HAL_NVIC_EnableIRQ>

}
 80012c6:	bf00      	nop
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	40023800 	.word	0x40023800

080012d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b08a      	sub	sp, #40	@ 0x28
 80012d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012da:	f107 0314 	add.w	r3, r7, #20
 80012de:	2200      	movs	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]
 80012e2:	605a      	str	r2, [r3, #4]
 80012e4:	609a      	str	r2, [r3, #8]
 80012e6:	60da      	str	r2, [r3, #12]
 80012e8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ea:	2300      	movs	r3, #0
 80012ec:	613b      	str	r3, [r7, #16]
 80012ee:	4b2d      	ldr	r3, [pc, #180]	@ (80013a4 <MX_GPIO_Init+0xd0>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f2:	4a2c      	ldr	r2, [pc, #176]	@ (80013a4 <MX_GPIO_Init+0xd0>)
 80012f4:	f043 0304 	orr.w	r3, r3, #4
 80012f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012fa:	4b2a      	ldr	r3, [pc, #168]	@ (80013a4 <MX_GPIO_Init+0xd0>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012fe:	f003 0304 	and.w	r3, r3, #4
 8001302:	613b      	str	r3, [r7, #16]
 8001304:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	60fb      	str	r3, [r7, #12]
 800130a:	4b26      	ldr	r3, [pc, #152]	@ (80013a4 <MX_GPIO_Init+0xd0>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130e:	4a25      	ldr	r2, [pc, #148]	@ (80013a4 <MX_GPIO_Init+0xd0>)
 8001310:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001314:	6313      	str	r3, [r2, #48]	@ 0x30
 8001316:	4b23      	ldr	r3, [pc, #140]	@ (80013a4 <MX_GPIO_Init+0xd0>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800131a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	60bb      	str	r3, [r7, #8]
 8001326:	4b1f      	ldr	r3, [pc, #124]	@ (80013a4 <MX_GPIO_Init+0xd0>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800132a:	4a1e      	ldr	r2, [pc, #120]	@ (80013a4 <MX_GPIO_Init+0xd0>)
 800132c:	f043 0301 	orr.w	r3, r3, #1
 8001330:	6313      	str	r3, [r2, #48]	@ 0x30
 8001332:	4b1c      	ldr	r3, [pc, #112]	@ (80013a4 <MX_GPIO_Init+0xd0>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001336:	f003 0301 	and.w	r3, r3, #1
 800133a:	60bb      	str	r3, [r7, #8]
 800133c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	607b      	str	r3, [r7, #4]
 8001342:	4b18      	ldr	r3, [pc, #96]	@ (80013a4 <MX_GPIO_Init+0xd0>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001346:	4a17      	ldr	r2, [pc, #92]	@ (80013a4 <MX_GPIO_Init+0xd0>)
 8001348:	f043 0302 	orr.w	r3, r3, #2
 800134c:	6313      	str	r3, [r2, #48]	@ 0x30
 800134e:	4b15      	ldr	r3, [pc, #84]	@ (80013a4 <MX_GPIO_Init+0xd0>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001352:	f003 0302 	and.w	r3, r3, #2
 8001356:	607b      	str	r3, [r7, #4]
 8001358:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LED1_Pin, GPIO_PIN_RESET);
 800135a:	2200      	movs	r2, #0
 800135c:	21a0      	movs	r1, #160	@ 0xa0
 800135e:	4812      	ldr	r0, [pc, #72]	@ (80013a8 <MX_GPIO_Init+0xd4>)
 8001360:	f001 fb8e 	bl	8002a80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001364:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001368:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800136a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800136e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001370:	2300      	movs	r3, #0
 8001372:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001374:	f107 0314 	add.w	r3, r7, #20
 8001378:	4619      	mov	r1, r3
 800137a:	480c      	ldr	r0, [pc, #48]	@ (80013ac <MX_GPIO_Init+0xd8>)
 800137c:	f001 f9ec 	bl	8002758 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LED1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LED1_Pin;
 8001380:	23a0      	movs	r3, #160	@ 0xa0
 8001382:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001384:	2301      	movs	r3, #1
 8001386:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001388:	2300      	movs	r3, #0
 800138a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138c:	2300      	movs	r3, #0
 800138e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001390:	f107 0314 	add.w	r3, r7, #20
 8001394:	4619      	mov	r1, r3
 8001396:	4804      	ldr	r0, [pc, #16]	@ (80013a8 <MX_GPIO_Init+0xd4>)
 8001398:	f001 f9de 	bl	8002758 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800139c:	bf00      	nop
 800139e:	3728      	adds	r7, #40	@ 0x28
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	40023800 	.word	0x40023800
 80013a8:	40020000 	.word	0x40020000
 80013ac:	40020800 	.word	0x40020800

080013b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013b4:	b672      	cpsid	i
}
 80013b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013b8:	bf00      	nop
 80013ba:	e7fd      	b.n	80013b8 <Error_Handler+0x8>

080013bc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013c2:	2300      	movs	r3, #0
 80013c4:	607b      	str	r3, [r7, #4]
 80013c6:	4b10      	ldr	r3, [pc, #64]	@ (8001408 <HAL_MspInit+0x4c>)
 80013c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ca:	4a0f      	ldr	r2, [pc, #60]	@ (8001408 <HAL_MspInit+0x4c>)
 80013cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80013d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001408 <HAL_MspInit+0x4c>)
 80013d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013da:	607b      	str	r3, [r7, #4]
 80013dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013de:	2300      	movs	r3, #0
 80013e0:	603b      	str	r3, [r7, #0]
 80013e2:	4b09      	ldr	r3, [pc, #36]	@ (8001408 <HAL_MspInit+0x4c>)
 80013e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013e6:	4a08      	ldr	r2, [pc, #32]	@ (8001408 <HAL_MspInit+0x4c>)
 80013e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80013ee:	4b06      	ldr	r3, [pc, #24]	@ (8001408 <HAL_MspInit+0x4c>)
 80013f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013f6:	603b      	str	r3, [r7, #0]
 80013f8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80013fa:	2007      	movs	r0, #7
 80013fc:	f000 fe80 	bl	8002100 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001400:	bf00      	nop
 8001402:	3708      	adds	r7, #8
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	40023800 	.word	0x40023800

0800140c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b08a      	sub	sp, #40	@ 0x28
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001414:	f107 0314 	add.w	r3, r7, #20
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	605a      	str	r2, [r3, #4]
 800141e:	609a      	str	r2, [r3, #8]
 8001420:	60da      	str	r2, [r3, #12]
 8001422:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a17      	ldr	r2, [pc, #92]	@ (8001488 <HAL_ADC_MspInit+0x7c>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d127      	bne.n	800147e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800142e:	2300      	movs	r3, #0
 8001430:	613b      	str	r3, [r7, #16]
 8001432:	4b16      	ldr	r3, [pc, #88]	@ (800148c <HAL_ADC_MspInit+0x80>)
 8001434:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001436:	4a15      	ldr	r2, [pc, #84]	@ (800148c <HAL_ADC_MspInit+0x80>)
 8001438:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800143c:	6453      	str	r3, [r2, #68]	@ 0x44
 800143e:	4b13      	ldr	r3, [pc, #76]	@ (800148c <HAL_ADC_MspInit+0x80>)
 8001440:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001442:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001446:	613b      	str	r3, [r7, #16]
 8001448:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	60fb      	str	r3, [r7, #12]
 800144e:	4b0f      	ldr	r3, [pc, #60]	@ (800148c <HAL_ADC_MspInit+0x80>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001452:	4a0e      	ldr	r2, [pc, #56]	@ (800148c <HAL_ADC_MspInit+0x80>)
 8001454:	f043 0301 	orr.w	r3, r3, #1
 8001458:	6313      	str	r3, [r2, #48]	@ 0x30
 800145a:	4b0c      	ldr	r3, [pc, #48]	@ (800148c <HAL_ADC_MspInit+0x80>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145e:	f003 0301 	and.w	r3, r3, #1
 8001462:	60fb      	str	r3, [r7, #12]
 8001464:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001466:	2302      	movs	r3, #2
 8001468:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800146a:	2303      	movs	r3, #3
 800146c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146e:	2300      	movs	r3, #0
 8001470:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001472:	f107 0314 	add.w	r3, r7, #20
 8001476:	4619      	mov	r1, r3
 8001478:	4805      	ldr	r0, [pc, #20]	@ (8001490 <HAL_ADC_MspInit+0x84>)
 800147a:	f001 f96d 	bl	8002758 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800147e:	bf00      	nop
 8001480:	3728      	adds	r7, #40	@ 0x28
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	40012000 	.word	0x40012000
 800148c:	40023800 	.word	0x40023800
 8001490:	40020000 	.word	0x40020000

08001494 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b08a      	sub	sp, #40	@ 0x28
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800149c:	f107 0314 	add.w	r3, r7, #20
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	605a      	str	r2, [r3, #4]
 80014a6:	609a      	str	r2, [r3, #8]
 80014a8:	60da      	str	r2, [r3, #12]
 80014aa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a19      	ldr	r2, [pc, #100]	@ (8001518 <HAL_I2C_MspInit+0x84>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d12c      	bne.n	8001510 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	613b      	str	r3, [r7, #16]
 80014ba:	4b18      	ldr	r3, [pc, #96]	@ (800151c <HAL_I2C_MspInit+0x88>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014be:	4a17      	ldr	r2, [pc, #92]	@ (800151c <HAL_I2C_MspInit+0x88>)
 80014c0:	f043 0302 	orr.w	r3, r3, #2
 80014c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014c6:	4b15      	ldr	r3, [pc, #84]	@ (800151c <HAL_I2C_MspInit+0x88>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ca:	f003 0302 	and.w	r3, r3, #2
 80014ce:	613b      	str	r3, [r7, #16]
 80014d0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80014d2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80014d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014d8:	2312      	movs	r3, #18
 80014da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014dc:	2300      	movs	r3, #0
 80014de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e0:	2303      	movs	r3, #3
 80014e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014e4:	2304      	movs	r3, #4
 80014e6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014e8:	f107 0314 	add.w	r3, r7, #20
 80014ec:	4619      	mov	r1, r3
 80014ee:	480c      	ldr	r0, [pc, #48]	@ (8001520 <HAL_I2C_MspInit+0x8c>)
 80014f0:	f001 f932 	bl	8002758 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014f4:	2300      	movs	r3, #0
 80014f6:	60fb      	str	r3, [r7, #12]
 80014f8:	4b08      	ldr	r3, [pc, #32]	@ (800151c <HAL_I2C_MspInit+0x88>)
 80014fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014fc:	4a07      	ldr	r2, [pc, #28]	@ (800151c <HAL_I2C_MspInit+0x88>)
 80014fe:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001502:	6413      	str	r3, [r2, #64]	@ 0x40
 8001504:	4b05      	ldr	r3, [pc, #20]	@ (800151c <HAL_I2C_MspInit+0x88>)
 8001506:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001508:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800150c:	60fb      	str	r3, [r7, #12]
 800150e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001510:	bf00      	nop
 8001512:	3728      	adds	r7, #40	@ 0x28
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	40005400 	.word	0x40005400
 800151c:	40023800 	.word	0x40023800
 8001520:	40020400 	.word	0x40020400

08001524 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001534:	d13c      	bne.n	80015b0 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001536:	2300      	movs	r3, #0
 8001538:	60fb      	str	r3, [r7, #12]
 800153a:	4b1f      	ldr	r3, [pc, #124]	@ (80015b8 <HAL_TIM_Base_MspInit+0x94>)
 800153c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800153e:	4a1e      	ldr	r2, [pc, #120]	@ (80015b8 <HAL_TIM_Base_MspInit+0x94>)
 8001540:	f043 0301 	orr.w	r3, r3, #1
 8001544:	6413      	str	r3, [r2, #64]	@ 0x40
 8001546:	4b1c      	ldr	r3, [pc, #112]	@ (80015b8 <HAL_TIM_Base_MspInit+0x94>)
 8001548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800154a:	f003 0301 	and.w	r3, r3, #1
 800154e:	60fb      	str	r3, [r7, #12]
 8001550:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 8001552:	4b1a      	ldr	r3, [pc, #104]	@ (80015bc <HAL_TIM_Base_MspInit+0x98>)
 8001554:	4a1a      	ldr	r2, [pc, #104]	@ (80015c0 <HAL_TIM_Base_MspInit+0x9c>)
 8001556:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 8001558:	4b18      	ldr	r3, [pc, #96]	@ (80015bc <HAL_TIM_Base_MspInit+0x98>)
 800155a:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 800155e:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001560:	4b16      	ldr	r3, [pc, #88]	@ (80015bc <HAL_TIM_Base_MspInit+0x98>)
 8001562:	2200      	movs	r2, #0
 8001564:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001566:	4b15      	ldr	r3, [pc, #84]	@ (80015bc <HAL_TIM_Base_MspInit+0x98>)
 8001568:	2200      	movs	r2, #0
 800156a:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800156c:	4b13      	ldr	r3, [pc, #76]	@ (80015bc <HAL_TIM_Base_MspInit+0x98>)
 800156e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001572:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001574:	4b11      	ldr	r3, [pc, #68]	@ (80015bc <HAL_TIM_Base_MspInit+0x98>)
 8001576:	2200      	movs	r2, #0
 8001578:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800157a:	4b10      	ldr	r3, [pc, #64]	@ (80015bc <HAL_TIM_Base_MspInit+0x98>)
 800157c:	2200      	movs	r2, #0
 800157e:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8001580:	4b0e      	ldr	r3, [pc, #56]	@ (80015bc <HAL_TIM_Base_MspInit+0x98>)
 8001582:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001586:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001588:	4b0c      	ldr	r3, [pc, #48]	@ (80015bc <HAL_TIM_Base_MspInit+0x98>)
 800158a:	2200      	movs	r2, #0
 800158c:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800158e:	4b0b      	ldr	r3, [pc, #44]	@ (80015bc <HAL_TIM_Base_MspInit+0x98>)
 8001590:	2200      	movs	r2, #0
 8001592:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8001594:	4809      	ldr	r0, [pc, #36]	@ (80015bc <HAL_TIM_Base_MspInit+0x98>)
 8001596:	f000 fdf5 	bl	8002184 <HAL_DMA_Init>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <HAL_TIM_Base_MspInit+0x80>
    {
      Error_Handler();
 80015a0:	f7ff ff06 	bl	80013b0 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	4a05      	ldr	r2, [pc, #20]	@ (80015bc <HAL_TIM_Base_MspInit+0x98>)
 80015a8:	625a      	str	r2, [r3, #36]	@ 0x24
 80015aa:	4a04      	ldr	r2, [pc, #16]	@ (80015bc <HAL_TIM_Base_MspInit+0x98>)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80015b0:	bf00      	nop
 80015b2:	3710      	adds	r7, #16
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	40023800 	.word	0x40023800
 80015bc:	200003d4 	.word	0x200003d4
 80015c0:	40026088 	.word	0x40026088

080015c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b088      	sub	sp, #32
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015cc:	f107 030c 	add.w	r3, r7, #12
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	605a      	str	r2, [r3, #4]
 80015d6:	609a      	str	r2, [r3, #8]
 80015d8:	60da      	str	r2, [r3, #12]
 80015da:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80015e4:	d11d      	bne.n	8001622 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	60bb      	str	r3, [r7, #8]
 80015ea:	4b10      	ldr	r3, [pc, #64]	@ (800162c <HAL_TIM_MspPostInit+0x68>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ee:	4a0f      	ldr	r2, [pc, #60]	@ (800162c <HAL_TIM_MspPostInit+0x68>)
 80015f0:	f043 0301 	orr.w	r3, r3, #1
 80015f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015f6:	4b0d      	ldr	r3, [pc, #52]	@ (800162c <HAL_TIM_MspPostInit+0x68>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	60bb      	str	r3, [r7, #8]
 8001600:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001602:	2301      	movs	r3, #1
 8001604:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001606:	2302      	movs	r3, #2
 8001608:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160a:	2300      	movs	r3, #0
 800160c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160e:	2300      	movs	r3, #0
 8001610:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001612:	2301      	movs	r3, #1
 8001614:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001616:	f107 030c 	add.w	r3, r7, #12
 800161a:	4619      	mov	r1, r3
 800161c:	4804      	ldr	r0, [pc, #16]	@ (8001630 <HAL_TIM_MspPostInit+0x6c>)
 800161e:	f001 f89b 	bl	8002758 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001622:	bf00      	nop
 8001624:	3720      	adds	r7, #32
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	40023800 	.word	0x40023800
 8001630:	40020000 	.word	0x40020000

08001634 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b08a      	sub	sp, #40	@ 0x28
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800163c:	f107 0314 	add.w	r3, r7, #20
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	605a      	str	r2, [r3, #4]
 8001646:	609a      	str	r2, [r3, #8]
 8001648:	60da      	str	r2, [r3, #12]
 800164a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a19      	ldr	r2, [pc, #100]	@ (80016b8 <HAL_UART_MspInit+0x84>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d12b      	bne.n	80016ae <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	613b      	str	r3, [r7, #16]
 800165a:	4b18      	ldr	r3, [pc, #96]	@ (80016bc <HAL_UART_MspInit+0x88>)
 800165c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800165e:	4a17      	ldr	r2, [pc, #92]	@ (80016bc <HAL_UART_MspInit+0x88>)
 8001660:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001664:	6413      	str	r3, [r2, #64]	@ 0x40
 8001666:	4b15      	ldr	r3, [pc, #84]	@ (80016bc <HAL_UART_MspInit+0x88>)
 8001668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800166a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800166e:	613b      	str	r3, [r7, #16]
 8001670:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	60fb      	str	r3, [r7, #12]
 8001676:	4b11      	ldr	r3, [pc, #68]	@ (80016bc <HAL_UART_MspInit+0x88>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800167a:	4a10      	ldr	r2, [pc, #64]	@ (80016bc <HAL_UART_MspInit+0x88>)
 800167c:	f043 0301 	orr.w	r3, r3, #1
 8001680:	6313      	str	r3, [r2, #48]	@ 0x30
 8001682:	4b0e      	ldr	r3, [pc, #56]	@ (80016bc <HAL_UART_MspInit+0x88>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001686:	f003 0301 	and.w	r3, r3, #1
 800168a:	60fb      	str	r3, [r7, #12]
 800168c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800168e:	230c      	movs	r3, #12
 8001690:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001692:	2302      	movs	r3, #2
 8001694:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001696:	2300      	movs	r3, #0
 8001698:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800169a:	2303      	movs	r3, #3
 800169c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800169e:	2307      	movs	r3, #7
 80016a0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016a2:	f107 0314 	add.w	r3, r7, #20
 80016a6:	4619      	mov	r1, r3
 80016a8:	4805      	ldr	r0, [pc, #20]	@ (80016c0 <HAL_UART_MspInit+0x8c>)
 80016aa:	f001 f855 	bl	8002758 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80016ae:	bf00      	nop
 80016b0:	3728      	adds	r7, #40	@ 0x28
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	40004400 	.word	0x40004400
 80016bc:	40023800 	.word	0x40023800
 80016c0:	40020000 	.word	0x40020000

080016c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016c8:	bf00      	nop
 80016ca:	e7fd      	b.n	80016c8 <NMI_Handler+0x4>

080016cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016d0:	bf00      	nop
 80016d2:	e7fd      	b.n	80016d0 <HardFault_Handler+0x4>

080016d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016d8:	bf00      	nop
 80016da:	e7fd      	b.n	80016d8 <MemManage_Handler+0x4>

080016dc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016e0:	bf00      	nop
 80016e2:	e7fd      	b.n	80016e0 <BusFault_Handler+0x4>

080016e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016e8:	bf00      	nop
 80016ea:	e7fd      	b.n	80016e8 <UsageFault_Handler+0x4>

080016ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016f0:	bf00      	nop
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr

080016fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016fa:	b480      	push	{r7}
 80016fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016fe:	bf00      	nop
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr

08001708 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800170c:	bf00      	nop
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr

08001716 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001716:	b580      	push	{r7, lr}
 8001718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800171a:	f000 f96b 	bl	80019f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800171e:	bf00      	nop
 8001720:	bd80      	pop	{r7, pc}
	...

08001724 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8001728:	4802      	ldr	r0, [pc, #8]	@ (8001734 <DMA1_Stream5_IRQHandler+0x10>)
 800172a:	f000 fdd9 	bl	80022e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800172e:	bf00      	nop
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	200003d4 	.word	0x200003d4

08001738 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800173c:	4802      	ldr	r0, [pc, #8]	@ (8001748 <OTG_FS_IRQHandler+0x10>)
 800173e:	f001 fc48 	bl	8002fd2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001742:	bf00      	nop
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	20001a3c 	.word	0x20001a3c

0800174c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  return 1;
 8001750:	2301      	movs	r3, #1
}
 8001752:	4618      	mov	r0, r3
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <_kill>:

int _kill(int pid, int sig)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001766:	f009 fd8b 	bl	800b280 <__errno>
 800176a:	4603      	mov	r3, r0
 800176c:	2216      	movs	r2, #22
 800176e:	601a      	str	r2, [r3, #0]
  return -1;
 8001770:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001774:	4618      	mov	r0, r3
 8001776:	3708      	adds	r7, #8
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}

0800177c <_exit>:

void _exit (int status)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001784:	f04f 31ff 	mov.w	r1, #4294967295
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f7ff ffe7 	bl	800175c <_kill>
  while (1) {}    /* Make sure we hang here */
 800178e:	bf00      	nop
 8001790:	e7fd      	b.n	800178e <_exit+0x12>

08001792 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001792:	b580      	push	{r7, lr}
 8001794:	b086      	sub	sp, #24
 8001796:	af00      	add	r7, sp, #0
 8001798:	60f8      	str	r0, [r7, #12]
 800179a:	60b9      	str	r1, [r7, #8]
 800179c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800179e:	2300      	movs	r3, #0
 80017a0:	617b      	str	r3, [r7, #20]
 80017a2:	e00a      	b.n	80017ba <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017a4:	f3af 8000 	nop.w
 80017a8:	4601      	mov	r1, r0
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	1c5a      	adds	r2, r3, #1
 80017ae:	60ba      	str	r2, [r7, #8]
 80017b0:	b2ca      	uxtb	r2, r1
 80017b2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	3301      	adds	r3, #1
 80017b8:	617b      	str	r3, [r7, #20]
 80017ba:	697a      	ldr	r2, [r7, #20]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	429a      	cmp	r2, r3
 80017c0:	dbf0      	blt.n	80017a4 <_read+0x12>
  }

  return len;
 80017c2:	687b      	ldr	r3, [r7, #4]
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3718      	adds	r7, #24
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}

080017cc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b086      	sub	sp, #24
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	60f8      	str	r0, [r7, #12]
 80017d4:	60b9      	str	r1, [r7, #8]
 80017d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017d8:	2300      	movs	r3, #0
 80017da:	617b      	str	r3, [r7, #20]
 80017dc:	e009      	b.n	80017f2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	1c5a      	adds	r2, r3, #1
 80017e2:	60ba      	str	r2, [r7, #8]
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	4618      	mov	r0, r3
 80017e8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	3301      	adds	r3, #1
 80017f0:	617b      	str	r3, [r7, #20]
 80017f2:	697a      	ldr	r2, [r7, #20]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	429a      	cmp	r2, r3
 80017f8:	dbf1      	blt.n	80017de <_write+0x12>
  }
  return len;
 80017fa:	687b      	ldr	r3, [r7, #4]
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3718      	adds	r7, #24
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}

08001804 <_close>:

int _close(int file)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800180c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001810:	4618      	mov	r0, r3
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800182c:	605a      	str	r2, [r3, #4]
  return 0;
 800182e:	2300      	movs	r3, #0
}
 8001830:	4618      	mov	r0, r3
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <_isatty>:

int _isatty(int file)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001844:	2301      	movs	r3, #1
}
 8001846:	4618      	mov	r0, r3
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr

08001852 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001852:	b480      	push	{r7}
 8001854:	b085      	sub	sp, #20
 8001856:	af00      	add	r7, sp, #0
 8001858:	60f8      	str	r0, [r7, #12]
 800185a:	60b9      	str	r1, [r7, #8]
 800185c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800185e:	2300      	movs	r3, #0
}
 8001860:	4618      	mov	r0, r3
 8001862:	3714      	adds	r7, #20
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr

0800186c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b086      	sub	sp, #24
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001874:	4a14      	ldr	r2, [pc, #80]	@ (80018c8 <_sbrk+0x5c>)
 8001876:	4b15      	ldr	r3, [pc, #84]	@ (80018cc <_sbrk+0x60>)
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001880:	4b13      	ldr	r3, [pc, #76]	@ (80018d0 <_sbrk+0x64>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d102      	bne.n	800188e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001888:	4b11      	ldr	r3, [pc, #68]	@ (80018d0 <_sbrk+0x64>)
 800188a:	4a12      	ldr	r2, [pc, #72]	@ (80018d4 <_sbrk+0x68>)
 800188c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800188e:	4b10      	ldr	r3, [pc, #64]	@ (80018d0 <_sbrk+0x64>)
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4413      	add	r3, r2
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	429a      	cmp	r2, r3
 800189a:	d207      	bcs.n	80018ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800189c:	f009 fcf0 	bl	800b280 <__errno>
 80018a0:	4603      	mov	r3, r0
 80018a2:	220c      	movs	r2, #12
 80018a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018a6:	f04f 33ff 	mov.w	r3, #4294967295
 80018aa:	e009      	b.n	80018c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018ac:	4b08      	ldr	r3, [pc, #32]	@ (80018d0 <_sbrk+0x64>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018b2:	4b07      	ldr	r3, [pc, #28]	@ (80018d0 <_sbrk+0x64>)
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4413      	add	r3, r2
 80018ba:	4a05      	ldr	r2, [pc, #20]	@ (80018d0 <_sbrk+0x64>)
 80018bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018be:	68fb      	ldr	r3, [r7, #12]
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3718      	adds	r7, #24
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	20020000 	.word	0x20020000
 80018cc:	00000400 	.word	0x00000400
 80018d0:	20000554 	.word	0x20000554
 80018d4:	20002290 	.word	0x20002290

080018d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018dc:	4b06      	ldr	r3, [pc, #24]	@ (80018f8 <SystemInit+0x20>)
 80018de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018e2:	4a05      	ldr	r2, [pc, #20]	@ (80018f8 <SystemInit+0x20>)
 80018e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018ec:	bf00      	nop
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	e000ed00 	.word	0xe000ed00

080018fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80018fc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001934 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001900:	f7ff ffea 	bl	80018d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001904:	480c      	ldr	r0, [pc, #48]	@ (8001938 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001906:	490d      	ldr	r1, [pc, #52]	@ (800193c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001908:	4a0d      	ldr	r2, [pc, #52]	@ (8001940 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800190a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800190c:	e002      	b.n	8001914 <LoopCopyDataInit>

0800190e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800190e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001910:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001912:	3304      	adds	r3, #4

08001914 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001914:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001916:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001918:	d3f9      	bcc.n	800190e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800191a:	4a0a      	ldr	r2, [pc, #40]	@ (8001944 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800191c:	4c0a      	ldr	r4, [pc, #40]	@ (8001948 <LoopFillZerobss+0x22>)
  movs r3, #0
 800191e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001920:	e001      	b.n	8001926 <LoopFillZerobss>

08001922 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001922:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001924:	3204      	adds	r2, #4

08001926 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001926:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001928:	d3fb      	bcc.n	8001922 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800192a:	f009 fcaf 	bl	800b28c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800192e:	f7ff fad3 	bl	8000ed8 <main>
  bx  lr    
 8001932:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001934:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001938:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800193c:	200002d4 	.word	0x200002d4
  ldr r2, =_sidata
 8001940:	0800d7a8 	.word	0x0800d7a8
  ldr r2, =_sbss
 8001944:	200002d4 	.word	0x200002d4
  ldr r4, =_ebss
 8001948:	2000228c 	.word	0x2000228c

0800194c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800194c:	e7fe      	b.n	800194c <ADC_IRQHandler>
	...

08001950 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001954:	4b0e      	ldr	r3, [pc, #56]	@ (8001990 <HAL_Init+0x40>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a0d      	ldr	r2, [pc, #52]	@ (8001990 <HAL_Init+0x40>)
 800195a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800195e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001960:	4b0b      	ldr	r3, [pc, #44]	@ (8001990 <HAL_Init+0x40>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a0a      	ldr	r2, [pc, #40]	@ (8001990 <HAL_Init+0x40>)
 8001966:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800196a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800196c:	4b08      	ldr	r3, [pc, #32]	@ (8001990 <HAL_Init+0x40>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a07      	ldr	r2, [pc, #28]	@ (8001990 <HAL_Init+0x40>)
 8001972:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001976:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001978:	2003      	movs	r0, #3
 800197a:	f000 fbc1 	bl	8002100 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800197e:	2000      	movs	r0, #0
 8001980:	f000 f808 	bl	8001994 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001984:	f7ff fd1a 	bl	80013bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001988:	2300      	movs	r3, #0
}
 800198a:	4618      	mov	r0, r3
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	40023c00 	.word	0x40023c00

08001994 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800199c:	4b12      	ldr	r3, [pc, #72]	@ (80019e8 <HAL_InitTick+0x54>)
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	4b12      	ldr	r3, [pc, #72]	@ (80019ec <HAL_InitTick+0x58>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	4619      	mov	r1, r3
 80019a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80019ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80019b2:	4618      	mov	r0, r3
 80019b4:	f000 fbd9 	bl	800216a <HAL_SYSTICK_Config>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e00e      	b.n	80019e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2b0f      	cmp	r3, #15
 80019c6:	d80a      	bhi.n	80019de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019c8:	2200      	movs	r2, #0
 80019ca:	6879      	ldr	r1, [r7, #4]
 80019cc:	f04f 30ff 	mov.w	r0, #4294967295
 80019d0:	f000 fba1 	bl	8002116 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019d4:	4a06      	ldr	r2, [pc, #24]	@ (80019f0 <HAL_InitTick+0x5c>)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019da:	2300      	movs	r3, #0
 80019dc:	e000      	b.n	80019e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3708      	adds	r7, #8
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	20000000 	.word	0x20000000
 80019ec:	20000008 	.word	0x20000008
 80019f0:	20000004 	.word	0x20000004

080019f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019f8:	4b06      	ldr	r3, [pc, #24]	@ (8001a14 <HAL_IncTick+0x20>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	461a      	mov	r2, r3
 80019fe:	4b06      	ldr	r3, [pc, #24]	@ (8001a18 <HAL_IncTick+0x24>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4413      	add	r3, r2
 8001a04:	4a04      	ldr	r2, [pc, #16]	@ (8001a18 <HAL_IncTick+0x24>)
 8001a06:	6013      	str	r3, [r2, #0]
}
 8001a08:	bf00      	nop
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	20000008 	.word	0x20000008
 8001a18:	20000558 	.word	0x20000558

08001a1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a20:	4b03      	ldr	r3, [pc, #12]	@ (8001a30 <HAL_GetTick+0x14>)
 8001a22:	681b      	ldr	r3, [r3, #0]
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	20000558 	.word	0x20000558

08001a34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a3c:	f7ff ffee 	bl	8001a1c <HAL_GetTick>
 8001a40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a4c:	d005      	beq.n	8001a5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a4e:	4b0a      	ldr	r3, [pc, #40]	@ (8001a78 <HAL_Delay+0x44>)
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	461a      	mov	r2, r3
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	4413      	add	r3, r2
 8001a58:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a5a:	bf00      	nop
 8001a5c:	f7ff ffde 	bl	8001a1c <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	68fa      	ldr	r2, [r7, #12]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d8f7      	bhi.n	8001a5c <HAL_Delay+0x28>
  {
  }
}
 8001a6c:	bf00      	nop
 8001a6e:	bf00      	nop
 8001a70:	3710      	adds	r7, #16
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	20000008 	.word	0x20000008

08001a7c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b084      	sub	sp, #16
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a84:	2300      	movs	r3, #0
 8001a86:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d101      	bne.n	8001a92 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e033      	b.n	8001afa <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d109      	bne.n	8001aae <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f7ff fcb6 	bl	800140c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab2:	f003 0310 	and.w	r3, r3, #16
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d118      	bne.n	8001aec <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001abe:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001ac2:	f023 0302 	bic.w	r3, r3, #2
 8001ac6:	f043 0202 	orr.w	r2, r3, #2
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f000 f94a 	bl	8001d68 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ade:	f023 0303 	bic.w	r3, r3, #3
 8001ae2:	f043 0201 	orr.w	r2, r3, #1
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	641a      	str	r2, [r3, #64]	@ 0x40
 8001aea:	e001      	b.n	8001af0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2200      	movs	r2, #0
 8001af4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3710      	adds	r7, #16
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
	...

08001b04 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b085      	sub	sp, #20
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d101      	bne.n	8001b20 <HAL_ADC_ConfigChannel+0x1c>
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	e113      	b.n	8001d48 <HAL_ADC_ConfigChannel+0x244>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2201      	movs	r2, #1
 8001b24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	2b09      	cmp	r3, #9
 8001b2e:	d925      	bls.n	8001b7c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	68d9      	ldr	r1, [r3, #12]
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	b29b      	uxth	r3, r3
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	4613      	mov	r3, r2
 8001b40:	005b      	lsls	r3, r3, #1
 8001b42:	4413      	add	r3, r2
 8001b44:	3b1e      	subs	r3, #30
 8001b46:	2207      	movs	r2, #7
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	43da      	mvns	r2, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	400a      	ands	r2, r1
 8001b54:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	68d9      	ldr	r1, [r3, #12]
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	689a      	ldr	r2, [r3, #8]
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	4618      	mov	r0, r3
 8001b68:	4603      	mov	r3, r0
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	4403      	add	r3, r0
 8001b6e:	3b1e      	subs	r3, #30
 8001b70:	409a      	lsls	r2, r3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	430a      	orrs	r2, r1
 8001b78:	60da      	str	r2, [r3, #12]
 8001b7a:	e022      	b.n	8001bc2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	6919      	ldr	r1, [r3, #16]
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	461a      	mov	r2, r3
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	4413      	add	r3, r2
 8001b90:	2207      	movs	r2, #7
 8001b92:	fa02 f303 	lsl.w	r3, r2, r3
 8001b96:	43da      	mvns	r2, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	400a      	ands	r2, r1
 8001b9e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	6919      	ldr	r1, [r3, #16]
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	689a      	ldr	r2, [r3, #8]
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	b29b      	uxth	r3, r3
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	4403      	add	r3, r0
 8001bb8:	409a      	lsls	r2, r3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	430a      	orrs	r2, r1
 8001bc0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	2b06      	cmp	r3, #6
 8001bc8:	d824      	bhi.n	8001c14 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685a      	ldr	r2, [r3, #4]
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	4413      	add	r3, r2
 8001bda:	3b05      	subs	r3, #5
 8001bdc:	221f      	movs	r2, #31
 8001bde:	fa02 f303 	lsl.w	r3, r2, r3
 8001be2:	43da      	mvns	r2, r3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	400a      	ands	r2, r1
 8001bea:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	b29b      	uxth	r3, r3
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	685a      	ldr	r2, [r3, #4]
 8001bfe:	4613      	mov	r3, r2
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	4413      	add	r3, r2
 8001c04:	3b05      	subs	r3, #5
 8001c06:	fa00 f203 	lsl.w	r2, r0, r3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	430a      	orrs	r2, r1
 8001c10:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c12:	e04c      	b.n	8001cae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	2b0c      	cmp	r3, #12
 8001c1a:	d824      	bhi.n	8001c66 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685a      	ldr	r2, [r3, #4]
 8001c26:	4613      	mov	r3, r2
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	4413      	add	r3, r2
 8001c2c:	3b23      	subs	r3, #35	@ 0x23
 8001c2e:	221f      	movs	r2, #31
 8001c30:	fa02 f303 	lsl.w	r3, r2, r3
 8001c34:	43da      	mvns	r2, r3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	400a      	ands	r2, r1
 8001c3c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685a      	ldr	r2, [r3, #4]
 8001c50:	4613      	mov	r3, r2
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	4413      	add	r3, r2
 8001c56:	3b23      	subs	r3, #35	@ 0x23
 8001c58:	fa00 f203 	lsl.w	r2, r0, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	430a      	orrs	r2, r1
 8001c62:	631a      	str	r2, [r3, #48]	@ 0x30
 8001c64:	e023      	b.n	8001cae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	685a      	ldr	r2, [r3, #4]
 8001c70:	4613      	mov	r3, r2
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	4413      	add	r3, r2
 8001c76:	3b41      	subs	r3, #65	@ 0x41
 8001c78:	221f      	movs	r2, #31
 8001c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7e:	43da      	mvns	r2, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	400a      	ands	r2, r1
 8001c86:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	4618      	mov	r0, r3
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	685a      	ldr	r2, [r3, #4]
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	4413      	add	r3, r2
 8001ca0:	3b41      	subs	r3, #65	@ 0x41
 8001ca2:	fa00 f203 	lsl.w	r2, r0, r3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	430a      	orrs	r2, r1
 8001cac:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cae:	4b29      	ldr	r3, [pc, #164]	@ (8001d54 <HAL_ADC_ConfigChannel+0x250>)
 8001cb0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a28      	ldr	r2, [pc, #160]	@ (8001d58 <HAL_ADC_ConfigChannel+0x254>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d10f      	bne.n	8001cdc <HAL_ADC_ConfigChannel+0x1d8>
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2b12      	cmp	r3, #18
 8001cc2:	d10b      	bne.n	8001cdc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a1d      	ldr	r2, [pc, #116]	@ (8001d58 <HAL_ADC_ConfigChannel+0x254>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d12b      	bne.n	8001d3e <HAL_ADC_ConfigChannel+0x23a>
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a1c      	ldr	r2, [pc, #112]	@ (8001d5c <HAL_ADC_ConfigChannel+0x258>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d003      	beq.n	8001cf8 <HAL_ADC_ConfigChannel+0x1f4>
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2b11      	cmp	r3, #17
 8001cf6:	d122      	bne.n	8001d3e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a11      	ldr	r2, [pc, #68]	@ (8001d5c <HAL_ADC_ConfigChannel+0x258>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d111      	bne.n	8001d3e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d1a:	4b11      	ldr	r3, [pc, #68]	@ (8001d60 <HAL_ADC_ConfigChannel+0x25c>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a11      	ldr	r2, [pc, #68]	@ (8001d64 <HAL_ADC_ConfigChannel+0x260>)
 8001d20:	fba2 2303 	umull	r2, r3, r2, r3
 8001d24:	0c9a      	lsrs	r2, r3, #18
 8001d26:	4613      	mov	r3, r2
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	4413      	add	r3, r2
 8001d2c:	005b      	lsls	r3, r3, #1
 8001d2e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001d30:	e002      	b.n	8001d38 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	3b01      	subs	r3, #1
 8001d36:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d1f9      	bne.n	8001d32 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2200      	movs	r2, #0
 8001d42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001d46:	2300      	movs	r3, #0
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3714      	adds	r7, #20
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr
 8001d54:	40012300 	.word	0x40012300
 8001d58:	40012000 	.word	0x40012000
 8001d5c:	10000012 	.word	0x10000012
 8001d60:	20000000 	.word	0x20000000
 8001d64:	431bde83 	.word	0x431bde83

08001d68 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b085      	sub	sp, #20
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d70:	4b79      	ldr	r3, [pc, #484]	@ (8001f58 <ADC_Init+0x1f0>)
 8001d72:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	685a      	ldr	r2, [r3, #4]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	431a      	orrs	r2, r3
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	685a      	ldr	r2, [r3, #4]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001d9c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	6859      	ldr	r1, [r3, #4]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	691b      	ldr	r3, [r3, #16]
 8001da8:	021a      	lsls	r2, r3, #8
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	430a      	orrs	r2, r1
 8001db0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	685a      	ldr	r2, [r3, #4]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001dc0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	6859      	ldr	r1, [r3, #4]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	689a      	ldr	r2, [r3, #8]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	430a      	orrs	r2, r1
 8001dd2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	689a      	ldr	r2, [r3, #8]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001de2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	6899      	ldr	r1, [r3, #8]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	68da      	ldr	r2, [r3, #12]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	430a      	orrs	r2, r1
 8001df4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dfa:	4a58      	ldr	r2, [pc, #352]	@ (8001f5c <ADC_Init+0x1f4>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d022      	beq.n	8001e46 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	689a      	ldr	r2, [r3, #8]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001e0e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	6899      	ldr	r1, [r3, #8]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	430a      	orrs	r2, r1
 8001e20:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	689a      	ldr	r2, [r3, #8]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001e30:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	6899      	ldr	r1, [r3, #8]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	430a      	orrs	r2, r1
 8001e42:	609a      	str	r2, [r3, #8]
 8001e44:	e00f      	b.n	8001e66 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	689a      	ldr	r2, [r3, #8]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001e54:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	689a      	ldr	r2, [r3, #8]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001e64:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	689a      	ldr	r2, [r3, #8]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f022 0202 	bic.w	r2, r2, #2
 8001e74:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	6899      	ldr	r1, [r3, #8]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	7e1b      	ldrb	r3, [r3, #24]
 8001e80:	005a      	lsls	r2, r3, #1
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	430a      	orrs	r2, r1
 8001e88:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d01b      	beq.n	8001ecc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	685a      	ldr	r2, [r3, #4]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001ea2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	685a      	ldr	r2, [r3, #4]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001eb2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	6859      	ldr	r1, [r3, #4]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ebe:	3b01      	subs	r3, #1
 8001ec0:	035a      	lsls	r2, r3, #13
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	430a      	orrs	r2, r1
 8001ec8:	605a      	str	r2, [r3, #4]
 8001eca:	e007      	b.n	8001edc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	685a      	ldr	r2, [r3, #4]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001eda:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001eea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	69db      	ldr	r3, [r3, #28]
 8001ef6:	3b01      	subs	r3, #1
 8001ef8:	051a      	lsls	r2, r3, #20
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	430a      	orrs	r2, r1
 8001f00:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	689a      	ldr	r2, [r3, #8]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001f10:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	6899      	ldr	r1, [r3, #8]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001f1e:	025a      	lsls	r2, r3, #9
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	430a      	orrs	r2, r1
 8001f26:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	689a      	ldr	r2, [r3, #8]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f36:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	6899      	ldr	r1, [r3, #8]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	695b      	ldr	r3, [r3, #20]
 8001f42:	029a      	lsls	r2, r3, #10
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	430a      	orrs	r2, r1
 8001f4a:	609a      	str	r2, [r3, #8]
}
 8001f4c:	bf00      	nop
 8001f4e:	3714      	adds	r7, #20
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr
 8001f58:	40012300 	.word	0x40012300
 8001f5c:	0f000001 	.word	0x0f000001

08001f60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b085      	sub	sp, #20
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	f003 0307 	and.w	r3, r3, #7
 8001f6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f70:	4b0c      	ldr	r3, [pc, #48]	@ (8001fa4 <__NVIC_SetPriorityGrouping+0x44>)
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f76:	68ba      	ldr	r2, [r7, #8]
 8001f78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f88:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f92:	4a04      	ldr	r2, [pc, #16]	@ (8001fa4 <__NVIC_SetPriorityGrouping+0x44>)
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	60d3      	str	r3, [r2, #12]
}
 8001f98:	bf00      	nop
 8001f9a:	3714      	adds	r7, #20
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr
 8001fa4:	e000ed00 	.word	0xe000ed00

08001fa8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fac:	4b04      	ldr	r3, [pc, #16]	@ (8001fc0 <__NVIC_GetPriorityGrouping+0x18>)
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	0a1b      	lsrs	r3, r3, #8
 8001fb2:	f003 0307 	and.w	r3, r3, #7
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr
 8001fc0:	e000ed00 	.word	0xe000ed00

08001fc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	4603      	mov	r3, r0
 8001fcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	db0b      	blt.n	8001fee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fd6:	79fb      	ldrb	r3, [r7, #7]
 8001fd8:	f003 021f 	and.w	r2, r3, #31
 8001fdc:	4907      	ldr	r1, [pc, #28]	@ (8001ffc <__NVIC_EnableIRQ+0x38>)
 8001fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe2:	095b      	lsrs	r3, r3, #5
 8001fe4:	2001      	movs	r0, #1
 8001fe6:	fa00 f202 	lsl.w	r2, r0, r2
 8001fea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001fee:	bf00      	nop
 8001ff0:	370c      	adds	r7, #12
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	e000e100 	.word	0xe000e100

08002000 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	4603      	mov	r3, r0
 8002008:	6039      	str	r1, [r7, #0]
 800200a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800200c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002010:	2b00      	cmp	r3, #0
 8002012:	db0a      	blt.n	800202a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	b2da      	uxtb	r2, r3
 8002018:	490c      	ldr	r1, [pc, #48]	@ (800204c <__NVIC_SetPriority+0x4c>)
 800201a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800201e:	0112      	lsls	r2, r2, #4
 8002020:	b2d2      	uxtb	r2, r2
 8002022:	440b      	add	r3, r1
 8002024:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002028:	e00a      	b.n	8002040 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	b2da      	uxtb	r2, r3
 800202e:	4908      	ldr	r1, [pc, #32]	@ (8002050 <__NVIC_SetPriority+0x50>)
 8002030:	79fb      	ldrb	r3, [r7, #7]
 8002032:	f003 030f 	and.w	r3, r3, #15
 8002036:	3b04      	subs	r3, #4
 8002038:	0112      	lsls	r2, r2, #4
 800203a:	b2d2      	uxtb	r2, r2
 800203c:	440b      	add	r3, r1
 800203e:	761a      	strb	r2, [r3, #24]
}
 8002040:	bf00      	nop
 8002042:	370c      	adds	r7, #12
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr
 800204c:	e000e100 	.word	0xe000e100
 8002050:	e000ed00 	.word	0xe000ed00

08002054 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002054:	b480      	push	{r7}
 8002056:	b089      	sub	sp, #36	@ 0x24
 8002058:	af00      	add	r7, sp, #0
 800205a:	60f8      	str	r0, [r7, #12]
 800205c:	60b9      	str	r1, [r7, #8]
 800205e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	f003 0307 	and.w	r3, r3, #7
 8002066:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	f1c3 0307 	rsb	r3, r3, #7
 800206e:	2b04      	cmp	r3, #4
 8002070:	bf28      	it	cs
 8002072:	2304      	movcs	r3, #4
 8002074:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	3304      	adds	r3, #4
 800207a:	2b06      	cmp	r3, #6
 800207c:	d902      	bls.n	8002084 <NVIC_EncodePriority+0x30>
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	3b03      	subs	r3, #3
 8002082:	e000      	b.n	8002086 <NVIC_EncodePriority+0x32>
 8002084:	2300      	movs	r3, #0
 8002086:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002088:	f04f 32ff 	mov.w	r2, #4294967295
 800208c:	69bb      	ldr	r3, [r7, #24]
 800208e:	fa02 f303 	lsl.w	r3, r2, r3
 8002092:	43da      	mvns	r2, r3
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	401a      	ands	r2, r3
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800209c:	f04f 31ff 	mov.w	r1, #4294967295
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	fa01 f303 	lsl.w	r3, r1, r3
 80020a6:	43d9      	mvns	r1, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020ac:	4313      	orrs	r3, r2
         );
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3724      	adds	r7, #36	@ 0x24
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
	...

080020bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	3b01      	subs	r3, #1
 80020c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80020cc:	d301      	bcc.n	80020d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020ce:	2301      	movs	r3, #1
 80020d0:	e00f      	b.n	80020f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020d2:	4a0a      	ldr	r2, [pc, #40]	@ (80020fc <SysTick_Config+0x40>)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	3b01      	subs	r3, #1
 80020d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020da:	210f      	movs	r1, #15
 80020dc:	f04f 30ff 	mov.w	r0, #4294967295
 80020e0:	f7ff ff8e 	bl	8002000 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020e4:	4b05      	ldr	r3, [pc, #20]	@ (80020fc <SysTick_Config+0x40>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020ea:	4b04      	ldr	r3, [pc, #16]	@ (80020fc <SysTick_Config+0x40>)
 80020ec:	2207      	movs	r2, #7
 80020ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020f0:	2300      	movs	r3, #0
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3708      	adds	r7, #8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	e000e010 	.word	0xe000e010

08002100 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f7ff ff29 	bl	8001f60 <__NVIC_SetPriorityGrouping>
}
 800210e:	bf00      	nop
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002116:	b580      	push	{r7, lr}
 8002118:	b086      	sub	sp, #24
 800211a:	af00      	add	r7, sp, #0
 800211c:	4603      	mov	r3, r0
 800211e:	60b9      	str	r1, [r7, #8]
 8002120:	607a      	str	r2, [r7, #4]
 8002122:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002124:	2300      	movs	r3, #0
 8002126:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002128:	f7ff ff3e 	bl	8001fa8 <__NVIC_GetPriorityGrouping>
 800212c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	68b9      	ldr	r1, [r7, #8]
 8002132:	6978      	ldr	r0, [r7, #20]
 8002134:	f7ff ff8e 	bl	8002054 <NVIC_EncodePriority>
 8002138:	4602      	mov	r2, r0
 800213a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800213e:	4611      	mov	r1, r2
 8002140:	4618      	mov	r0, r3
 8002142:	f7ff ff5d 	bl	8002000 <__NVIC_SetPriority>
}
 8002146:	bf00      	nop
 8002148:	3718      	adds	r7, #24
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}

0800214e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800214e:	b580      	push	{r7, lr}
 8002150:	b082      	sub	sp, #8
 8002152:	af00      	add	r7, sp, #0
 8002154:	4603      	mov	r3, r0
 8002156:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002158:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800215c:	4618      	mov	r0, r3
 800215e:	f7ff ff31 	bl	8001fc4 <__NVIC_EnableIRQ>
}
 8002162:	bf00      	nop
 8002164:	3708      	adds	r7, #8
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}

0800216a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800216a:	b580      	push	{r7, lr}
 800216c:	b082      	sub	sp, #8
 800216e:	af00      	add	r7, sp, #0
 8002170:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f7ff ffa2 	bl	80020bc <SysTick_Config>
 8002178:	4603      	mov	r3, r0
}
 800217a:	4618      	mov	r0, r3
 800217c:	3708      	adds	r7, #8
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
	...

08002184 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b086      	sub	sp, #24
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800218c:	2300      	movs	r3, #0
 800218e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002190:	f7ff fc44 	bl	8001a1c <HAL_GetTick>
 8002194:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d101      	bne.n	80021a0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e099      	b.n	80022d4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2202      	movs	r2, #2
 80021a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2200      	movs	r2, #0
 80021ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f022 0201 	bic.w	r2, r2, #1
 80021be:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021c0:	e00f      	b.n	80021e2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021c2:	f7ff fc2b 	bl	8001a1c <HAL_GetTick>
 80021c6:	4602      	mov	r2, r0
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	2b05      	cmp	r3, #5
 80021ce:	d908      	bls.n	80021e2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2220      	movs	r2, #32
 80021d4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2203      	movs	r2, #3
 80021da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e078      	b.n	80022d4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0301 	and.w	r3, r3, #1
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d1e8      	bne.n	80021c2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80021f8:	697a      	ldr	r2, [r7, #20]
 80021fa:	4b38      	ldr	r3, [pc, #224]	@ (80022dc <HAL_DMA_Init+0x158>)
 80021fc:	4013      	ands	r3, r2
 80021fe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	685a      	ldr	r2, [r3, #4]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800220e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	691b      	ldr	r3, [r3, #16]
 8002214:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800221a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	699b      	ldr	r3, [r3, #24]
 8002220:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002226:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6a1b      	ldr	r3, [r3, #32]
 800222c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800222e:	697a      	ldr	r2, [r7, #20]
 8002230:	4313      	orrs	r3, r2
 8002232:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002238:	2b04      	cmp	r3, #4
 800223a:	d107      	bne.n	800224c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002244:	4313      	orrs	r3, r2
 8002246:	697a      	ldr	r2, [r7, #20]
 8002248:	4313      	orrs	r3, r2
 800224a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	697a      	ldr	r2, [r7, #20]
 8002252:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	695b      	ldr	r3, [r3, #20]
 800225a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	f023 0307 	bic.w	r3, r3, #7
 8002262:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002268:	697a      	ldr	r2, [r7, #20]
 800226a:	4313      	orrs	r3, r2
 800226c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002272:	2b04      	cmp	r3, #4
 8002274:	d117      	bne.n	80022a6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800227a:	697a      	ldr	r2, [r7, #20]
 800227c:	4313      	orrs	r3, r2
 800227e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002284:	2b00      	cmp	r3, #0
 8002286:	d00e      	beq.n	80022a6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f000 f9e9 	bl	8002660 <DMA_CheckFifoParam>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d008      	beq.n	80022a6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2240      	movs	r2, #64	@ 0x40
 8002298:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2201      	movs	r2, #1
 800229e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80022a2:	2301      	movs	r3, #1
 80022a4:	e016      	b.n	80022d4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	697a      	ldr	r2, [r7, #20]
 80022ac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f000 f9a0 	bl	80025f4 <DMA_CalcBaseAndBitshift>
 80022b4:	4603      	mov	r3, r0
 80022b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022bc:	223f      	movs	r2, #63	@ 0x3f
 80022be:	409a      	lsls	r2, r3
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2200      	movs	r2, #0
 80022c8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2201      	movs	r2, #1
 80022ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80022d2:	2300      	movs	r3, #0
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3718      	adds	r7, #24
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	f010803f 	.word	0xf010803f

080022e0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b086      	sub	sp, #24
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80022e8:	2300      	movs	r3, #0
 80022ea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80022ec:	4b8e      	ldr	r3, [pc, #568]	@ (8002528 <HAL_DMA_IRQHandler+0x248>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a8e      	ldr	r2, [pc, #568]	@ (800252c <HAL_DMA_IRQHandler+0x24c>)
 80022f2:	fba2 2303 	umull	r2, r3, r2, r3
 80022f6:	0a9b      	lsrs	r3, r3, #10
 80022f8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022fe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800230a:	2208      	movs	r2, #8
 800230c:	409a      	lsls	r2, r3
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	4013      	ands	r3, r2
 8002312:	2b00      	cmp	r3, #0
 8002314:	d01a      	beq.n	800234c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0304 	and.w	r3, r3, #4
 8002320:	2b00      	cmp	r3, #0
 8002322:	d013      	beq.n	800234c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f022 0204 	bic.w	r2, r2, #4
 8002332:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002338:	2208      	movs	r2, #8
 800233a:	409a      	lsls	r2, r3
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002344:	f043 0201 	orr.w	r2, r3, #1
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002350:	2201      	movs	r2, #1
 8002352:	409a      	lsls	r2, r3
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	4013      	ands	r3, r2
 8002358:	2b00      	cmp	r3, #0
 800235a:	d012      	beq.n	8002382 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	695b      	ldr	r3, [r3, #20]
 8002362:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002366:	2b00      	cmp	r3, #0
 8002368:	d00b      	beq.n	8002382 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800236e:	2201      	movs	r2, #1
 8002370:	409a      	lsls	r2, r3
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800237a:	f043 0202 	orr.w	r2, r3, #2
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002386:	2204      	movs	r2, #4
 8002388:	409a      	lsls	r2, r3
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	4013      	ands	r3, r2
 800238e:	2b00      	cmp	r3, #0
 8002390:	d012      	beq.n	80023b8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0302 	and.w	r3, r3, #2
 800239c:	2b00      	cmp	r3, #0
 800239e:	d00b      	beq.n	80023b8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023a4:	2204      	movs	r2, #4
 80023a6:	409a      	lsls	r2, r3
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023b0:	f043 0204 	orr.w	r2, r3, #4
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023bc:	2210      	movs	r2, #16
 80023be:	409a      	lsls	r2, r3
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	4013      	ands	r3, r2
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d043      	beq.n	8002450 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0308 	and.w	r3, r3, #8
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d03c      	beq.n	8002450 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023da:	2210      	movs	r2, #16
 80023dc:	409a      	lsls	r2, r3
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d018      	beq.n	8002422 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d108      	bne.n	8002410 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002402:	2b00      	cmp	r3, #0
 8002404:	d024      	beq.n	8002450 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	4798      	blx	r3
 800240e:	e01f      	b.n	8002450 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002414:	2b00      	cmp	r3, #0
 8002416:	d01b      	beq.n	8002450 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	4798      	blx	r3
 8002420:	e016      	b.n	8002450 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800242c:	2b00      	cmp	r3, #0
 800242e:	d107      	bne.n	8002440 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f022 0208 	bic.w	r2, r2, #8
 800243e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002444:	2b00      	cmp	r3, #0
 8002446:	d003      	beq.n	8002450 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002454:	2220      	movs	r2, #32
 8002456:	409a      	lsls	r2, r3
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	4013      	ands	r3, r2
 800245c:	2b00      	cmp	r3, #0
 800245e:	f000 808f 	beq.w	8002580 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0310 	and.w	r3, r3, #16
 800246c:	2b00      	cmp	r3, #0
 800246e:	f000 8087 	beq.w	8002580 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002476:	2220      	movs	r2, #32
 8002478:	409a      	lsls	r2, r3
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002484:	b2db      	uxtb	r3, r3
 8002486:	2b05      	cmp	r3, #5
 8002488:	d136      	bne.n	80024f8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f022 0216 	bic.w	r2, r2, #22
 8002498:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	695a      	ldr	r2, [r3, #20]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80024a8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d103      	bne.n	80024ba <HAL_DMA_IRQHandler+0x1da>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d007      	beq.n	80024ca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f022 0208 	bic.w	r2, r2, #8
 80024c8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024ce:	223f      	movs	r2, #63	@ 0x3f
 80024d0:	409a      	lsls	r2, r3
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2201      	movs	r2, #1
 80024da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d07e      	beq.n	80025ec <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	4798      	blx	r3
        }
        return;
 80024f6:	e079      	b.n	80025ec <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d01d      	beq.n	8002542 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d10d      	bne.n	8002530 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002518:	2b00      	cmp	r3, #0
 800251a:	d031      	beq.n	8002580 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	4798      	blx	r3
 8002524:	e02c      	b.n	8002580 <HAL_DMA_IRQHandler+0x2a0>
 8002526:	bf00      	nop
 8002528:	20000000 	.word	0x20000000
 800252c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002534:	2b00      	cmp	r3, #0
 8002536:	d023      	beq.n	8002580 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	4798      	blx	r3
 8002540:	e01e      	b.n	8002580 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800254c:	2b00      	cmp	r3, #0
 800254e:	d10f      	bne.n	8002570 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f022 0210 	bic.w	r2, r2, #16
 800255e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2201      	movs	r2, #1
 8002564:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2200      	movs	r2, #0
 800256c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002574:	2b00      	cmp	r3, #0
 8002576:	d003      	beq.n	8002580 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002584:	2b00      	cmp	r3, #0
 8002586:	d032      	beq.n	80025ee <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800258c:	f003 0301 	and.w	r3, r3, #1
 8002590:	2b00      	cmp	r3, #0
 8002592:	d022      	beq.n	80025da <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2205      	movs	r2, #5
 8002598:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f022 0201 	bic.w	r2, r2, #1
 80025aa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	3301      	adds	r3, #1
 80025b0:	60bb      	str	r3, [r7, #8]
 80025b2:	697a      	ldr	r2, [r7, #20]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d307      	bcc.n	80025c8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0301 	and.w	r3, r3, #1
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d1f2      	bne.n	80025ac <HAL_DMA_IRQHandler+0x2cc>
 80025c6:	e000      	b.n	80025ca <HAL_DMA_IRQHandler+0x2ea>
          break;
 80025c8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2201      	movs	r2, #1
 80025ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2200      	movs	r2, #0
 80025d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d005      	beq.n	80025ee <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	4798      	blx	r3
 80025ea:	e000      	b.n	80025ee <HAL_DMA_IRQHandler+0x30e>
        return;
 80025ec:	bf00      	nop
    }
  }
}
 80025ee:	3718      	adds	r7, #24
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b085      	sub	sp, #20
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	b2db      	uxtb	r3, r3
 8002602:	3b10      	subs	r3, #16
 8002604:	4a14      	ldr	r2, [pc, #80]	@ (8002658 <DMA_CalcBaseAndBitshift+0x64>)
 8002606:	fba2 2303 	umull	r2, r3, r2, r3
 800260a:	091b      	lsrs	r3, r3, #4
 800260c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800260e:	4a13      	ldr	r2, [pc, #76]	@ (800265c <DMA_CalcBaseAndBitshift+0x68>)
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	4413      	add	r3, r2
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	461a      	mov	r2, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2b03      	cmp	r3, #3
 8002620:	d909      	bls.n	8002636 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800262a:	f023 0303 	bic.w	r3, r3, #3
 800262e:	1d1a      	adds	r2, r3, #4
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	659a      	str	r2, [r3, #88]	@ 0x58
 8002634:	e007      	b.n	8002646 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800263e:	f023 0303 	bic.w	r3, r3, #3
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800264a:	4618      	mov	r0, r3
 800264c:	3714      	adds	r7, #20
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	aaaaaaab 	.word	0xaaaaaaab
 800265c:	0800d420 	.word	0x0800d420

08002660 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002660:	b480      	push	{r7}
 8002662:	b085      	sub	sp, #20
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002668:	2300      	movs	r3, #0
 800266a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002670:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	699b      	ldr	r3, [r3, #24]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d11f      	bne.n	80026ba <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	2b03      	cmp	r3, #3
 800267e:	d856      	bhi.n	800272e <DMA_CheckFifoParam+0xce>
 8002680:	a201      	add	r2, pc, #4	@ (adr r2, 8002688 <DMA_CheckFifoParam+0x28>)
 8002682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002686:	bf00      	nop
 8002688:	08002699 	.word	0x08002699
 800268c:	080026ab 	.word	0x080026ab
 8002690:	08002699 	.word	0x08002699
 8002694:	0800272f 	.word	0x0800272f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800269c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d046      	beq.n	8002732 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026a8:	e043      	b.n	8002732 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026ae:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80026b2:	d140      	bne.n	8002736 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026b8:	e03d      	b.n	8002736 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	699b      	ldr	r3, [r3, #24]
 80026be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80026c2:	d121      	bne.n	8002708 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	2b03      	cmp	r3, #3
 80026c8:	d837      	bhi.n	800273a <DMA_CheckFifoParam+0xda>
 80026ca:	a201      	add	r2, pc, #4	@ (adr r2, 80026d0 <DMA_CheckFifoParam+0x70>)
 80026cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026d0:	080026e1 	.word	0x080026e1
 80026d4:	080026e7 	.word	0x080026e7
 80026d8:	080026e1 	.word	0x080026e1
 80026dc:	080026f9 	.word	0x080026f9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	73fb      	strb	r3, [r7, #15]
      break;
 80026e4:	e030      	b.n	8002748 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026ea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d025      	beq.n	800273e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026f6:	e022      	b.n	800273e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026fc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002700:	d11f      	bne.n	8002742 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002706:	e01c      	b.n	8002742 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	2b02      	cmp	r3, #2
 800270c:	d903      	bls.n	8002716 <DMA_CheckFifoParam+0xb6>
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	2b03      	cmp	r3, #3
 8002712:	d003      	beq.n	800271c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002714:	e018      	b.n	8002748 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	73fb      	strb	r3, [r7, #15]
      break;
 800271a:	e015      	b.n	8002748 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002720:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d00e      	beq.n	8002746 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	73fb      	strb	r3, [r7, #15]
      break;
 800272c:	e00b      	b.n	8002746 <DMA_CheckFifoParam+0xe6>
      break;
 800272e:	bf00      	nop
 8002730:	e00a      	b.n	8002748 <DMA_CheckFifoParam+0xe8>
      break;
 8002732:	bf00      	nop
 8002734:	e008      	b.n	8002748 <DMA_CheckFifoParam+0xe8>
      break;
 8002736:	bf00      	nop
 8002738:	e006      	b.n	8002748 <DMA_CheckFifoParam+0xe8>
      break;
 800273a:	bf00      	nop
 800273c:	e004      	b.n	8002748 <DMA_CheckFifoParam+0xe8>
      break;
 800273e:	bf00      	nop
 8002740:	e002      	b.n	8002748 <DMA_CheckFifoParam+0xe8>
      break;   
 8002742:	bf00      	nop
 8002744:	e000      	b.n	8002748 <DMA_CheckFifoParam+0xe8>
      break;
 8002746:	bf00      	nop
    }
  } 
  
  return status; 
 8002748:	7bfb      	ldrb	r3, [r7, #15]
}
 800274a:	4618      	mov	r0, r3
 800274c:	3714      	adds	r7, #20
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop

08002758 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002758:	b480      	push	{r7}
 800275a:	b089      	sub	sp, #36	@ 0x24
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002762:	2300      	movs	r3, #0
 8002764:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002766:	2300      	movs	r3, #0
 8002768:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800276a:	2300      	movs	r3, #0
 800276c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800276e:	2300      	movs	r3, #0
 8002770:	61fb      	str	r3, [r7, #28]
 8002772:	e165      	b.n	8002a40 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002774:	2201      	movs	r2, #1
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	fa02 f303 	lsl.w	r3, r2, r3
 800277c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	697a      	ldr	r2, [r7, #20]
 8002784:	4013      	ands	r3, r2
 8002786:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002788:	693a      	ldr	r2, [r7, #16]
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	429a      	cmp	r2, r3
 800278e:	f040 8154 	bne.w	8002a3a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f003 0303 	and.w	r3, r3, #3
 800279a:	2b01      	cmp	r3, #1
 800279c:	d005      	beq.n	80027aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d130      	bne.n	800280c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	005b      	lsls	r3, r3, #1
 80027b4:	2203      	movs	r2, #3
 80027b6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ba:	43db      	mvns	r3, r3
 80027bc:	69ba      	ldr	r2, [r7, #24]
 80027be:	4013      	ands	r3, r2
 80027c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	68da      	ldr	r2, [r3, #12]
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	005b      	lsls	r3, r3, #1
 80027ca:	fa02 f303 	lsl.w	r3, r2, r3
 80027ce:	69ba      	ldr	r2, [r7, #24]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	69ba      	ldr	r2, [r7, #24]
 80027d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027e0:	2201      	movs	r2, #1
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	fa02 f303 	lsl.w	r3, r2, r3
 80027e8:	43db      	mvns	r3, r3
 80027ea:	69ba      	ldr	r2, [r7, #24]
 80027ec:	4013      	ands	r3, r2
 80027ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	091b      	lsrs	r3, r3, #4
 80027f6:	f003 0201 	and.w	r2, r3, #1
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002800:	69ba      	ldr	r2, [r7, #24]
 8002802:	4313      	orrs	r3, r2
 8002804:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	69ba      	ldr	r2, [r7, #24]
 800280a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f003 0303 	and.w	r3, r3, #3
 8002814:	2b03      	cmp	r3, #3
 8002816:	d017      	beq.n	8002848 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	005b      	lsls	r3, r3, #1
 8002822:	2203      	movs	r2, #3
 8002824:	fa02 f303 	lsl.w	r3, r2, r3
 8002828:	43db      	mvns	r3, r3
 800282a:	69ba      	ldr	r2, [r7, #24]
 800282c:	4013      	ands	r3, r2
 800282e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	689a      	ldr	r2, [r3, #8]
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	005b      	lsls	r3, r3, #1
 8002838:	fa02 f303 	lsl.w	r3, r2, r3
 800283c:	69ba      	ldr	r2, [r7, #24]
 800283e:	4313      	orrs	r3, r2
 8002840:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	69ba      	ldr	r2, [r7, #24]
 8002846:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f003 0303 	and.w	r3, r3, #3
 8002850:	2b02      	cmp	r3, #2
 8002852:	d123      	bne.n	800289c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	08da      	lsrs	r2, r3, #3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	3208      	adds	r2, #8
 800285c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002860:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	f003 0307 	and.w	r3, r3, #7
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	220f      	movs	r2, #15
 800286c:	fa02 f303 	lsl.w	r3, r2, r3
 8002870:	43db      	mvns	r3, r3
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	4013      	ands	r3, r2
 8002876:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	691a      	ldr	r2, [r3, #16]
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	f003 0307 	and.w	r3, r3, #7
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	fa02 f303 	lsl.w	r3, r2, r3
 8002888:	69ba      	ldr	r2, [r7, #24]
 800288a:	4313      	orrs	r3, r2
 800288c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	08da      	lsrs	r2, r3, #3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	3208      	adds	r2, #8
 8002896:	69b9      	ldr	r1, [r7, #24]
 8002898:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	005b      	lsls	r3, r3, #1
 80028a6:	2203      	movs	r2, #3
 80028a8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ac:	43db      	mvns	r3, r3
 80028ae:	69ba      	ldr	r2, [r7, #24]
 80028b0:	4013      	ands	r3, r2
 80028b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f003 0203 	and.w	r2, r3, #3
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	005b      	lsls	r3, r3, #1
 80028c0:	fa02 f303 	lsl.w	r3, r2, r3
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	69ba      	ldr	r2, [r7, #24]
 80028ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	f000 80ae 	beq.w	8002a3a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028de:	2300      	movs	r3, #0
 80028e0:	60fb      	str	r3, [r7, #12]
 80028e2:	4b5d      	ldr	r3, [pc, #372]	@ (8002a58 <HAL_GPIO_Init+0x300>)
 80028e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028e6:	4a5c      	ldr	r2, [pc, #368]	@ (8002a58 <HAL_GPIO_Init+0x300>)
 80028e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80028ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80028ee:	4b5a      	ldr	r3, [pc, #360]	@ (8002a58 <HAL_GPIO_Init+0x300>)
 80028f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028f6:	60fb      	str	r3, [r7, #12]
 80028f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028fa:	4a58      	ldr	r2, [pc, #352]	@ (8002a5c <HAL_GPIO_Init+0x304>)
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	089b      	lsrs	r3, r3, #2
 8002900:	3302      	adds	r3, #2
 8002902:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002906:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	f003 0303 	and.w	r3, r3, #3
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	220f      	movs	r2, #15
 8002912:	fa02 f303 	lsl.w	r3, r2, r3
 8002916:	43db      	mvns	r3, r3
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	4013      	ands	r3, r2
 800291c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a4f      	ldr	r2, [pc, #316]	@ (8002a60 <HAL_GPIO_Init+0x308>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d025      	beq.n	8002972 <HAL_GPIO_Init+0x21a>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a4e      	ldr	r2, [pc, #312]	@ (8002a64 <HAL_GPIO_Init+0x30c>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d01f      	beq.n	800296e <HAL_GPIO_Init+0x216>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a4d      	ldr	r2, [pc, #308]	@ (8002a68 <HAL_GPIO_Init+0x310>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d019      	beq.n	800296a <HAL_GPIO_Init+0x212>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a4c      	ldr	r2, [pc, #304]	@ (8002a6c <HAL_GPIO_Init+0x314>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d013      	beq.n	8002966 <HAL_GPIO_Init+0x20e>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a4b      	ldr	r2, [pc, #300]	@ (8002a70 <HAL_GPIO_Init+0x318>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d00d      	beq.n	8002962 <HAL_GPIO_Init+0x20a>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a4a      	ldr	r2, [pc, #296]	@ (8002a74 <HAL_GPIO_Init+0x31c>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d007      	beq.n	800295e <HAL_GPIO_Init+0x206>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a49      	ldr	r2, [pc, #292]	@ (8002a78 <HAL_GPIO_Init+0x320>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d101      	bne.n	800295a <HAL_GPIO_Init+0x202>
 8002956:	2306      	movs	r3, #6
 8002958:	e00c      	b.n	8002974 <HAL_GPIO_Init+0x21c>
 800295a:	2307      	movs	r3, #7
 800295c:	e00a      	b.n	8002974 <HAL_GPIO_Init+0x21c>
 800295e:	2305      	movs	r3, #5
 8002960:	e008      	b.n	8002974 <HAL_GPIO_Init+0x21c>
 8002962:	2304      	movs	r3, #4
 8002964:	e006      	b.n	8002974 <HAL_GPIO_Init+0x21c>
 8002966:	2303      	movs	r3, #3
 8002968:	e004      	b.n	8002974 <HAL_GPIO_Init+0x21c>
 800296a:	2302      	movs	r3, #2
 800296c:	e002      	b.n	8002974 <HAL_GPIO_Init+0x21c>
 800296e:	2301      	movs	r3, #1
 8002970:	e000      	b.n	8002974 <HAL_GPIO_Init+0x21c>
 8002972:	2300      	movs	r3, #0
 8002974:	69fa      	ldr	r2, [r7, #28]
 8002976:	f002 0203 	and.w	r2, r2, #3
 800297a:	0092      	lsls	r2, r2, #2
 800297c:	4093      	lsls	r3, r2
 800297e:	69ba      	ldr	r2, [r7, #24]
 8002980:	4313      	orrs	r3, r2
 8002982:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002984:	4935      	ldr	r1, [pc, #212]	@ (8002a5c <HAL_GPIO_Init+0x304>)
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	089b      	lsrs	r3, r3, #2
 800298a:	3302      	adds	r3, #2
 800298c:	69ba      	ldr	r2, [r7, #24]
 800298e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002992:	4b3a      	ldr	r3, [pc, #232]	@ (8002a7c <HAL_GPIO_Init+0x324>)
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	43db      	mvns	r3, r3
 800299c:	69ba      	ldr	r2, [r7, #24]
 800299e:	4013      	ands	r3, r2
 80029a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d003      	beq.n	80029b6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80029ae:	69ba      	ldr	r2, [r7, #24]
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029b6:	4a31      	ldr	r2, [pc, #196]	@ (8002a7c <HAL_GPIO_Init+0x324>)
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029bc:	4b2f      	ldr	r3, [pc, #188]	@ (8002a7c <HAL_GPIO_Init+0x324>)
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	43db      	mvns	r3, r3
 80029c6:	69ba      	ldr	r2, [r7, #24]
 80029c8:	4013      	ands	r3, r2
 80029ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d003      	beq.n	80029e0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80029d8:	69ba      	ldr	r2, [r7, #24]
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	4313      	orrs	r3, r2
 80029de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029e0:	4a26      	ldr	r2, [pc, #152]	@ (8002a7c <HAL_GPIO_Init+0x324>)
 80029e2:	69bb      	ldr	r3, [r7, #24]
 80029e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80029e6:	4b25      	ldr	r3, [pc, #148]	@ (8002a7c <HAL_GPIO_Init+0x324>)
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	43db      	mvns	r3, r3
 80029f0:	69ba      	ldr	r2, [r7, #24]
 80029f2:	4013      	ands	r3, r2
 80029f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d003      	beq.n	8002a0a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002a02:	69ba      	ldr	r2, [r7, #24]
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a0a:	4a1c      	ldr	r2, [pc, #112]	@ (8002a7c <HAL_GPIO_Init+0x324>)
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a10:	4b1a      	ldr	r3, [pc, #104]	@ (8002a7c <HAL_GPIO_Init+0x324>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	43db      	mvns	r3, r3
 8002a1a:	69ba      	ldr	r2, [r7, #24]
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d003      	beq.n	8002a34 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002a2c:	69ba      	ldr	r2, [r7, #24]
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a34:	4a11      	ldr	r2, [pc, #68]	@ (8002a7c <HAL_GPIO_Init+0x324>)
 8002a36:	69bb      	ldr	r3, [r7, #24]
 8002a38:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	3301      	adds	r3, #1
 8002a3e:	61fb      	str	r3, [r7, #28]
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	2b0f      	cmp	r3, #15
 8002a44:	f67f ae96 	bls.w	8002774 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a48:	bf00      	nop
 8002a4a:	bf00      	nop
 8002a4c:	3724      	adds	r7, #36	@ 0x24
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr
 8002a56:	bf00      	nop
 8002a58:	40023800 	.word	0x40023800
 8002a5c:	40013800 	.word	0x40013800
 8002a60:	40020000 	.word	0x40020000
 8002a64:	40020400 	.word	0x40020400
 8002a68:	40020800 	.word	0x40020800
 8002a6c:	40020c00 	.word	0x40020c00
 8002a70:	40021000 	.word	0x40021000
 8002a74:	40021400 	.word	0x40021400
 8002a78:	40021800 	.word	0x40021800
 8002a7c:	40013c00 	.word	0x40013c00

08002a80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	460b      	mov	r3, r1
 8002a8a:	807b      	strh	r3, [r7, #2]
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a90:	787b      	ldrb	r3, [r7, #1]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d003      	beq.n	8002a9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a96:	887a      	ldrh	r2, [r7, #2]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a9c:	e003      	b.n	8002aa6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a9e:	887b      	ldrh	r3, [r7, #2]
 8002aa0:	041a      	lsls	r2, r3, #16
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	619a      	str	r2, [r3, #24]
}
 8002aa6:	bf00      	nop
 8002aa8:	370c      	adds	r7, #12
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
	...

08002ab4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d101      	bne.n	8002ac6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e12b      	b.n	8002d1e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d106      	bne.n	8002ae0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f7fe fcda 	bl	8001494 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2224      	movs	r2, #36	@ 0x24
 8002ae4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f022 0201 	bic.w	r2, r2, #1
 8002af6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002b06:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002b16:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002b18:	f001 fc9e 	bl	8004458 <HAL_RCC_GetPCLK1Freq>
 8002b1c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	4a81      	ldr	r2, [pc, #516]	@ (8002d28 <HAL_I2C_Init+0x274>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d807      	bhi.n	8002b38 <HAL_I2C_Init+0x84>
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	4a80      	ldr	r2, [pc, #512]	@ (8002d2c <HAL_I2C_Init+0x278>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	bf94      	ite	ls
 8002b30:	2301      	movls	r3, #1
 8002b32:	2300      	movhi	r3, #0
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	e006      	b.n	8002b46 <HAL_I2C_Init+0x92>
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	4a7d      	ldr	r2, [pc, #500]	@ (8002d30 <HAL_I2C_Init+0x27c>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	bf94      	ite	ls
 8002b40:	2301      	movls	r3, #1
 8002b42:	2300      	movhi	r3, #0
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d001      	beq.n	8002b4e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e0e7      	b.n	8002d1e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	4a78      	ldr	r2, [pc, #480]	@ (8002d34 <HAL_I2C_Init+0x280>)
 8002b52:	fba2 2303 	umull	r2, r3, r2, r3
 8002b56:	0c9b      	lsrs	r3, r3, #18
 8002b58:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	68ba      	ldr	r2, [r7, #8]
 8002b6a:	430a      	orrs	r2, r1
 8002b6c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	6a1b      	ldr	r3, [r3, #32]
 8002b74:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	4a6a      	ldr	r2, [pc, #424]	@ (8002d28 <HAL_I2C_Init+0x274>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d802      	bhi.n	8002b88 <HAL_I2C_Init+0xd4>
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	3301      	adds	r3, #1
 8002b86:	e009      	b.n	8002b9c <HAL_I2C_Init+0xe8>
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002b8e:	fb02 f303 	mul.w	r3, r2, r3
 8002b92:	4a69      	ldr	r2, [pc, #420]	@ (8002d38 <HAL_I2C_Init+0x284>)
 8002b94:	fba2 2303 	umull	r2, r3, r2, r3
 8002b98:	099b      	lsrs	r3, r3, #6
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	6812      	ldr	r2, [r2, #0]
 8002ba0:	430b      	orrs	r3, r1
 8002ba2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	69db      	ldr	r3, [r3, #28]
 8002baa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002bae:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	495c      	ldr	r1, [pc, #368]	@ (8002d28 <HAL_I2C_Init+0x274>)
 8002bb8:	428b      	cmp	r3, r1
 8002bba:	d819      	bhi.n	8002bf0 <HAL_I2C_Init+0x13c>
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	1e59      	subs	r1, r3, #1
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	005b      	lsls	r3, r3, #1
 8002bc6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002bca:	1c59      	adds	r1, r3, #1
 8002bcc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002bd0:	400b      	ands	r3, r1
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d00a      	beq.n	8002bec <HAL_I2C_Init+0x138>
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	1e59      	subs	r1, r3, #1
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	005b      	lsls	r3, r3, #1
 8002be0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002be4:	3301      	adds	r3, #1
 8002be6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bea:	e051      	b.n	8002c90 <HAL_I2C_Init+0x1dc>
 8002bec:	2304      	movs	r3, #4
 8002bee:	e04f      	b.n	8002c90 <HAL_I2C_Init+0x1dc>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d111      	bne.n	8002c1c <HAL_I2C_Init+0x168>
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	1e58      	subs	r0, r3, #1
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6859      	ldr	r1, [r3, #4]
 8002c00:	460b      	mov	r3, r1
 8002c02:	005b      	lsls	r3, r3, #1
 8002c04:	440b      	add	r3, r1
 8002c06:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	bf0c      	ite	eq
 8002c14:	2301      	moveq	r3, #1
 8002c16:	2300      	movne	r3, #0
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	e012      	b.n	8002c42 <HAL_I2C_Init+0x18e>
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	1e58      	subs	r0, r3, #1
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6859      	ldr	r1, [r3, #4]
 8002c24:	460b      	mov	r3, r1
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	440b      	add	r3, r1
 8002c2a:	0099      	lsls	r1, r3, #2
 8002c2c:	440b      	add	r3, r1
 8002c2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c32:	3301      	adds	r3, #1
 8002c34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	bf0c      	ite	eq
 8002c3c:	2301      	moveq	r3, #1
 8002c3e:	2300      	movne	r3, #0
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d001      	beq.n	8002c4a <HAL_I2C_Init+0x196>
 8002c46:	2301      	movs	r3, #1
 8002c48:	e022      	b.n	8002c90 <HAL_I2C_Init+0x1dc>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d10e      	bne.n	8002c70 <HAL_I2C_Init+0x1bc>
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	1e58      	subs	r0, r3, #1
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6859      	ldr	r1, [r3, #4]
 8002c5a:	460b      	mov	r3, r1
 8002c5c:	005b      	lsls	r3, r3, #1
 8002c5e:	440b      	add	r3, r1
 8002c60:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c64:	3301      	adds	r3, #1
 8002c66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002c6e:	e00f      	b.n	8002c90 <HAL_I2C_Init+0x1dc>
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	1e58      	subs	r0, r3, #1
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6859      	ldr	r1, [r3, #4]
 8002c78:	460b      	mov	r3, r1
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	440b      	add	r3, r1
 8002c7e:	0099      	lsls	r1, r3, #2
 8002c80:	440b      	add	r3, r1
 8002c82:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c86:	3301      	adds	r3, #1
 8002c88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c8c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002c90:	6879      	ldr	r1, [r7, #4]
 8002c92:	6809      	ldr	r1, [r1, #0]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	69da      	ldr	r2, [r3, #28]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6a1b      	ldr	r3, [r3, #32]
 8002caa:	431a      	orrs	r2, r3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	430a      	orrs	r2, r1
 8002cb2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002cbe:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	6911      	ldr	r1, [r2, #16]
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	68d2      	ldr	r2, [r2, #12]
 8002cca:	4311      	orrs	r1, r2
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	6812      	ldr	r2, [r2, #0]
 8002cd0:	430b      	orrs	r3, r1
 8002cd2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	695a      	ldr	r2, [r3, #20]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	699b      	ldr	r3, [r3, #24]
 8002ce6:	431a      	orrs	r2, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	430a      	orrs	r2, r1
 8002cee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f042 0201 	orr.w	r2, r2, #1
 8002cfe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2220      	movs	r2, #32
 8002d0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002d1c:	2300      	movs	r3, #0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3710      	adds	r7, #16
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	000186a0 	.word	0x000186a0
 8002d2c:	001e847f 	.word	0x001e847f
 8002d30:	003d08ff 	.word	0x003d08ff
 8002d34:	431bde83 	.word	0x431bde83
 8002d38:	10624dd3 	.word	0x10624dd3

08002d3c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b086      	sub	sp, #24
 8002d40:	af02      	add	r7, sp, #8
 8002d42:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d101      	bne.n	8002d4e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e108      	b.n	8002f60 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d106      	bne.n	8002d6e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2200      	movs	r2, #0
 8002d64:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f007 f941 	bl	8009ff0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2203      	movs	r2, #3
 8002d72:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d7c:	d102      	bne.n	8002d84 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f003 fd04 	bl	8006796 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6818      	ldr	r0, [r3, #0]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	7c1a      	ldrb	r2, [r3, #16]
 8002d96:	f88d 2000 	strb.w	r2, [sp]
 8002d9a:	3304      	adds	r3, #4
 8002d9c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d9e:	f003 fbe3 	bl	8006568 <USB_CoreInit>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d005      	beq.n	8002db4 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2202      	movs	r2, #2
 8002dac:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e0d5      	b.n	8002f60 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	2100      	movs	r1, #0
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f003 fcfc 	bl	80067b8 <USB_SetCurrentMode>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d005      	beq.n	8002dd2 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2202      	movs	r2, #2
 8002dca:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e0c6      	b.n	8002f60 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	73fb      	strb	r3, [r7, #15]
 8002dd6:	e04a      	b.n	8002e6e <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002dd8:	7bfa      	ldrb	r2, [r7, #15]
 8002dda:	6879      	ldr	r1, [r7, #4]
 8002ddc:	4613      	mov	r3, r2
 8002dde:	00db      	lsls	r3, r3, #3
 8002de0:	4413      	add	r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	440b      	add	r3, r1
 8002de6:	3315      	adds	r3, #21
 8002de8:	2201      	movs	r2, #1
 8002dea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002dec:	7bfa      	ldrb	r2, [r7, #15]
 8002dee:	6879      	ldr	r1, [r7, #4]
 8002df0:	4613      	mov	r3, r2
 8002df2:	00db      	lsls	r3, r3, #3
 8002df4:	4413      	add	r3, r2
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	440b      	add	r3, r1
 8002dfa:	3314      	adds	r3, #20
 8002dfc:	7bfa      	ldrb	r2, [r7, #15]
 8002dfe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002e00:	7bfa      	ldrb	r2, [r7, #15]
 8002e02:	7bfb      	ldrb	r3, [r7, #15]
 8002e04:	b298      	uxth	r0, r3
 8002e06:	6879      	ldr	r1, [r7, #4]
 8002e08:	4613      	mov	r3, r2
 8002e0a:	00db      	lsls	r3, r3, #3
 8002e0c:	4413      	add	r3, r2
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	440b      	add	r3, r1
 8002e12:	332e      	adds	r3, #46	@ 0x2e
 8002e14:	4602      	mov	r2, r0
 8002e16:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002e18:	7bfa      	ldrb	r2, [r7, #15]
 8002e1a:	6879      	ldr	r1, [r7, #4]
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	00db      	lsls	r3, r3, #3
 8002e20:	4413      	add	r3, r2
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	440b      	add	r3, r1
 8002e26:	3318      	adds	r3, #24
 8002e28:	2200      	movs	r2, #0
 8002e2a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002e2c:	7bfa      	ldrb	r2, [r7, #15]
 8002e2e:	6879      	ldr	r1, [r7, #4]
 8002e30:	4613      	mov	r3, r2
 8002e32:	00db      	lsls	r3, r3, #3
 8002e34:	4413      	add	r3, r2
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	440b      	add	r3, r1
 8002e3a:	331c      	adds	r3, #28
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002e40:	7bfa      	ldrb	r2, [r7, #15]
 8002e42:	6879      	ldr	r1, [r7, #4]
 8002e44:	4613      	mov	r3, r2
 8002e46:	00db      	lsls	r3, r3, #3
 8002e48:	4413      	add	r3, r2
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	440b      	add	r3, r1
 8002e4e:	3320      	adds	r3, #32
 8002e50:	2200      	movs	r2, #0
 8002e52:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002e54:	7bfa      	ldrb	r2, [r7, #15]
 8002e56:	6879      	ldr	r1, [r7, #4]
 8002e58:	4613      	mov	r3, r2
 8002e5a:	00db      	lsls	r3, r3, #3
 8002e5c:	4413      	add	r3, r2
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	440b      	add	r3, r1
 8002e62:	3324      	adds	r3, #36	@ 0x24
 8002e64:	2200      	movs	r2, #0
 8002e66:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e68:	7bfb      	ldrb	r3, [r7, #15]
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	73fb      	strb	r3, [r7, #15]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	791b      	ldrb	r3, [r3, #4]
 8002e72:	7bfa      	ldrb	r2, [r7, #15]
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d3af      	bcc.n	8002dd8 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e78:	2300      	movs	r3, #0
 8002e7a:	73fb      	strb	r3, [r7, #15]
 8002e7c:	e044      	b.n	8002f08 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002e7e:	7bfa      	ldrb	r2, [r7, #15]
 8002e80:	6879      	ldr	r1, [r7, #4]
 8002e82:	4613      	mov	r3, r2
 8002e84:	00db      	lsls	r3, r3, #3
 8002e86:	4413      	add	r3, r2
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	440b      	add	r3, r1
 8002e8c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002e90:	2200      	movs	r2, #0
 8002e92:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002e94:	7bfa      	ldrb	r2, [r7, #15]
 8002e96:	6879      	ldr	r1, [r7, #4]
 8002e98:	4613      	mov	r3, r2
 8002e9a:	00db      	lsls	r3, r3, #3
 8002e9c:	4413      	add	r3, r2
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	440b      	add	r3, r1
 8002ea2:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002ea6:	7bfa      	ldrb	r2, [r7, #15]
 8002ea8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002eaa:	7bfa      	ldrb	r2, [r7, #15]
 8002eac:	6879      	ldr	r1, [r7, #4]
 8002eae:	4613      	mov	r3, r2
 8002eb0:	00db      	lsls	r3, r3, #3
 8002eb2:	4413      	add	r3, r2
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	440b      	add	r3, r1
 8002eb8:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002ec0:	7bfa      	ldrb	r2, [r7, #15]
 8002ec2:	6879      	ldr	r1, [r7, #4]
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	00db      	lsls	r3, r3, #3
 8002ec8:	4413      	add	r3, r2
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	440b      	add	r3, r1
 8002ece:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002ed6:	7bfa      	ldrb	r2, [r7, #15]
 8002ed8:	6879      	ldr	r1, [r7, #4]
 8002eda:	4613      	mov	r3, r2
 8002edc:	00db      	lsls	r3, r3, #3
 8002ede:	4413      	add	r3, r2
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	440b      	add	r3, r1
 8002ee4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002ee8:	2200      	movs	r2, #0
 8002eea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002eec:	7bfa      	ldrb	r2, [r7, #15]
 8002eee:	6879      	ldr	r1, [r7, #4]
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	00db      	lsls	r3, r3, #3
 8002ef4:	4413      	add	r3, r2
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	440b      	add	r3, r1
 8002efa:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002efe:	2200      	movs	r2, #0
 8002f00:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f02:	7bfb      	ldrb	r3, [r7, #15]
 8002f04:	3301      	adds	r3, #1
 8002f06:	73fb      	strb	r3, [r7, #15]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	791b      	ldrb	r3, [r3, #4]
 8002f0c:	7bfa      	ldrb	r2, [r7, #15]
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d3b5      	bcc.n	8002e7e <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6818      	ldr	r0, [r3, #0]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	7c1a      	ldrb	r2, [r3, #16]
 8002f1a:	f88d 2000 	strb.w	r2, [sp]
 8002f1e:	3304      	adds	r3, #4
 8002f20:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f22:	f003 fc95 	bl	8006850 <USB_DevInit>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d005      	beq.n	8002f38 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2202      	movs	r2, #2
 8002f30:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e013      	b.n	8002f60 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2201      	movs	r2, #1
 8002f42:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	7b1b      	ldrb	r3, [r3, #12]
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d102      	bne.n	8002f54 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f001 f96c 	bl	800422c <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f004 fccc 	bl	80078f6 <USB_DevDisconnect>

  return HAL_OK;
 8002f5e:	2300      	movs	r3, #0
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3710      	adds	r7, #16
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d101      	bne.n	8002f84 <HAL_PCD_Start+0x1c>
 8002f80:	2302      	movs	r3, #2
 8002f82:	e022      	b.n	8002fca <HAL_PCD_Start+0x62>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d009      	beq.n	8002fac <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d105      	bne.n	8002fac <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fa4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f003 fbdf 	bl	8006774 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f004 fc7a 	bl	80078b4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3710      	adds	r7, #16
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}

08002fd2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002fd2:	b590      	push	{r4, r7, lr}
 8002fd4:	b08d      	sub	sp, #52	@ 0x34
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fe0:	6a3b      	ldr	r3, [r7, #32]
 8002fe2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f004 fd38 	bl	8007a5e <USB_GetMode>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	f040 84b9 	bne.w	8003968 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f004 fc9c 	bl	8007938 <USB_ReadInterrupts>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	f000 84af 	beq.w	8003966 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	0a1b      	lsrs	r3, r3, #8
 8003012:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4618      	mov	r0, r3
 8003022:	f004 fc89 	bl	8007938 <USB_ReadInterrupts>
 8003026:	4603      	mov	r3, r0
 8003028:	f003 0302 	and.w	r3, r3, #2
 800302c:	2b02      	cmp	r3, #2
 800302e:	d107      	bne.n	8003040 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	695a      	ldr	r2, [r3, #20]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f002 0202 	and.w	r2, r2, #2
 800303e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4618      	mov	r0, r3
 8003046:	f004 fc77 	bl	8007938 <USB_ReadInterrupts>
 800304a:	4603      	mov	r3, r0
 800304c:	f003 0310 	and.w	r3, r3, #16
 8003050:	2b10      	cmp	r3, #16
 8003052:	d161      	bne.n	8003118 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	699a      	ldr	r2, [r3, #24]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f022 0210 	bic.w	r2, r2, #16
 8003062:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003064:	6a3b      	ldr	r3, [r7, #32]
 8003066:	6a1b      	ldr	r3, [r3, #32]
 8003068:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800306a:	69bb      	ldr	r3, [r7, #24]
 800306c:	f003 020f 	and.w	r2, r3, #15
 8003070:	4613      	mov	r3, r2
 8003072:	00db      	lsls	r3, r3, #3
 8003074:	4413      	add	r3, r2
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	4413      	add	r3, r2
 8003080:	3304      	adds	r3, #4
 8003082:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003084:	69bb      	ldr	r3, [r7, #24]
 8003086:	0c5b      	lsrs	r3, r3, #17
 8003088:	f003 030f 	and.w	r3, r3, #15
 800308c:	2b02      	cmp	r3, #2
 800308e:	d124      	bne.n	80030da <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003090:	69ba      	ldr	r2, [r7, #24]
 8003092:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003096:	4013      	ands	r3, r2
 8003098:	2b00      	cmp	r3, #0
 800309a:	d035      	beq.n	8003108 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80030a0:	69bb      	ldr	r3, [r7, #24]
 80030a2:	091b      	lsrs	r3, r3, #4
 80030a4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80030a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	461a      	mov	r2, r3
 80030ae:	6a38      	ldr	r0, [r7, #32]
 80030b0:	f004 faae 	bl	8007610 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	68da      	ldr	r2, [r3, #12]
 80030b8:	69bb      	ldr	r3, [r7, #24]
 80030ba:	091b      	lsrs	r3, r3, #4
 80030bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80030c0:	441a      	add	r2, r3
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	695a      	ldr	r2, [r3, #20]
 80030ca:	69bb      	ldr	r3, [r7, #24]
 80030cc:	091b      	lsrs	r3, r3, #4
 80030ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80030d2:	441a      	add	r2, r3
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	615a      	str	r2, [r3, #20]
 80030d8:	e016      	b.n	8003108 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80030da:	69bb      	ldr	r3, [r7, #24]
 80030dc:	0c5b      	lsrs	r3, r3, #17
 80030de:	f003 030f 	and.w	r3, r3, #15
 80030e2:	2b06      	cmp	r3, #6
 80030e4:	d110      	bne.n	8003108 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80030ec:	2208      	movs	r2, #8
 80030ee:	4619      	mov	r1, r3
 80030f0:	6a38      	ldr	r0, [r7, #32]
 80030f2:	f004 fa8d 	bl	8007610 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	695a      	ldr	r2, [r3, #20]
 80030fa:	69bb      	ldr	r3, [r7, #24]
 80030fc:	091b      	lsrs	r3, r3, #4
 80030fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003102:	441a      	add	r2, r3
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	699a      	ldr	r2, [r3, #24]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f042 0210 	orr.w	r2, r2, #16
 8003116:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4618      	mov	r0, r3
 800311e:	f004 fc0b 	bl	8007938 <USB_ReadInterrupts>
 8003122:	4603      	mov	r3, r0
 8003124:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003128:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800312c:	f040 80a7 	bne.w	800327e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003130:	2300      	movs	r3, #0
 8003132:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4618      	mov	r0, r3
 800313a:	f004 fc10 	bl	800795e <USB_ReadDevAllOutEpInterrupt>
 800313e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003140:	e099      	b.n	8003276 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003142:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003144:	f003 0301 	and.w	r3, r3, #1
 8003148:	2b00      	cmp	r3, #0
 800314a:	f000 808e 	beq.w	800326a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003154:	b2d2      	uxtb	r2, r2
 8003156:	4611      	mov	r1, r2
 8003158:	4618      	mov	r0, r3
 800315a:	f004 fc34 	bl	80079c6 <USB_ReadDevOutEPInterrupt>
 800315e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	f003 0301 	and.w	r3, r3, #1
 8003166:	2b00      	cmp	r3, #0
 8003168:	d00c      	beq.n	8003184 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800316a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800316c:	015a      	lsls	r2, r3, #5
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	4413      	add	r3, r2
 8003172:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003176:	461a      	mov	r2, r3
 8003178:	2301      	movs	r3, #1
 800317a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800317c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f000 fece 	bl	8003f20 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	f003 0308 	and.w	r3, r3, #8
 800318a:	2b00      	cmp	r3, #0
 800318c:	d00c      	beq.n	80031a8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800318e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003190:	015a      	lsls	r2, r3, #5
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	4413      	add	r3, r2
 8003196:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800319a:	461a      	mov	r2, r3
 800319c:	2308      	movs	r3, #8
 800319e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80031a0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f000 ffa4 	bl	80040f0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	f003 0310 	and.w	r3, r3, #16
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d008      	beq.n	80031c4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80031b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031b4:	015a      	lsls	r2, r3, #5
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	4413      	add	r3, r2
 80031ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80031be:	461a      	mov	r2, r3
 80031c0:	2310      	movs	r3, #16
 80031c2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	f003 0302 	and.w	r3, r3, #2
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d030      	beq.n	8003230 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80031ce:	6a3b      	ldr	r3, [r7, #32]
 80031d0:	695b      	ldr	r3, [r3, #20]
 80031d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031d6:	2b80      	cmp	r3, #128	@ 0x80
 80031d8:	d109      	bne.n	80031ee <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	69fa      	ldr	r2, [r7, #28]
 80031e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80031e8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80031ec:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80031ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031f0:	4613      	mov	r3, r2
 80031f2:	00db      	lsls	r3, r3, #3
 80031f4:	4413      	add	r3, r2
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	4413      	add	r3, r2
 8003200:	3304      	adds	r3, #4
 8003202:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	78db      	ldrb	r3, [r3, #3]
 8003208:	2b01      	cmp	r3, #1
 800320a:	d108      	bne.n	800321e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	2200      	movs	r2, #0
 8003210:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003214:	b2db      	uxtb	r3, r3
 8003216:	4619      	mov	r1, r3
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	f007 f805 	bl	800a228 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800321e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003220:	015a      	lsls	r2, r3, #5
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	4413      	add	r3, r2
 8003226:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800322a:	461a      	mov	r2, r3
 800322c:	2302      	movs	r3, #2
 800322e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	f003 0320 	and.w	r3, r3, #32
 8003236:	2b00      	cmp	r3, #0
 8003238:	d008      	beq.n	800324c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800323a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800323c:	015a      	lsls	r2, r3, #5
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	4413      	add	r3, r2
 8003242:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003246:	461a      	mov	r2, r3
 8003248:	2320      	movs	r3, #32
 800324a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d009      	beq.n	800326a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003258:	015a      	lsls	r2, r3, #5
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	4413      	add	r3, r2
 800325e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003262:	461a      	mov	r2, r3
 8003264:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003268:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800326a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800326c:	3301      	adds	r3, #1
 800326e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003270:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003272:	085b      	lsrs	r3, r3, #1
 8003274:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003276:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003278:	2b00      	cmp	r3, #0
 800327a:	f47f af62 	bne.w	8003142 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4618      	mov	r0, r3
 8003284:	f004 fb58 	bl	8007938 <USB_ReadInterrupts>
 8003288:	4603      	mov	r3, r0
 800328a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800328e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003292:	f040 80db 	bne.w	800344c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4618      	mov	r0, r3
 800329c:	f004 fb79 	bl	8007992 <USB_ReadDevAllInEpInterrupt>
 80032a0:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80032a2:	2300      	movs	r3, #0
 80032a4:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80032a6:	e0cd      	b.n	8003444 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80032a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032aa:	f003 0301 	and.w	r3, r3, #1
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	f000 80c2 	beq.w	8003438 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032ba:	b2d2      	uxtb	r2, r2
 80032bc:	4611      	mov	r1, r2
 80032be:	4618      	mov	r0, r3
 80032c0:	f004 fb9f 	bl	8007a02 <USB_ReadDevInEPInterrupt>
 80032c4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	f003 0301 	and.w	r3, r3, #1
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d057      	beq.n	8003380 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80032d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032d2:	f003 030f 	and.w	r3, r3, #15
 80032d6:	2201      	movs	r2, #1
 80032d8:	fa02 f303 	lsl.w	r3, r2, r3
 80032dc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80032e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	43db      	mvns	r3, r3
 80032ea:	69f9      	ldr	r1, [r7, #28]
 80032ec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80032f0:	4013      	ands	r3, r2
 80032f2:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80032f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032f6:	015a      	lsls	r2, r3, #5
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	4413      	add	r3, r2
 80032fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003300:	461a      	mov	r2, r3
 8003302:	2301      	movs	r3, #1
 8003304:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	799b      	ldrb	r3, [r3, #6]
 800330a:	2b01      	cmp	r3, #1
 800330c:	d132      	bne.n	8003374 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800330e:	6879      	ldr	r1, [r7, #4]
 8003310:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003312:	4613      	mov	r3, r2
 8003314:	00db      	lsls	r3, r3, #3
 8003316:	4413      	add	r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	440b      	add	r3, r1
 800331c:	3320      	adds	r3, #32
 800331e:	6819      	ldr	r1, [r3, #0]
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003324:	4613      	mov	r3, r2
 8003326:	00db      	lsls	r3, r3, #3
 8003328:	4413      	add	r3, r2
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	4403      	add	r3, r0
 800332e:	331c      	adds	r3, #28
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4419      	add	r1, r3
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003338:	4613      	mov	r3, r2
 800333a:	00db      	lsls	r3, r3, #3
 800333c:	4413      	add	r3, r2
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	4403      	add	r3, r0
 8003342:	3320      	adds	r3, #32
 8003344:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003348:	2b00      	cmp	r3, #0
 800334a:	d113      	bne.n	8003374 <HAL_PCD_IRQHandler+0x3a2>
 800334c:	6879      	ldr	r1, [r7, #4]
 800334e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003350:	4613      	mov	r3, r2
 8003352:	00db      	lsls	r3, r3, #3
 8003354:	4413      	add	r3, r2
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	440b      	add	r3, r1
 800335a:	3324      	adds	r3, #36	@ 0x24
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d108      	bne.n	8003374 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6818      	ldr	r0, [r3, #0]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800336c:	461a      	mov	r2, r3
 800336e:	2101      	movs	r1, #1
 8003370:	f004 fba6 	bl	8007ac0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003376:	b2db      	uxtb	r3, r3
 8003378:	4619      	mov	r1, r3
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f006 fecf 	bl	800a11e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	f003 0308 	and.w	r3, r3, #8
 8003386:	2b00      	cmp	r3, #0
 8003388:	d008      	beq.n	800339c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800338a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800338c:	015a      	lsls	r2, r3, #5
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	4413      	add	r3, r2
 8003392:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003396:	461a      	mov	r2, r3
 8003398:	2308      	movs	r3, #8
 800339a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	f003 0310 	and.w	r3, r3, #16
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d008      	beq.n	80033b8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80033a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033a8:	015a      	lsls	r2, r3, #5
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	4413      	add	r3, r2
 80033ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80033b2:	461a      	mov	r2, r3
 80033b4:	2310      	movs	r3, #16
 80033b6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d008      	beq.n	80033d4 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80033c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c4:	015a      	lsls	r2, r3, #5
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	4413      	add	r3, r2
 80033ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80033ce:	461a      	mov	r2, r3
 80033d0:	2340      	movs	r3, #64	@ 0x40
 80033d2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	f003 0302 	and.w	r3, r3, #2
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d023      	beq.n	8003426 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80033de:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80033e0:	6a38      	ldr	r0, [r7, #32]
 80033e2:	f003 fb93 	bl	8006b0c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80033e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033e8:	4613      	mov	r3, r2
 80033ea:	00db      	lsls	r3, r3, #3
 80033ec:	4413      	add	r3, r2
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	3310      	adds	r3, #16
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	4413      	add	r3, r2
 80033f6:	3304      	adds	r3, #4
 80033f8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	78db      	ldrb	r3, [r3, #3]
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d108      	bne.n	8003414 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	2200      	movs	r2, #0
 8003406:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800340a:	b2db      	uxtb	r3, r3
 800340c:	4619      	mov	r1, r3
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f006 ff1c 	bl	800a24c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003416:	015a      	lsls	r2, r3, #5
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	4413      	add	r3, r2
 800341c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003420:	461a      	mov	r2, r3
 8003422:	2302      	movs	r3, #2
 8003424:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800342c:	2b00      	cmp	r3, #0
 800342e:	d003      	beq.n	8003438 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003430:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f000 fce8 	bl	8003e08 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800343a:	3301      	adds	r3, #1
 800343c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800343e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003440:	085b      	lsrs	r3, r3, #1
 8003442:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003444:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003446:	2b00      	cmp	r3, #0
 8003448:	f47f af2e 	bne.w	80032a8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4618      	mov	r0, r3
 8003452:	f004 fa71 	bl	8007938 <USB_ReadInterrupts>
 8003456:	4603      	mov	r3, r0
 8003458:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800345c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003460:	d122      	bne.n	80034a8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	69fa      	ldr	r2, [r7, #28]
 800346c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003470:	f023 0301 	bic.w	r3, r3, #1
 8003474:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800347c:	2b01      	cmp	r3, #1
 800347e:	d108      	bne.n	8003492 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2200      	movs	r2, #0
 8003484:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003488:	2100      	movs	r1, #0
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f007 f896 	bl	800a5bc <HAL_PCDEx_LPM_Callback>
 8003490:	e002      	b.n	8003498 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f006 feba 	bl	800a20c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	695a      	ldr	r2, [r3, #20]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80034a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4618      	mov	r0, r3
 80034ae:	f004 fa43 	bl	8007938 <USB_ReadInterrupts>
 80034b2:	4603      	mov	r3, r0
 80034b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80034bc:	d112      	bne.n	80034e4 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	f003 0301 	and.w	r3, r3, #1
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d102      	bne.n	80034d4 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f006 fe76 	bl	800a1c0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	695a      	ldr	r2, [r3, #20]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80034e2:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4618      	mov	r0, r3
 80034ea:	f004 fa25 	bl	8007938 <USB_ReadInterrupts>
 80034ee:	4603      	mov	r3, r0
 80034f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80034f4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80034f8:	d121      	bne.n	800353e <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	695a      	ldr	r2, [r3, #20]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8003508:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003510:	2b00      	cmp	r3, #0
 8003512:	d111      	bne.n	8003538 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003522:	089b      	lsrs	r3, r3, #2
 8003524:	f003 020f 	and.w	r2, r3, #15
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800352e:	2101      	movs	r1, #1
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f007 f843 	bl	800a5bc <HAL_PCDEx_LPM_Callback>
 8003536:	e002      	b.n	800353e <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f006 fe41 	bl	800a1c0 <HAL_PCD_SuspendCallback>
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4618      	mov	r0, r3
 8003544:	f004 f9f8 	bl	8007938 <USB_ReadInterrupts>
 8003548:	4603      	mov	r3, r0
 800354a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800354e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003552:	f040 80b7 	bne.w	80036c4 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	69fa      	ldr	r2, [r7, #28]
 8003560:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003564:	f023 0301 	bic.w	r3, r3, #1
 8003568:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	2110      	movs	r1, #16
 8003570:	4618      	mov	r0, r3
 8003572:	f003 facb 	bl	8006b0c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003576:	2300      	movs	r3, #0
 8003578:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800357a:	e046      	b.n	800360a <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800357c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800357e:	015a      	lsls	r2, r3, #5
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	4413      	add	r3, r2
 8003584:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003588:	461a      	mov	r2, r3
 800358a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800358e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003590:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003592:	015a      	lsls	r2, r3, #5
 8003594:	69fb      	ldr	r3, [r7, #28]
 8003596:	4413      	add	r3, r2
 8003598:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80035a0:	0151      	lsls	r1, r2, #5
 80035a2:	69fa      	ldr	r2, [r7, #28]
 80035a4:	440a      	add	r2, r1
 80035a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80035aa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80035ae:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80035b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035b2:	015a      	lsls	r2, r3, #5
 80035b4:	69fb      	ldr	r3, [r7, #28]
 80035b6:	4413      	add	r3, r2
 80035b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035bc:	461a      	mov	r2, r3
 80035be:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80035c2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80035c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035c6:	015a      	lsls	r2, r3, #5
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	4413      	add	r3, r2
 80035cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80035d4:	0151      	lsls	r1, r2, #5
 80035d6:	69fa      	ldr	r2, [r7, #28]
 80035d8:	440a      	add	r2, r1
 80035da:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80035de:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80035e2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80035e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035e6:	015a      	lsls	r2, r3, #5
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	4413      	add	r3, r2
 80035ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80035f4:	0151      	lsls	r1, r2, #5
 80035f6:	69fa      	ldr	r2, [r7, #28]
 80035f8:	440a      	add	r2, r1
 80035fa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80035fe:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003602:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003604:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003606:	3301      	adds	r3, #1
 8003608:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	791b      	ldrb	r3, [r3, #4]
 800360e:	461a      	mov	r2, r3
 8003610:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003612:	4293      	cmp	r3, r2
 8003614:	d3b2      	bcc.n	800357c <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800361c:	69db      	ldr	r3, [r3, #28]
 800361e:	69fa      	ldr	r2, [r7, #28]
 8003620:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003624:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003628:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	7bdb      	ldrb	r3, [r3, #15]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d016      	beq.n	8003660 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003638:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800363c:	69fa      	ldr	r2, [r7, #28]
 800363e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003642:	f043 030b 	orr.w	r3, r3, #11
 8003646:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003650:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003652:	69fa      	ldr	r2, [r7, #28]
 8003654:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003658:	f043 030b 	orr.w	r3, r3, #11
 800365c:	6453      	str	r3, [r2, #68]	@ 0x44
 800365e:	e015      	b.n	800368c <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003666:	695b      	ldr	r3, [r3, #20]
 8003668:	69fa      	ldr	r2, [r7, #28]
 800366a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800366e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003672:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8003676:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800367e:	691b      	ldr	r3, [r3, #16]
 8003680:	69fa      	ldr	r2, [r7, #28]
 8003682:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003686:	f043 030b 	orr.w	r3, r3, #11
 800368a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	69fa      	ldr	r2, [r7, #28]
 8003696:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800369a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800369e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6818      	ldr	r0, [r3, #0]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80036ae:	461a      	mov	r2, r3
 80036b0:	f004 fa06 	bl	8007ac0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	695a      	ldr	r2, [r3, #20]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80036c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4618      	mov	r0, r3
 80036ca:	f004 f935 	bl	8007938 <USB_ReadInterrupts>
 80036ce:	4603      	mov	r3, r0
 80036d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80036d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036d8:	d123      	bne.n	8003722 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4618      	mov	r0, r3
 80036e0:	f004 f9cb 	bl	8007a7a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4618      	mov	r0, r3
 80036ea:	f003 fa88 	bl	8006bfe <USB_GetDevSpeed>
 80036ee:	4603      	mov	r3, r0
 80036f0:	461a      	mov	r2, r3
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681c      	ldr	r4, [r3, #0]
 80036fa:	f000 fea1 	bl	8004440 <HAL_RCC_GetHCLKFreq>
 80036fe:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003704:	461a      	mov	r2, r3
 8003706:	4620      	mov	r0, r4
 8003708:	f002 ff92 	bl	8006630 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f006 fd2e 	bl	800a16e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	695a      	ldr	r2, [r3, #20]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003720:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4618      	mov	r0, r3
 8003728:	f004 f906 	bl	8007938 <USB_ReadInterrupts>
 800372c:	4603      	mov	r3, r0
 800372e:	f003 0308 	and.w	r3, r3, #8
 8003732:	2b08      	cmp	r3, #8
 8003734:	d10a      	bne.n	800374c <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f006 fd0b 	bl	800a152 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	695a      	ldr	r2, [r3, #20]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f002 0208 	and.w	r2, r2, #8
 800374a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4618      	mov	r0, r3
 8003752:	f004 f8f1 	bl	8007938 <USB_ReadInterrupts>
 8003756:	4603      	mov	r3, r0
 8003758:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800375c:	2b80      	cmp	r3, #128	@ 0x80
 800375e:	d123      	bne.n	80037a8 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003760:	6a3b      	ldr	r3, [r7, #32]
 8003762:	699b      	ldr	r3, [r3, #24]
 8003764:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003768:	6a3b      	ldr	r3, [r7, #32]
 800376a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800376c:	2301      	movs	r3, #1
 800376e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003770:	e014      	b.n	800379c <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003772:	6879      	ldr	r1, [r7, #4]
 8003774:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003776:	4613      	mov	r3, r2
 8003778:	00db      	lsls	r3, r3, #3
 800377a:	4413      	add	r3, r2
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	440b      	add	r3, r1
 8003780:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	2b01      	cmp	r3, #1
 8003788:	d105      	bne.n	8003796 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800378a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800378c:	b2db      	uxtb	r3, r3
 800378e:	4619      	mov	r1, r3
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f000 fb08 	bl	8003da6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003798:	3301      	adds	r3, #1
 800379a:	627b      	str	r3, [r7, #36]	@ 0x24
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	791b      	ldrb	r3, [r3, #4]
 80037a0:	461a      	mov	r2, r3
 80037a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d3e4      	bcc.n	8003772 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4618      	mov	r0, r3
 80037ae:	f004 f8c3 	bl	8007938 <USB_ReadInterrupts>
 80037b2:	4603      	mov	r3, r0
 80037b4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80037b8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80037bc:	d13c      	bne.n	8003838 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80037be:	2301      	movs	r3, #1
 80037c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80037c2:	e02b      	b.n	800381c <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80037c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037c6:	015a      	lsls	r2, r3, #5
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	4413      	add	r3, r2
 80037cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80037d4:	6879      	ldr	r1, [r7, #4]
 80037d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037d8:	4613      	mov	r3, r2
 80037da:	00db      	lsls	r3, r3, #3
 80037dc:	4413      	add	r3, r2
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	440b      	add	r3, r1
 80037e2:	3318      	adds	r3, #24
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d115      	bne.n	8003816 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80037ea:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	da12      	bge.n	8003816 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80037f0:	6879      	ldr	r1, [r7, #4]
 80037f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037f4:	4613      	mov	r3, r2
 80037f6:	00db      	lsls	r3, r3, #3
 80037f8:	4413      	add	r3, r2
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	440b      	add	r3, r1
 80037fe:	3317      	adds	r3, #23
 8003800:	2201      	movs	r2, #1
 8003802:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003806:	b2db      	uxtb	r3, r3
 8003808:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800380c:	b2db      	uxtb	r3, r3
 800380e:	4619      	mov	r1, r3
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f000 fac8 	bl	8003da6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003818:	3301      	adds	r3, #1
 800381a:	627b      	str	r3, [r7, #36]	@ 0x24
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	791b      	ldrb	r3, [r3, #4]
 8003820:	461a      	mov	r2, r3
 8003822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003824:	4293      	cmp	r3, r2
 8003826:	d3cd      	bcc.n	80037c4 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	695a      	ldr	r2, [r3, #20]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003836:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4618      	mov	r0, r3
 800383e:	f004 f87b 	bl	8007938 <USB_ReadInterrupts>
 8003842:	4603      	mov	r3, r0
 8003844:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003848:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800384c:	d156      	bne.n	80038fc <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800384e:	2301      	movs	r3, #1
 8003850:	627b      	str	r3, [r7, #36]	@ 0x24
 8003852:	e045      	b.n	80038e0 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003856:	015a      	lsls	r2, r3, #5
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	4413      	add	r3, r2
 800385c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003864:	6879      	ldr	r1, [r7, #4]
 8003866:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003868:	4613      	mov	r3, r2
 800386a:	00db      	lsls	r3, r3, #3
 800386c:	4413      	add	r3, r2
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	440b      	add	r3, r1
 8003872:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003876:	781b      	ldrb	r3, [r3, #0]
 8003878:	2b01      	cmp	r3, #1
 800387a:	d12e      	bne.n	80038da <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800387c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800387e:	2b00      	cmp	r3, #0
 8003880:	da2b      	bge.n	80038da <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003882:	69bb      	ldr	r3, [r7, #24]
 8003884:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800388e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003892:	429a      	cmp	r2, r3
 8003894:	d121      	bne.n	80038da <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003896:	6879      	ldr	r1, [r7, #4]
 8003898:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800389a:	4613      	mov	r3, r2
 800389c:	00db      	lsls	r3, r3, #3
 800389e:	4413      	add	r3, r2
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	440b      	add	r3, r1
 80038a4:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80038a8:	2201      	movs	r2, #1
 80038aa:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80038ac:	6a3b      	ldr	r3, [r7, #32]
 80038ae:	699b      	ldr	r3, [r3, #24]
 80038b0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80038b4:	6a3b      	ldr	r3, [r7, #32]
 80038b6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80038b8:	6a3b      	ldr	r3, [r7, #32]
 80038ba:	695b      	ldr	r3, [r3, #20]
 80038bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d10a      	bne.n	80038da <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	69fa      	ldr	r2, [r7, #28]
 80038ce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80038d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80038d6:	6053      	str	r3, [r2, #4]
            break;
 80038d8:	e008      	b.n	80038ec <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80038da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038dc:	3301      	adds	r3, #1
 80038de:	627b      	str	r3, [r7, #36]	@ 0x24
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	791b      	ldrb	r3, [r3, #4]
 80038e4:	461a      	mov	r2, r3
 80038e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d3b3      	bcc.n	8003854 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	695a      	ldr	r2, [r3, #20]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80038fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4618      	mov	r0, r3
 8003902:	f004 f819 	bl	8007938 <USB_ReadInterrupts>
 8003906:	4603      	mov	r3, r0
 8003908:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800390c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003910:	d10a      	bne.n	8003928 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f006 fcac 	bl	800a270 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	695a      	ldr	r2, [r3, #20]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003926:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4618      	mov	r0, r3
 800392e:	f004 f803 	bl	8007938 <USB_ReadInterrupts>
 8003932:	4603      	mov	r3, r0
 8003934:	f003 0304 	and.w	r3, r3, #4
 8003938:	2b04      	cmp	r3, #4
 800393a:	d115      	bne.n	8003968 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003944:	69bb      	ldr	r3, [r7, #24]
 8003946:	f003 0304 	and.w	r3, r3, #4
 800394a:	2b00      	cmp	r3, #0
 800394c:	d002      	beq.n	8003954 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f006 fc9c 	bl	800a28c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	6859      	ldr	r1, [r3, #4]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	69ba      	ldr	r2, [r7, #24]
 8003960:	430a      	orrs	r2, r1
 8003962:	605a      	str	r2, [r3, #4]
 8003964:	e000      	b.n	8003968 <HAL_PCD_IRQHandler+0x996>
      return;
 8003966:	bf00      	nop
    }
  }
}
 8003968:	3734      	adds	r7, #52	@ 0x34
 800396a:	46bd      	mov	sp, r7
 800396c:	bd90      	pop	{r4, r7, pc}

0800396e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800396e:	b580      	push	{r7, lr}
 8003970:	b082      	sub	sp, #8
 8003972:	af00      	add	r7, sp, #0
 8003974:	6078      	str	r0, [r7, #4]
 8003976:	460b      	mov	r3, r1
 8003978:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003980:	2b01      	cmp	r3, #1
 8003982:	d101      	bne.n	8003988 <HAL_PCD_SetAddress+0x1a>
 8003984:	2302      	movs	r3, #2
 8003986:	e012      	b.n	80039ae <HAL_PCD_SetAddress+0x40>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	78fa      	ldrb	r2, [r7, #3]
 8003994:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	78fa      	ldrb	r2, [r7, #3]
 800399c:	4611      	mov	r1, r2
 800399e:	4618      	mov	r0, r3
 80039a0:	f003 ff62 	bl	8007868 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80039ac:	2300      	movs	r3, #0
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3708      	adds	r7, #8
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}

080039b6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80039b6:	b580      	push	{r7, lr}
 80039b8:	b084      	sub	sp, #16
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
 80039be:	4608      	mov	r0, r1
 80039c0:	4611      	mov	r1, r2
 80039c2:	461a      	mov	r2, r3
 80039c4:	4603      	mov	r3, r0
 80039c6:	70fb      	strb	r3, [r7, #3]
 80039c8:	460b      	mov	r3, r1
 80039ca:	803b      	strh	r3, [r7, #0]
 80039cc:	4613      	mov	r3, r2
 80039ce:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80039d0:	2300      	movs	r3, #0
 80039d2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80039d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	da0f      	bge.n	80039fc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039dc:	78fb      	ldrb	r3, [r7, #3]
 80039de:	f003 020f 	and.w	r2, r3, #15
 80039e2:	4613      	mov	r3, r2
 80039e4:	00db      	lsls	r3, r3, #3
 80039e6:	4413      	add	r3, r2
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	3310      	adds	r3, #16
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	4413      	add	r3, r2
 80039f0:	3304      	adds	r3, #4
 80039f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2201      	movs	r2, #1
 80039f8:	705a      	strb	r2, [r3, #1]
 80039fa:	e00f      	b.n	8003a1c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80039fc:	78fb      	ldrb	r3, [r7, #3]
 80039fe:	f003 020f 	and.w	r2, r3, #15
 8003a02:	4613      	mov	r3, r2
 8003a04:	00db      	lsls	r3, r3, #3
 8003a06:	4413      	add	r3, r2
 8003a08:	009b      	lsls	r3, r3, #2
 8003a0a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	4413      	add	r3, r2
 8003a12:	3304      	adds	r3, #4
 8003a14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003a1c:	78fb      	ldrb	r3, [r7, #3]
 8003a1e:	f003 030f 	and.w	r3, r3, #15
 8003a22:	b2da      	uxtb	r2, r3
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003a28:	883a      	ldrh	r2, [r7, #0]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	78ba      	ldrb	r2, [r7, #2]
 8003a32:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	785b      	ldrb	r3, [r3, #1]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d004      	beq.n	8003a46 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	781b      	ldrb	r3, [r3, #0]
 8003a40:	461a      	mov	r2, r3
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003a46:	78bb      	ldrb	r3, [r7, #2]
 8003a48:	2b02      	cmp	r3, #2
 8003a4a:	d102      	bne.n	8003a52 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d101      	bne.n	8003a60 <HAL_PCD_EP_Open+0xaa>
 8003a5c:	2302      	movs	r3, #2
 8003a5e:	e00e      	b.n	8003a7e <HAL_PCD_EP_Open+0xc8>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	68f9      	ldr	r1, [r7, #12]
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f003 f8ea 	bl	8006c48 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003a7c:	7afb      	ldrb	r3, [r7, #11]
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3710      	adds	r7, #16
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}

08003a86 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a86:	b580      	push	{r7, lr}
 8003a88:	b084      	sub	sp, #16
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	6078      	str	r0, [r7, #4]
 8003a8e:	460b      	mov	r3, r1
 8003a90:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003a92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	da0f      	bge.n	8003aba <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a9a:	78fb      	ldrb	r3, [r7, #3]
 8003a9c:	f003 020f 	and.w	r2, r3, #15
 8003aa0:	4613      	mov	r3, r2
 8003aa2:	00db      	lsls	r3, r3, #3
 8003aa4:	4413      	add	r3, r2
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	3310      	adds	r3, #16
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	4413      	add	r3, r2
 8003aae:	3304      	adds	r3, #4
 8003ab0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	705a      	strb	r2, [r3, #1]
 8003ab8:	e00f      	b.n	8003ada <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003aba:	78fb      	ldrb	r3, [r7, #3]
 8003abc:	f003 020f 	and.w	r2, r3, #15
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	00db      	lsls	r3, r3, #3
 8003ac4:	4413      	add	r3, r2
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003acc:	687a      	ldr	r2, [r7, #4]
 8003ace:	4413      	add	r3, r2
 8003ad0:	3304      	adds	r3, #4
 8003ad2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ada:	78fb      	ldrb	r3, [r7, #3]
 8003adc:	f003 030f 	and.w	r3, r3, #15
 8003ae0:	b2da      	uxtb	r2, r3
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d101      	bne.n	8003af4 <HAL_PCD_EP_Close+0x6e>
 8003af0:	2302      	movs	r3, #2
 8003af2:	e00e      	b.n	8003b12 <HAL_PCD_EP_Close+0x8c>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2201      	movs	r2, #1
 8003af8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	68f9      	ldr	r1, [r7, #12]
 8003b02:	4618      	mov	r0, r3
 8003b04:	f003 f928 	bl	8006d58 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003b10:	2300      	movs	r3, #0
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3710      	adds	r7, #16
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}

08003b1a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003b1a:	b580      	push	{r7, lr}
 8003b1c:	b086      	sub	sp, #24
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	60f8      	str	r0, [r7, #12]
 8003b22:	607a      	str	r2, [r7, #4]
 8003b24:	603b      	str	r3, [r7, #0]
 8003b26:	460b      	mov	r3, r1
 8003b28:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b2a:	7afb      	ldrb	r3, [r7, #11]
 8003b2c:	f003 020f 	and.w	r2, r3, #15
 8003b30:	4613      	mov	r3, r2
 8003b32:	00db      	lsls	r3, r3, #3
 8003b34:	4413      	add	r3, r2
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003b3c:	68fa      	ldr	r2, [r7, #12]
 8003b3e:	4413      	add	r3, r2
 8003b40:	3304      	adds	r3, #4
 8003b42:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	683a      	ldr	r2, [r7, #0]
 8003b4e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	2200      	movs	r2, #0
 8003b54:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b5c:	7afb      	ldrb	r3, [r7, #11]
 8003b5e:	f003 030f 	and.w	r3, r3, #15
 8003b62:	b2da      	uxtb	r2, r3
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	799b      	ldrb	r3, [r3, #6]
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d102      	bne.n	8003b76 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003b70:	687a      	ldr	r2, [r7, #4]
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	6818      	ldr	r0, [r3, #0]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	799b      	ldrb	r3, [r3, #6]
 8003b7e:	461a      	mov	r2, r3
 8003b80:	6979      	ldr	r1, [r7, #20]
 8003b82:	f003 f9c5 	bl	8006f10 <USB_EPStartXfer>

  return HAL_OK;
 8003b86:	2300      	movs	r3, #0
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3718      	adds	r7, #24
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}

08003b90 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	460b      	mov	r3, r1
 8003b9a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003b9c:	78fb      	ldrb	r3, [r7, #3]
 8003b9e:	f003 020f 	and.w	r2, r3, #15
 8003ba2:	6879      	ldr	r1, [r7, #4]
 8003ba4:	4613      	mov	r3, r2
 8003ba6:	00db      	lsls	r3, r3, #3
 8003ba8:	4413      	add	r3, r2
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	440b      	add	r3, r1
 8003bae:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003bb2:	681b      	ldr	r3, [r3, #0]
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	370c      	adds	r7, #12
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr

08003bc0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b086      	sub	sp, #24
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	607a      	str	r2, [r7, #4]
 8003bca:	603b      	str	r3, [r7, #0]
 8003bcc:	460b      	mov	r3, r1
 8003bce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bd0:	7afb      	ldrb	r3, [r7, #11]
 8003bd2:	f003 020f 	and.w	r2, r3, #15
 8003bd6:	4613      	mov	r3, r2
 8003bd8:	00db      	lsls	r3, r3, #3
 8003bda:	4413      	add	r3, r2
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	3310      	adds	r3, #16
 8003be0:	68fa      	ldr	r2, [r7, #12]
 8003be2:	4413      	add	r3, r2
 8003be4:	3304      	adds	r3, #4
 8003be6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	683a      	ldr	r2, [r7, #0]
 8003bf2:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c00:	7afb      	ldrb	r3, [r7, #11]
 8003c02:	f003 030f 	and.w	r3, r3, #15
 8003c06:	b2da      	uxtb	r2, r3
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	799b      	ldrb	r3, [r3, #6]
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d102      	bne.n	8003c1a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	6818      	ldr	r0, [r3, #0]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	799b      	ldrb	r3, [r3, #6]
 8003c22:	461a      	mov	r2, r3
 8003c24:	6979      	ldr	r1, [r7, #20]
 8003c26:	f003 f973 	bl	8006f10 <USB_EPStartXfer>

  return HAL_OK;
 8003c2a:	2300      	movs	r3, #0
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3718      	adds	r7, #24
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}

08003c34 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b084      	sub	sp, #16
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	460b      	mov	r3, r1
 8003c3e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003c40:	78fb      	ldrb	r3, [r7, #3]
 8003c42:	f003 030f 	and.w	r3, r3, #15
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	7912      	ldrb	r2, [r2, #4]
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d901      	bls.n	8003c52 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e04f      	b.n	8003cf2 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003c52:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	da0f      	bge.n	8003c7a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c5a:	78fb      	ldrb	r3, [r7, #3]
 8003c5c:	f003 020f 	and.w	r2, r3, #15
 8003c60:	4613      	mov	r3, r2
 8003c62:	00db      	lsls	r3, r3, #3
 8003c64:	4413      	add	r3, r2
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	3310      	adds	r3, #16
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	4413      	add	r3, r2
 8003c6e:	3304      	adds	r3, #4
 8003c70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2201      	movs	r2, #1
 8003c76:	705a      	strb	r2, [r3, #1]
 8003c78:	e00d      	b.n	8003c96 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003c7a:	78fa      	ldrb	r2, [r7, #3]
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	00db      	lsls	r3, r3, #3
 8003c80:	4413      	add	r3, r2
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	4413      	add	r3, r2
 8003c8c:	3304      	adds	r3, #4
 8003c8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2200      	movs	r2, #0
 8003c94:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2201      	movs	r2, #1
 8003c9a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c9c:	78fb      	ldrb	r3, [r7, #3]
 8003c9e:	f003 030f 	and.w	r3, r3, #15
 8003ca2:	b2da      	uxtb	r2, r3
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d101      	bne.n	8003cb6 <HAL_PCD_EP_SetStall+0x82>
 8003cb2:	2302      	movs	r3, #2
 8003cb4:	e01d      	b.n	8003cf2 <HAL_PCD_EP_SetStall+0xbe>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2201      	movs	r2, #1
 8003cba:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	68f9      	ldr	r1, [r7, #12]
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f003 fcfb 	bl	80076c0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003cca:	78fb      	ldrb	r3, [r7, #3]
 8003ccc:	f003 030f 	and.w	r3, r3, #15
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d109      	bne.n	8003ce8 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6818      	ldr	r0, [r3, #0]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	7999      	ldrb	r1, [r3, #6]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	f003 feec 	bl	8007ac0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003cf0:	2300      	movs	r3, #0
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3710      	adds	r7, #16
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}

08003cfa <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003cfa:	b580      	push	{r7, lr}
 8003cfc:	b084      	sub	sp, #16
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
 8003d02:	460b      	mov	r3, r1
 8003d04:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003d06:	78fb      	ldrb	r3, [r7, #3]
 8003d08:	f003 030f 	and.w	r3, r3, #15
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	7912      	ldrb	r2, [r2, #4]
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d901      	bls.n	8003d18 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e042      	b.n	8003d9e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003d18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	da0f      	bge.n	8003d40 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d20:	78fb      	ldrb	r3, [r7, #3]
 8003d22:	f003 020f 	and.w	r2, r3, #15
 8003d26:	4613      	mov	r3, r2
 8003d28:	00db      	lsls	r3, r3, #3
 8003d2a:	4413      	add	r3, r2
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	3310      	adds	r3, #16
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	4413      	add	r3, r2
 8003d34:	3304      	adds	r3, #4
 8003d36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	705a      	strb	r2, [r3, #1]
 8003d3e:	e00f      	b.n	8003d60 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d40:	78fb      	ldrb	r3, [r7, #3]
 8003d42:	f003 020f 	and.w	r2, r3, #15
 8003d46:	4613      	mov	r3, r2
 8003d48:	00db      	lsls	r3, r3, #3
 8003d4a:	4413      	add	r3, r2
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	4413      	add	r3, r2
 8003d56:	3304      	adds	r3, #4
 8003d58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2200      	movs	r2, #0
 8003d64:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d66:	78fb      	ldrb	r3, [r7, #3]
 8003d68:	f003 030f 	and.w	r3, r3, #15
 8003d6c:	b2da      	uxtb	r2, r3
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d101      	bne.n	8003d80 <HAL_PCD_EP_ClrStall+0x86>
 8003d7c:	2302      	movs	r3, #2
 8003d7e:	e00e      	b.n	8003d9e <HAL_PCD_EP_ClrStall+0xa4>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	68f9      	ldr	r1, [r7, #12]
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f003 fd04 	bl	800779c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2200      	movs	r2, #0
 8003d98:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003d9c:	2300      	movs	r3, #0
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3710      	adds	r7, #16
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}

08003da6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003da6:	b580      	push	{r7, lr}
 8003da8:	b084      	sub	sp, #16
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
 8003dae:	460b      	mov	r3, r1
 8003db0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003db2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	da0c      	bge.n	8003dd4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003dba:	78fb      	ldrb	r3, [r7, #3]
 8003dbc:	f003 020f 	and.w	r2, r3, #15
 8003dc0:	4613      	mov	r3, r2
 8003dc2:	00db      	lsls	r3, r3, #3
 8003dc4:	4413      	add	r3, r2
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	3310      	adds	r3, #16
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	4413      	add	r3, r2
 8003dce:	3304      	adds	r3, #4
 8003dd0:	60fb      	str	r3, [r7, #12]
 8003dd2:	e00c      	b.n	8003dee <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003dd4:	78fb      	ldrb	r3, [r7, #3]
 8003dd6:	f003 020f 	and.w	r2, r3, #15
 8003dda:	4613      	mov	r3, r2
 8003ddc:	00db      	lsls	r3, r3, #3
 8003dde:	4413      	add	r3, r2
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	4413      	add	r3, r2
 8003dea:	3304      	adds	r3, #4
 8003dec:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	68f9      	ldr	r1, [r7, #12]
 8003df4:	4618      	mov	r0, r3
 8003df6:	f003 fb23 	bl	8007440 <USB_EPStopXfer>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003dfe:	7afb      	ldrb	r3, [r7, #11]
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3710      	adds	r7, #16
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b08a      	sub	sp, #40	@ 0x28
 8003e0c:	af02      	add	r7, sp, #8
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003e1c:	683a      	ldr	r2, [r7, #0]
 8003e1e:	4613      	mov	r3, r2
 8003e20:	00db      	lsls	r3, r3, #3
 8003e22:	4413      	add	r3, r2
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	3310      	adds	r3, #16
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	4413      	add	r3, r2
 8003e2c:	3304      	adds	r3, #4
 8003e2e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	695a      	ldr	r2, [r3, #20]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	691b      	ldr	r3, [r3, #16]
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d901      	bls.n	8003e40 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e06b      	b.n	8003f18 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	691a      	ldr	r2, [r3, #16]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	695b      	ldr	r3, [r3, #20]
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	69fa      	ldr	r2, [r7, #28]
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d902      	bls.n	8003e5c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	3303      	adds	r3, #3
 8003e60:	089b      	lsrs	r3, r3, #2
 8003e62:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003e64:	e02a      	b.n	8003ebc <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	691a      	ldr	r2, [r3, #16]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	695b      	ldr	r3, [r3, #20]
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	69fa      	ldr	r2, [r7, #28]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d902      	bls.n	8003e82 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	3303      	adds	r3, #3
 8003e86:	089b      	lsrs	r3, r3, #2
 8003e88:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	68d9      	ldr	r1, [r3, #12]
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	b2da      	uxtb	r2, r3
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003e9a:	9300      	str	r3, [sp, #0]
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	6978      	ldr	r0, [r7, #20]
 8003ea0:	f003 fb78 	bl	8007594 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	68da      	ldr	r2, [r3, #12]
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	441a      	add	r2, r3
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	695a      	ldr	r2, [r3, #20]
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	441a      	add	r2, r3
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	015a      	lsls	r2, r3, #5
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	4413      	add	r3, r2
 8003ec4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ec8:	699b      	ldr	r3, [r3, #24]
 8003eca:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003ecc:	69ba      	ldr	r2, [r7, #24]
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d809      	bhi.n	8003ee6 <PCD_WriteEmptyTxFifo+0xde>
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	695a      	ldr	r2, [r3, #20]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d203      	bcs.n	8003ee6 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	691b      	ldr	r3, [r3, #16]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d1bf      	bne.n	8003e66 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	691a      	ldr	r2, [r3, #16]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	695b      	ldr	r3, [r3, #20]
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d811      	bhi.n	8003f16 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	f003 030f 	and.w	r3, r3, #15
 8003ef8:	2201      	movs	r2, #1
 8003efa:	fa02 f303 	lsl.w	r3, r2, r3
 8003efe:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f06:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	43db      	mvns	r3, r3
 8003f0c:	6939      	ldr	r1, [r7, #16]
 8003f0e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003f12:	4013      	ands	r3, r2
 8003f14:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003f16:	2300      	movs	r3, #0
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3720      	adds	r7, #32
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}

08003f20 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b088      	sub	sp, #32
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
 8003f28:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f30:	69fb      	ldr	r3, [r7, #28]
 8003f32:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003f34:	69fb      	ldr	r3, [r7, #28]
 8003f36:	333c      	adds	r3, #60	@ 0x3c
 8003f38:	3304      	adds	r3, #4
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	015a      	lsls	r2, r3, #5
 8003f42:	69bb      	ldr	r3, [r7, #24]
 8003f44:	4413      	add	r3, r2
 8003f46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	799b      	ldrb	r3, [r3, #6]
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d17b      	bne.n	800404e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	f003 0308 	and.w	r3, r3, #8
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d015      	beq.n	8003f8c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	4a61      	ldr	r2, [pc, #388]	@ (80040e8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	f240 80b9 	bls.w	80040dc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	f000 80b3 	beq.w	80040dc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	015a      	lsls	r2, r3, #5
 8003f7a:	69bb      	ldr	r3, [r7, #24]
 8003f7c:	4413      	add	r3, r2
 8003f7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f82:	461a      	mov	r2, r3
 8003f84:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f88:	6093      	str	r3, [r2, #8]
 8003f8a:	e0a7      	b.n	80040dc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	f003 0320 	and.w	r3, r3, #32
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d009      	beq.n	8003faa <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	015a      	lsls	r2, r3, #5
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	4413      	add	r3, r2
 8003f9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	2320      	movs	r3, #32
 8003fa6:	6093      	str	r3, [r2, #8]
 8003fa8:	e098      	b.n	80040dc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	f040 8093 	bne.w	80040dc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	4a4b      	ldr	r2, [pc, #300]	@ (80040e8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d90f      	bls.n	8003fde <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d00a      	beq.n	8003fde <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	015a      	lsls	r2, r3, #5
 8003fcc:	69bb      	ldr	r3, [r7, #24]
 8003fce:	4413      	add	r3, r2
 8003fd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003fda:	6093      	str	r3, [r2, #8]
 8003fdc:	e07e      	b.n	80040dc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003fde:	683a      	ldr	r2, [r7, #0]
 8003fe0:	4613      	mov	r3, r2
 8003fe2:	00db      	lsls	r3, r3, #3
 8003fe4:	4413      	add	r3, r2
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003fec:	687a      	ldr	r2, [r7, #4]
 8003fee:	4413      	add	r3, r2
 8003ff0:	3304      	adds	r3, #4
 8003ff2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6a1a      	ldr	r2, [r3, #32]
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	0159      	lsls	r1, r3, #5
 8003ffc:	69bb      	ldr	r3, [r7, #24]
 8003ffe:	440b      	add	r3, r1
 8004000:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004004:	691b      	ldr	r3, [r3, #16]
 8004006:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800400a:	1ad2      	subs	r2, r2, r3
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d114      	bne.n	8004040 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	691b      	ldr	r3, [r3, #16]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d109      	bne.n	8004032 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6818      	ldr	r0, [r3, #0]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004028:	461a      	mov	r2, r3
 800402a:	2101      	movs	r1, #1
 800402c:	f003 fd48 	bl	8007ac0 <USB_EP0_OutStart>
 8004030:	e006      	b.n	8004040 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	68da      	ldr	r2, [r3, #12]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	695b      	ldr	r3, [r3, #20]
 800403a:	441a      	add	r2, r3
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	b2db      	uxtb	r3, r3
 8004044:	4619      	mov	r1, r3
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f006 f84e 	bl	800a0e8 <HAL_PCD_DataOutStageCallback>
 800404c:	e046      	b.n	80040dc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	4a26      	ldr	r2, [pc, #152]	@ (80040ec <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d124      	bne.n	80040a0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800405c:	2b00      	cmp	r3, #0
 800405e:	d00a      	beq.n	8004076 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	015a      	lsls	r2, r3, #5
 8004064:	69bb      	ldr	r3, [r7, #24]
 8004066:	4413      	add	r3, r2
 8004068:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800406c:	461a      	mov	r2, r3
 800406e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004072:	6093      	str	r3, [r2, #8]
 8004074:	e032      	b.n	80040dc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	f003 0320 	and.w	r3, r3, #32
 800407c:	2b00      	cmp	r3, #0
 800407e:	d008      	beq.n	8004092 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	015a      	lsls	r2, r3, #5
 8004084:	69bb      	ldr	r3, [r7, #24]
 8004086:	4413      	add	r3, r2
 8004088:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800408c:	461a      	mov	r2, r3
 800408e:	2320      	movs	r3, #32
 8004090:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	b2db      	uxtb	r3, r3
 8004096:	4619      	mov	r1, r3
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f006 f825 	bl	800a0e8 <HAL_PCD_DataOutStageCallback>
 800409e:	e01d      	b.n	80040dc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d114      	bne.n	80040d0 <PCD_EP_OutXfrComplete_int+0x1b0>
 80040a6:	6879      	ldr	r1, [r7, #4]
 80040a8:	683a      	ldr	r2, [r7, #0]
 80040aa:	4613      	mov	r3, r2
 80040ac:	00db      	lsls	r3, r3, #3
 80040ae:	4413      	add	r3, r2
 80040b0:	009b      	lsls	r3, r3, #2
 80040b2:	440b      	add	r3, r1
 80040b4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d108      	bne.n	80040d0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6818      	ldr	r0, [r3, #0]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80040c8:	461a      	mov	r2, r3
 80040ca:	2100      	movs	r1, #0
 80040cc:	f003 fcf8 	bl	8007ac0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	4619      	mov	r1, r3
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f006 f806 	bl	800a0e8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80040dc:	2300      	movs	r3, #0
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3720      	adds	r7, #32
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	4f54300a 	.word	0x4f54300a
 80040ec:	4f54310a 	.word	0x4f54310a

080040f0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b086      	sub	sp, #24
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	333c      	adds	r3, #60	@ 0x3c
 8004108:	3304      	adds	r3, #4
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	015a      	lsls	r2, r3, #5
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	4413      	add	r3, r2
 8004116:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	4a15      	ldr	r2, [pc, #84]	@ (8004178 <PCD_EP_OutSetupPacket_int+0x88>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d90e      	bls.n	8004144 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800412c:	2b00      	cmp	r3, #0
 800412e:	d009      	beq.n	8004144 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	015a      	lsls	r2, r3, #5
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	4413      	add	r3, r2
 8004138:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800413c:	461a      	mov	r2, r3
 800413e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004142:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	f005 ffbd 	bl	800a0c4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	4a0a      	ldr	r2, [pc, #40]	@ (8004178 <PCD_EP_OutSetupPacket_int+0x88>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d90c      	bls.n	800416c <PCD_EP_OutSetupPacket_int+0x7c>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	799b      	ldrb	r3, [r3, #6]
 8004156:	2b01      	cmp	r3, #1
 8004158:	d108      	bne.n	800416c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6818      	ldr	r0, [r3, #0]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004164:	461a      	mov	r2, r3
 8004166:	2101      	movs	r1, #1
 8004168:	f003 fcaa 	bl	8007ac0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800416c:	2300      	movs	r3, #0
}
 800416e:	4618      	mov	r0, r3
 8004170:	3718      	adds	r7, #24
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop
 8004178:	4f54300a 	.word	0x4f54300a

0800417c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800417c:	b480      	push	{r7}
 800417e:	b085      	sub	sp, #20
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	460b      	mov	r3, r1
 8004186:	70fb      	strb	r3, [r7, #3]
 8004188:	4613      	mov	r3, r2
 800418a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004192:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004194:	78fb      	ldrb	r3, [r7, #3]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d107      	bne.n	80041aa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800419a:	883b      	ldrh	r3, [r7, #0]
 800419c:	0419      	lsls	r1, r3, #16
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	68ba      	ldr	r2, [r7, #8]
 80041a4:	430a      	orrs	r2, r1
 80041a6:	629a      	str	r2, [r3, #40]	@ 0x28
 80041a8:	e028      	b.n	80041fc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041b0:	0c1b      	lsrs	r3, r3, #16
 80041b2:	68ba      	ldr	r2, [r7, #8]
 80041b4:	4413      	add	r3, r2
 80041b6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80041b8:	2300      	movs	r3, #0
 80041ba:	73fb      	strb	r3, [r7, #15]
 80041bc:	e00d      	b.n	80041da <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	7bfb      	ldrb	r3, [r7, #15]
 80041c4:	3340      	adds	r3, #64	@ 0x40
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	4413      	add	r3, r2
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	0c1b      	lsrs	r3, r3, #16
 80041ce:	68ba      	ldr	r2, [r7, #8]
 80041d0:	4413      	add	r3, r2
 80041d2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80041d4:	7bfb      	ldrb	r3, [r7, #15]
 80041d6:	3301      	adds	r3, #1
 80041d8:	73fb      	strb	r3, [r7, #15]
 80041da:	7bfa      	ldrb	r2, [r7, #15]
 80041dc:	78fb      	ldrb	r3, [r7, #3]
 80041de:	3b01      	subs	r3, #1
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d3ec      	bcc.n	80041be <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80041e4:	883b      	ldrh	r3, [r7, #0]
 80041e6:	0418      	lsls	r0, r3, #16
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6819      	ldr	r1, [r3, #0]
 80041ec:	78fb      	ldrb	r3, [r7, #3]
 80041ee:	3b01      	subs	r3, #1
 80041f0:	68ba      	ldr	r2, [r7, #8]
 80041f2:	4302      	orrs	r2, r0
 80041f4:	3340      	adds	r3, #64	@ 0x40
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	440b      	add	r3, r1
 80041fa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80041fc:	2300      	movs	r3, #0
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3714      	adds	r7, #20
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr

0800420a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800420a:	b480      	push	{r7}
 800420c:	b083      	sub	sp, #12
 800420e:	af00      	add	r7, sp, #0
 8004210:	6078      	str	r0, [r7, #4]
 8004212:	460b      	mov	r3, r1
 8004214:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	887a      	ldrh	r2, [r7, #2]
 800421c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800421e:	2300      	movs	r3, #0
}
 8004220:	4618      	mov	r0, r3
 8004222:	370c      	adds	r7, #12
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr

0800422c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800422c:	b480      	push	{r7}
 800422e:	b085      	sub	sp, #20
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2201      	movs	r2, #1
 800423e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	699b      	ldr	r3, [r3, #24]
 800424e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800425a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800425e:	f043 0303 	orr.w	r3, r3, #3
 8004262:	68fa      	ldr	r2, [r7, #12]
 8004264:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8004266:	2300      	movs	r3, #0
}
 8004268:	4618      	mov	r0, r3
 800426a:	3714      	adds	r7, #20
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr

08004274 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b084      	sub	sp, #16
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d101      	bne.n	8004288 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e0cc      	b.n	8004422 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004288:	4b68      	ldr	r3, [pc, #416]	@ (800442c <HAL_RCC_ClockConfig+0x1b8>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 030f 	and.w	r3, r3, #15
 8004290:	683a      	ldr	r2, [r7, #0]
 8004292:	429a      	cmp	r2, r3
 8004294:	d90c      	bls.n	80042b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004296:	4b65      	ldr	r3, [pc, #404]	@ (800442c <HAL_RCC_ClockConfig+0x1b8>)
 8004298:	683a      	ldr	r2, [r7, #0]
 800429a:	b2d2      	uxtb	r2, r2
 800429c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800429e:	4b63      	ldr	r3, [pc, #396]	@ (800442c <HAL_RCC_ClockConfig+0x1b8>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 030f 	and.w	r3, r3, #15
 80042a6:	683a      	ldr	r2, [r7, #0]
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d001      	beq.n	80042b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	e0b8      	b.n	8004422 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 0302 	and.w	r3, r3, #2
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d020      	beq.n	80042fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 0304 	and.w	r3, r3, #4
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d005      	beq.n	80042d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042c8:	4b59      	ldr	r3, [pc, #356]	@ (8004430 <HAL_RCC_ClockConfig+0x1bc>)
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	4a58      	ldr	r2, [pc, #352]	@ (8004430 <HAL_RCC_ClockConfig+0x1bc>)
 80042ce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80042d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 0308 	and.w	r3, r3, #8
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d005      	beq.n	80042ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042e0:	4b53      	ldr	r3, [pc, #332]	@ (8004430 <HAL_RCC_ClockConfig+0x1bc>)
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	4a52      	ldr	r2, [pc, #328]	@ (8004430 <HAL_RCC_ClockConfig+0x1bc>)
 80042e6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80042ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042ec:	4b50      	ldr	r3, [pc, #320]	@ (8004430 <HAL_RCC_ClockConfig+0x1bc>)
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	494d      	ldr	r1, [pc, #308]	@ (8004430 <HAL_RCC_ClockConfig+0x1bc>)
 80042fa:	4313      	orrs	r3, r2
 80042fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 0301 	and.w	r3, r3, #1
 8004306:	2b00      	cmp	r3, #0
 8004308:	d044      	beq.n	8004394 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	2b01      	cmp	r3, #1
 8004310:	d107      	bne.n	8004322 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004312:	4b47      	ldr	r3, [pc, #284]	@ (8004430 <HAL_RCC_ClockConfig+0x1bc>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800431a:	2b00      	cmp	r3, #0
 800431c:	d119      	bne.n	8004352 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e07f      	b.n	8004422 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	2b02      	cmp	r3, #2
 8004328:	d003      	beq.n	8004332 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800432e:	2b03      	cmp	r3, #3
 8004330:	d107      	bne.n	8004342 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004332:	4b3f      	ldr	r3, [pc, #252]	@ (8004430 <HAL_RCC_ClockConfig+0x1bc>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800433a:	2b00      	cmp	r3, #0
 800433c:	d109      	bne.n	8004352 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e06f      	b.n	8004422 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004342:	4b3b      	ldr	r3, [pc, #236]	@ (8004430 <HAL_RCC_ClockConfig+0x1bc>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0302 	and.w	r3, r3, #2
 800434a:	2b00      	cmp	r3, #0
 800434c:	d101      	bne.n	8004352 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e067      	b.n	8004422 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004352:	4b37      	ldr	r3, [pc, #220]	@ (8004430 <HAL_RCC_ClockConfig+0x1bc>)
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	f023 0203 	bic.w	r2, r3, #3
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	4934      	ldr	r1, [pc, #208]	@ (8004430 <HAL_RCC_ClockConfig+0x1bc>)
 8004360:	4313      	orrs	r3, r2
 8004362:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004364:	f7fd fb5a 	bl	8001a1c <HAL_GetTick>
 8004368:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800436a:	e00a      	b.n	8004382 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800436c:	f7fd fb56 	bl	8001a1c <HAL_GetTick>
 8004370:	4602      	mov	r2, r0
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	1ad3      	subs	r3, r2, r3
 8004376:	f241 3288 	movw	r2, #5000	@ 0x1388
 800437a:	4293      	cmp	r3, r2
 800437c:	d901      	bls.n	8004382 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e04f      	b.n	8004422 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004382:	4b2b      	ldr	r3, [pc, #172]	@ (8004430 <HAL_RCC_ClockConfig+0x1bc>)
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	f003 020c 	and.w	r2, r3, #12
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	429a      	cmp	r2, r3
 8004392:	d1eb      	bne.n	800436c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004394:	4b25      	ldr	r3, [pc, #148]	@ (800442c <HAL_RCC_ClockConfig+0x1b8>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 030f 	and.w	r3, r3, #15
 800439c:	683a      	ldr	r2, [r7, #0]
 800439e:	429a      	cmp	r2, r3
 80043a0:	d20c      	bcs.n	80043bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043a2:	4b22      	ldr	r3, [pc, #136]	@ (800442c <HAL_RCC_ClockConfig+0x1b8>)
 80043a4:	683a      	ldr	r2, [r7, #0]
 80043a6:	b2d2      	uxtb	r2, r2
 80043a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043aa:	4b20      	ldr	r3, [pc, #128]	@ (800442c <HAL_RCC_ClockConfig+0x1b8>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 030f 	and.w	r3, r3, #15
 80043b2:	683a      	ldr	r2, [r7, #0]
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d001      	beq.n	80043bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	e032      	b.n	8004422 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 0304 	and.w	r3, r3, #4
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d008      	beq.n	80043da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043c8:	4b19      	ldr	r3, [pc, #100]	@ (8004430 <HAL_RCC_ClockConfig+0x1bc>)
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	4916      	ldr	r1, [pc, #88]	@ (8004430 <HAL_RCC_ClockConfig+0x1bc>)
 80043d6:	4313      	orrs	r3, r2
 80043d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 0308 	and.w	r3, r3, #8
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d009      	beq.n	80043fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043e6:	4b12      	ldr	r3, [pc, #72]	@ (8004430 <HAL_RCC_ClockConfig+0x1bc>)
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	691b      	ldr	r3, [r3, #16]
 80043f2:	00db      	lsls	r3, r3, #3
 80043f4:	490e      	ldr	r1, [pc, #56]	@ (8004430 <HAL_RCC_ClockConfig+0x1bc>)
 80043f6:	4313      	orrs	r3, r2
 80043f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80043fa:	f000 fb7f 	bl	8004afc <HAL_RCC_GetSysClockFreq>
 80043fe:	4602      	mov	r2, r0
 8004400:	4b0b      	ldr	r3, [pc, #44]	@ (8004430 <HAL_RCC_ClockConfig+0x1bc>)
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	091b      	lsrs	r3, r3, #4
 8004406:	f003 030f 	and.w	r3, r3, #15
 800440a:	490a      	ldr	r1, [pc, #40]	@ (8004434 <HAL_RCC_ClockConfig+0x1c0>)
 800440c:	5ccb      	ldrb	r3, [r1, r3]
 800440e:	fa22 f303 	lsr.w	r3, r2, r3
 8004412:	4a09      	ldr	r2, [pc, #36]	@ (8004438 <HAL_RCC_ClockConfig+0x1c4>)
 8004414:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004416:	4b09      	ldr	r3, [pc, #36]	@ (800443c <HAL_RCC_ClockConfig+0x1c8>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4618      	mov	r0, r3
 800441c:	f7fd faba 	bl	8001994 <HAL_InitTick>

  return HAL_OK;
 8004420:	2300      	movs	r3, #0
}
 8004422:	4618      	mov	r0, r3
 8004424:	3710      	adds	r7, #16
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
 800442a:	bf00      	nop
 800442c:	40023c00 	.word	0x40023c00
 8004430:	40023800 	.word	0x40023800
 8004434:	0800d408 	.word	0x0800d408
 8004438:	20000000 	.word	0x20000000
 800443c:	20000004 	.word	0x20000004

08004440 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004440:	b480      	push	{r7}
 8004442:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004444:	4b03      	ldr	r3, [pc, #12]	@ (8004454 <HAL_RCC_GetHCLKFreq+0x14>)
 8004446:	681b      	ldr	r3, [r3, #0]
}
 8004448:	4618      	mov	r0, r3
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr
 8004452:	bf00      	nop
 8004454:	20000000 	.word	0x20000000

08004458 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800445c:	f7ff fff0 	bl	8004440 <HAL_RCC_GetHCLKFreq>
 8004460:	4602      	mov	r2, r0
 8004462:	4b05      	ldr	r3, [pc, #20]	@ (8004478 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	0a9b      	lsrs	r3, r3, #10
 8004468:	f003 0307 	and.w	r3, r3, #7
 800446c:	4903      	ldr	r1, [pc, #12]	@ (800447c <HAL_RCC_GetPCLK1Freq+0x24>)
 800446e:	5ccb      	ldrb	r3, [r1, r3]
 8004470:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004474:	4618      	mov	r0, r3
 8004476:	bd80      	pop	{r7, pc}
 8004478:	40023800 	.word	0x40023800
 800447c:	0800d418 	.word	0x0800d418

08004480 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004484:	f7ff ffdc 	bl	8004440 <HAL_RCC_GetHCLKFreq>
 8004488:	4602      	mov	r2, r0
 800448a:	4b05      	ldr	r3, [pc, #20]	@ (80044a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	0b5b      	lsrs	r3, r3, #13
 8004490:	f003 0307 	and.w	r3, r3, #7
 8004494:	4903      	ldr	r1, [pc, #12]	@ (80044a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004496:	5ccb      	ldrb	r3, [r1, r3]
 8004498:	fa22 f303 	lsr.w	r3, r2, r3
}
 800449c:	4618      	mov	r0, r3
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	40023800 	.word	0x40023800
 80044a4:	0800d418 	.word	0x0800d418

080044a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b08c      	sub	sp, #48	@ 0x30
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80044b0:	2300      	movs	r3, #0
 80044b2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 80044b4:	2300      	movs	r3, #0
 80044b6:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80044b8:	2300      	movs	r3, #0
 80044ba:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80044bc:	2300      	movs	r3, #0
 80044be:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80044c0:	2300      	movs	r3, #0
 80044c2:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80044c4:	2300      	movs	r3, #0
 80044c6:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80044c8:	2300      	movs	r3, #0
 80044ca:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80044cc:	2300      	movs	r3, #0
 80044ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 80044d0:	2300      	movs	r3, #0
 80044d2:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 0301 	and.w	r3, r3, #1
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d010      	beq.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80044e0:	4b6f      	ldr	r3, [pc, #444]	@ (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80044e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80044e6:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044ee:	496c      	ldr	r1, [pc, #432]	@ (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80044f0:	4313      	orrs	r3, r2
 80044f2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d101      	bne.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80044fe:	2301      	movs	r3, #1
 8004500:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 0302 	and.w	r3, r3, #2
 800450a:	2b00      	cmp	r3, #0
 800450c:	d010      	beq.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800450e:	4b64      	ldr	r3, [pc, #400]	@ (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004510:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004514:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800451c:	4960      	ldr	r1, [pc, #384]	@ (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800451e:	4313      	orrs	r3, r2
 8004520:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004528:	2b00      	cmp	r3, #0
 800452a:	d101      	bne.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 800452c:	2301      	movs	r3, #1
 800452e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 0304 	and.w	r3, r3, #4
 8004538:	2b00      	cmp	r3, #0
 800453a:	d017      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800453c:	4b58      	ldr	r3, [pc, #352]	@ (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800453e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004542:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800454a:	4955      	ldr	r1, [pc, #340]	@ (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800454c:	4313      	orrs	r3, r2
 800454e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004556:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800455a:	d101      	bne.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 800455c:	2301      	movs	r3, #1
 800455e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004564:	2b00      	cmp	r3, #0
 8004566:	d101      	bne.n	800456c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8004568:	2301      	movs	r3, #1
 800456a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 0308 	and.w	r3, r3, #8
 8004574:	2b00      	cmp	r3, #0
 8004576:	d017      	beq.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004578:	4b49      	ldr	r3, [pc, #292]	@ (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800457a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800457e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004586:	4946      	ldr	r1, [pc, #280]	@ (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004588:	4313      	orrs	r3, r2
 800458a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004592:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004596:	d101      	bne.n	800459c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8004598:	2301      	movs	r3, #1
 800459a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d101      	bne.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80045a4:	2301      	movs	r3, #1
 80045a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 0320 	and.w	r3, r3, #32
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	f000 808a 	beq.w	80046ca <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80045b6:	2300      	movs	r3, #0
 80045b8:	60bb      	str	r3, [r7, #8]
 80045ba:	4b39      	ldr	r3, [pc, #228]	@ (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80045bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045be:	4a38      	ldr	r2, [pc, #224]	@ (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80045c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80045c6:	4b36      	ldr	r3, [pc, #216]	@ (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80045c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045ce:	60bb      	str	r3, [r7, #8]
 80045d0:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80045d2:	4b34      	ldr	r3, [pc, #208]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a33      	ldr	r2, [pc, #204]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80045d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045dc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80045de:	f7fd fa1d 	bl	8001a1c <HAL_GetTick>
 80045e2:	6278      	str	r0, [r7, #36]	@ 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80045e4:	e008      	b.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80045e6:	f7fd fa19 	bl	8001a1c <HAL_GetTick>
 80045ea:	4602      	mov	r2, r0
 80045ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ee:	1ad3      	subs	r3, r2, r3
 80045f0:	2b02      	cmp	r3, #2
 80045f2:	d901      	bls.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80045f4:	2303      	movs	r3, #3
 80045f6:	e278      	b.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80045f8:	4b2a      	ldr	r3, [pc, #168]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004600:	2b00      	cmp	r3, #0
 8004602:	d0f0      	beq.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004604:	4b26      	ldr	r3, [pc, #152]	@ (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004606:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004608:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800460c:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800460e:	6a3b      	ldr	r3, [r7, #32]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d02f      	beq.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004618:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800461c:	6a3a      	ldr	r2, [r7, #32]
 800461e:	429a      	cmp	r2, r3
 8004620:	d028      	beq.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004622:	4b1f      	ldr	r3, [pc, #124]	@ (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004624:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004626:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800462a:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800462c:	4b1e      	ldr	r3, [pc, #120]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800462e:	2201      	movs	r2, #1
 8004630:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004632:	4b1d      	ldr	r3, [pc, #116]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8004634:	2200      	movs	r2, #0
 8004636:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004638:	4a19      	ldr	r2, [pc, #100]	@ (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800463a:	6a3b      	ldr	r3, [r7, #32]
 800463c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800463e:	4b18      	ldr	r3, [pc, #96]	@ (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004640:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004642:	f003 0301 	and.w	r3, r3, #1
 8004646:	2b01      	cmp	r3, #1
 8004648:	d114      	bne.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800464a:	f7fd f9e7 	bl	8001a1c <HAL_GetTick>
 800464e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004650:	e00a      	b.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004652:	f7fd f9e3 	bl	8001a1c <HAL_GetTick>
 8004656:	4602      	mov	r2, r0
 8004658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800465a:	1ad3      	subs	r3, r2, r3
 800465c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004660:	4293      	cmp	r3, r2
 8004662:	d901      	bls.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8004664:	2303      	movs	r3, #3
 8004666:	e240      	b.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004668:	4b0d      	ldr	r3, [pc, #52]	@ (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800466a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800466c:	f003 0302 	and.w	r3, r3, #2
 8004670:	2b00      	cmp	r3, #0
 8004672:	d0ee      	beq.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004678:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800467c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004680:	d114      	bne.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x204>
 8004682:	4b07      	ldr	r3, [pc, #28]	@ (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800468e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004692:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004696:	4902      	ldr	r1, [pc, #8]	@ (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004698:	4313      	orrs	r3, r2
 800469a:	608b      	str	r3, [r1, #8]
 800469c:	e00c      	b.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800469e:	bf00      	nop
 80046a0:	40023800 	.word	0x40023800
 80046a4:	40007000 	.word	0x40007000
 80046a8:	42470e40 	.word	0x42470e40
 80046ac:	4b4a      	ldr	r3, [pc, #296]	@ (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	4a49      	ldr	r2, [pc, #292]	@ (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80046b2:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80046b6:	6093      	str	r3, [r2, #8]
 80046b8:	4b47      	ldr	r3, [pc, #284]	@ (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80046ba:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046c4:	4944      	ldr	r1, [pc, #272]	@ (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80046c6:	4313      	orrs	r3, r2
 80046c8:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 0310 	and.w	r3, r3, #16
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d004      	beq.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 80046dc:	4b3f      	ldr	r3, [pc, #252]	@ (80047dc <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80046de:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d00a      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80046ec:	4b3a      	ldr	r3, [pc, #232]	@ (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80046ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046f2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046fa:	4937      	ldr	r1, [pc, #220]	@ (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80046fc:	4313      	orrs	r3, r2
 80046fe:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800470a:	2b00      	cmp	r3, #0
 800470c:	d00a      	beq.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800470e:	4b32      	ldr	r3, [pc, #200]	@ (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004710:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004714:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800471c:	492e      	ldr	r1, [pc, #184]	@ (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800471e:	4313      	orrs	r3, r2
 8004720:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800472c:	2b00      	cmp	r3, #0
 800472e:	d011      	beq.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004730:	4b29      	ldr	r3, [pc, #164]	@ (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004732:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004736:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800473e:	4926      	ldr	r1, [pc, #152]	@ (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004740:	4313      	orrs	r3, r2
 8004742:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800474a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800474e:	d101      	bne.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8004750:	2301      	movs	r3, #1
 8004752:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800475c:	2b00      	cmp	r3, #0
 800475e:	d00a      	beq.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8004760:	4b1d      	ldr	r3, [pc, #116]	@ (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004762:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004766:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800476e:	491a      	ldr	r1, [pc, #104]	@ (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004770:	4313      	orrs	r3, r2
 8004772:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800477e:	2b00      	cmp	r3, #0
 8004780:	d011      	beq.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8004782:	4b15      	ldr	r3, [pc, #84]	@ (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004784:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004788:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004790:	4911      	ldr	r1, [pc, #68]	@ (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004792:	4313      	orrs	r3, r2
 8004794:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800479c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80047a0:	d101      	bne.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80047a2:	2301      	movs	r3, #1
 80047a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80047a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d005      	beq.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80047b4:	f040 80ff 	bne.w	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80047b8:	4b09      	ldr	r3, [pc, #36]	@ (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80047ba:	2200      	movs	r2, #0
 80047bc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80047be:	f7fd f92d 	bl	8001a1c <HAL_GetTick>
 80047c2:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80047c4:	e00e      	b.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80047c6:	f7fd f929 	bl	8001a1c <HAL_GetTick>
 80047ca:	4602      	mov	r2, r0
 80047cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ce:	1ad3      	subs	r3, r2, r3
 80047d0:	2b02      	cmp	r3, #2
 80047d2:	d907      	bls.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80047d4:	2303      	movs	r3, #3
 80047d6:	e188      	b.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x642>
 80047d8:	40023800 	.word	0x40023800
 80047dc:	424711e0 	.word	0x424711e0
 80047e0:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80047e4:	4b7e      	ldr	r3, [pc, #504]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d1ea      	bne.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0301 	and.w	r3, r3, #1
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d003      	beq.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004800:	2b00      	cmp	r3, #0
 8004802:	d009      	beq.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800480c:	2b00      	cmp	r3, #0
 800480e:	d028      	beq.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004814:	2b00      	cmp	r3, #0
 8004816:	d124      	bne.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004818:	4b71      	ldr	r3, [pc, #452]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800481a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800481e:	0c1b      	lsrs	r3, r3, #16
 8004820:	f003 0303 	and.w	r3, r3, #3
 8004824:	3301      	adds	r3, #1
 8004826:	005b      	lsls	r3, r3, #1
 8004828:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800482a:	4b6d      	ldr	r3, [pc, #436]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800482c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004830:	0e1b      	lsrs	r3, r3, #24
 8004832:	f003 030f 	and.w	r3, r3, #15
 8004836:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	685a      	ldr	r2, [r3, #4]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	019b      	lsls	r3, r3, #6
 8004842:	431a      	orrs	r2, r3
 8004844:	69fb      	ldr	r3, [r7, #28]
 8004846:	085b      	lsrs	r3, r3, #1
 8004848:	3b01      	subs	r3, #1
 800484a:	041b      	lsls	r3, r3, #16
 800484c:	431a      	orrs	r2, r3
 800484e:	69bb      	ldr	r3, [r7, #24]
 8004850:	061b      	lsls	r3, r3, #24
 8004852:	431a      	orrs	r2, r3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	695b      	ldr	r3, [r3, #20]
 8004858:	071b      	lsls	r3, r3, #28
 800485a:	4961      	ldr	r1, [pc, #388]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800485c:	4313      	orrs	r3, r2
 800485e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 0304 	and.w	r3, r3, #4
 800486a:	2b00      	cmp	r3, #0
 800486c:	d004      	beq.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004872:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004876:	d00a      	beq.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004880:	2b00      	cmp	r3, #0
 8004882:	d035      	beq.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004888:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800488c:	d130      	bne.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800488e:	4b54      	ldr	r3, [pc, #336]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004890:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004894:	0c1b      	lsrs	r3, r3, #16
 8004896:	f003 0303 	and.w	r3, r3, #3
 800489a:	3301      	adds	r3, #1
 800489c:	005b      	lsls	r3, r3, #1
 800489e:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80048a0:	4b4f      	ldr	r3, [pc, #316]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80048a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80048a6:	0f1b      	lsrs	r3, r3, #28
 80048a8:	f003 0307 	and.w	r3, r3, #7
 80048ac:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	685a      	ldr	r2, [r3, #4]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	019b      	lsls	r3, r3, #6
 80048b8:	431a      	orrs	r2, r3
 80048ba:	69fb      	ldr	r3, [r7, #28]
 80048bc:	085b      	lsrs	r3, r3, #1
 80048be:	3b01      	subs	r3, #1
 80048c0:	041b      	lsls	r3, r3, #16
 80048c2:	431a      	orrs	r2, r3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	691b      	ldr	r3, [r3, #16]
 80048c8:	061b      	lsls	r3, r3, #24
 80048ca:	431a      	orrs	r2, r3
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	071b      	lsls	r3, r3, #28
 80048d0:	4943      	ldr	r1, [pc, #268]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80048d2:	4313      	orrs	r3, r2
 80048d4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80048d8:	4b41      	ldr	r3, [pc, #260]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80048da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80048de:	f023 021f 	bic.w	r2, r3, #31
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048e6:	3b01      	subs	r3, #1
 80048e8:	493d      	ldr	r1, [pc, #244]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80048ea:	4313      	orrs	r3, r2
 80048ec:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d029      	beq.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004900:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004904:	d124      	bne.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004906:	4b36      	ldr	r3, [pc, #216]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004908:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800490c:	0c1b      	lsrs	r3, r3, #16
 800490e:	f003 0303 	and.w	r3, r3, #3
 8004912:	3301      	adds	r3, #1
 8004914:	005b      	lsls	r3, r3, #1
 8004916:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004918:	4b31      	ldr	r3, [pc, #196]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800491a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800491e:	0f1b      	lsrs	r3, r3, #28
 8004920:	f003 0307 	and.w	r3, r3, #7
 8004924:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	685a      	ldr	r2, [r3, #4]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	019b      	lsls	r3, r3, #6
 8004930:	431a      	orrs	r2, r3
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	68db      	ldr	r3, [r3, #12]
 8004936:	085b      	lsrs	r3, r3, #1
 8004938:	3b01      	subs	r3, #1
 800493a:	041b      	lsls	r3, r3, #16
 800493c:	431a      	orrs	r2, r3
 800493e:	69bb      	ldr	r3, [r7, #24]
 8004940:	061b      	lsls	r3, r3, #24
 8004942:	431a      	orrs	r2, r3
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	071b      	lsls	r3, r3, #28
 8004948:	4925      	ldr	r1, [pc, #148]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800494a:	4313      	orrs	r3, r2
 800494c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004958:	2b00      	cmp	r3, #0
 800495a:	d016      	beq.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	685a      	ldr	r2, [r3, #4]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	019b      	lsls	r3, r3, #6
 8004966:	431a      	orrs	r2, r3
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	085b      	lsrs	r3, r3, #1
 800496e:	3b01      	subs	r3, #1
 8004970:	041b      	lsls	r3, r3, #16
 8004972:	431a      	orrs	r2, r3
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	691b      	ldr	r3, [r3, #16]
 8004978:	061b      	lsls	r3, r3, #24
 800497a:	431a      	orrs	r2, r3
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	695b      	ldr	r3, [r3, #20]
 8004980:	071b      	lsls	r3, r3, #28
 8004982:	4917      	ldr	r1, [pc, #92]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004984:	4313      	orrs	r3, r2
 8004986:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800498a:	4b16      	ldr	r3, [pc, #88]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 800498c:	2201      	movs	r2, #1
 800498e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004990:	f7fd f844 	bl	8001a1c <HAL_GetTick>
 8004994:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004996:	e008      	b.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004998:	f7fd f840 	bl	8001a1c <HAL_GetTick>
 800499c:	4602      	mov	r2, r0
 800499e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049a0:	1ad3      	subs	r3, r2, r3
 80049a2:	2b02      	cmp	r3, #2
 80049a4:	d901      	bls.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049a6:	2303      	movs	r3, #3
 80049a8:	e09f      	b.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80049aa:	4b0d      	ldr	r3, [pc, #52]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d0f0      	beq.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80049b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	f040 8095 	bne.w	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80049be:	4b0a      	ldr	r3, [pc, #40]	@ (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80049c0:	2200      	movs	r2, #0
 80049c2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80049c4:	f7fd f82a 	bl	8001a1c <HAL_GetTick>
 80049c8:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80049ca:	e00f      	b.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80049cc:	f7fd f826 	bl	8001a1c <HAL_GetTick>
 80049d0:	4602      	mov	r2, r0
 80049d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	2b02      	cmp	r3, #2
 80049d8:	d908      	bls.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	e085      	b.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x642>
 80049de:	bf00      	nop
 80049e0:	40023800 	.word	0x40023800
 80049e4:	42470068 	.word	0x42470068
 80049e8:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80049ec:	4b41      	ldr	r3, [pc, #260]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80049f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80049f8:	d0e8      	beq.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 0304 	and.w	r3, r3, #4
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d003      	beq.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x566>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d009      	beq.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d02b      	beq.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d127      	bne.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8004a22:	4b34      	ldr	r3, [pc, #208]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a28:	0c1b      	lsrs	r3, r3, #16
 8004a2a:	f003 0303 	and.w	r3, r3, #3
 8004a2e:	3301      	adds	r3, #1
 8004a30:	005b      	lsls	r3, r3, #1
 8004a32:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	699a      	ldr	r2, [r3, #24]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	69db      	ldr	r3, [r3, #28]
 8004a3c:	019b      	lsls	r3, r3, #6
 8004a3e:	431a      	orrs	r2, r3
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	085b      	lsrs	r3, r3, #1
 8004a44:	3b01      	subs	r3, #1
 8004a46:	041b      	lsls	r3, r3, #16
 8004a48:	431a      	orrs	r2, r3
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a4e:	061b      	lsls	r3, r3, #24
 8004a50:	4928      	ldr	r1, [pc, #160]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004a52:	4313      	orrs	r3, r2
 8004a54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004a58:	4b26      	ldr	r3, [pc, #152]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004a5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a5e:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a66:	3b01      	subs	r3, #1
 8004a68:	021b      	lsls	r3, r3, #8
 8004a6a:	4922      	ldr	r1, [pc, #136]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d01d      	beq.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x612>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a82:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004a86:	d118      	bne.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004a88:	4b1a      	ldr	r3, [pc, #104]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a8e:	0e1b      	lsrs	r3, r3, #24
 8004a90:	f003 030f 	and.w	r3, r3, #15
 8004a94:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	699a      	ldr	r2, [r3, #24]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	69db      	ldr	r3, [r3, #28]
 8004a9e:	019b      	lsls	r3, r3, #6
 8004aa0:	431a      	orrs	r2, r3
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6a1b      	ldr	r3, [r3, #32]
 8004aa6:	085b      	lsrs	r3, r3, #1
 8004aa8:	3b01      	subs	r3, #1
 8004aaa:	041b      	lsls	r3, r3, #16
 8004aac:	431a      	orrs	r2, r3
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	061b      	lsls	r3, r3, #24
 8004ab2:	4910      	ldr	r1, [pc, #64]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004aba:	4b0f      	ldr	r3, [pc, #60]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8004abc:	2201      	movs	r2, #1
 8004abe:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004ac0:	f7fc ffac 	bl	8001a1c <HAL_GetTick>
 8004ac4:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004ac6:	e008      	b.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004ac8:	f7fc ffa8 	bl	8001a1c <HAL_GetTick>
 8004acc:	4602      	mov	r2, r0
 8004ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	2b02      	cmp	r3, #2
 8004ad4:	d901      	bls.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e007      	b.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004ada:	4b06      	ldr	r3, [pc, #24]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004ae2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004ae6:	d1ef      	bne.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8004ae8:	2300      	movs	r3, #0
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3730      	adds	r7, #48	@ 0x30
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	bf00      	nop
 8004af4:	40023800 	.word	0x40023800
 8004af8:	42470070 	.word	0x42470070

08004afc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004afc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b00:	b0ae      	sub	sp, #184	@ 0xb8
 8004b02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004b04:	2300      	movs	r3, #0
 8004b06:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8004b10:	2300      	movs	r3, #0
 8004b12:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8004b16:	2300      	movs	r3, #0
 8004b18:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b22:	4bcb      	ldr	r3, [pc, #812]	@ (8004e50 <HAL_RCC_GetSysClockFreq+0x354>)
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	f003 030c 	and.w	r3, r3, #12
 8004b2a:	2b0c      	cmp	r3, #12
 8004b2c:	f200 8206 	bhi.w	8004f3c <HAL_RCC_GetSysClockFreq+0x440>
 8004b30:	a201      	add	r2, pc, #4	@ (adr r2, 8004b38 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b36:	bf00      	nop
 8004b38:	08004b6d 	.word	0x08004b6d
 8004b3c:	08004f3d 	.word	0x08004f3d
 8004b40:	08004f3d 	.word	0x08004f3d
 8004b44:	08004f3d 	.word	0x08004f3d
 8004b48:	08004b75 	.word	0x08004b75
 8004b4c:	08004f3d 	.word	0x08004f3d
 8004b50:	08004f3d 	.word	0x08004f3d
 8004b54:	08004f3d 	.word	0x08004f3d
 8004b58:	08004b7d 	.word	0x08004b7d
 8004b5c:	08004f3d 	.word	0x08004f3d
 8004b60:	08004f3d 	.word	0x08004f3d
 8004b64:	08004f3d 	.word	0x08004f3d
 8004b68:	08004d6d 	.word	0x08004d6d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b6c:	4bb9      	ldr	r3, [pc, #740]	@ (8004e54 <HAL_RCC_GetSysClockFreq+0x358>)
 8004b6e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8004b72:	e1e7      	b.n	8004f44 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b74:	4bb8      	ldr	r3, [pc, #736]	@ (8004e58 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004b76:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004b7a:	e1e3      	b.n	8004f44 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b7c:	4bb4      	ldr	r3, [pc, #720]	@ (8004e50 <HAL_RCC_GetSysClockFreq+0x354>)
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b84:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b88:	4bb1      	ldr	r3, [pc, #708]	@ (8004e50 <HAL_RCC_GetSysClockFreq+0x354>)
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d071      	beq.n	8004c78 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b94:	4bae      	ldr	r3, [pc, #696]	@ (8004e50 <HAL_RCC_GetSysClockFreq+0x354>)
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	099b      	lsrs	r3, r3, #6
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004ba0:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004ba4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004ba8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bac:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004bb6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004bba:	4622      	mov	r2, r4
 8004bbc:	462b      	mov	r3, r5
 8004bbe:	f04f 0000 	mov.w	r0, #0
 8004bc2:	f04f 0100 	mov.w	r1, #0
 8004bc6:	0159      	lsls	r1, r3, #5
 8004bc8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004bcc:	0150      	lsls	r0, r2, #5
 8004bce:	4602      	mov	r2, r0
 8004bd0:	460b      	mov	r3, r1
 8004bd2:	4621      	mov	r1, r4
 8004bd4:	1a51      	subs	r1, r2, r1
 8004bd6:	6439      	str	r1, [r7, #64]	@ 0x40
 8004bd8:	4629      	mov	r1, r5
 8004bda:	eb63 0301 	sbc.w	r3, r3, r1
 8004bde:	647b      	str	r3, [r7, #68]	@ 0x44
 8004be0:	f04f 0200 	mov.w	r2, #0
 8004be4:	f04f 0300 	mov.w	r3, #0
 8004be8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8004bec:	4649      	mov	r1, r9
 8004bee:	018b      	lsls	r3, r1, #6
 8004bf0:	4641      	mov	r1, r8
 8004bf2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004bf6:	4641      	mov	r1, r8
 8004bf8:	018a      	lsls	r2, r1, #6
 8004bfa:	4641      	mov	r1, r8
 8004bfc:	1a51      	subs	r1, r2, r1
 8004bfe:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004c00:	4649      	mov	r1, r9
 8004c02:	eb63 0301 	sbc.w	r3, r3, r1
 8004c06:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c08:	f04f 0200 	mov.w	r2, #0
 8004c0c:	f04f 0300 	mov.w	r3, #0
 8004c10:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8004c14:	4649      	mov	r1, r9
 8004c16:	00cb      	lsls	r3, r1, #3
 8004c18:	4641      	mov	r1, r8
 8004c1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c1e:	4641      	mov	r1, r8
 8004c20:	00ca      	lsls	r2, r1, #3
 8004c22:	4610      	mov	r0, r2
 8004c24:	4619      	mov	r1, r3
 8004c26:	4603      	mov	r3, r0
 8004c28:	4622      	mov	r2, r4
 8004c2a:	189b      	adds	r3, r3, r2
 8004c2c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c2e:	462b      	mov	r3, r5
 8004c30:	460a      	mov	r2, r1
 8004c32:	eb42 0303 	adc.w	r3, r2, r3
 8004c36:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c38:	f04f 0200 	mov.w	r2, #0
 8004c3c:	f04f 0300 	mov.w	r3, #0
 8004c40:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004c44:	4629      	mov	r1, r5
 8004c46:	024b      	lsls	r3, r1, #9
 8004c48:	4621      	mov	r1, r4
 8004c4a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004c4e:	4621      	mov	r1, r4
 8004c50:	024a      	lsls	r2, r1, #9
 8004c52:	4610      	mov	r0, r2
 8004c54:	4619      	mov	r1, r3
 8004c56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004c60:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004c64:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004c68:	f7fb ffbe 	bl	8000be8 <__aeabi_uldivmod>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	460b      	mov	r3, r1
 8004c70:	4613      	mov	r3, r2
 8004c72:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004c76:	e067      	b.n	8004d48 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c78:	4b75      	ldr	r3, [pc, #468]	@ (8004e50 <HAL_RCC_GetSysClockFreq+0x354>)
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	099b      	lsrs	r3, r3, #6
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004c84:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004c88:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004c8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c90:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004c92:	2300      	movs	r3, #0
 8004c94:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004c96:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8004c9a:	4622      	mov	r2, r4
 8004c9c:	462b      	mov	r3, r5
 8004c9e:	f04f 0000 	mov.w	r0, #0
 8004ca2:	f04f 0100 	mov.w	r1, #0
 8004ca6:	0159      	lsls	r1, r3, #5
 8004ca8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004cac:	0150      	lsls	r0, r2, #5
 8004cae:	4602      	mov	r2, r0
 8004cb0:	460b      	mov	r3, r1
 8004cb2:	4621      	mov	r1, r4
 8004cb4:	1a51      	subs	r1, r2, r1
 8004cb6:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004cb8:	4629      	mov	r1, r5
 8004cba:	eb63 0301 	sbc.w	r3, r3, r1
 8004cbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004cc0:	f04f 0200 	mov.w	r2, #0
 8004cc4:	f04f 0300 	mov.w	r3, #0
 8004cc8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8004ccc:	4649      	mov	r1, r9
 8004cce:	018b      	lsls	r3, r1, #6
 8004cd0:	4641      	mov	r1, r8
 8004cd2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004cd6:	4641      	mov	r1, r8
 8004cd8:	018a      	lsls	r2, r1, #6
 8004cda:	4641      	mov	r1, r8
 8004cdc:	ebb2 0a01 	subs.w	sl, r2, r1
 8004ce0:	4649      	mov	r1, r9
 8004ce2:	eb63 0b01 	sbc.w	fp, r3, r1
 8004ce6:	f04f 0200 	mov.w	r2, #0
 8004cea:	f04f 0300 	mov.w	r3, #0
 8004cee:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004cf2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004cf6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004cfa:	4692      	mov	sl, r2
 8004cfc:	469b      	mov	fp, r3
 8004cfe:	4623      	mov	r3, r4
 8004d00:	eb1a 0303 	adds.w	r3, sl, r3
 8004d04:	623b      	str	r3, [r7, #32]
 8004d06:	462b      	mov	r3, r5
 8004d08:	eb4b 0303 	adc.w	r3, fp, r3
 8004d0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d0e:	f04f 0200 	mov.w	r2, #0
 8004d12:	f04f 0300 	mov.w	r3, #0
 8004d16:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004d1a:	4629      	mov	r1, r5
 8004d1c:	028b      	lsls	r3, r1, #10
 8004d1e:	4621      	mov	r1, r4
 8004d20:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d24:	4621      	mov	r1, r4
 8004d26:	028a      	lsls	r2, r1, #10
 8004d28:	4610      	mov	r0, r2
 8004d2a:	4619      	mov	r1, r3
 8004d2c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004d30:	2200      	movs	r2, #0
 8004d32:	673b      	str	r3, [r7, #112]	@ 0x70
 8004d34:	677a      	str	r2, [r7, #116]	@ 0x74
 8004d36:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8004d3a:	f7fb ff55 	bl	8000be8 <__aeabi_uldivmod>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	460b      	mov	r3, r1
 8004d42:	4613      	mov	r3, r2
 8004d44:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004d48:	4b41      	ldr	r3, [pc, #260]	@ (8004e50 <HAL_RCC_GetSysClockFreq+0x354>)
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	0c1b      	lsrs	r3, r3, #16
 8004d4e:	f003 0303 	and.w	r3, r3, #3
 8004d52:	3301      	adds	r3, #1
 8004d54:	005b      	lsls	r3, r3, #1
 8004d56:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8004d5a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004d5e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d66:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004d6a:	e0eb      	b.n	8004f44 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d6c:	4b38      	ldr	r3, [pc, #224]	@ (8004e50 <HAL_RCC_GetSysClockFreq+0x354>)
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004d74:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d78:	4b35      	ldr	r3, [pc, #212]	@ (8004e50 <HAL_RCC_GetSysClockFreq+0x354>)
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d06b      	beq.n	8004e5c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d84:	4b32      	ldr	r3, [pc, #200]	@ (8004e50 <HAL_RCC_GetSysClockFreq+0x354>)
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	099b      	lsrs	r3, r3, #6
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004d8e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004d90:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004d92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d96:	663b      	str	r3, [r7, #96]	@ 0x60
 8004d98:	2300      	movs	r3, #0
 8004d9a:	667b      	str	r3, [r7, #100]	@ 0x64
 8004d9c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004da0:	4622      	mov	r2, r4
 8004da2:	462b      	mov	r3, r5
 8004da4:	f04f 0000 	mov.w	r0, #0
 8004da8:	f04f 0100 	mov.w	r1, #0
 8004dac:	0159      	lsls	r1, r3, #5
 8004dae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004db2:	0150      	lsls	r0, r2, #5
 8004db4:	4602      	mov	r2, r0
 8004db6:	460b      	mov	r3, r1
 8004db8:	4621      	mov	r1, r4
 8004dba:	1a51      	subs	r1, r2, r1
 8004dbc:	61b9      	str	r1, [r7, #24]
 8004dbe:	4629      	mov	r1, r5
 8004dc0:	eb63 0301 	sbc.w	r3, r3, r1
 8004dc4:	61fb      	str	r3, [r7, #28]
 8004dc6:	f04f 0200 	mov.w	r2, #0
 8004dca:	f04f 0300 	mov.w	r3, #0
 8004dce:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004dd2:	4659      	mov	r1, fp
 8004dd4:	018b      	lsls	r3, r1, #6
 8004dd6:	4651      	mov	r1, sl
 8004dd8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004ddc:	4651      	mov	r1, sl
 8004dde:	018a      	lsls	r2, r1, #6
 8004de0:	4651      	mov	r1, sl
 8004de2:	ebb2 0801 	subs.w	r8, r2, r1
 8004de6:	4659      	mov	r1, fp
 8004de8:	eb63 0901 	sbc.w	r9, r3, r1
 8004dec:	f04f 0200 	mov.w	r2, #0
 8004df0:	f04f 0300 	mov.w	r3, #0
 8004df4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004df8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004dfc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e00:	4690      	mov	r8, r2
 8004e02:	4699      	mov	r9, r3
 8004e04:	4623      	mov	r3, r4
 8004e06:	eb18 0303 	adds.w	r3, r8, r3
 8004e0a:	613b      	str	r3, [r7, #16]
 8004e0c:	462b      	mov	r3, r5
 8004e0e:	eb49 0303 	adc.w	r3, r9, r3
 8004e12:	617b      	str	r3, [r7, #20]
 8004e14:	f04f 0200 	mov.w	r2, #0
 8004e18:	f04f 0300 	mov.w	r3, #0
 8004e1c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004e20:	4629      	mov	r1, r5
 8004e22:	024b      	lsls	r3, r1, #9
 8004e24:	4621      	mov	r1, r4
 8004e26:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004e2a:	4621      	mov	r1, r4
 8004e2c:	024a      	lsls	r2, r1, #9
 8004e2e:	4610      	mov	r0, r2
 8004e30:	4619      	mov	r1, r3
 8004e32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004e36:	2200      	movs	r2, #0
 8004e38:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004e3a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004e3c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004e40:	f7fb fed2 	bl	8000be8 <__aeabi_uldivmod>
 8004e44:	4602      	mov	r2, r0
 8004e46:	460b      	mov	r3, r1
 8004e48:	4613      	mov	r3, r2
 8004e4a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004e4e:	e065      	b.n	8004f1c <HAL_RCC_GetSysClockFreq+0x420>
 8004e50:	40023800 	.word	0x40023800
 8004e54:	00f42400 	.word	0x00f42400
 8004e58:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e5c:	4b3d      	ldr	r3, [pc, #244]	@ (8004f54 <HAL_RCC_GetSysClockFreq+0x458>)
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	099b      	lsrs	r3, r3, #6
 8004e62:	2200      	movs	r2, #0
 8004e64:	4618      	mov	r0, r3
 8004e66:	4611      	mov	r1, r2
 8004e68:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004e6c:	653b      	str	r3, [r7, #80]	@ 0x50
 8004e6e:	2300      	movs	r3, #0
 8004e70:	657b      	str	r3, [r7, #84]	@ 0x54
 8004e72:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8004e76:	4642      	mov	r2, r8
 8004e78:	464b      	mov	r3, r9
 8004e7a:	f04f 0000 	mov.w	r0, #0
 8004e7e:	f04f 0100 	mov.w	r1, #0
 8004e82:	0159      	lsls	r1, r3, #5
 8004e84:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e88:	0150      	lsls	r0, r2, #5
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	460b      	mov	r3, r1
 8004e8e:	4641      	mov	r1, r8
 8004e90:	1a51      	subs	r1, r2, r1
 8004e92:	60b9      	str	r1, [r7, #8]
 8004e94:	4649      	mov	r1, r9
 8004e96:	eb63 0301 	sbc.w	r3, r3, r1
 8004e9a:	60fb      	str	r3, [r7, #12]
 8004e9c:	f04f 0200 	mov.w	r2, #0
 8004ea0:	f04f 0300 	mov.w	r3, #0
 8004ea4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004ea8:	4659      	mov	r1, fp
 8004eaa:	018b      	lsls	r3, r1, #6
 8004eac:	4651      	mov	r1, sl
 8004eae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004eb2:	4651      	mov	r1, sl
 8004eb4:	018a      	lsls	r2, r1, #6
 8004eb6:	4651      	mov	r1, sl
 8004eb8:	1a54      	subs	r4, r2, r1
 8004eba:	4659      	mov	r1, fp
 8004ebc:	eb63 0501 	sbc.w	r5, r3, r1
 8004ec0:	f04f 0200 	mov.w	r2, #0
 8004ec4:	f04f 0300 	mov.w	r3, #0
 8004ec8:	00eb      	lsls	r3, r5, #3
 8004eca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ece:	00e2      	lsls	r2, r4, #3
 8004ed0:	4614      	mov	r4, r2
 8004ed2:	461d      	mov	r5, r3
 8004ed4:	4643      	mov	r3, r8
 8004ed6:	18e3      	adds	r3, r4, r3
 8004ed8:	603b      	str	r3, [r7, #0]
 8004eda:	464b      	mov	r3, r9
 8004edc:	eb45 0303 	adc.w	r3, r5, r3
 8004ee0:	607b      	str	r3, [r7, #4]
 8004ee2:	f04f 0200 	mov.w	r2, #0
 8004ee6:	f04f 0300 	mov.w	r3, #0
 8004eea:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004eee:	4629      	mov	r1, r5
 8004ef0:	028b      	lsls	r3, r1, #10
 8004ef2:	4621      	mov	r1, r4
 8004ef4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004ef8:	4621      	mov	r1, r4
 8004efa:	028a      	lsls	r2, r1, #10
 8004efc:	4610      	mov	r0, r2
 8004efe:	4619      	mov	r1, r3
 8004f00:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004f04:	2200      	movs	r2, #0
 8004f06:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f08:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004f0a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004f0e:	f7fb fe6b 	bl	8000be8 <__aeabi_uldivmod>
 8004f12:	4602      	mov	r2, r0
 8004f14:	460b      	mov	r3, r1
 8004f16:	4613      	mov	r3, r2
 8004f18:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004f1c:	4b0d      	ldr	r3, [pc, #52]	@ (8004f54 <HAL_RCC_GetSysClockFreq+0x458>)
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	0f1b      	lsrs	r3, r3, #28
 8004f22:	f003 0307 	and.w	r3, r3, #7
 8004f26:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8004f2a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004f2e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f36:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004f3a:	e003      	b.n	8004f44 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f3c:	4b06      	ldr	r3, [pc, #24]	@ (8004f58 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004f3e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004f42:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f44:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	37b8      	adds	r7, #184	@ 0xb8
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f52:	bf00      	nop
 8004f54:	40023800 	.word	0x40023800
 8004f58:	00f42400 	.word	0x00f42400

08004f5c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b086      	sub	sp, #24
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d101      	bne.n	8004f6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e28d      	b.n	800548a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f003 0301 	and.w	r3, r3, #1
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	f000 8083 	beq.w	8005082 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004f7c:	4b94      	ldr	r3, [pc, #592]	@ (80051d0 <HAL_RCC_OscConfig+0x274>)
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	f003 030c 	and.w	r3, r3, #12
 8004f84:	2b04      	cmp	r3, #4
 8004f86:	d019      	beq.n	8004fbc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004f88:	4b91      	ldr	r3, [pc, #580]	@ (80051d0 <HAL_RCC_OscConfig+0x274>)
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004f90:	2b08      	cmp	r3, #8
 8004f92:	d106      	bne.n	8004fa2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004f94:	4b8e      	ldr	r3, [pc, #568]	@ (80051d0 <HAL_RCC_OscConfig+0x274>)
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f9c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004fa0:	d00c      	beq.n	8004fbc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004fa2:	4b8b      	ldr	r3, [pc, #556]	@ (80051d0 <HAL_RCC_OscConfig+0x274>)
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004faa:	2b0c      	cmp	r3, #12
 8004fac:	d112      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004fae:	4b88      	ldr	r3, [pc, #544]	@ (80051d0 <HAL_RCC_OscConfig+0x274>)
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fb6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004fba:	d10b      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fbc:	4b84      	ldr	r3, [pc, #528]	@ (80051d0 <HAL_RCC_OscConfig+0x274>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d05b      	beq.n	8005080 <HAL_RCC_OscConfig+0x124>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d157      	bne.n	8005080 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e25a      	b.n	800548a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fdc:	d106      	bne.n	8004fec <HAL_RCC_OscConfig+0x90>
 8004fde:	4b7c      	ldr	r3, [pc, #496]	@ (80051d0 <HAL_RCC_OscConfig+0x274>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a7b      	ldr	r2, [pc, #492]	@ (80051d0 <HAL_RCC_OscConfig+0x274>)
 8004fe4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fe8:	6013      	str	r3, [r2, #0]
 8004fea:	e01d      	b.n	8005028 <HAL_RCC_OscConfig+0xcc>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004ff4:	d10c      	bne.n	8005010 <HAL_RCC_OscConfig+0xb4>
 8004ff6:	4b76      	ldr	r3, [pc, #472]	@ (80051d0 <HAL_RCC_OscConfig+0x274>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a75      	ldr	r2, [pc, #468]	@ (80051d0 <HAL_RCC_OscConfig+0x274>)
 8004ffc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005000:	6013      	str	r3, [r2, #0]
 8005002:	4b73      	ldr	r3, [pc, #460]	@ (80051d0 <HAL_RCC_OscConfig+0x274>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a72      	ldr	r2, [pc, #456]	@ (80051d0 <HAL_RCC_OscConfig+0x274>)
 8005008:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800500c:	6013      	str	r3, [r2, #0]
 800500e:	e00b      	b.n	8005028 <HAL_RCC_OscConfig+0xcc>
 8005010:	4b6f      	ldr	r3, [pc, #444]	@ (80051d0 <HAL_RCC_OscConfig+0x274>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a6e      	ldr	r2, [pc, #440]	@ (80051d0 <HAL_RCC_OscConfig+0x274>)
 8005016:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800501a:	6013      	str	r3, [r2, #0]
 800501c:	4b6c      	ldr	r3, [pc, #432]	@ (80051d0 <HAL_RCC_OscConfig+0x274>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a6b      	ldr	r2, [pc, #428]	@ (80051d0 <HAL_RCC_OscConfig+0x274>)
 8005022:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005026:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d013      	beq.n	8005058 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005030:	f7fc fcf4 	bl	8001a1c <HAL_GetTick>
 8005034:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005036:	e008      	b.n	800504a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005038:	f7fc fcf0 	bl	8001a1c <HAL_GetTick>
 800503c:	4602      	mov	r2, r0
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	1ad3      	subs	r3, r2, r3
 8005042:	2b64      	cmp	r3, #100	@ 0x64
 8005044:	d901      	bls.n	800504a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005046:	2303      	movs	r3, #3
 8005048:	e21f      	b.n	800548a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800504a:	4b61      	ldr	r3, [pc, #388]	@ (80051d0 <HAL_RCC_OscConfig+0x274>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005052:	2b00      	cmp	r3, #0
 8005054:	d0f0      	beq.n	8005038 <HAL_RCC_OscConfig+0xdc>
 8005056:	e014      	b.n	8005082 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005058:	f7fc fce0 	bl	8001a1c <HAL_GetTick>
 800505c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800505e:	e008      	b.n	8005072 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005060:	f7fc fcdc 	bl	8001a1c <HAL_GetTick>
 8005064:	4602      	mov	r2, r0
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	1ad3      	subs	r3, r2, r3
 800506a:	2b64      	cmp	r3, #100	@ 0x64
 800506c:	d901      	bls.n	8005072 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800506e:	2303      	movs	r3, #3
 8005070:	e20b      	b.n	800548a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005072:	4b57      	ldr	r3, [pc, #348]	@ (80051d0 <HAL_RCC_OscConfig+0x274>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800507a:	2b00      	cmp	r3, #0
 800507c:	d1f0      	bne.n	8005060 <HAL_RCC_OscConfig+0x104>
 800507e:	e000      	b.n	8005082 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005080:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 0302 	and.w	r3, r3, #2
 800508a:	2b00      	cmp	r3, #0
 800508c:	d06f      	beq.n	800516e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800508e:	4b50      	ldr	r3, [pc, #320]	@ (80051d0 <HAL_RCC_OscConfig+0x274>)
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	f003 030c 	and.w	r3, r3, #12
 8005096:	2b00      	cmp	r3, #0
 8005098:	d017      	beq.n	80050ca <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800509a:	4b4d      	ldr	r3, [pc, #308]	@ (80051d0 <HAL_RCC_OscConfig+0x274>)
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80050a2:	2b08      	cmp	r3, #8
 80050a4:	d105      	bne.n	80050b2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80050a6:	4b4a      	ldr	r3, [pc, #296]	@ (80051d0 <HAL_RCC_OscConfig+0x274>)
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d00b      	beq.n	80050ca <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050b2:	4b47      	ldr	r3, [pc, #284]	@ (80051d0 <HAL_RCC_OscConfig+0x274>)
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80050ba:	2b0c      	cmp	r3, #12
 80050bc:	d11c      	bne.n	80050f8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050be:	4b44      	ldr	r3, [pc, #272]	@ (80051d0 <HAL_RCC_OscConfig+0x274>)
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d116      	bne.n	80050f8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050ca:	4b41      	ldr	r3, [pc, #260]	@ (80051d0 <HAL_RCC_OscConfig+0x274>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 0302 	and.w	r3, r3, #2
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d005      	beq.n	80050e2 <HAL_RCC_OscConfig+0x186>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	68db      	ldr	r3, [r3, #12]
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d001      	beq.n	80050e2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	e1d3      	b.n	800548a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050e2:	4b3b      	ldr	r3, [pc, #236]	@ (80051d0 <HAL_RCC_OscConfig+0x274>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	691b      	ldr	r3, [r3, #16]
 80050ee:	00db      	lsls	r3, r3, #3
 80050f0:	4937      	ldr	r1, [pc, #220]	@ (80051d0 <HAL_RCC_OscConfig+0x274>)
 80050f2:	4313      	orrs	r3, r2
 80050f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050f6:	e03a      	b.n	800516e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	68db      	ldr	r3, [r3, #12]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d020      	beq.n	8005142 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005100:	4b34      	ldr	r3, [pc, #208]	@ (80051d4 <HAL_RCC_OscConfig+0x278>)
 8005102:	2201      	movs	r2, #1
 8005104:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005106:	f7fc fc89 	bl	8001a1c <HAL_GetTick>
 800510a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800510c:	e008      	b.n	8005120 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800510e:	f7fc fc85 	bl	8001a1c <HAL_GetTick>
 8005112:	4602      	mov	r2, r0
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	1ad3      	subs	r3, r2, r3
 8005118:	2b02      	cmp	r3, #2
 800511a:	d901      	bls.n	8005120 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800511c:	2303      	movs	r3, #3
 800511e:	e1b4      	b.n	800548a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005120:	4b2b      	ldr	r3, [pc, #172]	@ (80051d0 <HAL_RCC_OscConfig+0x274>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f003 0302 	and.w	r3, r3, #2
 8005128:	2b00      	cmp	r3, #0
 800512a:	d0f0      	beq.n	800510e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800512c:	4b28      	ldr	r3, [pc, #160]	@ (80051d0 <HAL_RCC_OscConfig+0x274>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	691b      	ldr	r3, [r3, #16]
 8005138:	00db      	lsls	r3, r3, #3
 800513a:	4925      	ldr	r1, [pc, #148]	@ (80051d0 <HAL_RCC_OscConfig+0x274>)
 800513c:	4313      	orrs	r3, r2
 800513e:	600b      	str	r3, [r1, #0]
 8005140:	e015      	b.n	800516e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005142:	4b24      	ldr	r3, [pc, #144]	@ (80051d4 <HAL_RCC_OscConfig+0x278>)
 8005144:	2200      	movs	r2, #0
 8005146:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005148:	f7fc fc68 	bl	8001a1c <HAL_GetTick>
 800514c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800514e:	e008      	b.n	8005162 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005150:	f7fc fc64 	bl	8001a1c <HAL_GetTick>
 8005154:	4602      	mov	r2, r0
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	1ad3      	subs	r3, r2, r3
 800515a:	2b02      	cmp	r3, #2
 800515c:	d901      	bls.n	8005162 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800515e:	2303      	movs	r3, #3
 8005160:	e193      	b.n	800548a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005162:	4b1b      	ldr	r3, [pc, #108]	@ (80051d0 <HAL_RCC_OscConfig+0x274>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f003 0302 	and.w	r3, r3, #2
 800516a:	2b00      	cmp	r3, #0
 800516c:	d1f0      	bne.n	8005150 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f003 0308 	and.w	r3, r3, #8
 8005176:	2b00      	cmp	r3, #0
 8005178:	d036      	beq.n	80051e8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	695b      	ldr	r3, [r3, #20]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d016      	beq.n	80051b0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005182:	4b15      	ldr	r3, [pc, #84]	@ (80051d8 <HAL_RCC_OscConfig+0x27c>)
 8005184:	2201      	movs	r2, #1
 8005186:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005188:	f7fc fc48 	bl	8001a1c <HAL_GetTick>
 800518c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800518e:	e008      	b.n	80051a2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005190:	f7fc fc44 	bl	8001a1c <HAL_GetTick>
 8005194:	4602      	mov	r2, r0
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	1ad3      	subs	r3, r2, r3
 800519a:	2b02      	cmp	r3, #2
 800519c:	d901      	bls.n	80051a2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800519e:	2303      	movs	r3, #3
 80051a0:	e173      	b.n	800548a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051a2:	4b0b      	ldr	r3, [pc, #44]	@ (80051d0 <HAL_RCC_OscConfig+0x274>)
 80051a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051a6:	f003 0302 	and.w	r3, r3, #2
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d0f0      	beq.n	8005190 <HAL_RCC_OscConfig+0x234>
 80051ae:	e01b      	b.n	80051e8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051b0:	4b09      	ldr	r3, [pc, #36]	@ (80051d8 <HAL_RCC_OscConfig+0x27c>)
 80051b2:	2200      	movs	r2, #0
 80051b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051b6:	f7fc fc31 	bl	8001a1c <HAL_GetTick>
 80051ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051bc:	e00e      	b.n	80051dc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80051be:	f7fc fc2d 	bl	8001a1c <HAL_GetTick>
 80051c2:	4602      	mov	r2, r0
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	1ad3      	subs	r3, r2, r3
 80051c8:	2b02      	cmp	r3, #2
 80051ca:	d907      	bls.n	80051dc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80051cc:	2303      	movs	r3, #3
 80051ce:	e15c      	b.n	800548a <HAL_RCC_OscConfig+0x52e>
 80051d0:	40023800 	.word	0x40023800
 80051d4:	42470000 	.word	0x42470000
 80051d8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051dc:	4b8a      	ldr	r3, [pc, #552]	@ (8005408 <HAL_RCC_OscConfig+0x4ac>)
 80051de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051e0:	f003 0302 	and.w	r3, r3, #2
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d1ea      	bne.n	80051be <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 0304 	and.w	r3, r3, #4
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	f000 8097 	beq.w	8005324 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051f6:	2300      	movs	r3, #0
 80051f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051fa:	4b83      	ldr	r3, [pc, #524]	@ (8005408 <HAL_RCC_OscConfig+0x4ac>)
 80051fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005202:	2b00      	cmp	r3, #0
 8005204:	d10f      	bne.n	8005226 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005206:	2300      	movs	r3, #0
 8005208:	60bb      	str	r3, [r7, #8]
 800520a:	4b7f      	ldr	r3, [pc, #508]	@ (8005408 <HAL_RCC_OscConfig+0x4ac>)
 800520c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800520e:	4a7e      	ldr	r2, [pc, #504]	@ (8005408 <HAL_RCC_OscConfig+0x4ac>)
 8005210:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005214:	6413      	str	r3, [r2, #64]	@ 0x40
 8005216:	4b7c      	ldr	r3, [pc, #496]	@ (8005408 <HAL_RCC_OscConfig+0x4ac>)
 8005218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800521a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800521e:	60bb      	str	r3, [r7, #8]
 8005220:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005222:	2301      	movs	r3, #1
 8005224:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005226:	4b79      	ldr	r3, [pc, #484]	@ (800540c <HAL_RCC_OscConfig+0x4b0>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800522e:	2b00      	cmp	r3, #0
 8005230:	d118      	bne.n	8005264 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005232:	4b76      	ldr	r3, [pc, #472]	@ (800540c <HAL_RCC_OscConfig+0x4b0>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a75      	ldr	r2, [pc, #468]	@ (800540c <HAL_RCC_OscConfig+0x4b0>)
 8005238:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800523c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800523e:	f7fc fbed 	bl	8001a1c <HAL_GetTick>
 8005242:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005244:	e008      	b.n	8005258 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005246:	f7fc fbe9 	bl	8001a1c <HAL_GetTick>
 800524a:	4602      	mov	r2, r0
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	1ad3      	subs	r3, r2, r3
 8005250:	2b02      	cmp	r3, #2
 8005252:	d901      	bls.n	8005258 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005254:	2303      	movs	r3, #3
 8005256:	e118      	b.n	800548a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005258:	4b6c      	ldr	r3, [pc, #432]	@ (800540c <HAL_RCC_OscConfig+0x4b0>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005260:	2b00      	cmp	r3, #0
 8005262:	d0f0      	beq.n	8005246 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	2b01      	cmp	r3, #1
 800526a:	d106      	bne.n	800527a <HAL_RCC_OscConfig+0x31e>
 800526c:	4b66      	ldr	r3, [pc, #408]	@ (8005408 <HAL_RCC_OscConfig+0x4ac>)
 800526e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005270:	4a65      	ldr	r2, [pc, #404]	@ (8005408 <HAL_RCC_OscConfig+0x4ac>)
 8005272:	f043 0301 	orr.w	r3, r3, #1
 8005276:	6713      	str	r3, [r2, #112]	@ 0x70
 8005278:	e01c      	b.n	80052b4 <HAL_RCC_OscConfig+0x358>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	2b05      	cmp	r3, #5
 8005280:	d10c      	bne.n	800529c <HAL_RCC_OscConfig+0x340>
 8005282:	4b61      	ldr	r3, [pc, #388]	@ (8005408 <HAL_RCC_OscConfig+0x4ac>)
 8005284:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005286:	4a60      	ldr	r2, [pc, #384]	@ (8005408 <HAL_RCC_OscConfig+0x4ac>)
 8005288:	f043 0304 	orr.w	r3, r3, #4
 800528c:	6713      	str	r3, [r2, #112]	@ 0x70
 800528e:	4b5e      	ldr	r3, [pc, #376]	@ (8005408 <HAL_RCC_OscConfig+0x4ac>)
 8005290:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005292:	4a5d      	ldr	r2, [pc, #372]	@ (8005408 <HAL_RCC_OscConfig+0x4ac>)
 8005294:	f043 0301 	orr.w	r3, r3, #1
 8005298:	6713      	str	r3, [r2, #112]	@ 0x70
 800529a:	e00b      	b.n	80052b4 <HAL_RCC_OscConfig+0x358>
 800529c:	4b5a      	ldr	r3, [pc, #360]	@ (8005408 <HAL_RCC_OscConfig+0x4ac>)
 800529e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052a0:	4a59      	ldr	r2, [pc, #356]	@ (8005408 <HAL_RCC_OscConfig+0x4ac>)
 80052a2:	f023 0301 	bic.w	r3, r3, #1
 80052a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80052a8:	4b57      	ldr	r3, [pc, #348]	@ (8005408 <HAL_RCC_OscConfig+0x4ac>)
 80052aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052ac:	4a56      	ldr	r2, [pc, #344]	@ (8005408 <HAL_RCC_OscConfig+0x4ac>)
 80052ae:	f023 0304 	bic.w	r3, r3, #4
 80052b2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d015      	beq.n	80052e8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052bc:	f7fc fbae 	bl	8001a1c <HAL_GetTick>
 80052c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052c2:	e00a      	b.n	80052da <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052c4:	f7fc fbaa 	bl	8001a1c <HAL_GetTick>
 80052c8:	4602      	mov	r2, r0
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	1ad3      	subs	r3, r2, r3
 80052ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d901      	bls.n	80052da <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80052d6:	2303      	movs	r3, #3
 80052d8:	e0d7      	b.n	800548a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052da:	4b4b      	ldr	r3, [pc, #300]	@ (8005408 <HAL_RCC_OscConfig+0x4ac>)
 80052dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052de:	f003 0302 	and.w	r3, r3, #2
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d0ee      	beq.n	80052c4 <HAL_RCC_OscConfig+0x368>
 80052e6:	e014      	b.n	8005312 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052e8:	f7fc fb98 	bl	8001a1c <HAL_GetTick>
 80052ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052ee:	e00a      	b.n	8005306 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052f0:	f7fc fb94 	bl	8001a1c <HAL_GetTick>
 80052f4:	4602      	mov	r2, r0
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	1ad3      	subs	r3, r2, r3
 80052fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052fe:	4293      	cmp	r3, r2
 8005300:	d901      	bls.n	8005306 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005302:	2303      	movs	r3, #3
 8005304:	e0c1      	b.n	800548a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005306:	4b40      	ldr	r3, [pc, #256]	@ (8005408 <HAL_RCC_OscConfig+0x4ac>)
 8005308:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800530a:	f003 0302 	and.w	r3, r3, #2
 800530e:	2b00      	cmp	r3, #0
 8005310:	d1ee      	bne.n	80052f0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005312:	7dfb      	ldrb	r3, [r7, #23]
 8005314:	2b01      	cmp	r3, #1
 8005316:	d105      	bne.n	8005324 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005318:	4b3b      	ldr	r3, [pc, #236]	@ (8005408 <HAL_RCC_OscConfig+0x4ac>)
 800531a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800531c:	4a3a      	ldr	r2, [pc, #232]	@ (8005408 <HAL_RCC_OscConfig+0x4ac>)
 800531e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005322:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	699b      	ldr	r3, [r3, #24]
 8005328:	2b00      	cmp	r3, #0
 800532a:	f000 80ad 	beq.w	8005488 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800532e:	4b36      	ldr	r3, [pc, #216]	@ (8005408 <HAL_RCC_OscConfig+0x4ac>)
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	f003 030c 	and.w	r3, r3, #12
 8005336:	2b08      	cmp	r3, #8
 8005338:	d060      	beq.n	80053fc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	699b      	ldr	r3, [r3, #24]
 800533e:	2b02      	cmp	r3, #2
 8005340:	d145      	bne.n	80053ce <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005342:	4b33      	ldr	r3, [pc, #204]	@ (8005410 <HAL_RCC_OscConfig+0x4b4>)
 8005344:	2200      	movs	r2, #0
 8005346:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005348:	f7fc fb68 	bl	8001a1c <HAL_GetTick>
 800534c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800534e:	e008      	b.n	8005362 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005350:	f7fc fb64 	bl	8001a1c <HAL_GetTick>
 8005354:	4602      	mov	r2, r0
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	1ad3      	subs	r3, r2, r3
 800535a:	2b02      	cmp	r3, #2
 800535c:	d901      	bls.n	8005362 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800535e:	2303      	movs	r3, #3
 8005360:	e093      	b.n	800548a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005362:	4b29      	ldr	r3, [pc, #164]	@ (8005408 <HAL_RCC_OscConfig+0x4ac>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800536a:	2b00      	cmp	r3, #0
 800536c:	d1f0      	bne.n	8005350 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	69da      	ldr	r2, [r3, #28]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6a1b      	ldr	r3, [r3, #32]
 8005376:	431a      	orrs	r2, r3
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800537c:	019b      	lsls	r3, r3, #6
 800537e:	431a      	orrs	r2, r3
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005384:	085b      	lsrs	r3, r3, #1
 8005386:	3b01      	subs	r3, #1
 8005388:	041b      	lsls	r3, r3, #16
 800538a:	431a      	orrs	r2, r3
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005390:	061b      	lsls	r3, r3, #24
 8005392:	431a      	orrs	r2, r3
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005398:	071b      	lsls	r3, r3, #28
 800539a:	491b      	ldr	r1, [pc, #108]	@ (8005408 <HAL_RCC_OscConfig+0x4ac>)
 800539c:	4313      	orrs	r3, r2
 800539e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053a0:	4b1b      	ldr	r3, [pc, #108]	@ (8005410 <HAL_RCC_OscConfig+0x4b4>)
 80053a2:	2201      	movs	r2, #1
 80053a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053a6:	f7fc fb39 	bl	8001a1c <HAL_GetTick>
 80053aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053ac:	e008      	b.n	80053c0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053ae:	f7fc fb35 	bl	8001a1c <HAL_GetTick>
 80053b2:	4602      	mov	r2, r0
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	1ad3      	subs	r3, r2, r3
 80053b8:	2b02      	cmp	r3, #2
 80053ba:	d901      	bls.n	80053c0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80053bc:	2303      	movs	r3, #3
 80053be:	e064      	b.n	800548a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053c0:	4b11      	ldr	r3, [pc, #68]	@ (8005408 <HAL_RCC_OscConfig+0x4ac>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d0f0      	beq.n	80053ae <HAL_RCC_OscConfig+0x452>
 80053cc:	e05c      	b.n	8005488 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053ce:	4b10      	ldr	r3, [pc, #64]	@ (8005410 <HAL_RCC_OscConfig+0x4b4>)
 80053d0:	2200      	movs	r2, #0
 80053d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053d4:	f7fc fb22 	bl	8001a1c <HAL_GetTick>
 80053d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053da:	e008      	b.n	80053ee <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053dc:	f7fc fb1e 	bl	8001a1c <HAL_GetTick>
 80053e0:	4602      	mov	r2, r0
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	1ad3      	subs	r3, r2, r3
 80053e6:	2b02      	cmp	r3, #2
 80053e8:	d901      	bls.n	80053ee <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80053ea:	2303      	movs	r3, #3
 80053ec:	e04d      	b.n	800548a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053ee:	4b06      	ldr	r3, [pc, #24]	@ (8005408 <HAL_RCC_OscConfig+0x4ac>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d1f0      	bne.n	80053dc <HAL_RCC_OscConfig+0x480>
 80053fa:	e045      	b.n	8005488 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	699b      	ldr	r3, [r3, #24]
 8005400:	2b01      	cmp	r3, #1
 8005402:	d107      	bne.n	8005414 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	e040      	b.n	800548a <HAL_RCC_OscConfig+0x52e>
 8005408:	40023800 	.word	0x40023800
 800540c:	40007000 	.word	0x40007000
 8005410:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005414:	4b1f      	ldr	r3, [pc, #124]	@ (8005494 <HAL_RCC_OscConfig+0x538>)
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	699b      	ldr	r3, [r3, #24]
 800541e:	2b01      	cmp	r3, #1
 8005420:	d030      	beq.n	8005484 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800542c:	429a      	cmp	r2, r3
 800542e:	d129      	bne.n	8005484 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800543a:	429a      	cmp	r2, r3
 800543c:	d122      	bne.n	8005484 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800543e:	68fa      	ldr	r2, [r7, #12]
 8005440:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005444:	4013      	ands	r3, r2
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800544a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800544c:	4293      	cmp	r3, r2
 800544e:	d119      	bne.n	8005484 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800545a:	085b      	lsrs	r3, r3, #1
 800545c:	3b01      	subs	r3, #1
 800545e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005460:	429a      	cmp	r2, r3
 8005462:	d10f      	bne.n	8005484 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800546e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005470:	429a      	cmp	r2, r3
 8005472:	d107      	bne.n	8005484 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800547e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005480:	429a      	cmp	r2, r3
 8005482:	d001      	beq.n	8005488 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005484:	2301      	movs	r3, #1
 8005486:	e000      	b.n	800548a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005488:	2300      	movs	r3, #0
}
 800548a:	4618      	mov	r0, r3
 800548c:	3718      	adds	r7, #24
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}
 8005492:	bf00      	nop
 8005494:	40023800 	.word	0x40023800

08005498 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b082      	sub	sp, #8
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d101      	bne.n	80054aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	e041      	b.n	800552e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054b0:	b2db      	uxtb	r3, r3
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d106      	bne.n	80054c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2200      	movs	r2, #0
 80054ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f7fc f830 	bl	8001524 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2202      	movs	r2, #2
 80054c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	3304      	adds	r3, #4
 80054d4:	4619      	mov	r1, r3
 80054d6:	4610      	mov	r0, r2
 80054d8:	f000 fa10 	bl	80058fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2201      	movs	r2, #1
 80054e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2201      	movs	r2, #1
 80054e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2201      	movs	r2, #1
 80054f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2201      	movs	r2, #1
 80054f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2201      	movs	r2, #1
 8005500:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2201      	movs	r2, #1
 8005508:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2201      	movs	r2, #1
 8005510:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2201      	movs	r2, #1
 8005518:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2201      	movs	r2, #1
 8005520:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2201      	movs	r2, #1
 8005528:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800552c:	2300      	movs	r3, #0
}
 800552e:	4618      	mov	r0, r3
 8005530:	3708      	adds	r7, #8
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}

08005536 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005536:	b580      	push	{r7, lr}
 8005538:	b082      	sub	sp, #8
 800553a:	af00      	add	r7, sp, #0
 800553c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d101      	bne.n	8005548 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	e041      	b.n	80055cc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800554e:	b2db      	uxtb	r3, r3
 8005550:	2b00      	cmp	r3, #0
 8005552:	d106      	bne.n	8005562 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2200      	movs	r2, #0
 8005558:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f000 f839 	bl	80055d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2202      	movs	r2, #2
 8005566:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	3304      	adds	r3, #4
 8005572:	4619      	mov	r1, r3
 8005574:	4610      	mov	r0, r2
 8005576:	f000 f9c1 	bl	80058fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2201      	movs	r2, #1
 800557e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2201      	movs	r2, #1
 8005586:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2201      	movs	r2, #1
 800558e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2201      	movs	r2, #1
 8005596:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2201      	movs	r2, #1
 800559e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2201      	movs	r2, #1
 80055a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2201      	movs	r2, #1
 80055ae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2201      	movs	r2, #1
 80055b6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2201      	movs	r2, #1
 80055be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2201      	movs	r2, #1
 80055c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80055ca:	2300      	movs	r3, #0
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3708      	adds	r7, #8
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}

080055d4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b083      	sub	sp, #12
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80055dc:	bf00      	nop
 80055de:	370c      	adds	r7, #12
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr

080055e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b086      	sub	sp, #24
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	60f8      	str	r0, [r7, #12]
 80055f0:	60b9      	str	r1, [r7, #8]
 80055f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055f4:	2300      	movs	r3, #0
 80055f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d101      	bne.n	8005606 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005602:	2302      	movs	r3, #2
 8005604:	e0ae      	b.n	8005764 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2201      	movs	r2, #1
 800560a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2b0c      	cmp	r3, #12
 8005612:	f200 809f 	bhi.w	8005754 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005616:	a201      	add	r2, pc, #4	@ (adr r2, 800561c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800561c:	08005651 	.word	0x08005651
 8005620:	08005755 	.word	0x08005755
 8005624:	08005755 	.word	0x08005755
 8005628:	08005755 	.word	0x08005755
 800562c:	08005691 	.word	0x08005691
 8005630:	08005755 	.word	0x08005755
 8005634:	08005755 	.word	0x08005755
 8005638:	08005755 	.word	0x08005755
 800563c:	080056d3 	.word	0x080056d3
 8005640:	08005755 	.word	0x08005755
 8005644:	08005755 	.word	0x08005755
 8005648:	08005755 	.word	0x08005755
 800564c:	08005713 	.word	0x08005713
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	68b9      	ldr	r1, [r7, #8]
 8005656:	4618      	mov	r0, r3
 8005658:	f000 f9fc 	bl	8005a54 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	699a      	ldr	r2, [r3, #24]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f042 0208 	orr.w	r2, r2, #8
 800566a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	699a      	ldr	r2, [r3, #24]
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f022 0204 	bic.w	r2, r2, #4
 800567a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	6999      	ldr	r1, [r3, #24]
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	691a      	ldr	r2, [r3, #16]
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	430a      	orrs	r2, r1
 800568c:	619a      	str	r2, [r3, #24]
      break;
 800568e:	e064      	b.n	800575a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	68b9      	ldr	r1, [r7, #8]
 8005696:	4618      	mov	r0, r3
 8005698:	f000 fa4c 	bl	8005b34 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	699a      	ldr	r2, [r3, #24]
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80056aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	699a      	ldr	r2, [r3, #24]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80056ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	6999      	ldr	r1, [r3, #24]
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	691b      	ldr	r3, [r3, #16]
 80056c6:	021a      	lsls	r2, r3, #8
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	430a      	orrs	r2, r1
 80056ce:	619a      	str	r2, [r3, #24]
      break;
 80056d0:	e043      	b.n	800575a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	68b9      	ldr	r1, [r7, #8]
 80056d8:	4618      	mov	r0, r3
 80056da:	f000 faa1 	bl	8005c20 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	69da      	ldr	r2, [r3, #28]
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f042 0208 	orr.w	r2, r2, #8
 80056ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	69da      	ldr	r2, [r3, #28]
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f022 0204 	bic.w	r2, r2, #4
 80056fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	69d9      	ldr	r1, [r3, #28]
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	691a      	ldr	r2, [r3, #16]
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	430a      	orrs	r2, r1
 800570e:	61da      	str	r2, [r3, #28]
      break;
 8005710:	e023      	b.n	800575a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	68b9      	ldr	r1, [r7, #8]
 8005718:	4618      	mov	r0, r3
 800571a:	f000 faf5 	bl	8005d08 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	69da      	ldr	r2, [r3, #28]
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800572c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	69da      	ldr	r2, [r3, #28]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800573c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	69d9      	ldr	r1, [r3, #28]
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	691b      	ldr	r3, [r3, #16]
 8005748:	021a      	lsls	r2, r3, #8
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	430a      	orrs	r2, r1
 8005750:	61da      	str	r2, [r3, #28]
      break;
 8005752:	e002      	b.n	800575a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	75fb      	strb	r3, [r7, #23]
      break;
 8005758:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2200      	movs	r2, #0
 800575e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005762:	7dfb      	ldrb	r3, [r7, #23]
}
 8005764:	4618      	mov	r0, r3
 8005766:	3718      	adds	r7, #24
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}

0800576c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b084      	sub	sp, #16
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005776:	2300      	movs	r3, #0
 8005778:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005780:	2b01      	cmp	r3, #1
 8005782:	d101      	bne.n	8005788 <HAL_TIM_ConfigClockSource+0x1c>
 8005784:	2302      	movs	r3, #2
 8005786:	e0b4      	b.n	80058f2 <HAL_TIM_ConfigClockSource+0x186>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2201      	movs	r2, #1
 800578c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2202      	movs	r2, #2
 8005794:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80057a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80057ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	68ba      	ldr	r2, [r7, #8]
 80057b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80057c0:	d03e      	beq.n	8005840 <HAL_TIM_ConfigClockSource+0xd4>
 80057c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80057c6:	f200 8087 	bhi.w	80058d8 <HAL_TIM_ConfigClockSource+0x16c>
 80057ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057ce:	f000 8086 	beq.w	80058de <HAL_TIM_ConfigClockSource+0x172>
 80057d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057d6:	d87f      	bhi.n	80058d8 <HAL_TIM_ConfigClockSource+0x16c>
 80057d8:	2b70      	cmp	r3, #112	@ 0x70
 80057da:	d01a      	beq.n	8005812 <HAL_TIM_ConfigClockSource+0xa6>
 80057dc:	2b70      	cmp	r3, #112	@ 0x70
 80057de:	d87b      	bhi.n	80058d8 <HAL_TIM_ConfigClockSource+0x16c>
 80057e0:	2b60      	cmp	r3, #96	@ 0x60
 80057e2:	d050      	beq.n	8005886 <HAL_TIM_ConfigClockSource+0x11a>
 80057e4:	2b60      	cmp	r3, #96	@ 0x60
 80057e6:	d877      	bhi.n	80058d8 <HAL_TIM_ConfigClockSource+0x16c>
 80057e8:	2b50      	cmp	r3, #80	@ 0x50
 80057ea:	d03c      	beq.n	8005866 <HAL_TIM_ConfigClockSource+0xfa>
 80057ec:	2b50      	cmp	r3, #80	@ 0x50
 80057ee:	d873      	bhi.n	80058d8 <HAL_TIM_ConfigClockSource+0x16c>
 80057f0:	2b40      	cmp	r3, #64	@ 0x40
 80057f2:	d058      	beq.n	80058a6 <HAL_TIM_ConfigClockSource+0x13a>
 80057f4:	2b40      	cmp	r3, #64	@ 0x40
 80057f6:	d86f      	bhi.n	80058d8 <HAL_TIM_ConfigClockSource+0x16c>
 80057f8:	2b30      	cmp	r3, #48	@ 0x30
 80057fa:	d064      	beq.n	80058c6 <HAL_TIM_ConfigClockSource+0x15a>
 80057fc:	2b30      	cmp	r3, #48	@ 0x30
 80057fe:	d86b      	bhi.n	80058d8 <HAL_TIM_ConfigClockSource+0x16c>
 8005800:	2b20      	cmp	r3, #32
 8005802:	d060      	beq.n	80058c6 <HAL_TIM_ConfigClockSource+0x15a>
 8005804:	2b20      	cmp	r3, #32
 8005806:	d867      	bhi.n	80058d8 <HAL_TIM_ConfigClockSource+0x16c>
 8005808:	2b00      	cmp	r3, #0
 800580a:	d05c      	beq.n	80058c6 <HAL_TIM_ConfigClockSource+0x15a>
 800580c:	2b10      	cmp	r3, #16
 800580e:	d05a      	beq.n	80058c6 <HAL_TIM_ConfigClockSource+0x15a>
 8005810:	e062      	b.n	80058d8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005822:	f000 fb41 	bl	8005ea8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005834:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	68ba      	ldr	r2, [r7, #8]
 800583c:	609a      	str	r2, [r3, #8]
      break;
 800583e:	e04f      	b.n	80058e0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005850:	f000 fb2a 	bl	8005ea8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	689a      	ldr	r2, [r3, #8]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005862:	609a      	str	r2, [r3, #8]
      break;
 8005864:	e03c      	b.n	80058e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005872:	461a      	mov	r2, r3
 8005874:	f000 fa9e 	bl	8005db4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	2150      	movs	r1, #80	@ 0x50
 800587e:	4618      	mov	r0, r3
 8005880:	f000 faf7 	bl	8005e72 <TIM_ITRx_SetConfig>
      break;
 8005884:	e02c      	b.n	80058e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005892:	461a      	mov	r2, r3
 8005894:	f000 fabd 	bl	8005e12 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	2160      	movs	r1, #96	@ 0x60
 800589e:	4618      	mov	r0, r3
 80058a0:	f000 fae7 	bl	8005e72 <TIM_ITRx_SetConfig>
      break;
 80058a4:	e01c      	b.n	80058e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80058b2:	461a      	mov	r2, r3
 80058b4:	f000 fa7e 	bl	8005db4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	2140      	movs	r1, #64	@ 0x40
 80058be:	4618      	mov	r0, r3
 80058c0:	f000 fad7 	bl	8005e72 <TIM_ITRx_SetConfig>
      break;
 80058c4:	e00c      	b.n	80058e0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681a      	ldr	r2, [r3, #0]
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4619      	mov	r1, r3
 80058d0:	4610      	mov	r0, r2
 80058d2:	f000 face 	bl	8005e72 <TIM_ITRx_SetConfig>
      break;
 80058d6:	e003      	b.n	80058e0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80058d8:	2301      	movs	r3, #1
 80058da:	73fb      	strb	r3, [r7, #15]
      break;
 80058dc:	e000      	b.n	80058e0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80058de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2201      	movs	r2, #1
 80058e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2200      	movs	r2, #0
 80058ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80058f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3710      	adds	r7, #16
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}
	...

080058fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b085      	sub	sp, #20
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
 8005904:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	4a46      	ldr	r2, [pc, #280]	@ (8005a28 <TIM_Base_SetConfig+0x12c>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d013      	beq.n	800593c <TIM_Base_SetConfig+0x40>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800591a:	d00f      	beq.n	800593c <TIM_Base_SetConfig+0x40>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	4a43      	ldr	r2, [pc, #268]	@ (8005a2c <TIM_Base_SetConfig+0x130>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d00b      	beq.n	800593c <TIM_Base_SetConfig+0x40>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	4a42      	ldr	r2, [pc, #264]	@ (8005a30 <TIM_Base_SetConfig+0x134>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d007      	beq.n	800593c <TIM_Base_SetConfig+0x40>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	4a41      	ldr	r2, [pc, #260]	@ (8005a34 <TIM_Base_SetConfig+0x138>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d003      	beq.n	800593c <TIM_Base_SetConfig+0x40>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	4a40      	ldr	r2, [pc, #256]	@ (8005a38 <TIM_Base_SetConfig+0x13c>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d108      	bne.n	800594e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005942:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	68fa      	ldr	r2, [r7, #12]
 800594a:	4313      	orrs	r3, r2
 800594c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	4a35      	ldr	r2, [pc, #212]	@ (8005a28 <TIM_Base_SetConfig+0x12c>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d02b      	beq.n	80059ae <TIM_Base_SetConfig+0xb2>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800595c:	d027      	beq.n	80059ae <TIM_Base_SetConfig+0xb2>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	4a32      	ldr	r2, [pc, #200]	@ (8005a2c <TIM_Base_SetConfig+0x130>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d023      	beq.n	80059ae <TIM_Base_SetConfig+0xb2>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	4a31      	ldr	r2, [pc, #196]	@ (8005a30 <TIM_Base_SetConfig+0x134>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d01f      	beq.n	80059ae <TIM_Base_SetConfig+0xb2>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	4a30      	ldr	r2, [pc, #192]	@ (8005a34 <TIM_Base_SetConfig+0x138>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d01b      	beq.n	80059ae <TIM_Base_SetConfig+0xb2>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	4a2f      	ldr	r2, [pc, #188]	@ (8005a38 <TIM_Base_SetConfig+0x13c>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d017      	beq.n	80059ae <TIM_Base_SetConfig+0xb2>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	4a2e      	ldr	r2, [pc, #184]	@ (8005a3c <TIM_Base_SetConfig+0x140>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d013      	beq.n	80059ae <TIM_Base_SetConfig+0xb2>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	4a2d      	ldr	r2, [pc, #180]	@ (8005a40 <TIM_Base_SetConfig+0x144>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d00f      	beq.n	80059ae <TIM_Base_SetConfig+0xb2>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	4a2c      	ldr	r2, [pc, #176]	@ (8005a44 <TIM_Base_SetConfig+0x148>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d00b      	beq.n	80059ae <TIM_Base_SetConfig+0xb2>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	4a2b      	ldr	r2, [pc, #172]	@ (8005a48 <TIM_Base_SetConfig+0x14c>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d007      	beq.n	80059ae <TIM_Base_SetConfig+0xb2>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	4a2a      	ldr	r2, [pc, #168]	@ (8005a4c <TIM_Base_SetConfig+0x150>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d003      	beq.n	80059ae <TIM_Base_SetConfig+0xb2>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	4a29      	ldr	r2, [pc, #164]	@ (8005a50 <TIM_Base_SetConfig+0x154>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d108      	bne.n	80059c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	68db      	ldr	r3, [r3, #12]
 80059ba:	68fa      	ldr	r2, [r7, #12]
 80059bc:	4313      	orrs	r3, r2
 80059be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	695b      	ldr	r3, [r3, #20]
 80059ca:	4313      	orrs	r3, r2
 80059cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	68fa      	ldr	r2, [r7, #12]
 80059d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	689a      	ldr	r2, [r3, #8]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	681a      	ldr	r2, [r3, #0]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	4a10      	ldr	r2, [pc, #64]	@ (8005a28 <TIM_Base_SetConfig+0x12c>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d003      	beq.n	80059f4 <TIM_Base_SetConfig+0xf8>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	4a12      	ldr	r2, [pc, #72]	@ (8005a38 <TIM_Base_SetConfig+0x13c>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d103      	bne.n	80059fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	691a      	ldr	r2, [r3, #16]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2201      	movs	r2, #1
 8005a00:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	691b      	ldr	r3, [r3, #16]
 8005a06:	f003 0301 	and.w	r3, r3, #1
 8005a0a:	2b01      	cmp	r3, #1
 8005a0c:	d105      	bne.n	8005a1a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	691b      	ldr	r3, [r3, #16]
 8005a12:	f023 0201 	bic.w	r2, r3, #1
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	611a      	str	r2, [r3, #16]
  }
}
 8005a1a:	bf00      	nop
 8005a1c:	3714      	adds	r7, #20
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a24:	4770      	bx	lr
 8005a26:	bf00      	nop
 8005a28:	40010000 	.word	0x40010000
 8005a2c:	40000400 	.word	0x40000400
 8005a30:	40000800 	.word	0x40000800
 8005a34:	40000c00 	.word	0x40000c00
 8005a38:	40010400 	.word	0x40010400
 8005a3c:	40014000 	.word	0x40014000
 8005a40:	40014400 	.word	0x40014400
 8005a44:	40014800 	.word	0x40014800
 8005a48:	40001800 	.word	0x40001800
 8005a4c:	40001c00 	.word	0x40001c00
 8005a50:	40002000 	.word	0x40002000

08005a54 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b087      	sub	sp, #28
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6a1b      	ldr	r3, [r3, #32]
 8005a62:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6a1b      	ldr	r3, [r3, #32]
 8005a68:	f023 0201 	bic.w	r2, r3, #1
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	699b      	ldr	r3, [r3, #24]
 8005a7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f023 0303 	bic.w	r3, r3, #3
 8005a8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	68fa      	ldr	r2, [r7, #12]
 8005a92:	4313      	orrs	r3, r2
 8005a94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	f023 0302 	bic.w	r3, r3, #2
 8005a9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	697a      	ldr	r2, [r7, #20]
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	4a20      	ldr	r2, [pc, #128]	@ (8005b2c <TIM_OC1_SetConfig+0xd8>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d003      	beq.n	8005ab8 <TIM_OC1_SetConfig+0x64>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	4a1f      	ldr	r2, [pc, #124]	@ (8005b30 <TIM_OC1_SetConfig+0xdc>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d10c      	bne.n	8005ad2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	f023 0308 	bic.w	r3, r3, #8
 8005abe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	68db      	ldr	r3, [r3, #12]
 8005ac4:	697a      	ldr	r2, [r7, #20]
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	f023 0304 	bic.w	r3, r3, #4
 8005ad0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	4a15      	ldr	r2, [pc, #84]	@ (8005b2c <TIM_OC1_SetConfig+0xd8>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d003      	beq.n	8005ae2 <TIM_OC1_SetConfig+0x8e>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	4a14      	ldr	r2, [pc, #80]	@ (8005b30 <TIM_OC1_SetConfig+0xdc>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d111      	bne.n	8005b06 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ae8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005af0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	695b      	ldr	r3, [r3, #20]
 8005af6:	693a      	ldr	r2, [r7, #16]
 8005af8:	4313      	orrs	r3, r2
 8005afa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	699b      	ldr	r3, [r3, #24]
 8005b00:	693a      	ldr	r2, [r7, #16]
 8005b02:	4313      	orrs	r3, r2
 8005b04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	693a      	ldr	r2, [r7, #16]
 8005b0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	68fa      	ldr	r2, [r7, #12]
 8005b10:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	685a      	ldr	r2, [r3, #4]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	697a      	ldr	r2, [r7, #20]
 8005b1e:	621a      	str	r2, [r3, #32]
}
 8005b20:	bf00      	nop
 8005b22:	371c      	adds	r7, #28
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr
 8005b2c:	40010000 	.word	0x40010000
 8005b30:	40010400 	.word	0x40010400

08005b34 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b087      	sub	sp, #28
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6a1b      	ldr	r3, [r3, #32]
 8005b42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6a1b      	ldr	r3, [r3, #32]
 8005b48:	f023 0210 	bic.w	r2, r3, #16
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	699b      	ldr	r3, [r3, #24]
 8005b5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	021b      	lsls	r3, r3, #8
 8005b72:	68fa      	ldr	r2, [r7, #12]
 8005b74:	4313      	orrs	r3, r2
 8005b76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	f023 0320 	bic.w	r3, r3, #32
 8005b7e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	011b      	lsls	r3, r3, #4
 8005b86:	697a      	ldr	r2, [r7, #20]
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	4a22      	ldr	r2, [pc, #136]	@ (8005c18 <TIM_OC2_SetConfig+0xe4>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d003      	beq.n	8005b9c <TIM_OC2_SetConfig+0x68>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	4a21      	ldr	r2, [pc, #132]	@ (8005c1c <TIM_OC2_SetConfig+0xe8>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d10d      	bne.n	8005bb8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005ba2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	68db      	ldr	r3, [r3, #12]
 8005ba8:	011b      	lsls	r3, r3, #4
 8005baa:	697a      	ldr	r2, [r7, #20]
 8005bac:	4313      	orrs	r3, r2
 8005bae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005bb6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	4a17      	ldr	r2, [pc, #92]	@ (8005c18 <TIM_OC2_SetConfig+0xe4>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d003      	beq.n	8005bc8 <TIM_OC2_SetConfig+0x94>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	4a16      	ldr	r2, [pc, #88]	@ (8005c1c <TIM_OC2_SetConfig+0xe8>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d113      	bne.n	8005bf0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005bce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005bd6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	695b      	ldr	r3, [r3, #20]
 8005bdc:	009b      	lsls	r3, r3, #2
 8005bde:	693a      	ldr	r2, [r7, #16]
 8005be0:	4313      	orrs	r3, r2
 8005be2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	699b      	ldr	r3, [r3, #24]
 8005be8:	009b      	lsls	r3, r3, #2
 8005bea:	693a      	ldr	r2, [r7, #16]
 8005bec:	4313      	orrs	r3, r2
 8005bee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	693a      	ldr	r2, [r7, #16]
 8005bf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	68fa      	ldr	r2, [r7, #12]
 8005bfa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	685a      	ldr	r2, [r3, #4]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	697a      	ldr	r2, [r7, #20]
 8005c08:	621a      	str	r2, [r3, #32]
}
 8005c0a:	bf00      	nop
 8005c0c:	371c      	adds	r7, #28
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c14:	4770      	bx	lr
 8005c16:	bf00      	nop
 8005c18:	40010000 	.word	0x40010000
 8005c1c:	40010400 	.word	0x40010400

08005c20 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b087      	sub	sp, #28
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6a1b      	ldr	r3, [r3, #32]
 8005c2e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6a1b      	ldr	r3, [r3, #32]
 8005c34:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	69db      	ldr	r3, [r3, #28]
 8005c46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f023 0303 	bic.w	r3, r3, #3
 8005c56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	68fa      	ldr	r2, [r7, #12]
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005c68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	021b      	lsls	r3, r3, #8
 8005c70:	697a      	ldr	r2, [r7, #20]
 8005c72:	4313      	orrs	r3, r2
 8005c74:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	4a21      	ldr	r2, [pc, #132]	@ (8005d00 <TIM_OC3_SetConfig+0xe0>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d003      	beq.n	8005c86 <TIM_OC3_SetConfig+0x66>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	4a20      	ldr	r2, [pc, #128]	@ (8005d04 <TIM_OC3_SetConfig+0xe4>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d10d      	bne.n	8005ca2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005c8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	68db      	ldr	r3, [r3, #12]
 8005c92:	021b      	lsls	r3, r3, #8
 8005c94:	697a      	ldr	r2, [r7, #20]
 8005c96:	4313      	orrs	r3, r2
 8005c98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005ca0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	4a16      	ldr	r2, [pc, #88]	@ (8005d00 <TIM_OC3_SetConfig+0xe0>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d003      	beq.n	8005cb2 <TIM_OC3_SetConfig+0x92>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	4a15      	ldr	r2, [pc, #84]	@ (8005d04 <TIM_OC3_SetConfig+0xe4>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d113      	bne.n	8005cda <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005cb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005cc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	695b      	ldr	r3, [r3, #20]
 8005cc6:	011b      	lsls	r3, r3, #4
 8005cc8:	693a      	ldr	r2, [r7, #16]
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	699b      	ldr	r3, [r3, #24]
 8005cd2:	011b      	lsls	r3, r3, #4
 8005cd4:	693a      	ldr	r2, [r7, #16]
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	693a      	ldr	r2, [r7, #16]
 8005cde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	68fa      	ldr	r2, [r7, #12]
 8005ce4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	685a      	ldr	r2, [r3, #4]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	697a      	ldr	r2, [r7, #20]
 8005cf2:	621a      	str	r2, [r3, #32]
}
 8005cf4:	bf00      	nop
 8005cf6:	371c      	adds	r7, #28
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfe:	4770      	bx	lr
 8005d00:	40010000 	.word	0x40010000
 8005d04:	40010400 	.word	0x40010400

08005d08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b087      	sub	sp, #28
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
 8005d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6a1b      	ldr	r3, [r3, #32]
 8005d16:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6a1b      	ldr	r3, [r3, #32]
 8005d1c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	69db      	ldr	r3, [r3, #28]
 8005d2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	021b      	lsls	r3, r3, #8
 8005d46:	68fa      	ldr	r2, [r7, #12]
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005d52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	689b      	ldr	r3, [r3, #8]
 8005d58:	031b      	lsls	r3, r3, #12
 8005d5a:	693a      	ldr	r2, [r7, #16]
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	4a12      	ldr	r2, [pc, #72]	@ (8005dac <TIM_OC4_SetConfig+0xa4>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d003      	beq.n	8005d70 <TIM_OC4_SetConfig+0x68>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	4a11      	ldr	r2, [pc, #68]	@ (8005db0 <TIM_OC4_SetConfig+0xa8>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d109      	bne.n	8005d84 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005d76:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	695b      	ldr	r3, [r3, #20]
 8005d7c:	019b      	lsls	r3, r3, #6
 8005d7e:	697a      	ldr	r2, [r7, #20]
 8005d80:	4313      	orrs	r3, r2
 8005d82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	697a      	ldr	r2, [r7, #20]
 8005d88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	68fa      	ldr	r2, [r7, #12]
 8005d8e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	685a      	ldr	r2, [r3, #4]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	693a      	ldr	r2, [r7, #16]
 8005d9c:	621a      	str	r2, [r3, #32]
}
 8005d9e:	bf00      	nop
 8005da0:	371c      	adds	r7, #28
 8005da2:	46bd      	mov	sp, r7
 8005da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da8:	4770      	bx	lr
 8005daa:	bf00      	nop
 8005dac:	40010000 	.word	0x40010000
 8005db0:	40010400 	.word	0x40010400

08005db4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b087      	sub	sp, #28
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	60f8      	str	r0, [r7, #12]
 8005dbc:	60b9      	str	r1, [r7, #8]
 8005dbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	6a1b      	ldr	r3, [r3, #32]
 8005dc4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	6a1b      	ldr	r3, [r3, #32]
 8005dca:	f023 0201 	bic.w	r2, r3, #1
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	699b      	ldr	r3, [r3, #24]
 8005dd6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005dde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	011b      	lsls	r3, r3, #4
 8005de4:	693a      	ldr	r2, [r7, #16]
 8005de6:	4313      	orrs	r3, r2
 8005de8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	f023 030a 	bic.w	r3, r3, #10
 8005df0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005df2:	697a      	ldr	r2, [r7, #20]
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	4313      	orrs	r3, r2
 8005df8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	693a      	ldr	r2, [r7, #16]
 8005dfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	697a      	ldr	r2, [r7, #20]
 8005e04:	621a      	str	r2, [r3, #32]
}
 8005e06:	bf00      	nop
 8005e08:	371c      	adds	r7, #28
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e10:	4770      	bx	lr

08005e12 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e12:	b480      	push	{r7}
 8005e14:	b087      	sub	sp, #28
 8005e16:	af00      	add	r7, sp, #0
 8005e18:	60f8      	str	r0, [r7, #12]
 8005e1a:	60b9      	str	r1, [r7, #8]
 8005e1c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	6a1b      	ldr	r3, [r3, #32]
 8005e22:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	6a1b      	ldr	r3, [r3, #32]
 8005e28:	f023 0210 	bic.w	r2, r3, #16
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	699b      	ldr	r3, [r3, #24]
 8005e34:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005e3c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	031b      	lsls	r3, r3, #12
 8005e42:	693a      	ldr	r2, [r7, #16]
 8005e44:	4313      	orrs	r3, r2
 8005e46:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005e4e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	011b      	lsls	r3, r3, #4
 8005e54:	697a      	ldr	r2, [r7, #20]
 8005e56:	4313      	orrs	r3, r2
 8005e58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	693a      	ldr	r2, [r7, #16]
 8005e5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	697a      	ldr	r2, [r7, #20]
 8005e64:	621a      	str	r2, [r3, #32]
}
 8005e66:	bf00      	nop
 8005e68:	371c      	adds	r7, #28
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e70:	4770      	bx	lr

08005e72 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e72:	b480      	push	{r7}
 8005e74:	b085      	sub	sp, #20
 8005e76:	af00      	add	r7, sp, #0
 8005e78:	6078      	str	r0, [r7, #4]
 8005e7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	689b      	ldr	r3, [r3, #8]
 8005e80:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e88:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e8a:	683a      	ldr	r2, [r7, #0]
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	f043 0307 	orr.w	r3, r3, #7
 8005e94:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	68fa      	ldr	r2, [r7, #12]
 8005e9a:	609a      	str	r2, [r3, #8]
}
 8005e9c:	bf00      	nop
 8005e9e:	3714      	adds	r7, #20
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea6:	4770      	bx	lr

08005ea8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b087      	sub	sp, #28
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	60f8      	str	r0, [r7, #12]
 8005eb0:	60b9      	str	r1, [r7, #8]
 8005eb2:	607a      	str	r2, [r7, #4]
 8005eb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005ec2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	021a      	lsls	r2, r3, #8
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	431a      	orrs	r2, r3
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	697a      	ldr	r2, [r7, #20]
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	697a      	ldr	r2, [r7, #20]
 8005eda:	609a      	str	r2, [r3, #8]
}
 8005edc:	bf00      	nop
 8005ede:	371c      	adds	r7, #28
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee6:	4770      	bx	lr

08005ee8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b085      	sub	sp, #20
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
 8005ef0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	d101      	bne.n	8005f00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005efc:	2302      	movs	r3, #2
 8005efe:	e05a      	b.n	8005fb6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2201      	movs	r2, #1
 8005f04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2202      	movs	r2, #2
 8005f0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	68fa      	ldr	r2, [r7, #12]
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	68fa      	ldr	r2, [r7, #12]
 8005f38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a21      	ldr	r2, [pc, #132]	@ (8005fc4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d022      	beq.n	8005f8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f4c:	d01d      	beq.n	8005f8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a1d      	ldr	r2, [pc, #116]	@ (8005fc8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d018      	beq.n	8005f8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a1b      	ldr	r2, [pc, #108]	@ (8005fcc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d013      	beq.n	8005f8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a1a      	ldr	r2, [pc, #104]	@ (8005fd0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d00e      	beq.n	8005f8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a18      	ldr	r2, [pc, #96]	@ (8005fd4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d009      	beq.n	8005f8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a17      	ldr	r2, [pc, #92]	@ (8005fd8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d004      	beq.n	8005f8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a15      	ldr	r2, [pc, #84]	@ (8005fdc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d10c      	bne.n	8005fa4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005f90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	68ba      	ldr	r2, [r7, #8]
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	68ba      	ldr	r2, [r7, #8]
 8005fa2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005fb4:	2300      	movs	r3, #0
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3714      	adds	r7, #20
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr
 8005fc2:	bf00      	nop
 8005fc4:	40010000 	.word	0x40010000
 8005fc8:	40000400 	.word	0x40000400
 8005fcc:	40000800 	.word	0x40000800
 8005fd0:	40000c00 	.word	0x40000c00
 8005fd4:	40010400 	.word	0x40010400
 8005fd8:	40014000 	.word	0x40014000
 8005fdc:	40001800 	.word	0x40001800

08005fe0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b082      	sub	sp, #8
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d101      	bne.n	8005ff2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	e042      	b.n	8006078 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ff8:	b2db      	uxtb	r3, r3
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d106      	bne.n	800600c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2200      	movs	r2, #0
 8006002:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f7fb fb14 	bl	8001634 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2224      	movs	r2, #36	@ 0x24
 8006010:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	68da      	ldr	r2, [r3, #12]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006022:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f000 f82b 	bl	8006080 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	691a      	ldr	r2, [r3, #16]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006038:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	695a      	ldr	r2, [r3, #20]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006048:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	68da      	ldr	r2, [r3, #12]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006058:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2200      	movs	r2, #0
 800605e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2220      	movs	r2, #32
 8006064:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2220      	movs	r2, #32
 800606c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2200      	movs	r2, #0
 8006074:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006076:	2300      	movs	r3, #0
}
 8006078:	4618      	mov	r0, r3
 800607a:	3708      	adds	r7, #8
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}

08006080 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006080:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006084:	b0c0      	sub	sp, #256	@ 0x100
 8006086:	af00      	add	r7, sp, #0
 8006088:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800608c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	691b      	ldr	r3, [r3, #16]
 8006094:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800609c:	68d9      	ldr	r1, [r3, #12]
 800609e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060a2:	681a      	ldr	r2, [r3, #0]
 80060a4:	ea40 0301 	orr.w	r3, r0, r1
 80060a8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80060aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060ae:	689a      	ldr	r2, [r3, #8]
 80060b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060b4:	691b      	ldr	r3, [r3, #16]
 80060b6:	431a      	orrs	r2, r3
 80060b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060bc:	695b      	ldr	r3, [r3, #20]
 80060be:	431a      	orrs	r2, r3
 80060c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060c4:	69db      	ldr	r3, [r3, #28]
 80060c6:	4313      	orrs	r3, r2
 80060c8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80060cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	68db      	ldr	r3, [r3, #12]
 80060d4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80060d8:	f021 010c 	bic.w	r1, r1, #12
 80060dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060e0:	681a      	ldr	r2, [r3, #0]
 80060e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80060e6:	430b      	orrs	r3, r1
 80060e8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80060ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	695b      	ldr	r3, [r3, #20]
 80060f2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80060f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060fa:	6999      	ldr	r1, [r3, #24]
 80060fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006100:	681a      	ldr	r2, [r3, #0]
 8006102:	ea40 0301 	orr.w	r3, r0, r1
 8006106:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800610c:	681a      	ldr	r2, [r3, #0]
 800610e:	4b8f      	ldr	r3, [pc, #572]	@ (800634c <UART_SetConfig+0x2cc>)
 8006110:	429a      	cmp	r2, r3
 8006112:	d005      	beq.n	8006120 <UART_SetConfig+0xa0>
 8006114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006118:	681a      	ldr	r2, [r3, #0]
 800611a:	4b8d      	ldr	r3, [pc, #564]	@ (8006350 <UART_SetConfig+0x2d0>)
 800611c:	429a      	cmp	r2, r3
 800611e:	d104      	bne.n	800612a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006120:	f7fe f9ae 	bl	8004480 <HAL_RCC_GetPCLK2Freq>
 8006124:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006128:	e003      	b.n	8006132 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800612a:	f7fe f995 	bl	8004458 <HAL_RCC_GetPCLK1Freq>
 800612e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006132:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006136:	69db      	ldr	r3, [r3, #28]
 8006138:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800613c:	f040 810c 	bne.w	8006358 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006140:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006144:	2200      	movs	r2, #0
 8006146:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800614a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800614e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006152:	4622      	mov	r2, r4
 8006154:	462b      	mov	r3, r5
 8006156:	1891      	adds	r1, r2, r2
 8006158:	65b9      	str	r1, [r7, #88]	@ 0x58
 800615a:	415b      	adcs	r3, r3
 800615c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800615e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006162:	4621      	mov	r1, r4
 8006164:	eb12 0801 	adds.w	r8, r2, r1
 8006168:	4629      	mov	r1, r5
 800616a:	eb43 0901 	adc.w	r9, r3, r1
 800616e:	f04f 0200 	mov.w	r2, #0
 8006172:	f04f 0300 	mov.w	r3, #0
 8006176:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800617a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800617e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006182:	4690      	mov	r8, r2
 8006184:	4699      	mov	r9, r3
 8006186:	4623      	mov	r3, r4
 8006188:	eb18 0303 	adds.w	r3, r8, r3
 800618c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006190:	462b      	mov	r3, r5
 8006192:	eb49 0303 	adc.w	r3, r9, r3
 8006196:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800619a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	2200      	movs	r2, #0
 80061a2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80061a6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80061aa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80061ae:	460b      	mov	r3, r1
 80061b0:	18db      	adds	r3, r3, r3
 80061b2:	653b      	str	r3, [r7, #80]	@ 0x50
 80061b4:	4613      	mov	r3, r2
 80061b6:	eb42 0303 	adc.w	r3, r2, r3
 80061ba:	657b      	str	r3, [r7, #84]	@ 0x54
 80061bc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80061c0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80061c4:	f7fa fd10 	bl	8000be8 <__aeabi_uldivmod>
 80061c8:	4602      	mov	r2, r0
 80061ca:	460b      	mov	r3, r1
 80061cc:	4b61      	ldr	r3, [pc, #388]	@ (8006354 <UART_SetConfig+0x2d4>)
 80061ce:	fba3 2302 	umull	r2, r3, r3, r2
 80061d2:	095b      	lsrs	r3, r3, #5
 80061d4:	011c      	lsls	r4, r3, #4
 80061d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80061da:	2200      	movs	r2, #0
 80061dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80061e0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80061e4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80061e8:	4642      	mov	r2, r8
 80061ea:	464b      	mov	r3, r9
 80061ec:	1891      	adds	r1, r2, r2
 80061ee:	64b9      	str	r1, [r7, #72]	@ 0x48
 80061f0:	415b      	adcs	r3, r3
 80061f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80061f4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80061f8:	4641      	mov	r1, r8
 80061fa:	eb12 0a01 	adds.w	sl, r2, r1
 80061fe:	4649      	mov	r1, r9
 8006200:	eb43 0b01 	adc.w	fp, r3, r1
 8006204:	f04f 0200 	mov.w	r2, #0
 8006208:	f04f 0300 	mov.w	r3, #0
 800620c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006210:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006214:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006218:	4692      	mov	sl, r2
 800621a:	469b      	mov	fp, r3
 800621c:	4643      	mov	r3, r8
 800621e:	eb1a 0303 	adds.w	r3, sl, r3
 8006222:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006226:	464b      	mov	r3, r9
 8006228:	eb4b 0303 	adc.w	r3, fp, r3
 800622c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	2200      	movs	r2, #0
 8006238:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800623c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006240:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006244:	460b      	mov	r3, r1
 8006246:	18db      	adds	r3, r3, r3
 8006248:	643b      	str	r3, [r7, #64]	@ 0x40
 800624a:	4613      	mov	r3, r2
 800624c:	eb42 0303 	adc.w	r3, r2, r3
 8006250:	647b      	str	r3, [r7, #68]	@ 0x44
 8006252:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006256:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800625a:	f7fa fcc5 	bl	8000be8 <__aeabi_uldivmod>
 800625e:	4602      	mov	r2, r0
 8006260:	460b      	mov	r3, r1
 8006262:	4611      	mov	r1, r2
 8006264:	4b3b      	ldr	r3, [pc, #236]	@ (8006354 <UART_SetConfig+0x2d4>)
 8006266:	fba3 2301 	umull	r2, r3, r3, r1
 800626a:	095b      	lsrs	r3, r3, #5
 800626c:	2264      	movs	r2, #100	@ 0x64
 800626e:	fb02 f303 	mul.w	r3, r2, r3
 8006272:	1acb      	subs	r3, r1, r3
 8006274:	00db      	lsls	r3, r3, #3
 8006276:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800627a:	4b36      	ldr	r3, [pc, #216]	@ (8006354 <UART_SetConfig+0x2d4>)
 800627c:	fba3 2302 	umull	r2, r3, r3, r2
 8006280:	095b      	lsrs	r3, r3, #5
 8006282:	005b      	lsls	r3, r3, #1
 8006284:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006288:	441c      	add	r4, r3
 800628a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800628e:	2200      	movs	r2, #0
 8006290:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006294:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006298:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800629c:	4642      	mov	r2, r8
 800629e:	464b      	mov	r3, r9
 80062a0:	1891      	adds	r1, r2, r2
 80062a2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80062a4:	415b      	adcs	r3, r3
 80062a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80062a8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80062ac:	4641      	mov	r1, r8
 80062ae:	1851      	adds	r1, r2, r1
 80062b0:	6339      	str	r1, [r7, #48]	@ 0x30
 80062b2:	4649      	mov	r1, r9
 80062b4:	414b      	adcs	r3, r1
 80062b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80062b8:	f04f 0200 	mov.w	r2, #0
 80062bc:	f04f 0300 	mov.w	r3, #0
 80062c0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80062c4:	4659      	mov	r1, fp
 80062c6:	00cb      	lsls	r3, r1, #3
 80062c8:	4651      	mov	r1, sl
 80062ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80062ce:	4651      	mov	r1, sl
 80062d0:	00ca      	lsls	r2, r1, #3
 80062d2:	4610      	mov	r0, r2
 80062d4:	4619      	mov	r1, r3
 80062d6:	4603      	mov	r3, r0
 80062d8:	4642      	mov	r2, r8
 80062da:	189b      	adds	r3, r3, r2
 80062dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80062e0:	464b      	mov	r3, r9
 80062e2:	460a      	mov	r2, r1
 80062e4:	eb42 0303 	adc.w	r3, r2, r3
 80062e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80062ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	2200      	movs	r2, #0
 80062f4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80062f8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80062fc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006300:	460b      	mov	r3, r1
 8006302:	18db      	adds	r3, r3, r3
 8006304:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006306:	4613      	mov	r3, r2
 8006308:	eb42 0303 	adc.w	r3, r2, r3
 800630c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800630e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006312:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006316:	f7fa fc67 	bl	8000be8 <__aeabi_uldivmod>
 800631a:	4602      	mov	r2, r0
 800631c:	460b      	mov	r3, r1
 800631e:	4b0d      	ldr	r3, [pc, #52]	@ (8006354 <UART_SetConfig+0x2d4>)
 8006320:	fba3 1302 	umull	r1, r3, r3, r2
 8006324:	095b      	lsrs	r3, r3, #5
 8006326:	2164      	movs	r1, #100	@ 0x64
 8006328:	fb01 f303 	mul.w	r3, r1, r3
 800632c:	1ad3      	subs	r3, r2, r3
 800632e:	00db      	lsls	r3, r3, #3
 8006330:	3332      	adds	r3, #50	@ 0x32
 8006332:	4a08      	ldr	r2, [pc, #32]	@ (8006354 <UART_SetConfig+0x2d4>)
 8006334:	fba2 2303 	umull	r2, r3, r2, r3
 8006338:	095b      	lsrs	r3, r3, #5
 800633a:	f003 0207 	and.w	r2, r3, #7
 800633e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4422      	add	r2, r4
 8006346:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006348:	e106      	b.n	8006558 <UART_SetConfig+0x4d8>
 800634a:	bf00      	nop
 800634c:	40011000 	.word	0x40011000
 8006350:	40011400 	.word	0x40011400
 8006354:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006358:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800635c:	2200      	movs	r2, #0
 800635e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006362:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006366:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800636a:	4642      	mov	r2, r8
 800636c:	464b      	mov	r3, r9
 800636e:	1891      	adds	r1, r2, r2
 8006370:	6239      	str	r1, [r7, #32]
 8006372:	415b      	adcs	r3, r3
 8006374:	627b      	str	r3, [r7, #36]	@ 0x24
 8006376:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800637a:	4641      	mov	r1, r8
 800637c:	1854      	adds	r4, r2, r1
 800637e:	4649      	mov	r1, r9
 8006380:	eb43 0501 	adc.w	r5, r3, r1
 8006384:	f04f 0200 	mov.w	r2, #0
 8006388:	f04f 0300 	mov.w	r3, #0
 800638c:	00eb      	lsls	r3, r5, #3
 800638e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006392:	00e2      	lsls	r2, r4, #3
 8006394:	4614      	mov	r4, r2
 8006396:	461d      	mov	r5, r3
 8006398:	4643      	mov	r3, r8
 800639a:	18e3      	adds	r3, r4, r3
 800639c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80063a0:	464b      	mov	r3, r9
 80063a2:	eb45 0303 	adc.w	r3, r5, r3
 80063a6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80063aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	2200      	movs	r2, #0
 80063b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80063b6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80063ba:	f04f 0200 	mov.w	r2, #0
 80063be:	f04f 0300 	mov.w	r3, #0
 80063c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80063c6:	4629      	mov	r1, r5
 80063c8:	008b      	lsls	r3, r1, #2
 80063ca:	4621      	mov	r1, r4
 80063cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80063d0:	4621      	mov	r1, r4
 80063d2:	008a      	lsls	r2, r1, #2
 80063d4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80063d8:	f7fa fc06 	bl	8000be8 <__aeabi_uldivmod>
 80063dc:	4602      	mov	r2, r0
 80063de:	460b      	mov	r3, r1
 80063e0:	4b60      	ldr	r3, [pc, #384]	@ (8006564 <UART_SetConfig+0x4e4>)
 80063e2:	fba3 2302 	umull	r2, r3, r3, r2
 80063e6:	095b      	lsrs	r3, r3, #5
 80063e8:	011c      	lsls	r4, r3, #4
 80063ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80063ee:	2200      	movs	r2, #0
 80063f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80063f4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80063f8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80063fc:	4642      	mov	r2, r8
 80063fe:	464b      	mov	r3, r9
 8006400:	1891      	adds	r1, r2, r2
 8006402:	61b9      	str	r1, [r7, #24]
 8006404:	415b      	adcs	r3, r3
 8006406:	61fb      	str	r3, [r7, #28]
 8006408:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800640c:	4641      	mov	r1, r8
 800640e:	1851      	adds	r1, r2, r1
 8006410:	6139      	str	r1, [r7, #16]
 8006412:	4649      	mov	r1, r9
 8006414:	414b      	adcs	r3, r1
 8006416:	617b      	str	r3, [r7, #20]
 8006418:	f04f 0200 	mov.w	r2, #0
 800641c:	f04f 0300 	mov.w	r3, #0
 8006420:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006424:	4659      	mov	r1, fp
 8006426:	00cb      	lsls	r3, r1, #3
 8006428:	4651      	mov	r1, sl
 800642a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800642e:	4651      	mov	r1, sl
 8006430:	00ca      	lsls	r2, r1, #3
 8006432:	4610      	mov	r0, r2
 8006434:	4619      	mov	r1, r3
 8006436:	4603      	mov	r3, r0
 8006438:	4642      	mov	r2, r8
 800643a:	189b      	adds	r3, r3, r2
 800643c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006440:	464b      	mov	r3, r9
 8006442:	460a      	mov	r2, r1
 8006444:	eb42 0303 	adc.w	r3, r2, r3
 8006448:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800644c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	2200      	movs	r2, #0
 8006454:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006456:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006458:	f04f 0200 	mov.w	r2, #0
 800645c:	f04f 0300 	mov.w	r3, #0
 8006460:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006464:	4649      	mov	r1, r9
 8006466:	008b      	lsls	r3, r1, #2
 8006468:	4641      	mov	r1, r8
 800646a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800646e:	4641      	mov	r1, r8
 8006470:	008a      	lsls	r2, r1, #2
 8006472:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006476:	f7fa fbb7 	bl	8000be8 <__aeabi_uldivmod>
 800647a:	4602      	mov	r2, r0
 800647c:	460b      	mov	r3, r1
 800647e:	4611      	mov	r1, r2
 8006480:	4b38      	ldr	r3, [pc, #224]	@ (8006564 <UART_SetConfig+0x4e4>)
 8006482:	fba3 2301 	umull	r2, r3, r3, r1
 8006486:	095b      	lsrs	r3, r3, #5
 8006488:	2264      	movs	r2, #100	@ 0x64
 800648a:	fb02 f303 	mul.w	r3, r2, r3
 800648e:	1acb      	subs	r3, r1, r3
 8006490:	011b      	lsls	r3, r3, #4
 8006492:	3332      	adds	r3, #50	@ 0x32
 8006494:	4a33      	ldr	r2, [pc, #204]	@ (8006564 <UART_SetConfig+0x4e4>)
 8006496:	fba2 2303 	umull	r2, r3, r2, r3
 800649a:	095b      	lsrs	r3, r3, #5
 800649c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80064a0:	441c      	add	r4, r3
 80064a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80064a6:	2200      	movs	r2, #0
 80064a8:	673b      	str	r3, [r7, #112]	@ 0x70
 80064aa:	677a      	str	r2, [r7, #116]	@ 0x74
 80064ac:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80064b0:	4642      	mov	r2, r8
 80064b2:	464b      	mov	r3, r9
 80064b4:	1891      	adds	r1, r2, r2
 80064b6:	60b9      	str	r1, [r7, #8]
 80064b8:	415b      	adcs	r3, r3
 80064ba:	60fb      	str	r3, [r7, #12]
 80064bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80064c0:	4641      	mov	r1, r8
 80064c2:	1851      	adds	r1, r2, r1
 80064c4:	6039      	str	r1, [r7, #0]
 80064c6:	4649      	mov	r1, r9
 80064c8:	414b      	adcs	r3, r1
 80064ca:	607b      	str	r3, [r7, #4]
 80064cc:	f04f 0200 	mov.w	r2, #0
 80064d0:	f04f 0300 	mov.w	r3, #0
 80064d4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80064d8:	4659      	mov	r1, fp
 80064da:	00cb      	lsls	r3, r1, #3
 80064dc:	4651      	mov	r1, sl
 80064de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80064e2:	4651      	mov	r1, sl
 80064e4:	00ca      	lsls	r2, r1, #3
 80064e6:	4610      	mov	r0, r2
 80064e8:	4619      	mov	r1, r3
 80064ea:	4603      	mov	r3, r0
 80064ec:	4642      	mov	r2, r8
 80064ee:	189b      	adds	r3, r3, r2
 80064f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80064f2:	464b      	mov	r3, r9
 80064f4:	460a      	mov	r2, r1
 80064f6:	eb42 0303 	adc.w	r3, r2, r3
 80064fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80064fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	2200      	movs	r2, #0
 8006504:	663b      	str	r3, [r7, #96]	@ 0x60
 8006506:	667a      	str	r2, [r7, #100]	@ 0x64
 8006508:	f04f 0200 	mov.w	r2, #0
 800650c:	f04f 0300 	mov.w	r3, #0
 8006510:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006514:	4649      	mov	r1, r9
 8006516:	008b      	lsls	r3, r1, #2
 8006518:	4641      	mov	r1, r8
 800651a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800651e:	4641      	mov	r1, r8
 8006520:	008a      	lsls	r2, r1, #2
 8006522:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006526:	f7fa fb5f 	bl	8000be8 <__aeabi_uldivmod>
 800652a:	4602      	mov	r2, r0
 800652c:	460b      	mov	r3, r1
 800652e:	4b0d      	ldr	r3, [pc, #52]	@ (8006564 <UART_SetConfig+0x4e4>)
 8006530:	fba3 1302 	umull	r1, r3, r3, r2
 8006534:	095b      	lsrs	r3, r3, #5
 8006536:	2164      	movs	r1, #100	@ 0x64
 8006538:	fb01 f303 	mul.w	r3, r1, r3
 800653c:	1ad3      	subs	r3, r2, r3
 800653e:	011b      	lsls	r3, r3, #4
 8006540:	3332      	adds	r3, #50	@ 0x32
 8006542:	4a08      	ldr	r2, [pc, #32]	@ (8006564 <UART_SetConfig+0x4e4>)
 8006544:	fba2 2303 	umull	r2, r3, r2, r3
 8006548:	095b      	lsrs	r3, r3, #5
 800654a:	f003 020f 	and.w	r2, r3, #15
 800654e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4422      	add	r2, r4
 8006556:	609a      	str	r2, [r3, #8]
}
 8006558:	bf00      	nop
 800655a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800655e:	46bd      	mov	sp, r7
 8006560:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006564:	51eb851f 	.word	0x51eb851f

08006568 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006568:	b084      	sub	sp, #16
 800656a:	b580      	push	{r7, lr}
 800656c:	b084      	sub	sp, #16
 800656e:	af00      	add	r7, sp, #0
 8006570:	6078      	str	r0, [r7, #4]
 8006572:	f107 001c 	add.w	r0, r7, #28
 8006576:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800657a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800657e:	2b01      	cmp	r3, #1
 8006580:	d123      	bne.n	80065ca <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006586:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	68db      	ldr	r3, [r3, #12]
 8006592:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006596:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800659a:	687a      	ldr	r2, [r7, #4]
 800659c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	68db      	ldr	r3, [r3, #12]
 80065a2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80065aa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80065ae:	2b01      	cmp	r3, #1
 80065b0:	d105      	bne.n	80065be <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	68db      	ldr	r3, [r3, #12]
 80065b6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f001 fadc 	bl	8007b7c <USB_CoreReset>
 80065c4:	4603      	mov	r3, r0
 80065c6:	73fb      	strb	r3, [r7, #15]
 80065c8:	e01b      	b.n	8006602 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	68db      	ldr	r3, [r3, #12]
 80065ce:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f001 fad0 	bl	8007b7c <USB_CoreReset>
 80065dc:	4603      	mov	r3, r0
 80065de:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80065e0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d106      	bne.n	80065f6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065ec:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	639a      	str	r2, [r3, #56]	@ 0x38
 80065f4:	e005      	b.n	8006602 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065fa:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006602:	7fbb      	ldrb	r3, [r7, #30]
 8006604:	2b01      	cmp	r3, #1
 8006606:	d10b      	bne.n	8006620 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	f043 0206 	orr.w	r2, r3, #6
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	689b      	ldr	r3, [r3, #8]
 8006618:	f043 0220 	orr.w	r2, r3, #32
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006620:	7bfb      	ldrb	r3, [r7, #15]
}
 8006622:	4618      	mov	r0, r3
 8006624:	3710      	adds	r7, #16
 8006626:	46bd      	mov	sp, r7
 8006628:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800662c:	b004      	add	sp, #16
 800662e:	4770      	bx	lr

08006630 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006630:	b480      	push	{r7}
 8006632:	b087      	sub	sp, #28
 8006634:	af00      	add	r7, sp, #0
 8006636:	60f8      	str	r0, [r7, #12]
 8006638:	60b9      	str	r1, [r7, #8]
 800663a:	4613      	mov	r3, r2
 800663c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800663e:	79fb      	ldrb	r3, [r7, #7]
 8006640:	2b02      	cmp	r3, #2
 8006642:	d165      	bne.n	8006710 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	4a41      	ldr	r2, [pc, #260]	@ (800674c <USB_SetTurnaroundTime+0x11c>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d906      	bls.n	800665a <USB_SetTurnaroundTime+0x2a>
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	4a40      	ldr	r2, [pc, #256]	@ (8006750 <USB_SetTurnaroundTime+0x120>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d202      	bcs.n	800665a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006654:	230f      	movs	r3, #15
 8006656:	617b      	str	r3, [r7, #20]
 8006658:	e062      	b.n	8006720 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	4a3c      	ldr	r2, [pc, #240]	@ (8006750 <USB_SetTurnaroundTime+0x120>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d306      	bcc.n	8006670 <USB_SetTurnaroundTime+0x40>
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	4a3b      	ldr	r2, [pc, #236]	@ (8006754 <USB_SetTurnaroundTime+0x124>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d202      	bcs.n	8006670 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800666a:	230e      	movs	r3, #14
 800666c:	617b      	str	r3, [r7, #20]
 800666e:	e057      	b.n	8006720 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	4a38      	ldr	r2, [pc, #224]	@ (8006754 <USB_SetTurnaroundTime+0x124>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d306      	bcc.n	8006686 <USB_SetTurnaroundTime+0x56>
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	4a37      	ldr	r2, [pc, #220]	@ (8006758 <USB_SetTurnaroundTime+0x128>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d202      	bcs.n	8006686 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006680:	230d      	movs	r3, #13
 8006682:	617b      	str	r3, [r7, #20]
 8006684:	e04c      	b.n	8006720 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	4a33      	ldr	r2, [pc, #204]	@ (8006758 <USB_SetTurnaroundTime+0x128>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d306      	bcc.n	800669c <USB_SetTurnaroundTime+0x6c>
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	4a32      	ldr	r2, [pc, #200]	@ (800675c <USB_SetTurnaroundTime+0x12c>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d802      	bhi.n	800669c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006696:	230c      	movs	r3, #12
 8006698:	617b      	str	r3, [r7, #20]
 800669a:	e041      	b.n	8006720 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	4a2f      	ldr	r2, [pc, #188]	@ (800675c <USB_SetTurnaroundTime+0x12c>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d906      	bls.n	80066b2 <USB_SetTurnaroundTime+0x82>
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	4a2e      	ldr	r2, [pc, #184]	@ (8006760 <USB_SetTurnaroundTime+0x130>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d802      	bhi.n	80066b2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80066ac:	230b      	movs	r3, #11
 80066ae:	617b      	str	r3, [r7, #20]
 80066b0:	e036      	b.n	8006720 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	4a2a      	ldr	r2, [pc, #168]	@ (8006760 <USB_SetTurnaroundTime+0x130>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d906      	bls.n	80066c8 <USB_SetTurnaroundTime+0x98>
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	4a29      	ldr	r2, [pc, #164]	@ (8006764 <USB_SetTurnaroundTime+0x134>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d802      	bhi.n	80066c8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80066c2:	230a      	movs	r3, #10
 80066c4:	617b      	str	r3, [r7, #20]
 80066c6:	e02b      	b.n	8006720 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	4a26      	ldr	r2, [pc, #152]	@ (8006764 <USB_SetTurnaroundTime+0x134>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d906      	bls.n	80066de <USB_SetTurnaroundTime+0xae>
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	4a25      	ldr	r2, [pc, #148]	@ (8006768 <USB_SetTurnaroundTime+0x138>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d202      	bcs.n	80066de <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80066d8:	2309      	movs	r3, #9
 80066da:	617b      	str	r3, [r7, #20]
 80066dc:	e020      	b.n	8006720 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	4a21      	ldr	r2, [pc, #132]	@ (8006768 <USB_SetTurnaroundTime+0x138>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d306      	bcc.n	80066f4 <USB_SetTurnaroundTime+0xc4>
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	4a20      	ldr	r2, [pc, #128]	@ (800676c <USB_SetTurnaroundTime+0x13c>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d802      	bhi.n	80066f4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80066ee:	2308      	movs	r3, #8
 80066f0:	617b      	str	r3, [r7, #20]
 80066f2:	e015      	b.n	8006720 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	4a1d      	ldr	r2, [pc, #116]	@ (800676c <USB_SetTurnaroundTime+0x13c>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d906      	bls.n	800670a <USB_SetTurnaroundTime+0xda>
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	4a1c      	ldr	r2, [pc, #112]	@ (8006770 <USB_SetTurnaroundTime+0x140>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d202      	bcs.n	800670a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006704:	2307      	movs	r3, #7
 8006706:	617b      	str	r3, [r7, #20]
 8006708:	e00a      	b.n	8006720 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800670a:	2306      	movs	r3, #6
 800670c:	617b      	str	r3, [r7, #20]
 800670e:	e007      	b.n	8006720 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006710:	79fb      	ldrb	r3, [r7, #7]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d102      	bne.n	800671c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006716:	2309      	movs	r3, #9
 8006718:	617b      	str	r3, [r7, #20]
 800671a:	e001      	b.n	8006720 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800671c:	2309      	movs	r3, #9
 800671e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	68db      	ldr	r3, [r3, #12]
 8006724:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	68da      	ldr	r2, [r3, #12]
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	029b      	lsls	r3, r3, #10
 8006734:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8006738:	431a      	orrs	r2, r3
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800673e:	2300      	movs	r3, #0
}
 8006740:	4618      	mov	r0, r3
 8006742:	371c      	adds	r7, #28
 8006744:	46bd      	mov	sp, r7
 8006746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674a:	4770      	bx	lr
 800674c:	00d8acbf 	.word	0x00d8acbf
 8006750:	00e4e1c0 	.word	0x00e4e1c0
 8006754:	00f42400 	.word	0x00f42400
 8006758:	01067380 	.word	0x01067380
 800675c:	011a499f 	.word	0x011a499f
 8006760:	01312cff 	.word	0x01312cff
 8006764:	014ca43f 	.word	0x014ca43f
 8006768:	016e3600 	.word	0x016e3600
 800676c:	01a6ab1f 	.word	0x01a6ab1f
 8006770:	01e84800 	.word	0x01e84800

08006774 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006774:	b480      	push	{r7}
 8006776:	b083      	sub	sp, #12
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	689b      	ldr	r3, [r3, #8]
 8006780:	f043 0201 	orr.w	r2, r3, #1
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006788:	2300      	movs	r3, #0
}
 800678a:	4618      	mov	r0, r3
 800678c:	370c      	adds	r7, #12
 800678e:	46bd      	mov	sp, r7
 8006790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006794:	4770      	bx	lr

08006796 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006796:	b480      	push	{r7}
 8006798:	b083      	sub	sp, #12
 800679a:	af00      	add	r7, sp, #0
 800679c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	689b      	ldr	r3, [r3, #8]
 80067a2:	f023 0201 	bic.w	r2, r3, #1
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80067aa:	2300      	movs	r3, #0
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	370c      	adds	r7, #12
 80067b0:	46bd      	mov	sp, r7
 80067b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b6:	4770      	bx	lr

080067b8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b084      	sub	sp, #16
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
 80067c0:	460b      	mov	r3, r1
 80067c2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80067c4:	2300      	movs	r3, #0
 80067c6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	68db      	ldr	r3, [r3, #12]
 80067cc:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80067d4:	78fb      	ldrb	r3, [r7, #3]
 80067d6:	2b01      	cmp	r3, #1
 80067d8:	d115      	bne.n	8006806 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	68db      	ldr	r3, [r3, #12]
 80067de:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80067e6:	200a      	movs	r0, #10
 80067e8:	f7fb f924 	bl	8001a34 <HAL_Delay>
      ms += 10U;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	330a      	adds	r3, #10
 80067f0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f001 f933 	bl	8007a5e <USB_GetMode>
 80067f8:	4603      	mov	r3, r0
 80067fa:	2b01      	cmp	r3, #1
 80067fc:	d01e      	beq.n	800683c <USB_SetCurrentMode+0x84>
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2bc7      	cmp	r3, #199	@ 0xc7
 8006802:	d9f0      	bls.n	80067e6 <USB_SetCurrentMode+0x2e>
 8006804:	e01a      	b.n	800683c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006806:	78fb      	ldrb	r3, [r7, #3]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d115      	bne.n	8006838 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	68db      	ldr	r3, [r3, #12]
 8006810:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006818:	200a      	movs	r0, #10
 800681a:	f7fb f90b 	bl	8001a34 <HAL_Delay>
      ms += 10U;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	330a      	adds	r3, #10
 8006822:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f001 f91a 	bl	8007a5e <USB_GetMode>
 800682a:	4603      	mov	r3, r0
 800682c:	2b00      	cmp	r3, #0
 800682e:	d005      	beq.n	800683c <USB_SetCurrentMode+0x84>
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2bc7      	cmp	r3, #199	@ 0xc7
 8006834:	d9f0      	bls.n	8006818 <USB_SetCurrentMode+0x60>
 8006836:	e001      	b.n	800683c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006838:	2301      	movs	r3, #1
 800683a:	e005      	b.n	8006848 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	2bc8      	cmp	r3, #200	@ 0xc8
 8006840:	d101      	bne.n	8006846 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006842:	2301      	movs	r3, #1
 8006844:	e000      	b.n	8006848 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006846:	2300      	movs	r3, #0
}
 8006848:	4618      	mov	r0, r3
 800684a:	3710      	adds	r7, #16
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}

08006850 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006850:	b084      	sub	sp, #16
 8006852:	b580      	push	{r7, lr}
 8006854:	b086      	sub	sp, #24
 8006856:	af00      	add	r7, sp, #0
 8006858:	6078      	str	r0, [r7, #4]
 800685a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800685e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006862:	2300      	movs	r3, #0
 8006864:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800686a:	2300      	movs	r3, #0
 800686c:	613b      	str	r3, [r7, #16]
 800686e:	e009      	b.n	8006884 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006870:	687a      	ldr	r2, [r7, #4]
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	3340      	adds	r3, #64	@ 0x40
 8006876:	009b      	lsls	r3, r3, #2
 8006878:	4413      	add	r3, r2
 800687a:	2200      	movs	r2, #0
 800687c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	3301      	adds	r3, #1
 8006882:	613b      	str	r3, [r7, #16]
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	2b0e      	cmp	r3, #14
 8006888:	d9f2      	bls.n	8006870 <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800688a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800688e:	2b00      	cmp	r3, #0
 8006890:	d11c      	bne.n	80068cc <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	68fa      	ldr	r2, [r7, #12]
 800689c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80068a0:	f043 0302 	orr.w	r3, r3, #2
 80068a4:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068aa:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	601a      	str	r2, [r3, #0]
 80068ca:	e005      	b.n	80068d8 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068d0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80068de:	461a      	mov	r2, r3
 80068e0:	2300      	movs	r3, #0
 80068e2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80068e4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d10d      	bne.n	8006908 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80068ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d104      	bne.n	80068fe <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80068f4:	2100      	movs	r1, #0
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f000 f968 	bl	8006bcc <USB_SetDevSpeed>
 80068fc:	e008      	b.n	8006910 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80068fe:	2101      	movs	r1, #1
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f000 f963 	bl	8006bcc <USB_SetDevSpeed>
 8006906:	e003      	b.n	8006910 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006908:	2103      	movs	r1, #3
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f000 f95e 	bl	8006bcc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006910:	2110      	movs	r1, #16
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f000 f8fa 	bl	8006b0c <USB_FlushTxFifo>
 8006918:	4603      	mov	r3, r0
 800691a:	2b00      	cmp	r3, #0
 800691c:	d001      	beq.n	8006922 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800691e:	2301      	movs	r3, #1
 8006920:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f000 f924 	bl	8006b70 <USB_FlushRxFifo>
 8006928:	4603      	mov	r3, r0
 800692a:	2b00      	cmp	r3, #0
 800692c:	d001      	beq.n	8006932 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800692e:	2301      	movs	r3, #1
 8006930:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006938:	461a      	mov	r2, r3
 800693a:	2300      	movs	r3, #0
 800693c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006944:	461a      	mov	r2, r3
 8006946:	2300      	movs	r3, #0
 8006948:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006950:	461a      	mov	r2, r3
 8006952:	2300      	movs	r3, #0
 8006954:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006956:	2300      	movs	r3, #0
 8006958:	613b      	str	r3, [r7, #16]
 800695a:	e043      	b.n	80069e4 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	015a      	lsls	r2, r3, #5
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	4413      	add	r3, r2
 8006964:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800696e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006972:	d118      	bne.n	80069a6 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d10a      	bne.n	8006990 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	015a      	lsls	r2, r3, #5
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	4413      	add	r3, r2
 8006982:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006986:	461a      	mov	r2, r3
 8006988:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800698c:	6013      	str	r3, [r2, #0]
 800698e:	e013      	b.n	80069b8 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006990:	693b      	ldr	r3, [r7, #16]
 8006992:	015a      	lsls	r2, r3, #5
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	4413      	add	r3, r2
 8006998:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800699c:	461a      	mov	r2, r3
 800699e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80069a2:	6013      	str	r3, [r2, #0]
 80069a4:	e008      	b.n	80069b8 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	015a      	lsls	r2, r3, #5
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	4413      	add	r3, r2
 80069ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069b2:	461a      	mov	r2, r3
 80069b4:	2300      	movs	r3, #0
 80069b6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	015a      	lsls	r2, r3, #5
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	4413      	add	r3, r2
 80069c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069c4:	461a      	mov	r2, r3
 80069c6:	2300      	movs	r3, #0
 80069c8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	015a      	lsls	r2, r3, #5
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	4413      	add	r3, r2
 80069d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069d6:	461a      	mov	r2, r3
 80069d8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80069dc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	3301      	adds	r3, #1
 80069e2:	613b      	str	r3, [r7, #16]
 80069e4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80069e8:	461a      	mov	r2, r3
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d3b5      	bcc.n	800695c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80069f0:	2300      	movs	r3, #0
 80069f2:	613b      	str	r3, [r7, #16]
 80069f4:	e043      	b.n	8006a7e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	015a      	lsls	r2, r3, #5
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	4413      	add	r3, r2
 80069fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006a08:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006a0c:	d118      	bne.n	8006a40 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d10a      	bne.n	8006a2a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	015a      	lsls	r2, r3, #5
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	4413      	add	r3, r2
 8006a1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a20:	461a      	mov	r2, r3
 8006a22:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006a26:	6013      	str	r3, [r2, #0]
 8006a28:	e013      	b.n	8006a52 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	015a      	lsls	r2, r3, #5
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	4413      	add	r3, r2
 8006a32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a36:	461a      	mov	r2, r3
 8006a38:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006a3c:	6013      	str	r3, [r2, #0]
 8006a3e:	e008      	b.n	8006a52 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	015a      	lsls	r2, r3, #5
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	4413      	add	r3, r2
 8006a48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a4c:	461a      	mov	r2, r3
 8006a4e:	2300      	movs	r3, #0
 8006a50:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	015a      	lsls	r2, r3, #5
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	4413      	add	r3, r2
 8006a5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a5e:	461a      	mov	r2, r3
 8006a60:	2300      	movs	r3, #0
 8006a62:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	015a      	lsls	r2, r3, #5
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	4413      	add	r3, r2
 8006a6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a70:	461a      	mov	r2, r3
 8006a72:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006a76:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	3301      	adds	r3, #1
 8006a7c:	613b      	str	r3, [r7, #16]
 8006a7e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006a82:	461a      	mov	r2, r3
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d3b5      	bcc.n	80069f6 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a90:	691b      	ldr	r3, [r3, #16]
 8006a92:	68fa      	ldr	r2, [r7, #12]
 8006a94:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006a98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006a9c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006aaa:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006aac:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d105      	bne.n	8006ac0 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	699b      	ldr	r3, [r3, #24]
 8006ab8:	f043 0210 	orr.w	r2, r3, #16
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	699a      	ldr	r2, [r3, #24]
 8006ac4:	4b10      	ldr	r3, [pc, #64]	@ (8006b08 <USB_DevInit+0x2b8>)
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	687a      	ldr	r2, [r7, #4]
 8006aca:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006acc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d005      	beq.n	8006ae0 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	699b      	ldr	r3, [r3, #24]
 8006ad8:	f043 0208 	orr.w	r2, r3, #8
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006ae0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006ae4:	2b01      	cmp	r3, #1
 8006ae6:	d107      	bne.n	8006af8 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	699b      	ldr	r3, [r3, #24]
 8006aec:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006af0:	f043 0304 	orr.w	r3, r3, #4
 8006af4:	687a      	ldr	r2, [r7, #4]
 8006af6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006af8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3718      	adds	r7, #24
 8006afe:	46bd      	mov	sp, r7
 8006b00:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006b04:	b004      	add	sp, #16
 8006b06:	4770      	bx	lr
 8006b08:	803c3800 	.word	0x803c3800

08006b0c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b085      	sub	sp, #20
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
 8006b14:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006b16:	2300      	movs	r3, #0
 8006b18:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	3301      	adds	r3, #1
 8006b1e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006b26:	d901      	bls.n	8006b2c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006b28:	2303      	movs	r3, #3
 8006b2a:	e01b      	b.n	8006b64 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	691b      	ldr	r3, [r3, #16]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	daf2      	bge.n	8006b1a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006b34:	2300      	movs	r3, #0
 8006b36:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	019b      	lsls	r3, r3, #6
 8006b3c:	f043 0220 	orr.w	r2, r3, #32
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	3301      	adds	r3, #1
 8006b48:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006b50:	d901      	bls.n	8006b56 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006b52:	2303      	movs	r3, #3
 8006b54:	e006      	b.n	8006b64 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	691b      	ldr	r3, [r3, #16]
 8006b5a:	f003 0320 	and.w	r3, r3, #32
 8006b5e:	2b20      	cmp	r3, #32
 8006b60:	d0f0      	beq.n	8006b44 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006b62:	2300      	movs	r3, #0
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	3714      	adds	r7, #20
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6e:	4770      	bx	lr

08006b70 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b085      	sub	sp, #20
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006b78:	2300      	movs	r3, #0
 8006b7a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	3301      	adds	r3, #1
 8006b80:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006b88:	d901      	bls.n	8006b8e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006b8a:	2303      	movs	r3, #3
 8006b8c:	e018      	b.n	8006bc0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	691b      	ldr	r3, [r3, #16]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	daf2      	bge.n	8006b7c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006b96:	2300      	movs	r3, #0
 8006b98:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2210      	movs	r2, #16
 8006b9e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	3301      	adds	r3, #1
 8006ba4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006bac:	d901      	bls.n	8006bb2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006bae:	2303      	movs	r3, #3
 8006bb0:	e006      	b.n	8006bc0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	691b      	ldr	r3, [r3, #16]
 8006bb6:	f003 0310 	and.w	r3, r3, #16
 8006bba:	2b10      	cmp	r3, #16
 8006bbc:	d0f0      	beq.n	8006ba0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006bbe:	2300      	movs	r3, #0
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3714      	adds	r7, #20
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bca:	4770      	bx	lr

08006bcc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b085      	sub	sp, #20
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
 8006bd4:	460b      	mov	r3, r1
 8006bd6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006be2:	681a      	ldr	r2, [r3, #0]
 8006be4:	78fb      	ldrb	r3, [r7, #3]
 8006be6:	68f9      	ldr	r1, [r7, #12]
 8006be8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006bec:	4313      	orrs	r3, r2
 8006bee:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006bf0:	2300      	movs	r3, #0
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	3714      	adds	r7, #20
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfc:	4770      	bx	lr

08006bfe <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8006bfe:	b480      	push	{r7}
 8006c00:	b087      	sub	sp, #28
 8006c02:	af00      	add	r7, sp, #0
 8006c04:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c10:	689b      	ldr	r3, [r3, #8]
 8006c12:	f003 0306 	and.w	r3, r3, #6
 8006c16:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d102      	bne.n	8006c24 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	75fb      	strb	r3, [r7, #23]
 8006c22:	e00a      	b.n	8006c3a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	2b02      	cmp	r3, #2
 8006c28:	d002      	beq.n	8006c30 <USB_GetDevSpeed+0x32>
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	2b06      	cmp	r3, #6
 8006c2e:	d102      	bne.n	8006c36 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006c30:	2302      	movs	r3, #2
 8006c32:	75fb      	strb	r3, [r7, #23]
 8006c34:	e001      	b.n	8006c3a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006c36:	230f      	movs	r3, #15
 8006c38:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006c3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	371c      	adds	r7, #28
 8006c40:	46bd      	mov	sp, r7
 8006c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c46:	4770      	bx	lr

08006c48 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b085      	sub	sp, #20
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
 8006c50:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	781b      	ldrb	r3, [r3, #0]
 8006c5a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	785b      	ldrb	r3, [r3, #1]
 8006c60:	2b01      	cmp	r3, #1
 8006c62:	d13a      	bne.n	8006cda <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c6a:	69da      	ldr	r2, [r3, #28]
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	781b      	ldrb	r3, [r3, #0]
 8006c70:	f003 030f 	and.w	r3, r3, #15
 8006c74:	2101      	movs	r1, #1
 8006c76:	fa01 f303 	lsl.w	r3, r1, r3
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	68f9      	ldr	r1, [r7, #12]
 8006c7e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006c82:	4313      	orrs	r3, r2
 8006c84:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	015a      	lsls	r2, r3, #5
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	4413      	add	r3, r2
 8006c8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d155      	bne.n	8006d48 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	015a      	lsls	r2, r3, #5
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	4413      	add	r3, r2
 8006ca4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ca8:	681a      	ldr	r2, [r3, #0]
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	689b      	ldr	r3, [r3, #8]
 8006cae:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	791b      	ldrb	r3, [r3, #4]
 8006cb6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006cb8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	059b      	lsls	r3, r3, #22
 8006cbe:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	68ba      	ldr	r2, [r7, #8]
 8006cc4:	0151      	lsls	r1, r2, #5
 8006cc6:	68fa      	ldr	r2, [r7, #12]
 8006cc8:	440a      	add	r2, r1
 8006cca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006cce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006cd2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006cd6:	6013      	str	r3, [r2, #0]
 8006cd8:	e036      	b.n	8006d48 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ce0:	69da      	ldr	r2, [r3, #28]
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	781b      	ldrb	r3, [r3, #0]
 8006ce6:	f003 030f 	and.w	r3, r3, #15
 8006cea:	2101      	movs	r1, #1
 8006cec:	fa01 f303 	lsl.w	r3, r1, r3
 8006cf0:	041b      	lsls	r3, r3, #16
 8006cf2:	68f9      	ldr	r1, [r7, #12]
 8006cf4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006cf8:	4313      	orrs	r3, r2
 8006cfa:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	015a      	lsls	r2, r3, #5
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	4413      	add	r3, r2
 8006d04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d11a      	bne.n	8006d48 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	015a      	lsls	r2, r3, #5
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	4413      	add	r3, r2
 8006d1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d1e:	681a      	ldr	r2, [r3, #0]
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	689b      	ldr	r3, [r3, #8]
 8006d24:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	791b      	ldrb	r3, [r3, #4]
 8006d2c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006d2e:	430b      	orrs	r3, r1
 8006d30:	4313      	orrs	r3, r2
 8006d32:	68ba      	ldr	r2, [r7, #8]
 8006d34:	0151      	lsls	r1, r2, #5
 8006d36:	68fa      	ldr	r2, [r7, #12]
 8006d38:	440a      	add	r2, r1
 8006d3a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d46:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006d48:	2300      	movs	r3, #0
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	3714      	adds	r7, #20
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d54:	4770      	bx	lr
	...

08006d58 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b085      	sub	sp, #20
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
 8006d60:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	781b      	ldrb	r3, [r3, #0]
 8006d6a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	785b      	ldrb	r3, [r3, #1]
 8006d70:	2b01      	cmp	r3, #1
 8006d72:	d161      	bne.n	8006e38 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	015a      	lsls	r2, r3, #5
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	4413      	add	r3, r2
 8006d7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006d86:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006d8a:	d11f      	bne.n	8006dcc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	015a      	lsls	r2, r3, #5
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	4413      	add	r3, r2
 8006d94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	68ba      	ldr	r2, [r7, #8]
 8006d9c:	0151      	lsls	r1, r2, #5
 8006d9e:	68fa      	ldr	r2, [r7, #12]
 8006da0:	440a      	add	r2, r1
 8006da2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006da6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006daa:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	015a      	lsls	r2, r3, #5
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	4413      	add	r3, r2
 8006db4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	68ba      	ldr	r2, [r7, #8]
 8006dbc:	0151      	lsls	r1, r2, #5
 8006dbe:	68fa      	ldr	r2, [r7, #12]
 8006dc0:	440a      	add	r2, r1
 8006dc2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006dc6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006dca:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006dd2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	781b      	ldrb	r3, [r3, #0]
 8006dd8:	f003 030f 	and.w	r3, r3, #15
 8006ddc:	2101      	movs	r1, #1
 8006dde:	fa01 f303 	lsl.w	r3, r1, r3
 8006de2:	b29b      	uxth	r3, r3
 8006de4:	43db      	mvns	r3, r3
 8006de6:	68f9      	ldr	r1, [r7, #12]
 8006de8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006dec:	4013      	ands	r3, r2
 8006dee:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006df6:	69da      	ldr	r2, [r3, #28]
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	781b      	ldrb	r3, [r3, #0]
 8006dfc:	f003 030f 	and.w	r3, r3, #15
 8006e00:	2101      	movs	r1, #1
 8006e02:	fa01 f303 	lsl.w	r3, r1, r3
 8006e06:	b29b      	uxth	r3, r3
 8006e08:	43db      	mvns	r3, r3
 8006e0a:	68f9      	ldr	r1, [r7, #12]
 8006e0c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006e10:	4013      	ands	r3, r2
 8006e12:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	015a      	lsls	r2, r3, #5
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	4413      	add	r3, r2
 8006e1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e20:	681a      	ldr	r2, [r3, #0]
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	0159      	lsls	r1, r3, #5
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	440b      	add	r3, r1
 8006e2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e2e:	4619      	mov	r1, r3
 8006e30:	4b35      	ldr	r3, [pc, #212]	@ (8006f08 <USB_DeactivateEndpoint+0x1b0>)
 8006e32:	4013      	ands	r3, r2
 8006e34:	600b      	str	r3, [r1, #0]
 8006e36:	e060      	b.n	8006efa <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	015a      	lsls	r2, r3, #5
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	4413      	add	r3, r2
 8006e40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006e4a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006e4e:	d11f      	bne.n	8006e90 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	015a      	lsls	r2, r3, #5
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	4413      	add	r3, r2
 8006e58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	68ba      	ldr	r2, [r7, #8]
 8006e60:	0151      	lsls	r1, r2, #5
 8006e62:	68fa      	ldr	r2, [r7, #12]
 8006e64:	440a      	add	r2, r1
 8006e66:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006e6a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006e6e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	015a      	lsls	r2, r3, #5
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	4413      	add	r3, r2
 8006e78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	68ba      	ldr	r2, [r7, #8]
 8006e80:	0151      	lsls	r1, r2, #5
 8006e82:	68fa      	ldr	r2, [r7, #12]
 8006e84:	440a      	add	r2, r1
 8006e86:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006e8a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006e8e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e96:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	781b      	ldrb	r3, [r3, #0]
 8006e9c:	f003 030f 	and.w	r3, r3, #15
 8006ea0:	2101      	movs	r1, #1
 8006ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8006ea6:	041b      	lsls	r3, r3, #16
 8006ea8:	43db      	mvns	r3, r3
 8006eaa:	68f9      	ldr	r1, [r7, #12]
 8006eac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006eb0:	4013      	ands	r3, r2
 8006eb2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006eba:	69da      	ldr	r2, [r3, #28]
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	781b      	ldrb	r3, [r3, #0]
 8006ec0:	f003 030f 	and.w	r3, r3, #15
 8006ec4:	2101      	movs	r1, #1
 8006ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8006eca:	041b      	lsls	r3, r3, #16
 8006ecc:	43db      	mvns	r3, r3
 8006ece:	68f9      	ldr	r1, [r7, #12]
 8006ed0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006ed4:	4013      	ands	r3, r2
 8006ed6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	015a      	lsls	r2, r3, #5
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	4413      	add	r3, r2
 8006ee0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ee4:	681a      	ldr	r2, [r3, #0]
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	0159      	lsls	r1, r3, #5
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	440b      	add	r3, r1
 8006eee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ef2:	4619      	mov	r1, r3
 8006ef4:	4b05      	ldr	r3, [pc, #20]	@ (8006f0c <USB_DeactivateEndpoint+0x1b4>)
 8006ef6:	4013      	ands	r3, r2
 8006ef8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006efa:	2300      	movs	r3, #0
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	3714      	adds	r7, #20
 8006f00:	46bd      	mov	sp, r7
 8006f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f06:	4770      	bx	lr
 8006f08:	ec337800 	.word	0xec337800
 8006f0c:	eff37800 	.word	0xeff37800

08006f10 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b08a      	sub	sp, #40	@ 0x28
 8006f14:	af02      	add	r7, sp, #8
 8006f16:	60f8      	str	r0, [r7, #12]
 8006f18:	60b9      	str	r1, [r7, #8]
 8006f1a:	4613      	mov	r3, r2
 8006f1c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	781b      	ldrb	r3, [r3, #0]
 8006f26:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	785b      	ldrb	r3, [r3, #1]
 8006f2c:	2b01      	cmp	r3, #1
 8006f2e:	f040 817a 	bne.w	8007226 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	691b      	ldr	r3, [r3, #16]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d132      	bne.n	8006fa0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006f3a:	69bb      	ldr	r3, [r7, #24]
 8006f3c:	015a      	lsls	r2, r3, #5
 8006f3e:	69fb      	ldr	r3, [r7, #28]
 8006f40:	4413      	add	r3, r2
 8006f42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f46:	691b      	ldr	r3, [r3, #16]
 8006f48:	69ba      	ldr	r2, [r7, #24]
 8006f4a:	0151      	lsls	r1, r2, #5
 8006f4c:	69fa      	ldr	r2, [r7, #28]
 8006f4e:	440a      	add	r2, r1
 8006f50:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f54:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006f58:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006f5c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006f5e:	69bb      	ldr	r3, [r7, #24]
 8006f60:	015a      	lsls	r2, r3, #5
 8006f62:	69fb      	ldr	r3, [r7, #28]
 8006f64:	4413      	add	r3, r2
 8006f66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f6a:	691b      	ldr	r3, [r3, #16]
 8006f6c:	69ba      	ldr	r2, [r7, #24]
 8006f6e:	0151      	lsls	r1, r2, #5
 8006f70:	69fa      	ldr	r2, [r7, #28]
 8006f72:	440a      	add	r2, r1
 8006f74:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f78:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006f7c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006f7e:	69bb      	ldr	r3, [r7, #24]
 8006f80:	015a      	lsls	r2, r3, #5
 8006f82:	69fb      	ldr	r3, [r7, #28]
 8006f84:	4413      	add	r3, r2
 8006f86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f8a:	691b      	ldr	r3, [r3, #16]
 8006f8c:	69ba      	ldr	r2, [r7, #24]
 8006f8e:	0151      	lsls	r1, r2, #5
 8006f90:	69fa      	ldr	r2, [r7, #28]
 8006f92:	440a      	add	r2, r1
 8006f94:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f98:	0cdb      	lsrs	r3, r3, #19
 8006f9a:	04db      	lsls	r3, r3, #19
 8006f9c:	6113      	str	r3, [r2, #16]
 8006f9e:	e092      	b.n	80070c6 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006fa0:	69bb      	ldr	r3, [r7, #24]
 8006fa2:	015a      	lsls	r2, r3, #5
 8006fa4:	69fb      	ldr	r3, [r7, #28]
 8006fa6:	4413      	add	r3, r2
 8006fa8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fac:	691b      	ldr	r3, [r3, #16]
 8006fae:	69ba      	ldr	r2, [r7, #24]
 8006fb0:	0151      	lsls	r1, r2, #5
 8006fb2:	69fa      	ldr	r2, [r7, #28]
 8006fb4:	440a      	add	r2, r1
 8006fb6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006fba:	0cdb      	lsrs	r3, r3, #19
 8006fbc:	04db      	lsls	r3, r3, #19
 8006fbe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006fc0:	69bb      	ldr	r3, [r7, #24]
 8006fc2:	015a      	lsls	r2, r3, #5
 8006fc4:	69fb      	ldr	r3, [r7, #28]
 8006fc6:	4413      	add	r3, r2
 8006fc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fcc:	691b      	ldr	r3, [r3, #16]
 8006fce:	69ba      	ldr	r2, [r7, #24]
 8006fd0:	0151      	lsls	r1, r2, #5
 8006fd2:	69fa      	ldr	r2, [r7, #28]
 8006fd4:	440a      	add	r2, r1
 8006fd6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006fda:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006fde:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006fe2:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006fe4:	69bb      	ldr	r3, [r7, #24]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d11a      	bne.n	8007020 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	691a      	ldr	r2, [r3, #16]
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	689b      	ldr	r3, [r3, #8]
 8006ff2:	429a      	cmp	r2, r3
 8006ff4:	d903      	bls.n	8006ffe <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	689a      	ldr	r2, [r3, #8]
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006ffe:	69bb      	ldr	r3, [r7, #24]
 8007000:	015a      	lsls	r2, r3, #5
 8007002:	69fb      	ldr	r3, [r7, #28]
 8007004:	4413      	add	r3, r2
 8007006:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800700a:	691b      	ldr	r3, [r3, #16]
 800700c:	69ba      	ldr	r2, [r7, #24]
 800700e:	0151      	lsls	r1, r2, #5
 8007010:	69fa      	ldr	r2, [r7, #28]
 8007012:	440a      	add	r2, r1
 8007014:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007018:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800701c:	6113      	str	r3, [r2, #16]
 800701e:	e01b      	b.n	8007058 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007020:	69bb      	ldr	r3, [r7, #24]
 8007022:	015a      	lsls	r2, r3, #5
 8007024:	69fb      	ldr	r3, [r7, #28]
 8007026:	4413      	add	r3, r2
 8007028:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800702c:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	6919      	ldr	r1, [r3, #16]
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	689b      	ldr	r3, [r3, #8]
 8007036:	440b      	add	r3, r1
 8007038:	1e59      	subs	r1, r3, #1
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	689b      	ldr	r3, [r3, #8]
 800703e:	fbb1 f3f3 	udiv	r3, r1, r3
 8007042:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007044:	4ba2      	ldr	r3, [pc, #648]	@ (80072d0 <USB_EPStartXfer+0x3c0>)
 8007046:	400b      	ands	r3, r1
 8007048:	69b9      	ldr	r1, [r7, #24]
 800704a:	0148      	lsls	r0, r1, #5
 800704c:	69f9      	ldr	r1, [r7, #28]
 800704e:	4401      	add	r1, r0
 8007050:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007054:	4313      	orrs	r3, r2
 8007056:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007058:	69bb      	ldr	r3, [r7, #24]
 800705a:	015a      	lsls	r2, r3, #5
 800705c:	69fb      	ldr	r3, [r7, #28]
 800705e:	4413      	add	r3, r2
 8007060:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007064:	691a      	ldr	r2, [r3, #16]
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	691b      	ldr	r3, [r3, #16]
 800706a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800706e:	69b9      	ldr	r1, [r7, #24]
 8007070:	0148      	lsls	r0, r1, #5
 8007072:	69f9      	ldr	r1, [r7, #28]
 8007074:	4401      	add	r1, r0
 8007076:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800707a:	4313      	orrs	r3, r2
 800707c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	791b      	ldrb	r3, [r3, #4]
 8007082:	2b01      	cmp	r3, #1
 8007084:	d11f      	bne.n	80070c6 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007086:	69bb      	ldr	r3, [r7, #24]
 8007088:	015a      	lsls	r2, r3, #5
 800708a:	69fb      	ldr	r3, [r7, #28]
 800708c:	4413      	add	r3, r2
 800708e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007092:	691b      	ldr	r3, [r3, #16]
 8007094:	69ba      	ldr	r2, [r7, #24]
 8007096:	0151      	lsls	r1, r2, #5
 8007098:	69fa      	ldr	r2, [r7, #28]
 800709a:	440a      	add	r2, r1
 800709c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80070a0:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80070a4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80070a6:	69bb      	ldr	r3, [r7, #24]
 80070a8:	015a      	lsls	r2, r3, #5
 80070aa:	69fb      	ldr	r3, [r7, #28]
 80070ac:	4413      	add	r3, r2
 80070ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070b2:	691b      	ldr	r3, [r3, #16]
 80070b4:	69ba      	ldr	r2, [r7, #24]
 80070b6:	0151      	lsls	r1, r2, #5
 80070b8:	69fa      	ldr	r2, [r7, #28]
 80070ba:	440a      	add	r2, r1
 80070bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80070c0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80070c4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80070c6:	79fb      	ldrb	r3, [r7, #7]
 80070c8:	2b01      	cmp	r3, #1
 80070ca:	d14b      	bne.n	8007164 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	69db      	ldr	r3, [r3, #28]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d009      	beq.n	80070e8 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80070d4:	69bb      	ldr	r3, [r7, #24]
 80070d6:	015a      	lsls	r2, r3, #5
 80070d8:	69fb      	ldr	r3, [r7, #28]
 80070da:	4413      	add	r3, r2
 80070dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070e0:	461a      	mov	r2, r3
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	69db      	ldr	r3, [r3, #28]
 80070e6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	791b      	ldrb	r3, [r3, #4]
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	d128      	bne.n	8007142 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80070f0:	69fb      	ldr	r3, [r7, #28]
 80070f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070f6:	689b      	ldr	r3, [r3, #8]
 80070f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d110      	bne.n	8007122 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007100:	69bb      	ldr	r3, [r7, #24]
 8007102:	015a      	lsls	r2, r3, #5
 8007104:	69fb      	ldr	r3, [r7, #28]
 8007106:	4413      	add	r3, r2
 8007108:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	69ba      	ldr	r2, [r7, #24]
 8007110:	0151      	lsls	r1, r2, #5
 8007112:	69fa      	ldr	r2, [r7, #28]
 8007114:	440a      	add	r2, r1
 8007116:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800711a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800711e:	6013      	str	r3, [r2, #0]
 8007120:	e00f      	b.n	8007142 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007122:	69bb      	ldr	r3, [r7, #24]
 8007124:	015a      	lsls	r2, r3, #5
 8007126:	69fb      	ldr	r3, [r7, #28]
 8007128:	4413      	add	r3, r2
 800712a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	69ba      	ldr	r2, [r7, #24]
 8007132:	0151      	lsls	r1, r2, #5
 8007134:	69fa      	ldr	r2, [r7, #28]
 8007136:	440a      	add	r2, r1
 8007138:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800713c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007140:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007142:	69bb      	ldr	r3, [r7, #24]
 8007144:	015a      	lsls	r2, r3, #5
 8007146:	69fb      	ldr	r3, [r7, #28]
 8007148:	4413      	add	r3, r2
 800714a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	69ba      	ldr	r2, [r7, #24]
 8007152:	0151      	lsls	r1, r2, #5
 8007154:	69fa      	ldr	r2, [r7, #28]
 8007156:	440a      	add	r2, r1
 8007158:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800715c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007160:	6013      	str	r3, [r2, #0]
 8007162:	e165      	b.n	8007430 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007164:	69bb      	ldr	r3, [r7, #24]
 8007166:	015a      	lsls	r2, r3, #5
 8007168:	69fb      	ldr	r3, [r7, #28]
 800716a:	4413      	add	r3, r2
 800716c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	69ba      	ldr	r2, [r7, #24]
 8007174:	0151      	lsls	r1, r2, #5
 8007176:	69fa      	ldr	r2, [r7, #28]
 8007178:	440a      	add	r2, r1
 800717a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800717e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007182:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	791b      	ldrb	r3, [r3, #4]
 8007188:	2b01      	cmp	r3, #1
 800718a:	d015      	beq.n	80071b8 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	691b      	ldr	r3, [r3, #16]
 8007190:	2b00      	cmp	r3, #0
 8007192:	f000 814d 	beq.w	8007430 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007196:	69fb      	ldr	r3, [r7, #28]
 8007198:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800719c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	781b      	ldrb	r3, [r3, #0]
 80071a2:	f003 030f 	and.w	r3, r3, #15
 80071a6:	2101      	movs	r1, #1
 80071a8:	fa01 f303 	lsl.w	r3, r1, r3
 80071ac:	69f9      	ldr	r1, [r7, #28]
 80071ae:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80071b2:	4313      	orrs	r3, r2
 80071b4:	634b      	str	r3, [r1, #52]	@ 0x34
 80071b6:	e13b      	b.n	8007430 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80071b8:	69fb      	ldr	r3, [r7, #28]
 80071ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071be:	689b      	ldr	r3, [r3, #8]
 80071c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d110      	bne.n	80071ea <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80071c8:	69bb      	ldr	r3, [r7, #24]
 80071ca:	015a      	lsls	r2, r3, #5
 80071cc:	69fb      	ldr	r3, [r7, #28]
 80071ce:	4413      	add	r3, r2
 80071d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	69ba      	ldr	r2, [r7, #24]
 80071d8:	0151      	lsls	r1, r2, #5
 80071da:	69fa      	ldr	r2, [r7, #28]
 80071dc:	440a      	add	r2, r1
 80071de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80071e2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80071e6:	6013      	str	r3, [r2, #0]
 80071e8:	e00f      	b.n	800720a <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80071ea:	69bb      	ldr	r3, [r7, #24]
 80071ec:	015a      	lsls	r2, r3, #5
 80071ee:	69fb      	ldr	r3, [r7, #28]
 80071f0:	4413      	add	r3, r2
 80071f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	69ba      	ldr	r2, [r7, #24]
 80071fa:	0151      	lsls	r1, r2, #5
 80071fc:	69fa      	ldr	r2, [r7, #28]
 80071fe:	440a      	add	r2, r1
 8007200:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007204:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007208:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	68d9      	ldr	r1, [r3, #12]
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	781a      	ldrb	r2, [r3, #0]
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	691b      	ldr	r3, [r3, #16]
 8007216:	b298      	uxth	r0, r3
 8007218:	79fb      	ldrb	r3, [r7, #7]
 800721a:	9300      	str	r3, [sp, #0]
 800721c:	4603      	mov	r3, r0
 800721e:	68f8      	ldr	r0, [r7, #12]
 8007220:	f000 f9b8 	bl	8007594 <USB_WritePacket>
 8007224:	e104      	b.n	8007430 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007226:	69bb      	ldr	r3, [r7, #24]
 8007228:	015a      	lsls	r2, r3, #5
 800722a:	69fb      	ldr	r3, [r7, #28]
 800722c:	4413      	add	r3, r2
 800722e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007232:	691b      	ldr	r3, [r3, #16]
 8007234:	69ba      	ldr	r2, [r7, #24]
 8007236:	0151      	lsls	r1, r2, #5
 8007238:	69fa      	ldr	r2, [r7, #28]
 800723a:	440a      	add	r2, r1
 800723c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007240:	0cdb      	lsrs	r3, r3, #19
 8007242:	04db      	lsls	r3, r3, #19
 8007244:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007246:	69bb      	ldr	r3, [r7, #24]
 8007248:	015a      	lsls	r2, r3, #5
 800724a:	69fb      	ldr	r3, [r7, #28]
 800724c:	4413      	add	r3, r2
 800724e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007252:	691b      	ldr	r3, [r3, #16]
 8007254:	69ba      	ldr	r2, [r7, #24]
 8007256:	0151      	lsls	r1, r2, #5
 8007258:	69fa      	ldr	r2, [r7, #28]
 800725a:	440a      	add	r2, r1
 800725c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007260:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007264:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007268:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800726a:	69bb      	ldr	r3, [r7, #24]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d131      	bne.n	80072d4 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	691b      	ldr	r3, [r3, #16]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d003      	beq.n	8007280 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	689a      	ldr	r2, [r3, #8]
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	689a      	ldr	r2, [r3, #8]
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007288:	69bb      	ldr	r3, [r7, #24]
 800728a:	015a      	lsls	r2, r3, #5
 800728c:	69fb      	ldr	r3, [r7, #28]
 800728e:	4413      	add	r3, r2
 8007290:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007294:	691a      	ldr	r2, [r3, #16]
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	6a1b      	ldr	r3, [r3, #32]
 800729a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800729e:	69b9      	ldr	r1, [r7, #24]
 80072a0:	0148      	lsls	r0, r1, #5
 80072a2:	69f9      	ldr	r1, [r7, #28]
 80072a4:	4401      	add	r1, r0
 80072a6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80072aa:	4313      	orrs	r3, r2
 80072ac:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80072ae:	69bb      	ldr	r3, [r7, #24]
 80072b0:	015a      	lsls	r2, r3, #5
 80072b2:	69fb      	ldr	r3, [r7, #28]
 80072b4:	4413      	add	r3, r2
 80072b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072ba:	691b      	ldr	r3, [r3, #16]
 80072bc:	69ba      	ldr	r2, [r7, #24]
 80072be:	0151      	lsls	r1, r2, #5
 80072c0:	69fa      	ldr	r2, [r7, #28]
 80072c2:	440a      	add	r2, r1
 80072c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80072c8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80072cc:	6113      	str	r3, [r2, #16]
 80072ce:	e061      	b.n	8007394 <USB_EPStartXfer+0x484>
 80072d0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	691b      	ldr	r3, [r3, #16]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d123      	bne.n	8007324 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80072dc:	69bb      	ldr	r3, [r7, #24]
 80072de:	015a      	lsls	r2, r3, #5
 80072e0:	69fb      	ldr	r3, [r7, #28]
 80072e2:	4413      	add	r3, r2
 80072e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072e8:	691a      	ldr	r2, [r3, #16]
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	689b      	ldr	r3, [r3, #8]
 80072ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80072f2:	69b9      	ldr	r1, [r7, #24]
 80072f4:	0148      	lsls	r0, r1, #5
 80072f6:	69f9      	ldr	r1, [r7, #28]
 80072f8:	4401      	add	r1, r0
 80072fa:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80072fe:	4313      	orrs	r3, r2
 8007300:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007302:	69bb      	ldr	r3, [r7, #24]
 8007304:	015a      	lsls	r2, r3, #5
 8007306:	69fb      	ldr	r3, [r7, #28]
 8007308:	4413      	add	r3, r2
 800730a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800730e:	691b      	ldr	r3, [r3, #16]
 8007310:	69ba      	ldr	r2, [r7, #24]
 8007312:	0151      	lsls	r1, r2, #5
 8007314:	69fa      	ldr	r2, [r7, #28]
 8007316:	440a      	add	r2, r1
 8007318:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800731c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007320:	6113      	str	r3, [r2, #16]
 8007322:	e037      	b.n	8007394 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	691a      	ldr	r2, [r3, #16]
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	689b      	ldr	r3, [r3, #8]
 800732c:	4413      	add	r3, r2
 800732e:	1e5a      	subs	r2, r3, #1
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	689b      	ldr	r3, [r3, #8]
 8007334:	fbb2 f3f3 	udiv	r3, r2, r3
 8007338:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	689b      	ldr	r3, [r3, #8]
 800733e:	8afa      	ldrh	r2, [r7, #22]
 8007340:	fb03 f202 	mul.w	r2, r3, r2
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007348:	69bb      	ldr	r3, [r7, #24]
 800734a:	015a      	lsls	r2, r3, #5
 800734c:	69fb      	ldr	r3, [r7, #28]
 800734e:	4413      	add	r3, r2
 8007350:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007354:	691a      	ldr	r2, [r3, #16]
 8007356:	8afb      	ldrh	r3, [r7, #22]
 8007358:	04d9      	lsls	r1, r3, #19
 800735a:	4b38      	ldr	r3, [pc, #224]	@ (800743c <USB_EPStartXfer+0x52c>)
 800735c:	400b      	ands	r3, r1
 800735e:	69b9      	ldr	r1, [r7, #24]
 8007360:	0148      	lsls	r0, r1, #5
 8007362:	69f9      	ldr	r1, [r7, #28]
 8007364:	4401      	add	r1, r0
 8007366:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800736a:	4313      	orrs	r3, r2
 800736c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800736e:	69bb      	ldr	r3, [r7, #24]
 8007370:	015a      	lsls	r2, r3, #5
 8007372:	69fb      	ldr	r3, [r7, #28]
 8007374:	4413      	add	r3, r2
 8007376:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800737a:	691a      	ldr	r2, [r3, #16]
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	6a1b      	ldr	r3, [r3, #32]
 8007380:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007384:	69b9      	ldr	r1, [r7, #24]
 8007386:	0148      	lsls	r0, r1, #5
 8007388:	69f9      	ldr	r1, [r7, #28]
 800738a:	4401      	add	r1, r0
 800738c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007390:	4313      	orrs	r3, r2
 8007392:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8007394:	79fb      	ldrb	r3, [r7, #7]
 8007396:	2b01      	cmp	r3, #1
 8007398:	d10d      	bne.n	80073b6 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	68db      	ldr	r3, [r3, #12]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d009      	beq.n	80073b6 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	68d9      	ldr	r1, [r3, #12]
 80073a6:	69bb      	ldr	r3, [r7, #24]
 80073a8:	015a      	lsls	r2, r3, #5
 80073aa:	69fb      	ldr	r3, [r7, #28]
 80073ac:	4413      	add	r3, r2
 80073ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073b2:	460a      	mov	r2, r1
 80073b4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	791b      	ldrb	r3, [r3, #4]
 80073ba:	2b01      	cmp	r3, #1
 80073bc:	d128      	bne.n	8007410 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80073be:	69fb      	ldr	r3, [r7, #28]
 80073c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073c4:	689b      	ldr	r3, [r3, #8]
 80073c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d110      	bne.n	80073f0 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80073ce:	69bb      	ldr	r3, [r7, #24]
 80073d0:	015a      	lsls	r2, r3, #5
 80073d2:	69fb      	ldr	r3, [r7, #28]
 80073d4:	4413      	add	r3, r2
 80073d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	69ba      	ldr	r2, [r7, #24]
 80073de:	0151      	lsls	r1, r2, #5
 80073e0:	69fa      	ldr	r2, [r7, #28]
 80073e2:	440a      	add	r2, r1
 80073e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80073e8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80073ec:	6013      	str	r3, [r2, #0]
 80073ee:	e00f      	b.n	8007410 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80073f0:	69bb      	ldr	r3, [r7, #24]
 80073f2:	015a      	lsls	r2, r3, #5
 80073f4:	69fb      	ldr	r3, [r7, #28]
 80073f6:	4413      	add	r3, r2
 80073f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	69ba      	ldr	r2, [r7, #24]
 8007400:	0151      	lsls	r1, r2, #5
 8007402:	69fa      	ldr	r2, [r7, #28]
 8007404:	440a      	add	r2, r1
 8007406:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800740a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800740e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007410:	69bb      	ldr	r3, [r7, #24]
 8007412:	015a      	lsls	r2, r3, #5
 8007414:	69fb      	ldr	r3, [r7, #28]
 8007416:	4413      	add	r3, r2
 8007418:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	69ba      	ldr	r2, [r7, #24]
 8007420:	0151      	lsls	r1, r2, #5
 8007422:	69fa      	ldr	r2, [r7, #28]
 8007424:	440a      	add	r2, r1
 8007426:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800742a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800742e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007430:	2300      	movs	r3, #0
}
 8007432:	4618      	mov	r0, r3
 8007434:	3720      	adds	r7, #32
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}
 800743a:	bf00      	nop
 800743c:	1ff80000 	.word	0x1ff80000

08007440 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007440:	b480      	push	{r7}
 8007442:	b087      	sub	sp, #28
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
 8007448:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800744a:	2300      	movs	r3, #0
 800744c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800744e:	2300      	movs	r3, #0
 8007450:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	785b      	ldrb	r3, [r3, #1]
 800745a:	2b01      	cmp	r3, #1
 800745c:	d14a      	bne.n	80074f4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	781b      	ldrb	r3, [r3, #0]
 8007462:	015a      	lsls	r2, r3, #5
 8007464:	693b      	ldr	r3, [r7, #16]
 8007466:	4413      	add	r3, r2
 8007468:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007472:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007476:	f040 8086 	bne.w	8007586 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	781b      	ldrb	r3, [r3, #0]
 800747e:	015a      	lsls	r2, r3, #5
 8007480:	693b      	ldr	r3, [r7, #16]
 8007482:	4413      	add	r3, r2
 8007484:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	683a      	ldr	r2, [r7, #0]
 800748c:	7812      	ldrb	r2, [r2, #0]
 800748e:	0151      	lsls	r1, r2, #5
 8007490:	693a      	ldr	r2, [r7, #16]
 8007492:	440a      	add	r2, r1
 8007494:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007498:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800749c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	781b      	ldrb	r3, [r3, #0]
 80074a2:	015a      	lsls	r2, r3, #5
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	4413      	add	r3, r2
 80074a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	683a      	ldr	r2, [r7, #0]
 80074b0:	7812      	ldrb	r2, [r2, #0]
 80074b2:	0151      	lsls	r1, r2, #5
 80074b4:	693a      	ldr	r2, [r7, #16]
 80074b6:	440a      	add	r2, r1
 80074b8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80074bc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80074c0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	3301      	adds	r3, #1
 80074c6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	f242 7210 	movw	r2, #10000	@ 0x2710
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d902      	bls.n	80074d8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80074d2:	2301      	movs	r3, #1
 80074d4:	75fb      	strb	r3, [r7, #23]
          break;
 80074d6:	e056      	b.n	8007586 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	781b      	ldrb	r3, [r3, #0]
 80074dc:	015a      	lsls	r2, r3, #5
 80074de:	693b      	ldr	r3, [r7, #16]
 80074e0:	4413      	add	r3, r2
 80074e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80074ec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80074f0:	d0e7      	beq.n	80074c2 <USB_EPStopXfer+0x82>
 80074f2:	e048      	b.n	8007586 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	781b      	ldrb	r3, [r3, #0]
 80074f8:	015a      	lsls	r2, r3, #5
 80074fa:	693b      	ldr	r3, [r7, #16]
 80074fc:	4413      	add	r3, r2
 80074fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007508:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800750c:	d13b      	bne.n	8007586 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	781b      	ldrb	r3, [r3, #0]
 8007512:	015a      	lsls	r2, r3, #5
 8007514:	693b      	ldr	r3, [r7, #16]
 8007516:	4413      	add	r3, r2
 8007518:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	683a      	ldr	r2, [r7, #0]
 8007520:	7812      	ldrb	r2, [r2, #0]
 8007522:	0151      	lsls	r1, r2, #5
 8007524:	693a      	ldr	r2, [r7, #16]
 8007526:	440a      	add	r2, r1
 8007528:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800752c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007530:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	781b      	ldrb	r3, [r3, #0]
 8007536:	015a      	lsls	r2, r3, #5
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	4413      	add	r3, r2
 800753c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	683a      	ldr	r2, [r7, #0]
 8007544:	7812      	ldrb	r2, [r2, #0]
 8007546:	0151      	lsls	r1, r2, #5
 8007548:	693a      	ldr	r2, [r7, #16]
 800754a:	440a      	add	r2, r1
 800754c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007550:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007554:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	3301      	adds	r3, #1
 800755a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007562:	4293      	cmp	r3, r2
 8007564:	d902      	bls.n	800756c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007566:	2301      	movs	r3, #1
 8007568:	75fb      	strb	r3, [r7, #23]
          break;
 800756a:	e00c      	b.n	8007586 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	781b      	ldrb	r3, [r3, #0]
 8007570:	015a      	lsls	r2, r3, #5
 8007572:	693b      	ldr	r3, [r7, #16]
 8007574:	4413      	add	r3, r2
 8007576:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007580:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007584:	d0e7      	beq.n	8007556 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007586:	7dfb      	ldrb	r3, [r7, #23]
}
 8007588:	4618      	mov	r0, r3
 800758a:	371c      	adds	r7, #28
 800758c:	46bd      	mov	sp, r7
 800758e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007592:	4770      	bx	lr

08007594 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007594:	b480      	push	{r7}
 8007596:	b089      	sub	sp, #36	@ 0x24
 8007598:	af00      	add	r7, sp, #0
 800759a:	60f8      	str	r0, [r7, #12]
 800759c:	60b9      	str	r1, [r7, #8]
 800759e:	4611      	mov	r1, r2
 80075a0:	461a      	mov	r2, r3
 80075a2:	460b      	mov	r3, r1
 80075a4:	71fb      	strb	r3, [r7, #7]
 80075a6:	4613      	mov	r3, r2
 80075a8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80075b2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d123      	bne.n	8007602 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80075ba:	88bb      	ldrh	r3, [r7, #4]
 80075bc:	3303      	adds	r3, #3
 80075be:	089b      	lsrs	r3, r3, #2
 80075c0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80075c2:	2300      	movs	r3, #0
 80075c4:	61bb      	str	r3, [r7, #24]
 80075c6:	e018      	b.n	80075fa <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80075c8:	79fb      	ldrb	r3, [r7, #7]
 80075ca:	031a      	lsls	r2, r3, #12
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	4413      	add	r3, r2
 80075d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80075d4:	461a      	mov	r2, r3
 80075d6:	69fb      	ldr	r3, [r7, #28]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	6013      	str	r3, [r2, #0]
      pSrc++;
 80075dc:	69fb      	ldr	r3, [r7, #28]
 80075de:	3301      	adds	r3, #1
 80075e0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80075e2:	69fb      	ldr	r3, [r7, #28]
 80075e4:	3301      	adds	r3, #1
 80075e6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80075e8:	69fb      	ldr	r3, [r7, #28]
 80075ea:	3301      	adds	r3, #1
 80075ec:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80075ee:	69fb      	ldr	r3, [r7, #28]
 80075f0:	3301      	adds	r3, #1
 80075f2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80075f4:	69bb      	ldr	r3, [r7, #24]
 80075f6:	3301      	adds	r3, #1
 80075f8:	61bb      	str	r3, [r7, #24]
 80075fa:	69ba      	ldr	r2, [r7, #24]
 80075fc:	693b      	ldr	r3, [r7, #16]
 80075fe:	429a      	cmp	r2, r3
 8007600:	d3e2      	bcc.n	80075c8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007602:	2300      	movs	r3, #0
}
 8007604:	4618      	mov	r0, r3
 8007606:	3724      	adds	r7, #36	@ 0x24
 8007608:	46bd      	mov	sp, r7
 800760a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760e:	4770      	bx	lr

08007610 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007610:	b480      	push	{r7}
 8007612:	b08b      	sub	sp, #44	@ 0x2c
 8007614:	af00      	add	r7, sp, #0
 8007616:	60f8      	str	r0, [r7, #12]
 8007618:	60b9      	str	r1, [r7, #8]
 800761a:	4613      	mov	r3, r2
 800761c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007626:	88fb      	ldrh	r3, [r7, #6]
 8007628:	089b      	lsrs	r3, r3, #2
 800762a:	b29b      	uxth	r3, r3
 800762c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800762e:	88fb      	ldrh	r3, [r7, #6]
 8007630:	f003 0303 	and.w	r3, r3, #3
 8007634:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007636:	2300      	movs	r3, #0
 8007638:	623b      	str	r3, [r7, #32]
 800763a:	e014      	b.n	8007666 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800763c:	69bb      	ldr	r3, [r7, #24]
 800763e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007642:	681a      	ldr	r2, [r3, #0]
 8007644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007646:	601a      	str	r2, [r3, #0]
    pDest++;
 8007648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800764a:	3301      	adds	r3, #1
 800764c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800764e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007650:	3301      	adds	r3, #1
 8007652:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007656:	3301      	adds	r3, #1
 8007658:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800765a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800765c:	3301      	adds	r3, #1
 800765e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007660:	6a3b      	ldr	r3, [r7, #32]
 8007662:	3301      	adds	r3, #1
 8007664:	623b      	str	r3, [r7, #32]
 8007666:	6a3a      	ldr	r2, [r7, #32]
 8007668:	697b      	ldr	r3, [r7, #20]
 800766a:	429a      	cmp	r2, r3
 800766c:	d3e6      	bcc.n	800763c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800766e:	8bfb      	ldrh	r3, [r7, #30]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d01e      	beq.n	80076b2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007674:	2300      	movs	r3, #0
 8007676:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007678:	69bb      	ldr	r3, [r7, #24]
 800767a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800767e:	461a      	mov	r2, r3
 8007680:	f107 0310 	add.w	r3, r7, #16
 8007684:	6812      	ldr	r2, [r2, #0]
 8007686:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007688:	693a      	ldr	r2, [r7, #16]
 800768a:	6a3b      	ldr	r3, [r7, #32]
 800768c:	b2db      	uxtb	r3, r3
 800768e:	00db      	lsls	r3, r3, #3
 8007690:	fa22 f303 	lsr.w	r3, r2, r3
 8007694:	b2da      	uxtb	r2, r3
 8007696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007698:	701a      	strb	r2, [r3, #0]
      i++;
 800769a:	6a3b      	ldr	r3, [r7, #32]
 800769c:	3301      	adds	r3, #1
 800769e:	623b      	str	r3, [r7, #32]
      pDest++;
 80076a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076a2:	3301      	adds	r3, #1
 80076a4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80076a6:	8bfb      	ldrh	r3, [r7, #30]
 80076a8:	3b01      	subs	r3, #1
 80076aa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80076ac:	8bfb      	ldrh	r3, [r7, #30]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d1ea      	bne.n	8007688 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80076b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	372c      	adds	r7, #44	@ 0x2c
 80076b8:	46bd      	mov	sp, r7
 80076ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076be:	4770      	bx	lr

080076c0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80076c0:	b480      	push	{r7}
 80076c2:	b085      	sub	sp, #20
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
 80076c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	781b      	ldrb	r3, [r3, #0]
 80076d2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	785b      	ldrb	r3, [r3, #1]
 80076d8:	2b01      	cmp	r3, #1
 80076da:	d12c      	bne.n	8007736 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	015a      	lsls	r2, r3, #5
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	4413      	add	r3, r2
 80076e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	db12      	blt.n	8007714 <USB_EPSetStall+0x54>
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d00f      	beq.n	8007714 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	015a      	lsls	r2, r3, #5
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	4413      	add	r3, r2
 80076fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	68ba      	ldr	r2, [r7, #8]
 8007704:	0151      	lsls	r1, r2, #5
 8007706:	68fa      	ldr	r2, [r7, #12]
 8007708:	440a      	add	r2, r1
 800770a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800770e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007712:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	015a      	lsls	r2, r3, #5
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	4413      	add	r3, r2
 800771c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	68ba      	ldr	r2, [r7, #8]
 8007724:	0151      	lsls	r1, r2, #5
 8007726:	68fa      	ldr	r2, [r7, #12]
 8007728:	440a      	add	r2, r1
 800772a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800772e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007732:	6013      	str	r3, [r2, #0]
 8007734:	e02b      	b.n	800778e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	015a      	lsls	r2, r3, #5
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	4413      	add	r3, r2
 800773e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	2b00      	cmp	r3, #0
 8007746:	db12      	blt.n	800776e <USB_EPSetStall+0xae>
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d00f      	beq.n	800776e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	015a      	lsls	r2, r3, #5
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	4413      	add	r3, r2
 8007756:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	68ba      	ldr	r2, [r7, #8]
 800775e:	0151      	lsls	r1, r2, #5
 8007760:	68fa      	ldr	r2, [r7, #12]
 8007762:	440a      	add	r2, r1
 8007764:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007768:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800776c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	015a      	lsls	r2, r3, #5
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	4413      	add	r3, r2
 8007776:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	68ba      	ldr	r2, [r7, #8]
 800777e:	0151      	lsls	r1, r2, #5
 8007780:	68fa      	ldr	r2, [r7, #12]
 8007782:	440a      	add	r2, r1
 8007784:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007788:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800778c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800778e:	2300      	movs	r3, #0
}
 8007790:	4618      	mov	r0, r3
 8007792:	3714      	adds	r7, #20
 8007794:	46bd      	mov	sp, r7
 8007796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779a:	4770      	bx	lr

0800779c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800779c:	b480      	push	{r7}
 800779e:	b085      	sub	sp, #20
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
 80077a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	781b      	ldrb	r3, [r3, #0]
 80077ae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	785b      	ldrb	r3, [r3, #1]
 80077b4:	2b01      	cmp	r3, #1
 80077b6:	d128      	bne.n	800780a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	015a      	lsls	r2, r3, #5
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	4413      	add	r3, r2
 80077c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	68ba      	ldr	r2, [r7, #8]
 80077c8:	0151      	lsls	r1, r2, #5
 80077ca:	68fa      	ldr	r2, [r7, #12]
 80077cc:	440a      	add	r2, r1
 80077ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80077d2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80077d6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	791b      	ldrb	r3, [r3, #4]
 80077dc:	2b03      	cmp	r3, #3
 80077de:	d003      	beq.n	80077e8 <USB_EPClearStall+0x4c>
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	791b      	ldrb	r3, [r3, #4]
 80077e4:	2b02      	cmp	r3, #2
 80077e6:	d138      	bne.n	800785a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	015a      	lsls	r2, r3, #5
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	4413      	add	r3, r2
 80077f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	68ba      	ldr	r2, [r7, #8]
 80077f8:	0151      	lsls	r1, r2, #5
 80077fa:	68fa      	ldr	r2, [r7, #12]
 80077fc:	440a      	add	r2, r1
 80077fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007802:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007806:	6013      	str	r3, [r2, #0]
 8007808:	e027      	b.n	800785a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	015a      	lsls	r2, r3, #5
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	4413      	add	r3, r2
 8007812:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	68ba      	ldr	r2, [r7, #8]
 800781a:	0151      	lsls	r1, r2, #5
 800781c:	68fa      	ldr	r2, [r7, #12]
 800781e:	440a      	add	r2, r1
 8007820:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007824:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007828:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	791b      	ldrb	r3, [r3, #4]
 800782e:	2b03      	cmp	r3, #3
 8007830:	d003      	beq.n	800783a <USB_EPClearStall+0x9e>
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	791b      	ldrb	r3, [r3, #4]
 8007836:	2b02      	cmp	r3, #2
 8007838:	d10f      	bne.n	800785a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	015a      	lsls	r2, r3, #5
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	4413      	add	r3, r2
 8007842:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	68ba      	ldr	r2, [r7, #8]
 800784a:	0151      	lsls	r1, r2, #5
 800784c:	68fa      	ldr	r2, [r7, #12]
 800784e:	440a      	add	r2, r1
 8007850:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007854:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007858:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800785a:	2300      	movs	r3, #0
}
 800785c:	4618      	mov	r0, r3
 800785e:	3714      	adds	r7, #20
 8007860:	46bd      	mov	sp, r7
 8007862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007866:	4770      	bx	lr

08007868 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007868:	b480      	push	{r7}
 800786a:	b085      	sub	sp, #20
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
 8007870:	460b      	mov	r3, r1
 8007872:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	68fa      	ldr	r2, [r7, #12]
 8007882:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007886:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800788a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007892:	681a      	ldr	r2, [r3, #0]
 8007894:	78fb      	ldrb	r3, [r7, #3]
 8007896:	011b      	lsls	r3, r3, #4
 8007898:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800789c:	68f9      	ldr	r1, [r7, #12]
 800789e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80078a2:	4313      	orrs	r3, r2
 80078a4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80078a6:	2300      	movs	r3, #0
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	3714      	adds	r7, #20
 80078ac:	46bd      	mov	sp, r7
 80078ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b2:	4770      	bx	lr

080078b4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80078b4:	b480      	push	{r7}
 80078b6:	b085      	sub	sp, #20
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	68fa      	ldr	r2, [r7, #12]
 80078ca:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80078ce:	f023 0303 	bic.w	r3, r3, #3
 80078d2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	68fa      	ldr	r2, [r7, #12]
 80078de:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80078e2:	f023 0302 	bic.w	r3, r3, #2
 80078e6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80078e8:	2300      	movs	r3, #0
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	3714      	adds	r7, #20
 80078ee:	46bd      	mov	sp, r7
 80078f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f4:	4770      	bx	lr

080078f6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80078f6:	b480      	push	{r7}
 80078f8:	b085      	sub	sp, #20
 80078fa:	af00      	add	r7, sp, #0
 80078fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	68fa      	ldr	r2, [r7, #12]
 800790c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007910:	f023 0303 	bic.w	r3, r3, #3
 8007914:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800791c:	685b      	ldr	r3, [r3, #4]
 800791e:	68fa      	ldr	r2, [r7, #12]
 8007920:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007924:	f043 0302 	orr.w	r3, r3, #2
 8007928:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800792a:	2300      	movs	r3, #0
}
 800792c:	4618      	mov	r0, r3
 800792e:	3714      	adds	r7, #20
 8007930:	46bd      	mov	sp, r7
 8007932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007936:	4770      	bx	lr

08007938 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007938:	b480      	push	{r7}
 800793a:	b085      	sub	sp, #20
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	695b      	ldr	r3, [r3, #20]
 8007944:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	699b      	ldr	r3, [r3, #24]
 800794a:	68fa      	ldr	r2, [r7, #12]
 800794c:	4013      	ands	r3, r2
 800794e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007950:	68fb      	ldr	r3, [r7, #12]
}
 8007952:	4618      	mov	r0, r3
 8007954:	3714      	adds	r7, #20
 8007956:	46bd      	mov	sp, r7
 8007958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795c:	4770      	bx	lr

0800795e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800795e:	b480      	push	{r7}
 8007960:	b085      	sub	sp, #20
 8007962:	af00      	add	r7, sp, #0
 8007964:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007970:	699b      	ldr	r3, [r3, #24]
 8007972:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800797a:	69db      	ldr	r3, [r3, #28]
 800797c:	68ba      	ldr	r2, [r7, #8]
 800797e:	4013      	ands	r3, r2
 8007980:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007982:	68bb      	ldr	r3, [r7, #8]
 8007984:	0c1b      	lsrs	r3, r3, #16
}
 8007986:	4618      	mov	r0, r3
 8007988:	3714      	adds	r7, #20
 800798a:	46bd      	mov	sp, r7
 800798c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007990:	4770      	bx	lr

08007992 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007992:	b480      	push	{r7}
 8007994:	b085      	sub	sp, #20
 8007996:	af00      	add	r7, sp, #0
 8007998:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079a4:	699b      	ldr	r3, [r3, #24]
 80079a6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079ae:	69db      	ldr	r3, [r3, #28]
 80079b0:	68ba      	ldr	r2, [r7, #8]
 80079b2:	4013      	ands	r3, r2
 80079b4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	b29b      	uxth	r3, r3
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	3714      	adds	r7, #20
 80079be:	46bd      	mov	sp, r7
 80079c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c4:	4770      	bx	lr

080079c6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80079c6:	b480      	push	{r7}
 80079c8:	b085      	sub	sp, #20
 80079ca:	af00      	add	r7, sp, #0
 80079cc:	6078      	str	r0, [r7, #4]
 80079ce:	460b      	mov	r3, r1
 80079d0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80079d6:	78fb      	ldrb	r3, [r7, #3]
 80079d8:	015a      	lsls	r2, r3, #5
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	4413      	add	r3, r2
 80079de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079e2:	689b      	ldr	r3, [r3, #8]
 80079e4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079ec:	695b      	ldr	r3, [r3, #20]
 80079ee:	68ba      	ldr	r2, [r7, #8]
 80079f0:	4013      	ands	r3, r2
 80079f2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80079f4:	68bb      	ldr	r3, [r7, #8]
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	3714      	adds	r7, #20
 80079fa:	46bd      	mov	sp, r7
 80079fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a00:	4770      	bx	lr

08007a02 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007a02:	b480      	push	{r7}
 8007a04:	b087      	sub	sp, #28
 8007a06:	af00      	add	r7, sp, #0
 8007a08:	6078      	str	r0, [r7, #4]
 8007a0a:	460b      	mov	r3, r1
 8007a0c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007a12:	697b      	ldr	r3, [r7, #20]
 8007a14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a18:	691b      	ldr	r3, [r3, #16]
 8007a1a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007a1c:	697b      	ldr	r3, [r7, #20]
 8007a1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a24:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007a26:	78fb      	ldrb	r3, [r7, #3]
 8007a28:	f003 030f 	and.w	r3, r3, #15
 8007a2c:	68fa      	ldr	r2, [r7, #12]
 8007a2e:	fa22 f303 	lsr.w	r3, r2, r3
 8007a32:	01db      	lsls	r3, r3, #7
 8007a34:	b2db      	uxtb	r3, r3
 8007a36:	693a      	ldr	r2, [r7, #16]
 8007a38:	4313      	orrs	r3, r2
 8007a3a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007a3c:	78fb      	ldrb	r3, [r7, #3]
 8007a3e:	015a      	lsls	r2, r3, #5
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	4413      	add	r3, r2
 8007a44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a48:	689b      	ldr	r3, [r3, #8]
 8007a4a:	693a      	ldr	r2, [r7, #16]
 8007a4c:	4013      	ands	r3, r2
 8007a4e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007a50:	68bb      	ldr	r3, [r7, #8]
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	371c      	adds	r7, #28
 8007a56:	46bd      	mov	sp, r7
 8007a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5c:	4770      	bx	lr

08007a5e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007a5e:	b480      	push	{r7}
 8007a60:	b083      	sub	sp, #12
 8007a62:	af00      	add	r7, sp, #0
 8007a64:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	695b      	ldr	r3, [r3, #20]
 8007a6a:	f003 0301 	and.w	r3, r3, #1
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	370c      	adds	r7, #12
 8007a72:	46bd      	mov	sp, r7
 8007a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a78:	4770      	bx	lr

08007a7a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8007a7a:	b480      	push	{r7}
 8007a7c:	b085      	sub	sp, #20
 8007a7e:	af00      	add	r7, sp, #0
 8007a80:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	68fa      	ldr	r2, [r7, #12]
 8007a90:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a94:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007a98:	f023 0307 	bic.w	r3, r3, #7
 8007a9c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007aa4:	685b      	ldr	r3, [r3, #4]
 8007aa6:	68fa      	ldr	r2, [r7, #12]
 8007aa8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007aac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007ab0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007ab2:	2300      	movs	r3, #0
}
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	3714      	adds	r7, #20
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abe:	4770      	bx	lr

08007ac0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b087      	sub	sp, #28
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	60f8      	str	r0, [r7, #12]
 8007ac8:	460b      	mov	r3, r1
 8007aca:	607a      	str	r2, [r7, #4]
 8007acc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	333c      	adds	r3, #60	@ 0x3c
 8007ad6:	3304      	adds	r3, #4
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007adc:	693b      	ldr	r3, [r7, #16]
 8007ade:	4a26      	ldr	r2, [pc, #152]	@ (8007b78 <USB_EP0_OutStart+0xb8>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d90a      	bls.n	8007afa <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007ae4:	697b      	ldr	r3, [r7, #20]
 8007ae6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007af0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007af4:	d101      	bne.n	8007afa <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007af6:	2300      	movs	r3, #0
 8007af8:	e037      	b.n	8007b6a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b00:	461a      	mov	r2, r3
 8007b02:	2300      	movs	r3, #0
 8007b04:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b0c:	691b      	ldr	r3, [r3, #16]
 8007b0e:	697a      	ldr	r2, [r7, #20]
 8007b10:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007b14:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007b18:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b20:	691b      	ldr	r3, [r3, #16]
 8007b22:	697a      	ldr	r2, [r7, #20]
 8007b24:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007b28:	f043 0318 	orr.w	r3, r3, #24
 8007b2c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007b2e:	697b      	ldr	r3, [r7, #20]
 8007b30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b34:	691b      	ldr	r3, [r3, #16]
 8007b36:	697a      	ldr	r2, [r7, #20]
 8007b38:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007b3c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8007b40:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007b42:	7afb      	ldrb	r3, [r7, #11]
 8007b44:	2b01      	cmp	r3, #1
 8007b46:	d10f      	bne.n	8007b68 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007b48:	697b      	ldr	r3, [r7, #20]
 8007b4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b4e:	461a      	mov	r2, r3
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	697a      	ldr	r2, [r7, #20]
 8007b5e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007b62:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8007b66:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007b68:	2300      	movs	r3, #0
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	371c      	adds	r7, #28
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b74:	4770      	bx	lr
 8007b76:	bf00      	nop
 8007b78:	4f54300a 	.word	0x4f54300a

08007b7c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b085      	sub	sp, #20
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007b84:	2300      	movs	r3, #0
 8007b86:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	3301      	adds	r3, #1
 8007b8c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007b94:	d901      	bls.n	8007b9a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007b96:	2303      	movs	r3, #3
 8007b98:	e01b      	b.n	8007bd2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	691b      	ldr	r3, [r3, #16]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	daf2      	bge.n	8007b88 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	691b      	ldr	r3, [r3, #16]
 8007baa:	f043 0201 	orr.w	r2, r3, #1
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	3301      	adds	r3, #1
 8007bb6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007bbe:	d901      	bls.n	8007bc4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007bc0:	2303      	movs	r3, #3
 8007bc2:	e006      	b.n	8007bd2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	691b      	ldr	r3, [r3, #16]
 8007bc8:	f003 0301 	and.w	r3, r3, #1
 8007bcc:	2b01      	cmp	r3, #1
 8007bce:	d0f0      	beq.n	8007bb2 <USB_CoreReset+0x36>

  return HAL_OK;
 8007bd0:	2300      	movs	r3, #0
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3714      	adds	r7, #20
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bdc:	4770      	bx	lr
	...

08007be0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b084      	sub	sp, #16
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
 8007be8:	460b      	mov	r3, r1
 8007bea:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007bec:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8007bf0:	f002 fd32 	bl	800a658 <USBD_static_malloc>
 8007bf4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d109      	bne.n	8007c10 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	32b0      	adds	r2, #176	@ 0xb0
 8007c06:	2100      	movs	r1, #0
 8007c08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007c0c:	2302      	movs	r3, #2
 8007c0e:	e0d4      	b.n	8007dba <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007c10:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8007c14:	2100      	movs	r1, #0
 8007c16:	68f8      	ldr	r0, [r7, #12]
 8007c18:	f003 fadf 	bl	800b1da <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	32b0      	adds	r2, #176	@ 0xb0
 8007c26:	68f9      	ldr	r1, [r7, #12]
 8007c28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	32b0      	adds	r2, #176	@ 0xb0
 8007c36:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	7c1b      	ldrb	r3, [r3, #16]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d138      	bne.n	8007cba <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007c48:	4b5e      	ldr	r3, [pc, #376]	@ (8007dc4 <USBD_CDC_Init+0x1e4>)
 8007c4a:	7819      	ldrb	r1, [r3, #0]
 8007c4c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007c50:	2202      	movs	r2, #2
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f002 fb8f 	bl	800a376 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007c58:	4b5a      	ldr	r3, [pc, #360]	@ (8007dc4 <USBD_CDC_Init+0x1e4>)
 8007c5a:	781b      	ldrb	r3, [r3, #0]
 8007c5c:	f003 020f 	and.w	r2, r3, #15
 8007c60:	6879      	ldr	r1, [r7, #4]
 8007c62:	4613      	mov	r3, r2
 8007c64:	009b      	lsls	r3, r3, #2
 8007c66:	4413      	add	r3, r2
 8007c68:	009b      	lsls	r3, r3, #2
 8007c6a:	440b      	add	r3, r1
 8007c6c:	3324      	adds	r3, #36	@ 0x24
 8007c6e:	2201      	movs	r2, #1
 8007c70:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007c72:	4b55      	ldr	r3, [pc, #340]	@ (8007dc8 <USBD_CDC_Init+0x1e8>)
 8007c74:	7819      	ldrb	r1, [r3, #0]
 8007c76:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007c7a:	2202      	movs	r2, #2
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f002 fb7a 	bl	800a376 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007c82:	4b51      	ldr	r3, [pc, #324]	@ (8007dc8 <USBD_CDC_Init+0x1e8>)
 8007c84:	781b      	ldrb	r3, [r3, #0]
 8007c86:	f003 020f 	and.w	r2, r3, #15
 8007c8a:	6879      	ldr	r1, [r7, #4]
 8007c8c:	4613      	mov	r3, r2
 8007c8e:	009b      	lsls	r3, r3, #2
 8007c90:	4413      	add	r3, r2
 8007c92:	009b      	lsls	r3, r3, #2
 8007c94:	440b      	add	r3, r1
 8007c96:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007c9e:	4b4b      	ldr	r3, [pc, #300]	@ (8007dcc <USBD_CDC_Init+0x1ec>)
 8007ca0:	781b      	ldrb	r3, [r3, #0]
 8007ca2:	f003 020f 	and.w	r2, r3, #15
 8007ca6:	6879      	ldr	r1, [r7, #4]
 8007ca8:	4613      	mov	r3, r2
 8007caa:	009b      	lsls	r3, r3, #2
 8007cac:	4413      	add	r3, r2
 8007cae:	009b      	lsls	r3, r3, #2
 8007cb0:	440b      	add	r3, r1
 8007cb2:	3326      	adds	r3, #38	@ 0x26
 8007cb4:	2210      	movs	r2, #16
 8007cb6:	801a      	strh	r2, [r3, #0]
 8007cb8:	e035      	b.n	8007d26 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007cba:	4b42      	ldr	r3, [pc, #264]	@ (8007dc4 <USBD_CDC_Init+0x1e4>)
 8007cbc:	7819      	ldrb	r1, [r3, #0]
 8007cbe:	2340      	movs	r3, #64	@ 0x40
 8007cc0:	2202      	movs	r2, #2
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f002 fb57 	bl	800a376 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007cc8:	4b3e      	ldr	r3, [pc, #248]	@ (8007dc4 <USBD_CDC_Init+0x1e4>)
 8007cca:	781b      	ldrb	r3, [r3, #0]
 8007ccc:	f003 020f 	and.w	r2, r3, #15
 8007cd0:	6879      	ldr	r1, [r7, #4]
 8007cd2:	4613      	mov	r3, r2
 8007cd4:	009b      	lsls	r3, r3, #2
 8007cd6:	4413      	add	r3, r2
 8007cd8:	009b      	lsls	r3, r3, #2
 8007cda:	440b      	add	r3, r1
 8007cdc:	3324      	adds	r3, #36	@ 0x24
 8007cde:	2201      	movs	r2, #1
 8007ce0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007ce2:	4b39      	ldr	r3, [pc, #228]	@ (8007dc8 <USBD_CDC_Init+0x1e8>)
 8007ce4:	7819      	ldrb	r1, [r3, #0]
 8007ce6:	2340      	movs	r3, #64	@ 0x40
 8007ce8:	2202      	movs	r2, #2
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f002 fb43 	bl	800a376 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007cf0:	4b35      	ldr	r3, [pc, #212]	@ (8007dc8 <USBD_CDC_Init+0x1e8>)
 8007cf2:	781b      	ldrb	r3, [r3, #0]
 8007cf4:	f003 020f 	and.w	r2, r3, #15
 8007cf8:	6879      	ldr	r1, [r7, #4]
 8007cfa:	4613      	mov	r3, r2
 8007cfc:	009b      	lsls	r3, r3, #2
 8007cfe:	4413      	add	r3, r2
 8007d00:	009b      	lsls	r3, r3, #2
 8007d02:	440b      	add	r3, r1
 8007d04:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007d08:	2201      	movs	r2, #1
 8007d0a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007d0c:	4b2f      	ldr	r3, [pc, #188]	@ (8007dcc <USBD_CDC_Init+0x1ec>)
 8007d0e:	781b      	ldrb	r3, [r3, #0]
 8007d10:	f003 020f 	and.w	r2, r3, #15
 8007d14:	6879      	ldr	r1, [r7, #4]
 8007d16:	4613      	mov	r3, r2
 8007d18:	009b      	lsls	r3, r3, #2
 8007d1a:	4413      	add	r3, r2
 8007d1c:	009b      	lsls	r3, r3, #2
 8007d1e:	440b      	add	r3, r1
 8007d20:	3326      	adds	r3, #38	@ 0x26
 8007d22:	2210      	movs	r2, #16
 8007d24:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007d26:	4b29      	ldr	r3, [pc, #164]	@ (8007dcc <USBD_CDC_Init+0x1ec>)
 8007d28:	7819      	ldrb	r1, [r3, #0]
 8007d2a:	2308      	movs	r3, #8
 8007d2c:	2203      	movs	r2, #3
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f002 fb21 	bl	800a376 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007d34:	4b25      	ldr	r3, [pc, #148]	@ (8007dcc <USBD_CDC_Init+0x1ec>)
 8007d36:	781b      	ldrb	r3, [r3, #0]
 8007d38:	f003 020f 	and.w	r2, r3, #15
 8007d3c:	6879      	ldr	r1, [r7, #4]
 8007d3e:	4613      	mov	r3, r2
 8007d40:	009b      	lsls	r3, r3, #2
 8007d42:	4413      	add	r3, r2
 8007d44:	009b      	lsls	r3, r3, #2
 8007d46:	440b      	add	r3, r1
 8007d48:	3324      	adds	r3, #36	@ 0x24
 8007d4a:	2201      	movs	r2, #1
 8007d4c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	2200      	movs	r2, #0
 8007d52:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007d5c:	687a      	ldr	r2, [r7, #4]
 8007d5e:	33b0      	adds	r3, #176	@ 0xb0
 8007d60:	009b      	lsls	r3, r3, #2
 8007d62:	4413      	add	r3, r2
 8007d64:	685b      	ldr	r3, [r3, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	2200      	movs	r2, #0
 8007d76:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d101      	bne.n	8007d88 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007d84:	2302      	movs	r3, #2
 8007d86:	e018      	b.n	8007dba <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	7c1b      	ldrb	r3, [r3, #16]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d10a      	bne.n	8007da6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007d90:	4b0d      	ldr	r3, [pc, #52]	@ (8007dc8 <USBD_CDC_Init+0x1e8>)
 8007d92:	7819      	ldrb	r1, [r3, #0]
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007d9a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f002 fbd8 	bl	800a554 <USBD_LL_PrepareReceive>
 8007da4:	e008      	b.n	8007db8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007da6:	4b08      	ldr	r3, [pc, #32]	@ (8007dc8 <USBD_CDC_Init+0x1e8>)
 8007da8:	7819      	ldrb	r1, [r3, #0]
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007db0:	2340      	movs	r3, #64	@ 0x40
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f002 fbce 	bl	800a554 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007db8:	2300      	movs	r3, #0
}
 8007dba:	4618      	mov	r0, r3
 8007dbc:	3710      	adds	r7, #16
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}
 8007dc2:	bf00      	nop
 8007dc4:	20000093 	.word	0x20000093
 8007dc8:	20000094 	.word	0x20000094
 8007dcc:	20000095 	.word	0x20000095

08007dd0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b082      	sub	sp, #8
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
 8007dd8:	460b      	mov	r3, r1
 8007dda:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007ddc:	4b3a      	ldr	r3, [pc, #232]	@ (8007ec8 <USBD_CDC_DeInit+0xf8>)
 8007dde:	781b      	ldrb	r3, [r3, #0]
 8007de0:	4619      	mov	r1, r3
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f002 faed 	bl	800a3c2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007de8:	4b37      	ldr	r3, [pc, #220]	@ (8007ec8 <USBD_CDC_DeInit+0xf8>)
 8007dea:	781b      	ldrb	r3, [r3, #0]
 8007dec:	f003 020f 	and.w	r2, r3, #15
 8007df0:	6879      	ldr	r1, [r7, #4]
 8007df2:	4613      	mov	r3, r2
 8007df4:	009b      	lsls	r3, r3, #2
 8007df6:	4413      	add	r3, r2
 8007df8:	009b      	lsls	r3, r3, #2
 8007dfa:	440b      	add	r3, r1
 8007dfc:	3324      	adds	r3, #36	@ 0x24
 8007dfe:	2200      	movs	r2, #0
 8007e00:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007e02:	4b32      	ldr	r3, [pc, #200]	@ (8007ecc <USBD_CDC_DeInit+0xfc>)
 8007e04:	781b      	ldrb	r3, [r3, #0]
 8007e06:	4619      	mov	r1, r3
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f002 fada 	bl	800a3c2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007e0e:	4b2f      	ldr	r3, [pc, #188]	@ (8007ecc <USBD_CDC_DeInit+0xfc>)
 8007e10:	781b      	ldrb	r3, [r3, #0]
 8007e12:	f003 020f 	and.w	r2, r3, #15
 8007e16:	6879      	ldr	r1, [r7, #4]
 8007e18:	4613      	mov	r3, r2
 8007e1a:	009b      	lsls	r3, r3, #2
 8007e1c:	4413      	add	r3, r2
 8007e1e:	009b      	lsls	r3, r3, #2
 8007e20:	440b      	add	r3, r1
 8007e22:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007e26:	2200      	movs	r2, #0
 8007e28:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007e2a:	4b29      	ldr	r3, [pc, #164]	@ (8007ed0 <USBD_CDC_DeInit+0x100>)
 8007e2c:	781b      	ldrb	r3, [r3, #0]
 8007e2e:	4619      	mov	r1, r3
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f002 fac6 	bl	800a3c2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007e36:	4b26      	ldr	r3, [pc, #152]	@ (8007ed0 <USBD_CDC_DeInit+0x100>)
 8007e38:	781b      	ldrb	r3, [r3, #0]
 8007e3a:	f003 020f 	and.w	r2, r3, #15
 8007e3e:	6879      	ldr	r1, [r7, #4]
 8007e40:	4613      	mov	r3, r2
 8007e42:	009b      	lsls	r3, r3, #2
 8007e44:	4413      	add	r3, r2
 8007e46:	009b      	lsls	r3, r3, #2
 8007e48:	440b      	add	r3, r1
 8007e4a:	3324      	adds	r3, #36	@ 0x24
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007e50:	4b1f      	ldr	r3, [pc, #124]	@ (8007ed0 <USBD_CDC_DeInit+0x100>)
 8007e52:	781b      	ldrb	r3, [r3, #0]
 8007e54:	f003 020f 	and.w	r2, r3, #15
 8007e58:	6879      	ldr	r1, [r7, #4]
 8007e5a:	4613      	mov	r3, r2
 8007e5c:	009b      	lsls	r3, r3, #2
 8007e5e:	4413      	add	r3, r2
 8007e60:	009b      	lsls	r3, r3, #2
 8007e62:	440b      	add	r3, r1
 8007e64:	3326      	adds	r3, #38	@ 0x26
 8007e66:	2200      	movs	r2, #0
 8007e68:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	32b0      	adds	r2, #176	@ 0xb0
 8007e74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d01f      	beq.n	8007ebc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007e82:	687a      	ldr	r2, [r7, #4]
 8007e84:	33b0      	adds	r3, #176	@ 0xb0
 8007e86:	009b      	lsls	r3, r3, #2
 8007e88:	4413      	add	r3, r2
 8007e8a:	685b      	ldr	r3, [r3, #4]
 8007e8c:	685b      	ldr	r3, [r3, #4]
 8007e8e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	32b0      	adds	r2, #176	@ 0xb0
 8007e9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	f002 fbe8 	bl	800a674 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	32b0      	adds	r2, #176	@ 0xb0
 8007eae:	2100      	movs	r1, #0
 8007eb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007ebc:	2300      	movs	r3, #0
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3708      	adds	r7, #8
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}
 8007ec6:	bf00      	nop
 8007ec8:	20000093 	.word	0x20000093
 8007ecc:	20000094 	.word	0x20000094
 8007ed0:	20000095 	.word	0x20000095

08007ed4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b086      	sub	sp, #24
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
 8007edc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	32b0      	adds	r2, #176	@ 0xb0
 8007ee8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007eec:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007eee:	2300      	movs	r3, #0
 8007ef0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007efa:	693b      	ldr	r3, [r7, #16]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d101      	bne.n	8007f04 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007f00:	2303      	movs	r3, #3
 8007f02:	e0bf      	b.n	8008084 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	781b      	ldrb	r3, [r3, #0]
 8007f08:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d050      	beq.n	8007fb2 <USBD_CDC_Setup+0xde>
 8007f10:	2b20      	cmp	r3, #32
 8007f12:	f040 80af 	bne.w	8008074 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	88db      	ldrh	r3, [r3, #6]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d03a      	beq.n	8007f94 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	781b      	ldrb	r3, [r3, #0]
 8007f22:	b25b      	sxtb	r3, r3
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	da1b      	bge.n	8007f60 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007f2e:	687a      	ldr	r2, [r7, #4]
 8007f30:	33b0      	adds	r3, #176	@ 0xb0
 8007f32:	009b      	lsls	r3, r3, #2
 8007f34:	4413      	add	r3, r2
 8007f36:	685b      	ldr	r3, [r3, #4]
 8007f38:	689b      	ldr	r3, [r3, #8]
 8007f3a:	683a      	ldr	r2, [r7, #0]
 8007f3c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007f3e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007f40:	683a      	ldr	r2, [r7, #0]
 8007f42:	88d2      	ldrh	r2, [r2, #6]
 8007f44:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	88db      	ldrh	r3, [r3, #6]
 8007f4a:	2b07      	cmp	r3, #7
 8007f4c:	bf28      	it	cs
 8007f4e:	2307      	movcs	r3, #7
 8007f50:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007f52:	693b      	ldr	r3, [r7, #16]
 8007f54:	89fa      	ldrh	r2, [r7, #14]
 8007f56:	4619      	mov	r1, r3
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	f001 fdb1 	bl	8009ac0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007f5e:	e090      	b.n	8008082 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	785a      	ldrb	r2, [r3, #1]
 8007f64:	693b      	ldr	r3, [r7, #16]
 8007f66:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	88db      	ldrh	r3, [r3, #6]
 8007f6e:	2b3f      	cmp	r3, #63	@ 0x3f
 8007f70:	d803      	bhi.n	8007f7a <USBD_CDC_Setup+0xa6>
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	88db      	ldrh	r3, [r3, #6]
 8007f76:	b2da      	uxtb	r2, r3
 8007f78:	e000      	b.n	8007f7c <USBD_CDC_Setup+0xa8>
 8007f7a:	2240      	movs	r2, #64	@ 0x40
 8007f7c:	693b      	ldr	r3, [r7, #16]
 8007f7e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007f82:	6939      	ldr	r1, [r7, #16]
 8007f84:	693b      	ldr	r3, [r7, #16]
 8007f86:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8007f8a:	461a      	mov	r2, r3
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f001 fdc3 	bl	8009b18 <USBD_CtlPrepareRx>
      break;
 8007f92:	e076      	b.n	8008082 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007f9a:	687a      	ldr	r2, [r7, #4]
 8007f9c:	33b0      	adds	r3, #176	@ 0xb0
 8007f9e:	009b      	lsls	r3, r3, #2
 8007fa0:	4413      	add	r3, r2
 8007fa2:	685b      	ldr	r3, [r3, #4]
 8007fa4:	689b      	ldr	r3, [r3, #8]
 8007fa6:	683a      	ldr	r2, [r7, #0]
 8007fa8:	7850      	ldrb	r0, [r2, #1]
 8007faa:	2200      	movs	r2, #0
 8007fac:	6839      	ldr	r1, [r7, #0]
 8007fae:	4798      	blx	r3
      break;
 8007fb0:	e067      	b.n	8008082 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	785b      	ldrb	r3, [r3, #1]
 8007fb6:	2b0b      	cmp	r3, #11
 8007fb8:	d851      	bhi.n	800805e <USBD_CDC_Setup+0x18a>
 8007fba:	a201      	add	r2, pc, #4	@ (adr r2, 8007fc0 <USBD_CDC_Setup+0xec>)
 8007fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fc0:	08007ff1 	.word	0x08007ff1
 8007fc4:	0800806d 	.word	0x0800806d
 8007fc8:	0800805f 	.word	0x0800805f
 8007fcc:	0800805f 	.word	0x0800805f
 8007fd0:	0800805f 	.word	0x0800805f
 8007fd4:	0800805f 	.word	0x0800805f
 8007fd8:	0800805f 	.word	0x0800805f
 8007fdc:	0800805f 	.word	0x0800805f
 8007fe0:	0800805f 	.word	0x0800805f
 8007fe4:	0800805f 	.word	0x0800805f
 8007fe8:	0800801b 	.word	0x0800801b
 8007fec:	08008045 	.word	0x08008045
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ff6:	b2db      	uxtb	r3, r3
 8007ff8:	2b03      	cmp	r3, #3
 8007ffa:	d107      	bne.n	800800c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007ffc:	f107 030a 	add.w	r3, r7, #10
 8008000:	2202      	movs	r2, #2
 8008002:	4619      	mov	r1, r3
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f001 fd5b 	bl	8009ac0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800800a:	e032      	b.n	8008072 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800800c:	6839      	ldr	r1, [r7, #0]
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f001 fce5 	bl	80099de <USBD_CtlError>
            ret = USBD_FAIL;
 8008014:	2303      	movs	r3, #3
 8008016:	75fb      	strb	r3, [r7, #23]
          break;
 8008018:	e02b      	b.n	8008072 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008020:	b2db      	uxtb	r3, r3
 8008022:	2b03      	cmp	r3, #3
 8008024:	d107      	bne.n	8008036 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008026:	f107 030d 	add.w	r3, r7, #13
 800802a:	2201      	movs	r2, #1
 800802c:	4619      	mov	r1, r3
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f001 fd46 	bl	8009ac0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008034:	e01d      	b.n	8008072 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008036:	6839      	ldr	r1, [r7, #0]
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f001 fcd0 	bl	80099de <USBD_CtlError>
            ret = USBD_FAIL;
 800803e:	2303      	movs	r3, #3
 8008040:	75fb      	strb	r3, [r7, #23]
          break;
 8008042:	e016      	b.n	8008072 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800804a:	b2db      	uxtb	r3, r3
 800804c:	2b03      	cmp	r3, #3
 800804e:	d00f      	beq.n	8008070 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008050:	6839      	ldr	r1, [r7, #0]
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f001 fcc3 	bl	80099de <USBD_CtlError>
            ret = USBD_FAIL;
 8008058:	2303      	movs	r3, #3
 800805a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800805c:	e008      	b.n	8008070 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800805e:	6839      	ldr	r1, [r7, #0]
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f001 fcbc 	bl	80099de <USBD_CtlError>
          ret = USBD_FAIL;
 8008066:	2303      	movs	r3, #3
 8008068:	75fb      	strb	r3, [r7, #23]
          break;
 800806a:	e002      	b.n	8008072 <USBD_CDC_Setup+0x19e>
          break;
 800806c:	bf00      	nop
 800806e:	e008      	b.n	8008082 <USBD_CDC_Setup+0x1ae>
          break;
 8008070:	bf00      	nop
      }
      break;
 8008072:	e006      	b.n	8008082 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008074:	6839      	ldr	r1, [r7, #0]
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f001 fcb1 	bl	80099de <USBD_CtlError>
      ret = USBD_FAIL;
 800807c:	2303      	movs	r3, #3
 800807e:	75fb      	strb	r3, [r7, #23]
      break;
 8008080:	bf00      	nop
  }

  return (uint8_t)ret;
 8008082:	7dfb      	ldrb	r3, [r7, #23]
}
 8008084:	4618      	mov	r0, r3
 8008086:	3718      	adds	r7, #24
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}

0800808c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b084      	sub	sp, #16
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
 8008094:	460b      	mov	r3, r1
 8008096:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800809e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	32b0      	adds	r2, #176	@ 0xb0
 80080aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d101      	bne.n	80080b6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80080b2:	2303      	movs	r3, #3
 80080b4:	e065      	b.n	8008182 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	32b0      	adds	r2, #176	@ 0xb0
 80080c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080c4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80080c6:	78fb      	ldrb	r3, [r7, #3]
 80080c8:	f003 020f 	and.w	r2, r3, #15
 80080cc:	6879      	ldr	r1, [r7, #4]
 80080ce:	4613      	mov	r3, r2
 80080d0:	009b      	lsls	r3, r3, #2
 80080d2:	4413      	add	r3, r2
 80080d4:	009b      	lsls	r3, r3, #2
 80080d6:	440b      	add	r3, r1
 80080d8:	3318      	adds	r3, #24
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d02f      	beq.n	8008140 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80080e0:	78fb      	ldrb	r3, [r7, #3]
 80080e2:	f003 020f 	and.w	r2, r3, #15
 80080e6:	6879      	ldr	r1, [r7, #4]
 80080e8:	4613      	mov	r3, r2
 80080ea:	009b      	lsls	r3, r3, #2
 80080ec:	4413      	add	r3, r2
 80080ee:	009b      	lsls	r3, r3, #2
 80080f0:	440b      	add	r3, r1
 80080f2:	3318      	adds	r3, #24
 80080f4:	681a      	ldr	r2, [r3, #0]
 80080f6:	78fb      	ldrb	r3, [r7, #3]
 80080f8:	f003 010f 	and.w	r1, r3, #15
 80080fc:	68f8      	ldr	r0, [r7, #12]
 80080fe:	460b      	mov	r3, r1
 8008100:	00db      	lsls	r3, r3, #3
 8008102:	440b      	add	r3, r1
 8008104:	009b      	lsls	r3, r3, #2
 8008106:	4403      	add	r3, r0
 8008108:	331c      	adds	r3, #28
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	fbb2 f1f3 	udiv	r1, r2, r3
 8008110:	fb01 f303 	mul.w	r3, r1, r3
 8008114:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008116:	2b00      	cmp	r3, #0
 8008118:	d112      	bne.n	8008140 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800811a:	78fb      	ldrb	r3, [r7, #3]
 800811c:	f003 020f 	and.w	r2, r3, #15
 8008120:	6879      	ldr	r1, [r7, #4]
 8008122:	4613      	mov	r3, r2
 8008124:	009b      	lsls	r3, r3, #2
 8008126:	4413      	add	r3, r2
 8008128:	009b      	lsls	r3, r3, #2
 800812a:	440b      	add	r3, r1
 800812c:	3318      	adds	r3, #24
 800812e:	2200      	movs	r2, #0
 8008130:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008132:	78f9      	ldrb	r1, [r7, #3]
 8008134:	2300      	movs	r3, #0
 8008136:	2200      	movs	r2, #0
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f002 f9ea 	bl	800a512 <USBD_LL_Transmit>
 800813e:	e01f      	b.n	8008180 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	2200      	movs	r2, #0
 8008144:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800814e:	687a      	ldr	r2, [r7, #4]
 8008150:	33b0      	adds	r3, #176	@ 0xb0
 8008152:	009b      	lsls	r3, r3, #2
 8008154:	4413      	add	r3, r2
 8008156:	685b      	ldr	r3, [r3, #4]
 8008158:	691b      	ldr	r3, [r3, #16]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d010      	beq.n	8008180 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008164:	687a      	ldr	r2, [r7, #4]
 8008166:	33b0      	adds	r3, #176	@ 0xb0
 8008168:	009b      	lsls	r3, r3, #2
 800816a:	4413      	add	r3, r2
 800816c:	685b      	ldr	r3, [r3, #4]
 800816e:	691b      	ldr	r3, [r3, #16]
 8008170:	68ba      	ldr	r2, [r7, #8]
 8008172:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8008176:	68ba      	ldr	r2, [r7, #8]
 8008178:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800817c:	78fa      	ldrb	r2, [r7, #3]
 800817e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008180:	2300      	movs	r3, #0
}
 8008182:	4618      	mov	r0, r3
 8008184:	3710      	adds	r7, #16
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}

0800818a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800818a:	b580      	push	{r7, lr}
 800818c:	b084      	sub	sp, #16
 800818e:	af00      	add	r7, sp, #0
 8008190:	6078      	str	r0, [r7, #4]
 8008192:	460b      	mov	r3, r1
 8008194:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	32b0      	adds	r2, #176	@ 0xb0
 80081a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081a4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	32b0      	adds	r2, #176	@ 0xb0
 80081b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d101      	bne.n	80081bc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80081b8:	2303      	movs	r3, #3
 80081ba:	e01a      	b.n	80081f2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80081bc:	78fb      	ldrb	r3, [r7, #3]
 80081be:	4619      	mov	r1, r3
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f002 f9e8 	bl	800a596 <USBD_LL_GetRxDataSize>
 80081c6:	4602      	mov	r2, r0
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80081d4:	687a      	ldr	r2, [r7, #4]
 80081d6:	33b0      	adds	r3, #176	@ 0xb0
 80081d8:	009b      	lsls	r3, r3, #2
 80081da:	4413      	add	r3, r2
 80081dc:	685b      	ldr	r3, [r3, #4]
 80081de:	68db      	ldr	r3, [r3, #12]
 80081e0:	68fa      	ldr	r2, [r7, #12]
 80081e2:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80081e6:	68fa      	ldr	r2, [r7, #12]
 80081e8:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80081ec:	4611      	mov	r1, r2
 80081ee:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80081f0:	2300      	movs	r3, #0
}
 80081f2:	4618      	mov	r0, r3
 80081f4:	3710      	adds	r7, #16
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}

080081fa <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80081fa:	b580      	push	{r7, lr}
 80081fc:	b084      	sub	sp, #16
 80081fe:	af00      	add	r7, sp, #0
 8008200:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	32b0      	adds	r2, #176	@ 0xb0
 800820c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008210:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d101      	bne.n	800821c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008218:	2303      	movs	r3, #3
 800821a:	e024      	b.n	8008266 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008222:	687a      	ldr	r2, [r7, #4]
 8008224:	33b0      	adds	r3, #176	@ 0xb0
 8008226:	009b      	lsls	r3, r3, #2
 8008228:	4413      	add	r3, r2
 800822a:	685b      	ldr	r3, [r3, #4]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d019      	beq.n	8008264 <USBD_CDC_EP0_RxReady+0x6a>
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008236:	2bff      	cmp	r3, #255	@ 0xff
 8008238:	d014      	beq.n	8008264 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008240:	687a      	ldr	r2, [r7, #4]
 8008242:	33b0      	adds	r3, #176	@ 0xb0
 8008244:	009b      	lsls	r3, r3, #2
 8008246:	4413      	add	r3, r2
 8008248:	685b      	ldr	r3, [r3, #4]
 800824a:	689b      	ldr	r3, [r3, #8]
 800824c:	68fa      	ldr	r2, [r7, #12]
 800824e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8008252:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008254:	68fa      	ldr	r2, [r7, #12]
 8008256:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800825a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	22ff      	movs	r2, #255	@ 0xff
 8008260:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8008264:	2300      	movs	r3, #0
}
 8008266:	4618      	mov	r0, r3
 8008268:	3710      	adds	r7, #16
 800826a:	46bd      	mov	sp, r7
 800826c:	bd80      	pop	{r7, pc}
	...

08008270 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b086      	sub	sp, #24
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008278:	2182      	movs	r1, #130	@ 0x82
 800827a:	4818      	ldr	r0, [pc, #96]	@ (80082dc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800827c:	f000 fd4f 	bl	8008d1e <USBD_GetEpDesc>
 8008280:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008282:	2101      	movs	r1, #1
 8008284:	4815      	ldr	r0, [pc, #84]	@ (80082dc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008286:	f000 fd4a 	bl	8008d1e <USBD_GetEpDesc>
 800828a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800828c:	2181      	movs	r1, #129	@ 0x81
 800828e:	4813      	ldr	r0, [pc, #76]	@ (80082dc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008290:	f000 fd45 	bl	8008d1e <USBD_GetEpDesc>
 8008294:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d002      	beq.n	80082a2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800829c:	697b      	ldr	r3, [r7, #20]
 800829e:	2210      	movs	r2, #16
 80082a0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80082a2:	693b      	ldr	r3, [r7, #16]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d006      	beq.n	80082b6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80082a8:	693b      	ldr	r3, [r7, #16]
 80082aa:	2200      	movs	r2, #0
 80082ac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80082b0:	711a      	strb	r2, [r3, #4]
 80082b2:	2200      	movs	r2, #0
 80082b4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d006      	beq.n	80082ca <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	2200      	movs	r2, #0
 80082c0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80082c4:	711a      	strb	r2, [r3, #4]
 80082c6:	2200      	movs	r2, #0
 80082c8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2243      	movs	r2, #67	@ 0x43
 80082ce:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80082d0:	4b02      	ldr	r3, [pc, #8]	@ (80082dc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	3718      	adds	r7, #24
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}
 80082da:	bf00      	nop
 80082dc:	20000050 	.word	0x20000050

080082e0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b086      	sub	sp, #24
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80082e8:	2182      	movs	r1, #130	@ 0x82
 80082ea:	4818      	ldr	r0, [pc, #96]	@ (800834c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80082ec:	f000 fd17 	bl	8008d1e <USBD_GetEpDesc>
 80082f0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80082f2:	2101      	movs	r1, #1
 80082f4:	4815      	ldr	r0, [pc, #84]	@ (800834c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80082f6:	f000 fd12 	bl	8008d1e <USBD_GetEpDesc>
 80082fa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80082fc:	2181      	movs	r1, #129	@ 0x81
 80082fe:	4813      	ldr	r0, [pc, #76]	@ (800834c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008300:	f000 fd0d 	bl	8008d1e <USBD_GetEpDesc>
 8008304:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008306:	697b      	ldr	r3, [r7, #20]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d002      	beq.n	8008312 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800830c:	697b      	ldr	r3, [r7, #20]
 800830e:	2210      	movs	r2, #16
 8008310:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008312:	693b      	ldr	r3, [r7, #16]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d006      	beq.n	8008326 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008318:	693b      	ldr	r3, [r7, #16]
 800831a:	2200      	movs	r2, #0
 800831c:	711a      	strb	r2, [r3, #4]
 800831e:	2200      	movs	r2, #0
 8008320:	f042 0202 	orr.w	r2, r2, #2
 8008324:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d006      	beq.n	800833a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	2200      	movs	r2, #0
 8008330:	711a      	strb	r2, [r3, #4]
 8008332:	2200      	movs	r2, #0
 8008334:	f042 0202 	orr.w	r2, r2, #2
 8008338:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2243      	movs	r2, #67	@ 0x43
 800833e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008340:	4b02      	ldr	r3, [pc, #8]	@ (800834c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008342:	4618      	mov	r0, r3
 8008344:	3718      	adds	r7, #24
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}
 800834a:	bf00      	nop
 800834c:	20000050 	.word	0x20000050

08008350 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b086      	sub	sp, #24
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008358:	2182      	movs	r1, #130	@ 0x82
 800835a:	4818      	ldr	r0, [pc, #96]	@ (80083bc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800835c:	f000 fcdf 	bl	8008d1e <USBD_GetEpDesc>
 8008360:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008362:	2101      	movs	r1, #1
 8008364:	4815      	ldr	r0, [pc, #84]	@ (80083bc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008366:	f000 fcda 	bl	8008d1e <USBD_GetEpDesc>
 800836a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800836c:	2181      	movs	r1, #129	@ 0x81
 800836e:	4813      	ldr	r0, [pc, #76]	@ (80083bc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008370:	f000 fcd5 	bl	8008d1e <USBD_GetEpDesc>
 8008374:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008376:	697b      	ldr	r3, [r7, #20]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d002      	beq.n	8008382 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800837c:	697b      	ldr	r3, [r7, #20]
 800837e:	2210      	movs	r2, #16
 8008380:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008382:	693b      	ldr	r3, [r7, #16]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d006      	beq.n	8008396 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008388:	693b      	ldr	r3, [r7, #16]
 800838a:	2200      	movs	r2, #0
 800838c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008390:	711a      	strb	r2, [r3, #4]
 8008392:	2200      	movs	r2, #0
 8008394:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d006      	beq.n	80083aa <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	2200      	movs	r2, #0
 80083a0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80083a4:	711a      	strb	r2, [r3, #4]
 80083a6:	2200      	movs	r2, #0
 80083a8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2243      	movs	r2, #67	@ 0x43
 80083ae:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80083b0:	4b02      	ldr	r3, [pc, #8]	@ (80083bc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	3718      	adds	r7, #24
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bd80      	pop	{r7, pc}
 80083ba:	bf00      	nop
 80083bc:	20000050 	.word	0x20000050

080083c0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80083c0:	b480      	push	{r7}
 80083c2:	b083      	sub	sp, #12
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	220a      	movs	r2, #10
 80083cc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80083ce:	4b03      	ldr	r3, [pc, #12]	@ (80083dc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80083d0:	4618      	mov	r0, r3
 80083d2:	370c      	adds	r7, #12
 80083d4:	46bd      	mov	sp, r7
 80083d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083da:	4770      	bx	lr
 80083dc:	2000000c 	.word	0x2000000c

080083e0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80083e0:	b480      	push	{r7}
 80083e2:	b083      	sub	sp, #12
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
 80083e8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d101      	bne.n	80083f4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80083f0:	2303      	movs	r3, #3
 80083f2:	e009      	b.n	8008408 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80083fa:	687a      	ldr	r2, [r7, #4]
 80083fc:	33b0      	adds	r3, #176	@ 0xb0
 80083fe:	009b      	lsls	r3, r3, #2
 8008400:	4413      	add	r3, r2
 8008402:	683a      	ldr	r2, [r7, #0]
 8008404:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008406:	2300      	movs	r3, #0
}
 8008408:	4618      	mov	r0, r3
 800840a:	370c      	adds	r7, #12
 800840c:	46bd      	mov	sp, r7
 800840e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008412:	4770      	bx	lr

08008414 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008414:	b480      	push	{r7}
 8008416:	b087      	sub	sp, #28
 8008418:	af00      	add	r7, sp, #0
 800841a:	60f8      	str	r0, [r7, #12]
 800841c:	60b9      	str	r1, [r7, #8]
 800841e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	32b0      	adds	r2, #176	@ 0xb0
 800842a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800842e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008430:	697b      	ldr	r3, [r7, #20]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d101      	bne.n	800843a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008436:	2303      	movs	r3, #3
 8008438:	e008      	b.n	800844c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800843a:	697b      	ldr	r3, [r7, #20]
 800843c:	68ba      	ldr	r2, [r7, #8]
 800843e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8008442:	697b      	ldr	r3, [r7, #20]
 8008444:	687a      	ldr	r2, [r7, #4]
 8008446:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800844a:	2300      	movs	r3, #0
}
 800844c:	4618      	mov	r0, r3
 800844e:	371c      	adds	r7, #28
 8008450:	46bd      	mov	sp, r7
 8008452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008456:	4770      	bx	lr

08008458 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008458:	b480      	push	{r7}
 800845a:	b085      	sub	sp, #20
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
 8008460:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	32b0      	adds	r2, #176	@ 0xb0
 800846c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008470:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d101      	bne.n	800847c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008478:	2303      	movs	r3, #3
 800847a:	e004      	b.n	8008486 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	683a      	ldr	r2, [r7, #0]
 8008480:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8008484:	2300      	movs	r3, #0
}
 8008486:	4618      	mov	r0, r3
 8008488:	3714      	adds	r7, #20
 800848a:	46bd      	mov	sp, r7
 800848c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008490:	4770      	bx	lr
	...

08008494 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b084      	sub	sp, #16
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	32b0      	adds	r2, #176	@ 0xb0
 80084a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084aa:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80084ac:	2301      	movs	r3, #1
 80084ae:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80084b0:	68bb      	ldr	r3, [r7, #8]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d101      	bne.n	80084ba <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80084b6:	2303      	movs	r3, #3
 80084b8:	e025      	b.n	8008506 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d11f      	bne.n	8008504 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	2201      	movs	r2, #1
 80084c8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80084cc:	4b10      	ldr	r3, [pc, #64]	@ (8008510 <USBD_CDC_TransmitPacket+0x7c>)
 80084ce:	781b      	ldrb	r3, [r3, #0]
 80084d0:	f003 020f 	and.w	r2, r3, #15
 80084d4:	68bb      	ldr	r3, [r7, #8]
 80084d6:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	4613      	mov	r3, r2
 80084de:	009b      	lsls	r3, r3, #2
 80084e0:	4413      	add	r3, r2
 80084e2:	009b      	lsls	r3, r3, #2
 80084e4:	4403      	add	r3, r0
 80084e6:	3318      	adds	r3, #24
 80084e8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80084ea:	4b09      	ldr	r3, [pc, #36]	@ (8008510 <USBD_CDC_TransmitPacket+0x7c>)
 80084ec:	7819      	ldrb	r1, [r3, #0]
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f002 f809 	bl	800a512 <USBD_LL_Transmit>

    ret = USBD_OK;
 8008500:	2300      	movs	r3, #0
 8008502:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008504:	7bfb      	ldrb	r3, [r7, #15]
}
 8008506:	4618      	mov	r0, r3
 8008508:	3710      	adds	r7, #16
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}
 800850e:	bf00      	nop
 8008510:	20000093 	.word	0x20000093

08008514 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b084      	sub	sp, #16
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	32b0      	adds	r2, #176	@ 0xb0
 8008526:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800852a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	32b0      	adds	r2, #176	@ 0xb0
 8008536:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d101      	bne.n	8008542 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800853e:	2303      	movs	r3, #3
 8008540:	e018      	b.n	8008574 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	7c1b      	ldrb	r3, [r3, #16]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d10a      	bne.n	8008560 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800854a:	4b0c      	ldr	r3, [pc, #48]	@ (800857c <USBD_CDC_ReceivePacket+0x68>)
 800854c:	7819      	ldrb	r1, [r3, #0]
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008554:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	f001 fffb 	bl	800a554 <USBD_LL_PrepareReceive>
 800855e:	e008      	b.n	8008572 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008560:	4b06      	ldr	r3, [pc, #24]	@ (800857c <USBD_CDC_ReceivePacket+0x68>)
 8008562:	7819      	ldrb	r1, [r3, #0]
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800856a:	2340      	movs	r3, #64	@ 0x40
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	f001 fff1 	bl	800a554 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008572:	2300      	movs	r3, #0
}
 8008574:	4618      	mov	r0, r3
 8008576:	3710      	adds	r7, #16
 8008578:	46bd      	mov	sp, r7
 800857a:	bd80      	pop	{r7, pc}
 800857c:	20000094 	.word	0x20000094

08008580 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b086      	sub	sp, #24
 8008584:	af00      	add	r7, sp, #0
 8008586:	60f8      	str	r0, [r7, #12]
 8008588:	60b9      	str	r1, [r7, #8]
 800858a:	4613      	mov	r3, r2
 800858c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d101      	bne.n	8008598 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008594:	2303      	movs	r3, #3
 8008596:	e01f      	b.n	80085d8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	2200      	movs	r2, #0
 800859c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	2200      	movs	r2, #0
 80085a4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	2200      	movs	r2, #0
 80085ac:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d003      	beq.n	80085be <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	68ba      	ldr	r2, [r7, #8]
 80085ba:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	2201      	movs	r2, #1
 80085c2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	79fa      	ldrb	r2, [r7, #7]
 80085ca:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80085cc:	68f8      	ldr	r0, [r7, #12]
 80085ce:	f001 fe6b 	bl	800a2a8 <USBD_LL_Init>
 80085d2:	4603      	mov	r3, r0
 80085d4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80085d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80085d8:	4618      	mov	r0, r3
 80085da:	3718      	adds	r7, #24
 80085dc:	46bd      	mov	sp, r7
 80085de:	bd80      	pop	{r7, pc}

080085e0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b084      	sub	sp, #16
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
 80085e8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80085ea:	2300      	movs	r3, #0
 80085ec:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d101      	bne.n	80085f8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80085f4:	2303      	movs	r3, #3
 80085f6:	e025      	b.n	8008644 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	683a      	ldr	r2, [r7, #0]
 80085fc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	32ae      	adds	r2, #174	@ 0xae
 800860a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800860e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008610:	2b00      	cmp	r3, #0
 8008612:	d00f      	beq.n	8008634 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	32ae      	adds	r2, #174	@ 0xae
 800861e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008624:	f107 020e 	add.w	r2, r7, #14
 8008628:	4610      	mov	r0, r2
 800862a:	4798      	blx	r3
 800862c:	4602      	mov	r2, r0
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800863a:	1c5a      	adds	r2, r3, #1
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8008642:	2300      	movs	r3, #0
}
 8008644:	4618      	mov	r0, r3
 8008646:	3710      	adds	r7, #16
 8008648:	46bd      	mov	sp, r7
 800864a:	bd80      	pop	{r7, pc}

0800864c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b082      	sub	sp, #8
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f001 fe73 	bl	800a340 <USBD_LL_Start>
 800865a:	4603      	mov	r3, r0
}
 800865c:	4618      	mov	r0, r3
 800865e:	3708      	adds	r7, #8
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}

08008664 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008664:	b480      	push	{r7}
 8008666:	b083      	sub	sp, #12
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800866c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800866e:	4618      	mov	r0, r3
 8008670:	370c      	adds	r7, #12
 8008672:	46bd      	mov	sp, r7
 8008674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008678:	4770      	bx	lr

0800867a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800867a:	b580      	push	{r7, lr}
 800867c:	b084      	sub	sp, #16
 800867e:	af00      	add	r7, sp, #0
 8008680:	6078      	str	r0, [r7, #4]
 8008682:	460b      	mov	r3, r1
 8008684:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008686:	2300      	movs	r3, #0
 8008688:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008690:	2b00      	cmp	r3, #0
 8008692:	d009      	beq.n	80086a8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	78fa      	ldrb	r2, [r7, #3]
 800869e:	4611      	mov	r1, r2
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	4798      	blx	r3
 80086a4:	4603      	mov	r3, r0
 80086a6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80086a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80086aa:	4618      	mov	r0, r3
 80086ac:	3710      	adds	r7, #16
 80086ae:	46bd      	mov	sp, r7
 80086b0:	bd80      	pop	{r7, pc}

080086b2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80086b2:	b580      	push	{r7, lr}
 80086b4:	b084      	sub	sp, #16
 80086b6:	af00      	add	r7, sp, #0
 80086b8:	6078      	str	r0, [r7, #4]
 80086ba:	460b      	mov	r3, r1
 80086bc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80086be:	2300      	movs	r3, #0
 80086c0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80086c8:	685b      	ldr	r3, [r3, #4]
 80086ca:	78fa      	ldrb	r2, [r7, #3]
 80086cc:	4611      	mov	r1, r2
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	4798      	blx	r3
 80086d2:	4603      	mov	r3, r0
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d001      	beq.n	80086dc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80086d8:	2303      	movs	r3, #3
 80086da:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80086dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80086de:	4618      	mov	r0, r3
 80086e0:	3710      	adds	r7, #16
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}

080086e6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80086e6:	b580      	push	{r7, lr}
 80086e8:	b084      	sub	sp, #16
 80086ea:	af00      	add	r7, sp, #0
 80086ec:	6078      	str	r0, [r7, #4]
 80086ee:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80086f6:	6839      	ldr	r1, [r7, #0]
 80086f8:	4618      	mov	r0, r3
 80086fa:	f001 f936 	bl	800996a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2201      	movs	r2, #1
 8008702:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800870c:	461a      	mov	r2, r3
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800871a:	f003 031f 	and.w	r3, r3, #31
 800871e:	2b02      	cmp	r3, #2
 8008720:	d01a      	beq.n	8008758 <USBD_LL_SetupStage+0x72>
 8008722:	2b02      	cmp	r3, #2
 8008724:	d822      	bhi.n	800876c <USBD_LL_SetupStage+0x86>
 8008726:	2b00      	cmp	r3, #0
 8008728:	d002      	beq.n	8008730 <USBD_LL_SetupStage+0x4a>
 800872a:	2b01      	cmp	r3, #1
 800872c:	d00a      	beq.n	8008744 <USBD_LL_SetupStage+0x5e>
 800872e:	e01d      	b.n	800876c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008736:	4619      	mov	r1, r3
 8008738:	6878      	ldr	r0, [r7, #4]
 800873a:	f000 fb63 	bl	8008e04 <USBD_StdDevReq>
 800873e:	4603      	mov	r3, r0
 8008740:	73fb      	strb	r3, [r7, #15]
      break;
 8008742:	e020      	b.n	8008786 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800874a:	4619      	mov	r1, r3
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f000 fbcb 	bl	8008ee8 <USBD_StdItfReq>
 8008752:	4603      	mov	r3, r0
 8008754:	73fb      	strb	r3, [r7, #15]
      break;
 8008756:	e016      	b.n	8008786 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800875e:	4619      	mov	r1, r3
 8008760:	6878      	ldr	r0, [r7, #4]
 8008762:	f000 fc2d 	bl	8008fc0 <USBD_StdEPReq>
 8008766:	4603      	mov	r3, r0
 8008768:	73fb      	strb	r3, [r7, #15]
      break;
 800876a:	e00c      	b.n	8008786 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008772:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008776:	b2db      	uxtb	r3, r3
 8008778:	4619      	mov	r1, r3
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f001 fe40 	bl	800a400 <USBD_LL_StallEP>
 8008780:	4603      	mov	r3, r0
 8008782:	73fb      	strb	r3, [r7, #15]
      break;
 8008784:	bf00      	nop
  }

  return ret;
 8008786:	7bfb      	ldrb	r3, [r7, #15]
}
 8008788:	4618      	mov	r0, r3
 800878a:	3710      	adds	r7, #16
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}

08008790 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b086      	sub	sp, #24
 8008794:	af00      	add	r7, sp, #0
 8008796:	60f8      	str	r0, [r7, #12]
 8008798:	460b      	mov	r3, r1
 800879a:	607a      	str	r2, [r7, #4]
 800879c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800879e:	2300      	movs	r3, #0
 80087a0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80087a2:	7afb      	ldrb	r3, [r7, #11]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d16e      	bne.n	8008886 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80087ae:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80087b6:	2b03      	cmp	r3, #3
 80087b8:	f040 8098 	bne.w	80088ec <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80087bc:	693b      	ldr	r3, [r7, #16]
 80087be:	689a      	ldr	r2, [r3, #8]
 80087c0:	693b      	ldr	r3, [r7, #16]
 80087c2:	68db      	ldr	r3, [r3, #12]
 80087c4:	429a      	cmp	r2, r3
 80087c6:	d913      	bls.n	80087f0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80087c8:	693b      	ldr	r3, [r7, #16]
 80087ca:	689a      	ldr	r2, [r3, #8]
 80087cc:	693b      	ldr	r3, [r7, #16]
 80087ce:	68db      	ldr	r3, [r3, #12]
 80087d0:	1ad2      	subs	r2, r2, r3
 80087d2:	693b      	ldr	r3, [r7, #16]
 80087d4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80087d6:	693b      	ldr	r3, [r7, #16]
 80087d8:	68da      	ldr	r2, [r3, #12]
 80087da:	693b      	ldr	r3, [r7, #16]
 80087dc:	689b      	ldr	r3, [r3, #8]
 80087de:	4293      	cmp	r3, r2
 80087e0:	bf28      	it	cs
 80087e2:	4613      	movcs	r3, r2
 80087e4:	461a      	mov	r2, r3
 80087e6:	6879      	ldr	r1, [r7, #4]
 80087e8:	68f8      	ldr	r0, [r7, #12]
 80087ea:	f001 f9b2 	bl	8009b52 <USBD_CtlContinueRx>
 80087ee:	e07d      	b.n	80088ec <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80087f6:	f003 031f 	and.w	r3, r3, #31
 80087fa:	2b02      	cmp	r3, #2
 80087fc:	d014      	beq.n	8008828 <USBD_LL_DataOutStage+0x98>
 80087fe:	2b02      	cmp	r3, #2
 8008800:	d81d      	bhi.n	800883e <USBD_LL_DataOutStage+0xae>
 8008802:	2b00      	cmp	r3, #0
 8008804:	d002      	beq.n	800880c <USBD_LL_DataOutStage+0x7c>
 8008806:	2b01      	cmp	r3, #1
 8008808:	d003      	beq.n	8008812 <USBD_LL_DataOutStage+0x82>
 800880a:	e018      	b.n	800883e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800880c:	2300      	movs	r3, #0
 800880e:	75bb      	strb	r3, [r7, #22]
            break;
 8008810:	e018      	b.n	8008844 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008818:	b2db      	uxtb	r3, r3
 800881a:	4619      	mov	r1, r3
 800881c:	68f8      	ldr	r0, [r7, #12]
 800881e:	f000 fa64 	bl	8008cea <USBD_CoreFindIF>
 8008822:	4603      	mov	r3, r0
 8008824:	75bb      	strb	r3, [r7, #22]
            break;
 8008826:	e00d      	b.n	8008844 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800882e:	b2db      	uxtb	r3, r3
 8008830:	4619      	mov	r1, r3
 8008832:	68f8      	ldr	r0, [r7, #12]
 8008834:	f000 fa66 	bl	8008d04 <USBD_CoreFindEP>
 8008838:	4603      	mov	r3, r0
 800883a:	75bb      	strb	r3, [r7, #22]
            break;
 800883c:	e002      	b.n	8008844 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800883e:	2300      	movs	r3, #0
 8008840:	75bb      	strb	r3, [r7, #22]
            break;
 8008842:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008844:	7dbb      	ldrb	r3, [r7, #22]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d119      	bne.n	800887e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008850:	b2db      	uxtb	r3, r3
 8008852:	2b03      	cmp	r3, #3
 8008854:	d113      	bne.n	800887e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008856:	7dba      	ldrb	r2, [r7, #22]
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	32ae      	adds	r2, #174	@ 0xae
 800885c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008860:	691b      	ldr	r3, [r3, #16]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d00b      	beq.n	800887e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008866:	7dba      	ldrb	r2, [r7, #22]
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800886e:	7dba      	ldrb	r2, [r7, #22]
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	32ae      	adds	r2, #174	@ 0xae
 8008874:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008878:	691b      	ldr	r3, [r3, #16]
 800887a:	68f8      	ldr	r0, [r7, #12]
 800887c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800887e:	68f8      	ldr	r0, [r7, #12]
 8008880:	f001 f978 	bl	8009b74 <USBD_CtlSendStatus>
 8008884:	e032      	b.n	80088ec <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008886:	7afb      	ldrb	r3, [r7, #11]
 8008888:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800888c:	b2db      	uxtb	r3, r3
 800888e:	4619      	mov	r1, r3
 8008890:	68f8      	ldr	r0, [r7, #12]
 8008892:	f000 fa37 	bl	8008d04 <USBD_CoreFindEP>
 8008896:	4603      	mov	r3, r0
 8008898:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800889a:	7dbb      	ldrb	r3, [r7, #22]
 800889c:	2bff      	cmp	r3, #255	@ 0xff
 800889e:	d025      	beq.n	80088ec <USBD_LL_DataOutStage+0x15c>
 80088a0:	7dbb      	ldrb	r3, [r7, #22]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d122      	bne.n	80088ec <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80088ac:	b2db      	uxtb	r3, r3
 80088ae:	2b03      	cmp	r3, #3
 80088b0:	d117      	bne.n	80088e2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80088b2:	7dba      	ldrb	r2, [r7, #22]
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	32ae      	adds	r2, #174	@ 0xae
 80088b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088bc:	699b      	ldr	r3, [r3, #24]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d00f      	beq.n	80088e2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80088c2:	7dba      	ldrb	r2, [r7, #22]
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80088ca:	7dba      	ldrb	r2, [r7, #22]
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	32ae      	adds	r2, #174	@ 0xae
 80088d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088d4:	699b      	ldr	r3, [r3, #24]
 80088d6:	7afa      	ldrb	r2, [r7, #11]
 80088d8:	4611      	mov	r1, r2
 80088da:	68f8      	ldr	r0, [r7, #12]
 80088dc:	4798      	blx	r3
 80088de:	4603      	mov	r3, r0
 80088e0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80088e2:	7dfb      	ldrb	r3, [r7, #23]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d001      	beq.n	80088ec <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80088e8:	7dfb      	ldrb	r3, [r7, #23]
 80088ea:	e000      	b.n	80088ee <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80088ec:	2300      	movs	r3, #0
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	3718      	adds	r7, #24
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd80      	pop	{r7, pc}

080088f6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80088f6:	b580      	push	{r7, lr}
 80088f8:	b086      	sub	sp, #24
 80088fa:	af00      	add	r7, sp, #0
 80088fc:	60f8      	str	r0, [r7, #12]
 80088fe:	460b      	mov	r3, r1
 8008900:	607a      	str	r2, [r7, #4]
 8008902:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008904:	7afb      	ldrb	r3, [r7, #11]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d16f      	bne.n	80089ea <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	3314      	adds	r3, #20
 800890e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008916:	2b02      	cmp	r3, #2
 8008918:	d15a      	bne.n	80089d0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800891a:	693b      	ldr	r3, [r7, #16]
 800891c:	689a      	ldr	r2, [r3, #8]
 800891e:	693b      	ldr	r3, [r7, #16]
 8008920:	68db      	ldr	r3, [r3, #12]
 8008922:	429a      	cmp	r2, r3
 8008924:	d914      	bls.n	8008950 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008926:	693b      	ldr	r3, [r7, #16]
 8008928:	689a      	ldr	r2, [r3, #8]
 800892a:	693b      	ldr	r3, [r7, #16]
 800892c:	68db      	ldr	r3, [r3, #12]
 800892e:	1ad2      	subs	r2, r2, r3
 8008930:	693b      	ldr	r3, [r7, #16]
 8008932:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008934:	693b      	ldr	r3, [r7, #16]
 8008936:	689b      	ldr	r3, [r3, #8]
 8008938:	461a      	mov	r2, r3
 800893a:	6879      	ldr	r1, [r7, #4]
 800893c:	68f8      	ldr	r0, [r7, #12]
 800893e:	f001 f8da 	bl	8009af6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008942:	2300      	movs	r3, #0
 8008944:	2200      	movs	r2, #0
 8008946:	2100      	movs	r1, #0
 8008948:	68f8      	ldr	r0, [r7, #12]
 800894a:	f001 fe03 	bl	800a554 <USBD_LL_PrepareReceive>
 800894e:	e03f      	b.n	80089d0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008950:	693b      	ldr	r3, [r7, #16]
 8008952:	68da      	ldr	r2, [r3, #12]
 8008954:	693b      	ldr	r3, [r7, #16]
 8008956:	689b      	ldr	r3, [r3, #8]
 8008958:	429a      	cmp	r2, r3
 800895a:	d11c      	bne.n	8008996 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800895c:	693b      	ldr	r3, [r7, #16]
 800895e:	685a      	ldr	r2, [r3, #4]
 8008960:	693b      	ldr	r3, [r7, #16]
 8008962:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008964:	429a      	cmp	r2, r3
 8008966:	d316      	bcc.n	8008996 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008968:	693b      	ldr	r3, [r7, #16]
 800896a:	685a      	ldr	r2, [r3, #4]
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008972:	429a      	cmp	r2, r3
 8008974:	d20f      	bcs.n	8008996 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008976:	2200      	movs	r2, #0
 8008978:	2100      	movs	r1, #0
 800897a:	68f8      	ldr	r0, [r7, #12]
 800897c:	f001 f8bb 	bl	8009af6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	2200      	movs	r2, #0
 8008984:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008988:	2300      	movs	r3, #0
 800898a:	2200      	movs	r2, #0
 800898c:	2100      	movs	r1, #0
 800898e:	68f8      	ldr	r0, [r7, #12]
 8008990:	f001 fde0 	bl	800a554 <USBD_LL_PrepareReceive>
 8008994:	e01c      	b.n	80089d0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800899c:	b2db      	uxtb	r3, r3
 800899e:	2b03      	cmp	r3, #3
 80089a0:	d10f      	bne.n	80089c2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80089a8:	68db      	ldr	r3, [r3, #12]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d009      	beq.n	80089c2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	2200      	movs	r2, #0
 80089b2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80089bc:	68db      	ldr	r3, [r3, #12]
 80089be:	68f8      	ldr	r0, [r7, #12]
 80089c0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80089c2:	2180      	movs	r1, #128	@ 0x80
 80089c4:	68f8      	ldr	r0, [r7, #12]
 80089c6:	f001 fd1b 	bl	800a400 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80089ca:	68f8      	ldr	r0, [r7, #12]
 80089cc:	f001 f8e5 	bl	8009b9a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d03a      	beq.n	8008a50 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80089da:	68f8      	ldr	r0, [r7, #12]
 80089dc:	f7ff fe42 	bl	8008664 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	2200      	movs	r2, #0
 80089e4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80089e8:	e032      	b.n	8008a50 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80089ea:	7afb      	ldrb	r3, [r7, #11]
 80089ec:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80089f0:	b2db      	uxtb	r3, r3
 80089f2:	4619      	mov	r1, r3
 80089f4:	68f8      	ldr	r0, [r7, #12]
 80089f6:	f000 f985 	bl	8008d04 <USBD_CoreFindEP>
 80089fa:	4603      	mov	r3, r0
 80089fc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80089fe:	7dfb      	ldrb	r3, [r7, #23]
 8008a00:	2bff      	cmp	r3, #255	@ 0xff
 8008a02:	d025      	beq.n	8008a50 <USBD_LL_DataInStage+0x15a>
 8008a04:	7dfb      	ldrb	r3, [r7, #23]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d122      	bne.n	8008a50 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a10:	b2db      	uxtb	r3, r3
 8008a12:	2b03      	cmp	r3, #3
 8008a14:	d11c      	bne.n	8008a50 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008a16:	7dfa      	ldrb	r2, [r7, #23]
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	32ae      	adds	r2, #174	@ 0xae
 8008a1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a20:	695b      	ldr	r3, [r3, #20]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d014      	beq.n	8008a50 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008a26:	7dfa      	ldrb	r2, [r7, #23]
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008a2e:	7dfa      	ldrb	r2, [r7, #23]
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	32ae      	adds	r2, #174	@ 0xae
 8008a34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a38:	695b      	ldr	r3, [r3, #20]
 8008a3a:	7afa      	ldrb	r2, [r7, #11]
 8008a3c:	4611      	mov	r1, r2
 8008a3e:	68f8      	ldr	r0, [r7, #12]
 8008a40:	4798      	blx	r3
 8008a42:	4603      	mov	r3, r0
 8008a44:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008a46:	7dbb      	ldrb	r3, [r7, #22]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d001      	beq.n	8008a50 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008a4c:	7dbb      	ldrb	r3, [r7, #22]
 8008a4e:	e000      	b.n	8008a52 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008a50:	2300      	movs	r3, #0
}
 8008a52:	4618      	mov	r0, r3
 8008a54:	3718      	adds	r7, #24
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bd80      	pop	{r7, pc}

08008a5a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008a5a:	b580      	push	{r7, lr}
 8008a5c:	b084      	sub	sp, #16
 8008a5e:	af00      	add	r7, sp, #0
 8008a60:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a62:	2300      	movs	r3, #0
 8008a64:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	2201      	movs	r2, #1
 8008a6a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2200      	movs	r2, #0
 8008a72:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2200      	movs	r2, #0
 8008a7a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2200      	movs	r2, #0
 8008a80:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2200      	movs	r2, #0
 8008a88:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d014      	beq.n	8008ac0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a9c:	685b      	ldr	r3, [r3, #4]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d00e      	beq.n	8008ac0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008aa8:	685b      	ldr	r3, [r3, #4]
 8008aaa:	687a      	ldr	r2, [r7, #4]
 8008aac:	6852      	ldr	r2, [r2, #4]
 8008aae:	b2d2      	uxtb	r2, r2
 8008ab0:	4611      	mov	r1, r2
 8008ab2:	6878      	ldr	r0, [r7, #4]
 8008ab4:	4798      	blx	r3
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d001      	beq.n	8008ac0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008abc:	2303      	movs	r3, #3
 8008abe:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008ac0:	2340      	movs	r3, #64	@ 0x40
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	2100      	movs	r1, #0
 8008ac6:	6878      	ldr	r0, [r7, #4]
 8008ac8:	f001 fc55 	bl	800a376 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2201      	movs	r2, #1
 8008ad0:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2240      	movs	r2, #64	@ 0x40
 8008ad8:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008adc:	2340      	movs	r3, #64	@ 0x40
 8008ade:	2200      	movs	r2, #0
 8008ae0:	2180      	movs	r1, #128	@ 0x80
 8008ae2:	6878      	ldr	r0, [r7, #4]
 8008ae4:	f001 fc47 	bl	800a376 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2201      	movs	r2, #1
 8008aec:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	2240      	movs	r2, #64	@ 0x40
 8008af2:	621a      	str	r2, [r3, #32]

  return ret;
 8008af4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008af6:	4618      	mov	r0, r3
 8008af8:	3710      	adds	r7, #16
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bd80      	pop	{r7, pc}

08008afe <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008afe:	b480      	push	{r7}
 8008b00:	b083      	sub	sp, #12
 8008b02:	af00      	add	r7, sp, #0
 8008b04:	6078      	str	r0, [r7, #4]
 8008b06:	460b      	mov	r3, r1
 8008b08:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	78fa      	ldrb	r2, [r7, #3]
 8008b0e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008b10:	2300      	movs	r3, #0
}
 8008b12:	4618      	mov	r0, r3
 8008b14:	370c      	adds	r7, #12
 8008b16:	46bd      	mov	sp, r7
 8008b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1c:	4770      	bx	lr

08008b1e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008b1e:	b480      	push	{r7}
 8008b20:	b083      	sub	sp, #12
 8008b22:	af00      	add	r7, sp, #0
 8008b24:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b2c:	b2db      	uxtb	r3, r3
 8008b2e:	2b04      	cmp	r3, #4
 8008b30:	d006      	beq.n	8008b40 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b38:	b2da      	uxtb	r2, r3
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2204      	movs	r2, #4
 8008b44:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008b48:	2300      	movs	r3, #0
}
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	370c      	adds	r7, #12
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b54:	4770      	bx	lr

08008b56 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008b56:	b480      	push	{r7}
 8008b58:	b083      	sub	sp, #12
 8008b5a:	af00      	add	r7, sp, #0
 8008b5c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b64:	b2db      	uxtb	r3, r3
 8008b66:	2b04      	cmp	r3, #4
 8008b68:	d106      	bne.n	8008b78 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8008b70:	b2da      	uxtb	r2, r3
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008b78:	2300      	movs	r3, #0
}
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	370c      	adds	r7, #12
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b84:	4770      	bx	lr

08008b86 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008b86:	b580      	push	{r7, lr}
 8008b88:	b082      	sub	sp, #8
 8008b8a:	af00      	add	r7, sp, #0
 8008b8c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b94:	b2db      	uxtb	r3, r3
 8008b96:	2b03      	cmp	r3, #3
 8008b98:	d110      	bne.n	8008bbc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d00b      	beq.n	8008bbc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008baa:	69db      	ldr	r3, [r3, #28]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d005      	beq.n	8008bbc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008bb6:	69db      	ldr	r3, [r3, #28]
 8008bb8:	6878      	ldr	r0, [r7, #4]
 8008bba:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008bbc:	2300      	movs	r3, #0
}
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	3708      	adds	r7, #8
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd80      	pop	{r7, pc}

08008bc6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008bc6:	b580      	push	{r7, lr}
 8008bc8:	b082      	sub	sp, #8
 8008bca:	af00      	add	r7, sp, #0
 8008bcc:	6078      	str	r0, [r7, #4]
 8008bce:	460b      	mov	r3, r1
 8008bd0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	32ae      	adds	r2, #174	@ 0xae
 8008bdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d101      	bne.n	8008be8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008be4:	2303      	movs	r3, #3
 8008be6:	e01c      	b.n	8008c22 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008bee:	b2db      	uxtb	r3, r3
 8008bf0:	2b03      	cmp	r3, #3
 8008bf2:	d115      	bne.n	8008c20 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	32ae      	adds	r2, #174	@ 0xae
 8008bfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c02:	6a1b      	ldr	r3, [r3, #32]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d00b      	beq.n	8008c20 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	32ae      	adds	r2, #174	@ 0xae
 8008c12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c16:	6a1b      	ldr	r3, [r3, #32]
 8008c18:	78fa      	ldrb	r2, [r7, #3]
 8008c1a:	4611      	mov	r1, r2
 8008c1c:	6878      	ldr	r0, [r7, #4]
 8008c1e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008c20:	2300      	movs	r3, #0
}
 8008c22:	4618      	mov	r0, r3
 8008c24:	3708      	adds	r7, #8
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd80      	pop	{r7, pc}

08008c2a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008c2a:	b580      	push	{r7, lr}
 8008c2c:	b082      	sub	sp, #8
 8008c2e:	af00      	add	r7, sp, #0
 8008c30:	6078      	str	r0, [r7, #4]
 8008c32:	460b      	mov	r3, r1
 8008c34:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	32ae      	adds	r2, #174	@ 0xae
 8008c40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d101      	bne.n	8008c4c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008c48:	2303      	movs	r3, #3
 8008c4a:	e01c      	b.n	8008c86 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c52:	b2db      	uxtb	r3, r3
 8008c54:	2b03      	cmp	r3, #3
 8008c56:	d115      	bne.n	8008c84 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	32ae      	adds	r2, #174	@ 0xae
 8008c62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d00b      	beq.n	8008c84 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	32ae      	adds	r2, #174	@ 0xae
 8008c76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c7c:	78fa      	ldrb	r2, [r7, #3]
 8008c7e:	4611      	mov	r1, r2
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008c84:	2300      	movs	r3, #0
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	3708      	adds	r7, #8
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}

08008c8e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008c8e:	b480      	push	{r7}
 8008c90:	b083      	sub	sp, #12
 8008c92:	af00      	add	r7, sp, #0
 8008c94:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008c96:	2300      	movs	r3, #0
}
 8008c98:	4618      	mov	r0, r3
 8008c9a:	370c      	adds	r7, #12
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca2:	4770      	bx	lr

08008ca4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b084      	sub	sp, #16
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008cac:	2300      	movs	r3, #0
 8008cae:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2201      	movs	r2, #1
 8008cb4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d00e      	beq.n	8008ce0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008cc8:	685b      	ldr	r3, [r3, #4]
 8008cca:	687a      	ldr	r2, [r7, #4]
 8008ccc:	6852      	ldr	r2, [r2, #4]
 8008cce:	b2d2      	uxtb	r2, r2
 8008cd0:	4611      	mov	r1, r2
 8008cd2:	6878      	ldr	r0, [r7, #4]
 8008cd4:	4798      	blx	r3
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d001      	beq.n	8008ce0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008cdc:	2303      	movs	r3, #3
 8008cde:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008ce0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	3710      	adds	r7, #16
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd80      	pop	{r7, pc}

08008cea <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008cea:	b480      	push	{r7}
 8008cec:	b083      	sub	sp, #12
 8008cee:	af00      	add	r7, sp, #0
 8008cf0:	6078      	str	r0, [r7, #4]
 8008cf2:	460b      	mov	r3, r1
 8008cf4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008cf6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	370c      	adds	r7, #12
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d02:	4770      	bx	lr

08008d04 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008d04:	b480      	push	{r7}
 8008d06:	b083      	sub	sp, #12
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
 8008d0c:	460b      	mov	r3, r1
 8008d0e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008d10:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	370c      	adds	r7, #12
 8008d16:	46bd      	mov	sp, r7
 8008d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1c:	4770      	bx	lr

08008d1e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008d1e:	b580      	push	{r7, lr}
 8008d20:	b086      	sub	sp, #24
 8008d22:	af00      	add	r7, sp, #0
 8008d24:	6078      	str	r0, [r7, #4]
 8008d26:	460b      	mov	r3, r1
 8008d28:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008d32:	2300      	movs	r3, #0
 8008d34:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	885b      	ldrh	r3, [r3, #2]
 8008d3a:	b29b      	uxth	r3, r3
 8008d3c:	68fa      	ldr	r2, [r7, #12]
 8008d3e:	7812      	ldrb	r2, [r2, #0]
 8008d40:	4293      	cmp	r3, r2
 8008d42:	d91f      	bls.n	8008d84 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	781b      	ldrb	r3, [r3, #0]
 8008d48:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008d4a:	e013      	b.n	8008d74 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008d4c:	f107 030a 	add.w	r3, r7, #10
 8008d50:	4619      	mov	r1, r3
 8008d52:	6978      	ldr	r0, [r7, #20]
 8008d54:	f000 f81b 	bl	8008d8e <USBD_GetNextDesc>
 8008d58:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008d5a:	697b      	ldr	r3, [r7, #20]
 8008d5c:	785b      	ldrb	r3, [r3, #1]
 8008d5e:	2b05      	cmp	r3, #5
 8008d60:	d108      	bne.n	8008d74 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008d62:	697b      	ldr	r3, [r7, #20]
 8008d64:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008d66:	693b      	ldr	r3, [r7, #16]
 8008d68:	789b      	ldrb	r3, [r3, #2]
 8008d6a:	78fa      	ldrb	r2, [r7, #3]
 8008d6c:	429a      	cmp	r2, r3
 8008d6e:	d008      	beq.n	8008d82 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008d70:	2300      	movs	r3, #0
 8008d72:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	885b      	ldrh	r3, [r3, #2]
 8008d78:	b29a      	uxth	r2, r3
 8008d7a:	897b      	ldrh	r3, [r7, #10]
 8008d7c:	429a      	cmp	r2, r3
 8008d7e:	d8e5      	bhi.n	8008d4c <USBD_GetEpDesc+0x2e>
 8008d80:	e000      	b.n	8008d84 <USBD_GetEpDesc+0x66>
          break;
 8008d82:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008d84:	693b      	ldr	r3, [r7, #16]
}
 8008d86:	4618      	mov	r0, r3
 8008d88:	3718      	adds	r7, #24
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	bd80      	pop	{r7, pc}

08008d8e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008d8e:	b480      	push	{r7}
 8008d90:	b085      	sub	sp, #20
 8008d92:	af00      	add	r7, sp, #0
 8008d94:	6078      	str	r0, [r7, #4]
 8008d96:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	881b      	ldrh	r3, [r3, #0]
 8008da0:	68fa      	ldr	r2, [r7, #12]
 8008da2:	7812      	ldrb	r2, [r2, #0]
 8008da4:	4413      	add	r3, r2
 8008da6:	b29a      	uxth	r2, r3
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	781b      	ldrb	r3, [r3, #0]
 8008db0:	461a      	mov	r2, r3
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	4413      	add	r3, r2
 8008db6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008db8:	68fb      	ldr	r3, [r7, #12]
}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	3714      	adds	r7, #20
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc4:	4770      	bx	lr

08008dc6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008dc6:	b480      	push	{r7}
 8008dc8:	b087      	sub	sp, #28
 8008dca:	af00      	add	r7, sp, #0
 8008dcc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008dd2:	697b      	ldr	r3, [r7, #20]
 8008dd4:	781b      	ldrb	r3, [r3, #0]
 8008dd6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008dd8:	697b      	ldr	r3, [r7, #20]
 8008dda:	3301      	adds	r3, #1
 8008ddc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008dde:	697b      	ldr	r3, [r7, #20]
 8008de0:	781b      	ldrb	r3, [r3, #0]
 8008de2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008de4:	8a3b      	ldrh	r3, [r7, #16]
 8008de6:	021b      	lsls	r3, r3, #8
 8008de8:	b21a      	sxth	r2, r3
 8008dea:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008dee:	4313      	orrs	r3, r2
 8008df0:	b21b      	sxth	r3, r3
 8008df2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008df4:	89fb      	ldrh	r3, [r7, #14]
}
 8008df6:	4618      	mov	r0, r3
 8008df8:	371c      	adds	r7, #28
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e00:	4770      	bx	lr
	...

08008e04 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b084      	sub	sp, #16
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
 8008e0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008e0e:	2300      	movs	r3, #0
 8008e10:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	781b      	ldrb	r3, [r3, #0]
 8008e16:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008e1a:	2b40      	cmp	r3, #64	@ 0x40
 8008e1c:	d005      	beq.n	8008e2a <USBD_StdDevReq+0x26>
 8008e1e:	2b40      	cmp	r3, #64	@ 0x40
 8008e20:	d857      	bhi.n	8008ed2 <USBD_StdDevReq+0xce>
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d00f      	beq.n	8008e46 <USBD_StdDevReq+0x42>
 8008e26:	2b20      	cmp	r3, #32
 8008e28:	d153      	bne.n	8008ed2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	32ae      	adds	r2, #174	@ 0xae
 8008e34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e38:	689b      	ldr	r3, [r3, #8]
 8008e3a:	6839      	ldr	r1, [r7, #0]
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	4798      	blx	r3
 8008e40:	4603      	mov	r3, r0
 8008e42:	73fb      	strb	r3, [r7, #15]
      break;
 8008e44:	e04a      	b.n	8008edc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	785b      	ldrb	r3, [r3, #1]
 8008e4a:	2b09      	cmp	r3, #9
 8008e4c:	d83b      	bhi.n	8008ec6 <USBD_StdDevReq+0xc2>
 8008e4e:	a201      	add	r2, pc, #4	@ (adr r2, 8008e54 <USBD_StdDevReq+0x50>)
 8008e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e54:	08008ea9 	.word	0x08008ea9
 8008e58:	08008ebd 	.word	0x08008ebd
 8008e5c:	08008ec7 	.word	0x08008ec7
 8008e60:	08008eb3 	.word	0x08008eb3
 8008e64:	08008ec7 	.word	0x08008ec7
 8008e68:	08008e87 	.word	0x08008e87
 8008e6c:	08008e7d 	.word	0x08008e7d
 8008e70:	08008ec7 	.word	0x08008ec7
 8008e74:	08008e9f 	.word	0x08008e9f
 8008e78:	08008e91 	.word	0x08008e91
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008e7c:	6839      	ldr	r1, [r7, #0]
 8008e7e:	6878      	ldr	r0, [r7, #4]
 8008e80:	f000 fa3c 	bl	80092fc <USBD_GetDescriptor>
          break;
 8008e84:	e024      	b.n	8008ed0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008e86:	6839      	ldr	r1, [r7, #0]
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	f000 fbcb 	bl	8009624 <USBD_SetAddress>
          break;
 8008e8e:	e01f      	b.n	8008ed0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008e90:	6839      	ldr	r1, [r7, #0]
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	f000 fc0a 	bl	80096ac <USBD_SetConfig>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	73fb      	strb	r3, [r7, #15]
          break;
 8008e9c:	e018      	b.n	8008ed0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008e9e:	6839      	ldr	r1, [r7, #0]
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	f000 fcad 	bl	8009800 <USBD_GetConfig>
          break;
 8008ea6:	e013      	b.n	8008ed0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008ea8:	6839      	ldr	r1, [r7, #0]
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f000 fcde 	bl	800986c <USBD_GetStatus>
          break;
 8008eb0:	e00e      	b.n	8008ed0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008eb2:	6839      	ldr	r1, [r7, #0]
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	f000 fd0d 	bl	80098d4 <USBD_SetFeature>
          break;
 8008eba:	e009      	b.n	8008ed0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008ebc:	6839      	ldr	r1, [r7, #0]
 8008ebe:	6878      	ldr	r0, [r7, #4]
 8008ec0:	f000 fd31 	bl	8009926 <USBD_ClrFeature>
          break;
 8008ec4:	e004      	b.n	8008ed0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008ec6:	6839      	ldr	r1, [r7, #0]
 8008ec8:	6878      	ldr	r0, [r7, #4]
 8008eca:	f000 fd88 	bl	80099de <USBD_CtlError>
          break;
 8008ece:	bf00      	nop
      }
      break;
 8008ed0:	e004      	b.n	8008edc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008ed2:	6839      	ldr	r1, [r7, #0]
 8008ed4:	6878      	ldr	r0, [r7, #4]
 8008ed6:	f000 fd82 	bl	80099de <USBD_CtlError>
      break;
 8008eda:	bf00      	nop
  }

  return ret;
 8008edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ede:	4618      	mov	r0, r3
 8008ee0:	3710      	adds	r7, #16
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bd80      	pop	{r7, pc}
 8008ee6:	bf00      	nop

08008ee8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b084      	sub	sp, #16
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
 8008ef0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	781b      	ldrb	r3, [r3, #0]
 8008efa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008efe:	2b40      	cmp	r3, #64	@ 0x40
 8008f00:	d005      	beq.n	8008f0e <USBD_StdItfReq+0x26>
 8008f02:	2b40      	cmp	r3, #64	@ 0x40
 8008f04:	d852      	bhi.n	8008fac <USBD_StdItfReq+0xc4>
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d001      	beq.n	8008f0e <USBD_StdItfReq+0x26>
 8008f0a:	2b20      	cmp	r3, #32
 8008f0c:	d14e      	bne.n	8008fac <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f14:	b2db      	uxtb	r3, r3
 8008f16:	3b01      	subs	r3, #1
 8008f18:	2b02      	cmp	r3, #2
 8008f1a:	d840      	bhi.n	8008f9e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	889b      	ldrh	r3, [r3, #4]
 8008f20:	b2db      	uxtb	r3, r3
 8008f22:	2b01      	cmp	r3, #1
 8008f24:	d836      	bhi.n	8008f94 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	889b      	ldrh	r3, [r3, #4]
 8008f2a:	b2db      	uxtb	r3, r3
 8008f2c:	4619      	mov	r1, r3
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	f7ff fedb 	bl	8008cea <USBD_CoreFindIF>
 8008f34:	4603      	mov	r3, r0
 8008f36:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008f38:	7bbb      	ldrb	r3, [r7, #14]
 8008f3a:	2bff      	cmp	r3, #255	@ 0xff
 8008f3c:	d01d      	beq.n	8008f7a <USBD_StdItfReq+0x92>
 8008f3e:	7bbb      	ldrb	r3, [r7, #14]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d11a      	bne.n	8008f7a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008f44:	7bba      	ldrb	r2, [r7, #14]
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	32ae      	adds	r2, #174	@ 0xae
 8008f4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f4e:	689b      	ldr	r3, [r3, #8]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d00f      	beq.n	8008f74 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008f54:	7bba      	ldrb	r2, [r7, #14]
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008f5c:	7bba      	ldrb	r2, [r7, #14]
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	32ae      	adds	r2, #174	@ 0xae
 8008f62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f66:	689b      	ldr	r3, [r3, #8]
 8008f68:	6839      	ldr	r1, [r7, #0]
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	4798      	blx	r3
 8008f6e:	4603      	mov	r3, r0
 8008f70:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008f72:	e004      	b.n	8008f7e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008f74:	2303      	movs	r3, #3
 8008f76:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008f78:	e001      	b.n	8008f7e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008f7a:	2303      	movs	r3, #3
 8008f7c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	88db      	ldrh	r3, [r3, #6]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d110      	bne.n	8008fa8 <USBD_StdItfReq+0xc0>
 8008f86:	7bfb      	ldrb	r3, [r7, #15]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d10d      	bne.n	8008fa8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008f8c:	6878      	ldr	r0, [r7, #4]
 8008f8e:	f000 fdf1 	bl	8009b74 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008f92:	e009      	b.n	8008fa8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008f94:	6839      	ldr	r1, [r7, #0]
 8008f96:	6878      	ldr	r0, [r7, #4]
 8008f98:	f000 fd21 	bl	80099de <USBD_CtlError>
          break;
 8008f9c:	e004      	b.n	8008fa8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008f9e:	6839      	ldr	r1, [r7, #0]
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f000 fd1c 	bl	80099de <USBD_CtlError>
          break;
 8008fa6:	e000      	b.n	8008faa <USBD_StdItfReq+0xc2>
          break;
 8008fa8:	bf00      	nop
      }
      break;
 8008faa:	e004      	b.n	8008fb6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008fac:	6839      	ldr	r1, [r7, #0]
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f000 fd15 	bl	80099de <USBD_CtlError>
      break;
 8008fb4:	bf00      	nop
  }

  return ret;
 8008fb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	3710      	adds	r7, #16
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}

08008fc0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b084      	sub	sp, #16
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
 8008fc8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008fca:	2300      	movs	r3, #0
 8008fcc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	889b      	ldrh	r3, [r3, #4]
 8008fd2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	781b      	ldrb	r3, [r3, #0]
 8008fd8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008fdc:	2b40      	cmp	r3, #64	@ 0x40
 8008fde:	d007      	beq.n	8008ff0 <USBD_StdEPReq+0x30>
 8008fe0:	2b40      	cmp	r3, #64	@ 0x40
 8008fe2:	f200 817f 	bhi.w	80092e4 <USBD_StdEPReq+0x324>
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d02a      	beq.n	8009040 <USBD_StdEPReq+0x80>
 8008fea:	2b20      	cmp	r3, #32
 8008fec:	f040 817a 	bne.w	80092e4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008ff0:	7bbb      	ldrb	r3, [r7, #14]
 8008ff2:	4619      	mov	r1, r3
 8008ff4:	6878      	ldr	r0, [r7, #4]
 8008ff6:	f7ff fe85 	bl	8008d04 <USBD_CoreFindEP>
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008ffe:	7b7b      	ldrb	r3, [r7, #13]
 8009000:	2bff      	cmp	r3, #255	@ 0xff
 8009002:	f000 8174 	beq.w	80092ee <USBD_StdEPReq+0x32e>
 8009006:	7b7b      	ldrb	r3, [r7, #13]
 8009008:	2b00      	cmp	r3, #0
 800900a:	f040 8170 	bne.w	80092ee <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800900e:	7b7a      	ldrb	r2, [r7, #13]
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009016:	7b7a      	ldrb	r2, [r7, #13]
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	32ae      	adds	r2, #174	@ 0xae
 800901c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009020:	689b      	ldr	r3, [r3, #8]
 8009022:	2b00      	cmp	r3, #0
 8009024:	f000 8163 	beq.w	80092ee <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009028:	7b7a      	ldrb	r2, [r7, #13]
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	32ae      	adds	r2, #174	@ 0xae
 800902e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009032:	689b      	ldr	r3, [r3, #8]
 8009034:	6839      	ldr	r1, [r7, #0]
 8009036:	6878      	ldr	r0, [r7, #4]
 8009038:	4798      	blx	r3
 800903a:	4603      	mov	r3, r0
 800903c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800903e:	e156      	b.n	80092ee <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	785b      	ldrb	r3, [r3, #1]
 8009044:	2b03      	cmp	r3, #3
 8009046:	d008      	beq.n	800905a <USBD_StdEPReq+0x9a>
 8009048:	2b03      	cmp	r3, #3
 800904a:	f300 8145 	bgt.w	80092d8 <USBD_StdEPReq+0x318>
 800904e:	2b00      	cmp	r3, #0
 8009050:	f000 809b 	beq.w	800918a <USBD_StdEPReq+0x1ca>
 8009054:	2b01      	cmp	r3, #1
 8009056:	d03c      	beq.n	80090d2 <USBD_StdEPReq+0x112>
 8009058:	e13e      	b.n	80092d8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009060:	b2db      	uxtb	r3, r3
 8009062:	2b02      	cmp	r3, #2
 8009064:	d002      	beq.n	800906c <USBD_StdEPReq+0xac>
 8009066:	2b03      	cmp	r3, #3
 8009068:	d016      	beq.n	8009098 <USBD_StdEPReq+0xd8>
 800906a:	e02c      	b.n	80090c6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800906c:	7bbb      	ldrb	r3, [r7, #14]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d00d      	beq.n	800908e <USBD_StdEPReq+0xce>
 8009072:	7bbb      	ldrb	r3, [r7, #14]
 8009074:	2b80      	cmp	r3, #128	@ 0x80
 8009076:	d00a      	beq.n	800908e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009078:	7bbb      	ldrb	r3, [r7, #14]
 800907a:	4619      	mov	r1, r3
 800907c:	6878      	ldr	r0, [r7, #4]
 800907e:	f001 f9bf 	bl	800a400 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009082:	2180      	movs	r1, #128	@ 0x80
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	f001 f9bb 	bl	800a400 <USBD_LL_StallEP>
 800908a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800908c:	e020      	b.n	80090d0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800908e:	6839      	ldr	r1, [r7, #0]
 8009090:	6878      	ldr	r0, [r7, #4]
 8009092:	f000 fca4 	bl	80099de <USBD_CtlError>
              break;
 8009096:	e01b      	b.n	80090d0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	885b      	ldrh	r3, [r3, #2]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d10e      	bne.n	80090be <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80090a0:	7bbb      	ldrb	r3, [r7, #14]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d00b      	beq.n	80090be <USBD_StdEPReq+0xfe>
 80090a6:	7bbb      	ldrb	r3, [r7, #14]
 80090a8:	2b80      	cmp	r3, #128	@ 0x80
 80090aa:	d008      	beq.n	80090be <USBD_StdEPReq+0xfe>
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	88db      	ldrh	r3, [r3, #6]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d104      	bne.n	80090be <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80090b4:	7bbb      	ldrb	r3, [r7, #14]
 80090b6:	4619      	mov	r1, r3
 80090b8:	6878      	ldr	r0, [r7, #4]
 80090ba:	f001 f9a1 	bl	800a400 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80090be:	6878      	ldr	r0, [r7, #4]
 80090c0:	f000 fd58 	bl	8009b74 <USBD_CtlSendStatus>

              break;
 80090c4:	e004      	b.n	80090d0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80090c6:	6839      	ldr	r1, [r7, #0]
 80090c8:	6878      	ldr	r0, [r7, #4]
 80090ca:	f000 fc88 	bl	80099de <USBD_CtlError>
              break;
 80090ce:	bf00      	nop
          }
          break;
 80090d0:	e107      	b.n	80092e2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80090d8:	b2db      	uxtb	r3, r3
 80090da:	2b02      	cmp	r3, #2
 80090dc:	d002      	beq.n	80090e4 <USBD_StdEPReq+0x124>
 80090de:	2b03      	cmp	r3, #3
 80090e0:	d016      	beq.n	8009110 <USBD_StdEPReq+0x150>
 80090e2:	e04b      	b.n	800917c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80090e4:	7bbb      	ldrb	r3, [r7, #14]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d00d      	beq.n	8009106 <USBD_StdEPReq+0x146>
 80090ea:	7bbb      	ldrb	r3, [r7, #14]
 80090ec:	2b80      	cmp	r3, #128	@ 0x80
 80090ee:	d00a      	beq.n	8009106 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80090f0:	7bbb      	ldrb	r3, [r7, #14]
 80090f2:	4619      	mov	r1, r3
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f001 f983 	bl	800a400 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80090fa:	2180      	movs	r1, #128	@ 0x80
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f001 f97f 	bl	800a400 <USBD_LL_StallEP>
 8009102:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009104:	e040      	b.n	8009188 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009106:	6839      	ldr	r1, [r7, #0]
 8009108:	6878      	ldr	r0, [r7, #4]
 800910a:	f000 fc68 	bl	80099de <USBD_CtlError>
              break;
 800910e:	e03b      	b.n	8009188 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	885b      	ldrh	r3, [r3, #2]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d136      	bne.n	8009186 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009118:	7bbb      	ldrb	r3, [r7, #14]
 800911a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800911e:	2b00      	cmp	r3, #0
 8009120:	d004      	beq.n	800912c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009122:	7bbb      	ldrb	r3, [r7, #14]
 8009124:	4619      	mov	r1, r3
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	f001 f989 	bl	800a43e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800912c:	6878      	ldr	r0, [r7, #4]
 800912e:	f000 fd21 	bl	8009b74 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009132:	7bbb      	ldrb	r3, [r7, #14]
 8009134:	4619      	mov	r1, r3
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f7ff fde4 	bl	8008d04 <USBD_CoreFindEP>
 800913c:	4603      	mov	r3, r0
 800913e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009140:	7b7b      	ldrb	r3, [r7, #13]
 8009142:	2bff      	cmp	r3, #255	@ 0xff
 8009144:	d01f      	beq.n	8009186 <USBD_StdEPReq+0x1c6>
 8009146:	7b7b      	ldrb	r3, [r7, #13]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d11c      	bne.n	8009186 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800914c:	7b7a      	ldrb	r2, [r7, #13]
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009154:	7b7a      	ldrb	r2, [r7, #13]
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	32ae      	adds	r2, #174	@ 0xae
 800915a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800915e:	689b      	ldr	r3, [r3, #8]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d010      	beq.n	8009186 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009164:	7b7a      	ldrb	r2, [r7, #13]
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	32ae      	adds	r2, #174	@ 0xae
 800916a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800916e:	689b      	ldr	r3, [r3, #8]
 8009170:	6839      	ldr	r1, [r7, #0]
 8009172:	6878      	ldr	r0, [r7, #4]
 8009174:	4798      	blx	r3
 8009176:	4603      	mov	r3, r0
 8009178:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800917a:	e004      	b.n	8009186 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800917c:	6839      	ldr	r1, [r7, #0]
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f000 fc2d 	bl	80099de <USBD_CtlError>
              break;
 8009184:	e000      	b.n	8009188 <USBD_StdEPReq+0x1c8>
              break;
 8009186:	bf00      	nop
          }
          break;
 8009188:	e0ab      	b.n	80092e2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009190:	b2db      	uxtb	r3, r3
 8009192:	2b02      	cmp	r3, #2
 8009194:	d002      	beq.n	800919c <USBD_StdEPReq+0x1dc>
 8009196:	2b03      	cmp	r3, #3
 8009198:	d032      	beq.n	8009200 <USBD_StdEPReq+0x240>
 800919a:	e097      	b.n	80092cc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800919c:	7bbb      	ldrb	r3, [r7, #14]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d007      	beq.n	80091b2 <USBD_StdEPReq+0x1f2>
 80091a2:	7bbb      	ldrb	r3, [r7, #14]
 80091a4:	2b80      	cmp	r3, #128	@ 0x80
 80091a6:	d004      	beq.n	80091b2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80091a8:	6839      	ldr	r1, [r7, #0]
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f000 fc17 	bl	80099de <USBD_CtlError>
                break;
 80091b0:	e091      	b.n	80092d6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80091b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	da0b      	bge.n	80091d2 <USBD_StdEPReq+0x212>
 80091ba:	7bbb      	ldrb	r3, [r7, #14]
 80091bc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80091c0:	4613      	mov	r3, r2
 80091c2:	009b      	lsls	r3, r3, #2
 80091c4:	4413      	add	r3, r2
 80091c6:	009b      	lsls	r3, r3, #2
 80091c8:	3310      	adds	r3, #16
 80091ca:	687a      	ldr	r2, [r7, #4]
 80091cc:	4413      	add	r3, r2
 80091ce:	3304      	adds	r3, #4
 80091d0:	e00b      	b.n	80091ea <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80091d2:	7bbb      	ldrb	r3, [r7, #14]
 80091d4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80091d8:	4613      	mov	r3, r2
 80091da:	009b      	lsls	r3, r3, #2
 80091dc:	4413      	add	r3, r2
 80091de:	009b      	lsls	r3, r3, #2
 80091e0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80091e4:	687a      	ldr	r2, [r7, #4]
 80091e6:	4413      	add	r3, r2
 80091e8:	3304      	adds	r3, #4
 80091ea:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80091ec:	68bb      	ldr	r3, [r7, #8]
 80091ee:	2200      	movs	r2, #0
 80091f0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80091f2:	68bb      	ldr	r3, [r7, #8]
 80091f4:	2202      	movs	r2, #2
 80091f6:	4619      	mov	r1, r3
 80091f8:	6878      	ldr	r0, [r7, #4]
 80091fa:	f000 fc61 	bl	8009ac0 <USBD_CtlSendData>
              break;
 80091fe:	e06a      	b.n	80092d6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009200:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009204:	2b00      	cmp	r3, #0
 8009206:	da11      	bge.n	800922c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009208:	7bbb      	ldrb	r3, [r7, #14]
 800920a:	f003 020f 	and.w	r2, r3, #15
 800920e:	6879      	ldr	r1, [r7, #4]
 8009210:	4613      	mov	r3, r2
 8009212:	009b      	lsls	r3, r3, #2
 8009214:	4413      	add	r3, r2
 8009216:	009b      	lsls	r3, r3, #2
 8009218:	440b      	add	r3, r1
 800921a:	3324      	adds	r3, #36	@ 0x24
 800921c:	881b      	ldrh	r3, [r3, #0]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d117      	bne.n	8009252 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009222:	6839      	ldr	r1, [r7, #0]
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	f000 fbda 	bl	80099de <USBD_CtlError>
                  break;
 800922a:	e054      	b.n	80092d6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800922c:	7bbb      	ldrb	r3, [r7, #14]
 800922e:	f003 020f 	and.w	r2, r3, #15
 8009232:	6879      	ldr	r1, [r7, #4]
 8009234:	4613      	mov	r3, r2
 8009236:	009b      	lsls	r3, r3, #2
 8009238:	4413      	add	r3, r2
 800923a:	009b      	lsls	r3, r3, #2
 800923c:	440b      	add	r3, r1
 800923e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009242:	881b      	ldrh	r3, [r3, #0]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d104      	bne.n	8009252 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009248:	6839      	ldr	r1, [r7, #0]
 800924a:	6878      	ldr	r0, [r7, #4]
 800924c:	f000 fbc7 	bl	80099de <USBD_CtlError>
                  break;
 8009250:	e041      	b.n	80092d6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009252:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009256:	2b00      	cmp	r3, #0
 8009258:	da0b      	bge.n	8009272 <USBD_StdEPReq+0x2b2>
 800925a:	7bbb      	ldrb	r3, [r7, #14]
 800925c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009260:	4613      	mov	r3, r2
 8009262:	009b      	lsls	r3, r3, #2
 8009264:	4413      	add	r3, r2
 8009266:	009b      	lsls	r3, r3, #2
 8009268:	3310      	adds	r3, #16
 800926a:	687a      	ldr	r2, [r7, #4]
 800926c:	4413      	add	r3, r2
 800926e:	3304      	adds	r3, #4
 8009270:	e00b      	b.n	800928a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009272:	7bbb      	ldrb	r3, [r7, #14]
 8009274:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009278:	4613      	mov	r3, r2
 800927a:	009b      	lsls	r3, r3, #2
 800927c:	4413      	add	r3, r2
 800927e:	009b      	lsls	r3, r3, #2
 8009280:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009284:	687a      	ldr	r2, [r7, #4]
 8009286:	4413      	add	r3, r2
 8009288:	3304      	adds	r3, #4
 800928a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800928c:	7bbb      	ldrb	r3, [r7, #14]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d002      	beq.n	8009298 <USBD_StdEPReq+0x2d8>
 8009292:	7bbb      	ldrb	r3, [r7, #14]
 8009294:	2b80      	cmp	r3, #128	@ 0x80
 8009296:	d103      	bne.n	80092a0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	2200      	movs	r2, #0
 800929c:	601a      	str	r2, [r3, #0]
 800929e:	e00e      	b.n	80092be <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80092a0:	7bbb      	ldrb	r3, [r7, #14]
 80092a2:	4619      	mov	r1, r3
 80092a4:	6878      	ldr	r0, [r7, #4]
 80092a6:	f001 f8e9 	bl	800a47c <USBD_LL_IsStallEP>
 80092aa:	4603      	mov	r3, r0
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d003      	beq.n	80092b8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	2201      	movs	r2, #1
 80092b4:	601a      	str	r2, [r3, #0]
 80092b6:	e002      	b.n	80092be <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80092b8:	68bb      	ldr	r3, [r7, #8]
 80092ba:	2200      	movs	r2, #0
 80092bc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	2202      	movs	r2, #2
 80092c2:	4619      	mov	r1, r3
 80092c4:	6878      	ldr	r0, [r7, #4]
 80092c6:	f000 fbfb 	bl	8009ac0 <USBD_CtlSendData>
              break;
 80092ca:	e004      	b.n	80092d6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80092cc:	6839      	ldr	r1, [r7, #0]
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f000 fb85 	bl	80099de <USBD_CtlError>
              break;
 80092d4:	bf00      	nop
          }
          break;
 80092d6:	e004      	b.n	80092e2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80092d8:	6839      	ldr	r1, [r7, #0]
 80092da:	6878      	ldr	r0, [r7, #4]
 80092dc:	f000 fb7f 	bl	80099de <USBD_CtlError>
          break;
 80092e0:	bf00      	nop
      }
      break;
 80092e2:	e005      	b.n	80092f0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80092e4:	6839      	ldr	r1, [r7, #0]
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	f000 fb79 	bl	80099de <USBD_CtlError>
      break;
 80092ec:	e000      	b.n	80092f0 <USBD_StdEPReq+0x330>
      break;
 80092ee:	bf00      	nop
  }

  return ret;
 80092f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80092f2:	4618      	mov	r0, r3
 80092f4:	3710      	adds	r7, #16
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bd80      	pop	{r7, pc}
	...

080092fc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b084      	sub	sp, #16
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
 8009304:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009306:	2300      	movs	r3, #0
 8009308:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800930a:	2300      	movs	r3, #0
 800930c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800930e:	2300      	movs	r3, #0
 8009310:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	885b      	ldrh	r3, [r3, #2]
 8009316:	0a1b      	lsrs	r3, r3, #8
 8009318:	b29b      	uxth	r3, r3
 800931a:	3b01      	subs	r3, #1
 800931c:	2b0e      	cmp	r3, #14
 800931e:	f200 8152 	bhi.w	80095c6 <USBD_GetDescriptor+0x2ca>
 8009322:	a201      	add	r2, pc, #4	@ (adr r2, 8009328 <USBD_GetDescriptor+0x2c>)
 8009324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009328:	08009399 	.word	0x08009399
 800932c:	080093b1 	.word	0x080093b1
 8009330:	080093f1 	.word	0x080093f1
 8009334:	080095c7 	.word	0x080095c7
 8009338:	080095c7 	.word	0x080095c7
 800933c:	08009567 	.word	0x08009567
 8009340:	08009593 	.word	0x08009593
 8009344:	080095c7 	.word	0x080095c7
 8009348:	080095c7 	.word	0x080095c7
 800934c:	080095c7 	.word	0x080095c7
 8009350:	080095c7 	.word	0x080095c7
 8009354:	080095c7 	.word	0x080095c7
 8009358:	080095c7 	.word	0x080095c7
 800935c:	080095c7 	.word	0x080095c7
 8009360:	08009365 	.word	0x08009365
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800936a:	69db      	ldr	r3, [r3, #28]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d00b      	beq.n	8009388 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009376:	69db      	ldr	r3, [r3, #28]
 8009378:	687a      	ldr	r2, [r7, #4]
 800937a:	7c12      	ldrb	r2, [r2, #16]
 800937c:	f107 0108 	add.w	r1, r7, #8
 8009380:	4610      	mov	r0, r2
 8009382:	4798      	blx	r3
 8009384:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009386:	e126      	b.n	80095d6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009388:	6839      	ldr	r1, [r7, #0]
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	f000 fb27 	bl	80099de <USBD_CtlError>
        err++;
 8009390:	7afb      	ldrb	r3, [r7, #11]
 8009392:	3301      	adds	r3, #1
 8009394:	72fb      	strb	r3, [r7, #11]
      break;
 8009396:	e11e      	b.n	80095d6 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	687a      	ldr	r2, [r7, #4]
 80093a2:	7c12      	ldrb	r2, [r2, #16]
 80093a4:	f107 0108 	add.w	r1, r7, #8
 80093a8:	4610      	mov	r0, r2
 80093aa:	4798      	blx	r3
 80093ac:	60f8      	str	r0, [r7, #12]
      break;
 80093ae:	e112      	b.n	80095d6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	7c1b      	ldrb	r3, [r3, #16]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d10d      	bne.n	80093d4 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80093be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093c0:	f107 0208 	add.w	r2, r7, #8
 80093c4:	4610      	mov	r0, r2
 80093c6:	4798      	blx	r3
 80093c8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	3301      	adds	r3, #1
 80093ce:	2202      	movs	r2, #2
 80093d0:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80093d2:	e100      	b.n	80095d6 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80093da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093dc:	f107 0208 	add.w	r2, r7, #8
 80093e0:	4610      	mov	r0, r2
 80093e2:	4798      	blx	r3
 80093e4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	3301      	adds	r3, #1
 80093ea:	2202      	movs	r2, #2
 80093ec:	701a      	strb	r2, [r3, #0]
      break;
 80093ee:	e0f2      	b.n	80095d6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	885b      	ldrh	r3, [r3, #2]
 80093f4:	b2db      	uxtb	r3, r3
 80093f6:	2b05      	cmp	r3, #5
 80093f8:	f200 80ac 	bhi.w	8009554 <USBD_GetDescriptor+0x258>
 80093fc:	a201      	add	r2, pc, #4	@ (adr r2, 8009404 <USBD_GetDescriptor+0x108>)
 80093fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009402:	bf00      	nop
 8009404:	0800941d 	.word	0x0800941d
 8009408:	08009451 	.word	0x08009451
 800940c:	08009485 	.word	0x08009485
 8009410:	080094b9 	.word	0x080094b9
 8009414:	080094ed 	.word	0x080094ed
 8009418:	08009521 	.word	0x08009521
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009422:	685b      	ldr	r3, [r3, #4]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d00b      	beq.n	8009440 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800942e:	685b      	ldr	r3, [r3, #4]
 8009430:	687a      	ldr	r2, [r7, #4]
 8009432:	7c12      	ldrb	r2, [r2, #16]
 8009434:	f107 0108 	add.w	r1, r7, #8
 8009438:	4610      	mov	r0, r2
 800943a:	4798      	blx	r3
 800943c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800943e:	e091      	b.n	8009564 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009440:	6839      	ldr	r1, [r7, #0]
 8009442:	6878      	ldr	r0, [r7, #4]
 8009444:	f000 facb 	bl	80099de <USBD_CtlError>
            err++;
 8009448:	7afb      	ldrb	r3, [r7, #11]
 800944a:	3301      	adds	r3, #1
 800944c:	72fb      	strb	r3, [r7, #11]
          break;
 800944e:	e089      	b.n	8009564 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009456:	689b      	ldr	r3, [r3, #8]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d00b      	beq.n	8009474 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009462:	689b      	ldr	r3, [r3, #8]
 8009464:	687a      	ldr	r2, [r7, #4]
 8009466:	7c12      	ldrb	r2, [r2, #16]
 8009468:	f107 0108 	add.w	r1, r7, #8
 800946c:	4610      	mov	r0, r2
 800946e:	4798      	blx	r3
 8009470:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009472:	e077      	b.n	8009564 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009474:	6839      	ldr	r1, [r7, #0]
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	f000 fab1 	bl	80099de <USBD_CtlError>
            err++;
 800947c:	7afb      	ldrb	r3, [r7, #11]
 800947e:	3301      	adds	r3, #1
 8009480:	72fb      	strb	r3, [r7, #11]
          break;
 8009482:	e06f      	b.n	8009564 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800948a:	68db      	ldr	r3, [r3, #12]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d00b      	beq.n	80094a8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009496:	68db      	ldr	r3, [r3, #12]
 8009498:	687a      	ldr	r2, [r7, #4]
 800949a:	7c12      	ldrb	r2, [r2, #16]
 800949c:	f107 0108 	add.w	r1, r7, #8
 80094a0:	4610      	mov	r0, r2
 80094a2:	4798      	blx	r3
 80094a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80094a6:	e05d      	b.n	8009564 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80094a8:	6839      	ldr	r1, [r7, #0]
 80094aa:	6878      	ldr	r0, [r7, #4]
 80094ac:	f000 fa97 	bl	80099de <USBD_CtlError>
            err++;
 80094b0:	7afb      	ldrb	r3, [r7, #11]
 80094b2:	3301      	adds	r3, #1
 80094b4:	72fb      	strb	r3, [r7, #11]
          break;
 80094b6:	e055      	b.n	8009564 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80094be:	691b      	ldr	r3, [r3, #16]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d00b      	beq.n	80094dc <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80094ca:	691b      	ldr	r3, [r3, #16]
 80094cc:	687a      	ldr	r2, [r7, #4]
 80094ce:	7c12      	ldrb	r2, [r2, #16]
 80094d0:	f107 0108 	add.w	r1, r7, #8
 80094d4:	4610      	mov	r0, r2
 80094d6:	4798      	blx	r3
 80094d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80094da:	e043      	b.n	8009564 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80094dc:	6839      	ldr	r1, [r7, #0]
 80094de:	6878      	ldr	r0, [r7, #4]
 80094e0:	f000 fa7d 	bl	80099de <USBD_CtlError>
            err++;
 80094e4:	7afb      	ldrb	r3, [r7, #11]
 80094e6:	3301      	adds	r3, #1
 80094e8:	72fb      	strb	r3, [r7, #11]
          break;
 80094ea:	e03b      	b.n	8009564 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80094f2:	695b      	ldr	r3, [r3, #20]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d00b      	beq.n	8009510 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80094fe:	695b      	ldr	r3, [r3, #20]
 8009500:	687a      	ldr	r2, [r7, #4]
 8009502:	7c12      	ldrb	r2, [r2, #16]
 8009504:	f107 0108 	add.w	r1, r7, #8
 8009508:	4610      	mov	r0, r2
 800950a:	4798      	blx	r3
 800950c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800950e:	e029      	b.n	8009564 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009510:	6839      	ldr	r1, [r7, #0]
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	f000 fa63 	bl	80099de <USBD_CtlError>
            err++;
 8009518:	7afb      	ldrb	r3, [r7, #11]
 800951a:	3301      	adds	r3, #1
 800951c:	72fb      	strb	r3, [r7, #11]
          break;
 800951e:	e021      	b.n	8009564 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009526:	699b      	ldr	r3, [r3, #24]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d00b      	beq.n	8009544 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009532:	699b      	ldr	r3, [r3, #24]
 8009534:	687a      	ldr	r2, [r7, #4]
 8009536:	7c12      	ldrb	r2, [r2, #16]
 8009538:	f107 0108 	add.w	r1, r7, #8
 800953c:	4610      	mov	r0, r2
 800953e:	4798      	blx	r3
 8009540:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009542:	e00f      	b.n	8009564 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009544:	6839      	ldr	r1, [r7, #0]
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	f000 fa49 	bl	80099de <USBD_CtlError>
            err++;
 800954c:	7afb      	ldrb	r3, [r7, #11]
 800954e:	3301      	adds	r3, #1
 8009550:	72fb      	strb	r3, [r7, #11]
          break;
 8009552:	e007      	b.n	8009564 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009554:	6839      	ldr	r1, [r7, #0]
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	f000 fa41 	bl	80099de <USBD_CtlError>
          err++;
 800955c:	7afb      	ldrb	r3, [r7, #11]
 800955e:	3301      	adds	r3, #1
 8009560:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009562:	bf00      	nop
      }
      break;
 8009564:	e037      	b.n	80095d6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	7c1b      	ldrb	r3, [r3, #16]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d109      	bne.n	8009582 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009574:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009576:	f107 0208 	add.w	r2, r7, #8
 800957a:	4610      	mov	r0, r2
 800957c:	4798      	blx	r3
 800957e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009580:	e029      	b.n	80095d6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009582:	6839      	ldr	r1, [r7, #0]
 8009584:	6878      	ldr	r0, [r7, #4]
 8009586:	f000 fa2a 	bl	80099de <USBD_CtlError>
        err++;
 800958a:	7afb      	ldrb	r3, [r7, #11]
 800958c:	3301      	adds	r3, #1
 800958e:	72fb      	strb	r3, [r7, #11]
      break;
 8009590:	e021      	b.n	80095d6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	7c1b      	ldrb	r3, [r3, #16]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d10d      	bne.n	80095b6 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80095a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095a2:	f107 0208 	add.w	r2, r7, #8
 80095a6:	4610      	mov	r0, r2
 80095a8:	4798      	blx	r3
 80095aa:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	3301      	adds	r3, #1
 80095b0:	2207      	movs	r2, #7
 80095b2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80095b4:	e00f      	b.n	80095d6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80095b6:	6839      	ldr	r1, [r7, #0]
 80095b8:	6878      	ldr	r0, [r7, #4]
 80095ba:	f000 fa10 	bl	80099de <USBD_CtlError>
        err++;
 80095be:	7afb      	ldrb	r3, [r7, #11]
 80095c0:	3301      	adds	r3, #1
 80095c2:	72fb      	strb	r3, [r7, #11]
      break;
 80095c4:	e007      	b.n	80095d6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80095c6:	6839      	ldr	r1, [r7, #0]
 80095c8:	6878      	ldr	r0, [r7, #4]
 80095ca:	f000 fa08 	bl	80099de <USBD_CtlError>
      err++;
 80095ce:	7afb      	ldrb	r3, [r7, #11]
 80095d0:	3301      	adds	r3, #1
 80095d2:	72fb      	strb	r3, [r7, #11]
      break;
 80095d4:	bf00      	nop
  }

  if (err != 0U)
 80095d6:	7afb      	ldrb	r3, [r7, #11]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d11e      	bne.n	800961a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	88db      	ldrh	r3, [r3, #6]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d016      	beq.n	8009612 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80095e4:	893b      	ldrh	r3, [r7, #8]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d00e      	beq.n	8009608 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	88da      	ldrh	r2, [r3, #6]
 80095ee:	893b      	ldrh	r3, [r7, #8]
 80095f0:	4293      	cmp	r3, r2
 80095f2:	bf28      	it	cs
 80095f4:	4613      	movcs	r3, r2
 80095f6:	b29b      	uxth	r3, r3
 80095f8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80095fa:	893b      	ldrh	r3, [r7, #8]
 80095fc:	461a      	mov	r2, r3
 80095fe:	68f9      	ldr	r1, [r7, #12]
 8009600:	6878      	ldr	r0, [r7, #4]
 8009602:	f000 fa5d 	bl	8009ac0 <USBD_CtlSendData>
 8009606:	e009      	b.n	800961c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009608:	6839      	ldr	r1, [r7, #0]
 800960a:	6878      	ldr	r0, [r7, #4]
 800960c:	f000 f9e7 	bl	80099de <USBD_CtlError>
 8009610:	e004      	b.n	800961c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009612:	6878      	ldr	r0, [r7, #4]
 8009614:	f000 faae 	bl	8009b74 <USBD_CtlSendStatus>
 8009618:	e000      	b.n	800961c <USBD_GetDescriptor+0x320>
    return;
 800961a:	bf00      	nop
  }
}
 800961c:	3710      	adds	r7, #16
 800961e:	46bd      	mov	sp, r7
 8009620:	bd80      	pop	{r7, pc}
 8009622:	bf00      	nop

08009624 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b084      	sub	sp, #16
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
 800962c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	889b      	ldrh	r3, [r3, #4]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d131      	bne.n	800969a <USBD_SetAddress+0x76>
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	88db      	ldrh	r3, [r3, #6]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d12d      	bne.n	800969a <USBD_SetAddress+0x76>
 800963e:	683b      	ldr	r3, [r7, #0]
 8009640:	885b      	ldrh	r3, [r3, #2]
 8009642:	2b7f      	cmp	r3, #127	@ 0x7f
 8009644:	d829      	bhi.n	800969a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	885b      	ldrh	r3, [r3, #2]
 800964a:	b2db      	uxtb	r3, r3
 800964c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009650:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009658:	b2db      	uxtb	r3, r3
 800965a:	2b03      	cmp	r3, #3
 800965c:	d104      	bne.n	8009668 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800965e:	6839      	ldr	r1, [r7, #0]
 8009660:	6878      	ldr	r0, [r7, #4]
 8009662:	f000 f9bc 	bl	80099de <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009666:	e01d      	b.n	80096a4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	7bfa      	ldrb	r2, [r7, #15]
 800966c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009670:	7bfb      	ldrb	r3, [r7, #15]
 8009672:	4619      	mov	r1, r3
 8009674:	6878      	ldr	r0, [r7, #4]
 8009676:	f000 ff2d 	bl	800a4d4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800967a:	6878      	ldr	r0, [r7, #4]
 800967c:	f000 fa7a 	bl	8009b74 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009680:	7bfb      	ldrb	r3, [r7, #15]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d004      	beq.n	8009690 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2202      	movs	r2, #2
 800968a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800968e:	e009      	b.n	80096a4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2201      	movs	r2, #1
 8009694:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009698:	e004      	b.n	80096a4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800969a:	6839      	ldr	r1, [r7, #0]
 800969c:	6878      	ldr	r0, [r7, #4]
 800969e:	f000 f99e 	bl	80099de <USBD_CtlError>
  }
}
 80096a2:	bf00      	nop
 80096a4:	bf00      	nop
 80096a6:	3710      	adds	r7, #16
 80096a8:	46bd      	mov	sp, r7
 80096aa:	bd80      	pop	{r7, pc}

080096ac <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b084      	sub	sp, #16
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
 80096b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80096b6:	2300      	movs	r3, #0
 80096b8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	885b      	ldrh	r3, [r3, #2]
 80096be:	b2da      	uxtb	r2, r3
 80096c0:	4b4e      	ldr	r3, [pc, #312]	@ (80097fc <USBD_SetConfig+0x150>)
 80096c2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80096c4:	4b4d      	ldr	r3, [pc, #308]	@ (80097fc <USBD_SetConfig+0x150>)
 80096c6:	781b      	ldrb	r3, [r3, #0]
 80096c8:	2b01      	cmp	r3, #1
 80096ca:	d905      	bls.n	80096d8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80096cc:	6839      	ldr	r1, [r7, #0]
 80096ce:	6878      	ldr	r0, [r7, #4]
 80096d0:	f000 f985 	bl	80099de <USBD_CtlError>
    return USBD_FAIL;
 80096d4:	2303      	movs	r3, #3
 80096d6:	e08c      	b.n	80097f2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80096de:	b2db      	uxtb	r3, r3
 80096e0:	2b02      	cmp	r3, #2
 80096e2:	d002      	beq.n	80096ea <USBD_SetConfig+0x3e>
 80096e4:	2b03      	cmp	r3, #3
 80096e6:	d029      	beq.n	800973c <USBD_SetConfig+0x90>
 80096e8:	e075      	b.n	80097d6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80096ea:	4b44      	ldr	r3, [pc, #272]	@ (80097fc <USBD_SetConfig+0x150>)
 80096ec:	781b      	ldrb	r3, [r3, #0]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d020      	beq.n	8009734 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80096f2:	4b42      	ldr	r3, [pc, #264]	@ (80097fc <USBD_SetConfig+0x150>)
 80096f4:	781b      	ldrb	r3, [r3, #0]
 80096f6:	461a      	mov	r2, r3
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80096fc:	4b3f      	ldr	r3, [pc, #252]	@ (80097fc <USBD_SetConfig+0x150>)
 80096fe:	781b      	ldrb	r3, [r3, #0]
 8009700:	4619      	mov	r1, r3
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	f7fe ffb9 	bl	800867a <USBD_SetClassConfig>
 8009708:	4603      	mov	r3, r0
 800970a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800970c:	7bfb      	ldrb	r3, [r7, #15]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d008      	beq.n	8009724 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009712:	6839      	ldr	r1, [r7, #0]
 8009714:	6878      	ldr	r0, [r7, #4]
 8009716:	f000 f962 	bl	80099de <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	2202      	movs	r2, #2
 800971e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009722:	e065      	b.n	80097f0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009724:	6878      	ldr	r0, [r7, #4]
 8009726:	f000 fa25 	bl	8009b74 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	2203      	movs	r2, #3
 800972e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009732:	e05d      	b.n	80097f0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009734:	6878      	ldr	r0, [r7, #4]
 8009736:	f000 fa1d 	bl	8009b74 <USBD_CtlSendStatus>
      break;
 800973a:	e059      	b.n	80097f0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800973c:	4b2f      	ldr	r3, [pc, #188]	@ (80097fc <USBD_SetConfig+0x150>)
 800973e:	781b      	ldrb	r3, [r3, #0]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d112      	bne.n	800976a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2202      	movs	r2, #2
 8009748:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800974c:	4b2b      	ldr	r3, [pc, #172]	@ (80097fc <USBD_SetConfig+0x150>)
 800974e:	781b      	ldrb	r3, [r3, #0]
 8009750:	461a      	mov	r2, r3
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009756:	4b29      	ldr	r3, [pc, #164]	@ (80097fc <USBD_SetConfig+0x150>)
 8009758:	781b      	ldrb	r3, [r3, #0]
 800975a:	4619      	mov	r1, r3
 800975c:	6878      	ldr	r0, [r7, #4]
 800975e:	f7fe ffa8 	bl	80086b2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	f000 fa06 	bl	8009b74 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009768:	e042      	b.n	80097f0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800976a:	4b24      	ldr	r3, [pc, #144]	@ (80097fc <USBD_SetConfig+0x150>)
 800976c:	781b      	ldrb	r3, [r3, #0]
 800976e:	461a      	mov	r2, r3
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	685b      	ldr	r3, [r3, #4]
 8009774:	429a      	cmp	r2, r3
 8009776:	d02a      	beq.n	80097ce <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	685b      	ldr	r3, [r3, #4]
 800977c:	b2db      	uxtb	r3, r3
 800977e:	4619      	mov	r1, r3
 8009780:	6878      	ldr	r0, [r7, #4]
 8009782:	f7fe ff96 	bl	80086b2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009786:	4b1d      	ldr	r3, [pc, #116]	@ (80097fc <USBD_SetConfig+0x150>)
 8009788:	781b      	ldrb	r3, [r3, #0]
 800978a:	461a      	mov	r2, r3
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009790:	4b1a      	ldr	r3, [pc, #104]	@ (80097fc <USBD_SetConfig+0x150>)
 8009792:	781b      	ldrb	r3, [r3, #0]
 8009794:	4619      	mov	r1, r3
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f7fe ff6f 	bl	800867a <USBD_SetClassConfig>
 800979c:	4603      	mov	r3, r0
 800979e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80097a0:	7bfb      	ldrb	r3, [r7, #15]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d00f      	beq.n	80097c6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80097a6:	6839      	ldr	r1, [r7, #0]
 80097a8:	6878      	ldr	r0, [r7, #4]
 80097aa:	f000 f918 	bl	80099de <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	685b      	ldr	r3, [r3, #4]
 80097b2:	b2db      	uxtb	r3, r3
 80097b4:	4619      	mov	r1, r3
 80097b6:	6878      	ldr	r0, [r7, #4]
 80097b8:	f7fe ff7b 	bl	80086b2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2202      	movs	r2, #2
 80097c0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80097c4:	e014      	b.n	80097f0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80097c6:	6878      	ldr	r0, [r7, #4]
 80097c8:	f000 f9d4 	bl	8009b74 <USBD_CtlSendStatus>
      break;
 80097cc:	e010      	b.n	80097f0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80097ce:	6878      	ldr	r0, [r7, #4]
 80097d0:	f000 f9d0 	bl	8009b74 <USBD_CtlSendStatus>
      break;
 80097d4:	e00c      	b.n	80097f0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80097d6:	6839      	ldr	r1, [r7, #0]
 80097d8:	6878      	ldr	r0, [r7, #4]
 80097da:	f000 f900 	bl	80099de <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80097de:	4b07      	ldr	r3, [pc, #28]	@ (80097fc <USBD_SetConfig+0x150>)
 80097e0:	781b      	ldrb	r3, [r3, #0]
 80097e2:	4619      	mov	r1, r3
 80097e4:	6878      	ldr	r0, [r7, #4]
 80097e6:	f7fe ff64 	bl	80086b2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80097ea:	2303      	movs	r3, #3
 80097ec:	73fb      	strb	r3, [r7, #15]
      break;
 80097ee:	bf00      	nop
  }

  return ret;
 80097f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80097f2:	4618      	mov	r0, r3
 80097f4:	3710      	adds	r7, #16
 80097f6:	46bd      	mov	sp, r7
 80097f8:	bd80      	pop	{r7, pc}
 80097fa:	bf00      	nop
 80097fc:	2000055c 	.word	0x2000055c

08009800 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b082      	sub	sp, #8
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
 8009808:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	88db      	ldrh	r3, [r3, #6]
 800980e:	2b01      	cmp	r3, #1
 8009810:	d004      	beq.n	800981c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009812:	6839      	ldr	r1, [r7, #0]
 8009814:	6878      	ldr	r0, [r7, #4]
 8009816:	f000 f8e2 	bl	80099de <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800981a:	e023      	b.n	8009864 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009822:	b2db      	uxtb	r3, r3
 8009824:	2b02      	cmp	r3, #2
 8009826:	dc02      	bgt.n	800982e <USBD_GetConfig+0x2e>
 8009828:	2b00      	cmp	r3, #0
 800982a:	dc03      	bgt.n	8009834 <USBD_GetConfig+0x34>
 800982c:	e015      	b.n	800985a <USBD_GetConfig+0x5a>
 800982e:	2b03      	cmp	r3, #3
 8009830:	d00b      	beq.n	800984a <USBD_GetConfig+0x4a>
 8009832:	e012      	b.n	800985a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2200      	movs	r2, #0
 8009838:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	3308      	adds	r3, #8
 800983e:	2201      	movs	r2, #1
 8009840:	4619      	mov	r1, r3
 8009842:	6878      	ldr	r0, [r7, #4]
 8009844:	f000 f93c 	bl	8009ac0 <USBD_CtlSendData>
        break;
 8009848:	e00c      	b.n	8009864 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	3304      	adds	r3, #4
 800984e:	2201      	movs	r2, #1
 8009850:	4619      	mov	r1, r3
 8009852:	6878      	ldr	r0, [r7, #4]
 8009854:	f000 f934 	bl	8009ac0 <USBD_CtlSendData>
        break;
 8009858:	e004      	b.n	8009864 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800985a:	6839      	ldr	r1, [r7, #0]
 800985c:	6878      	ldr	r0, [r7, #4]
 800985e:	f000 f8be 	bl	80099de <USBD_CtlError>
        break;
 8009862:	bf00      	nop
}
 8009864:	bf00      	nop
 8009866:	3708      	adds	r7, #8
 8009868:	46bd      	mov	sp, r7
 800986a:	bd80      	pop	{r7, pc}

0800986c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b082      	sub	sp, #8
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
 8009874:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800987c:	b2db      	uxtb	r3, r3
 800987e:	3b01      	subs	r3, #1
 8009880:	2b02      	cmp	r3, #2
 8009882:	d81e      	bhi.n	80098c2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	88db      	ldrh	r3, [r3, #6]
 8009888:	2b02      	cmp	r3, #2
 800988a:	d004      	beq.n	8009896 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800988c:	6839      	ldr	r1, [r7, #0]
 800988e:	6878      	ldr	r0, [r7, #4]
 8009890:	f000 f8a5 	bl	80099de <USBD_CtlError>
        break;
 8009894:	e01a      	b.n	80098cc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	2201      	movs	r2, #1
 800989a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d005      	beq.n	80098b2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	68db      	ldr	r3, [r3, #12]
 80098aa:	f043 0202 	orr.w	r2, r3, #2
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	330c      	adds	r3, #12
 80098b6:	2202      	movs	r2, #2
 80098b8:	4619      	mov	r1, r3
 80098ba:	6878      	ldr	r0, [r7, #4]
 80098bc:	f000 f900 	bl	8009ac0 <USBD_CtlSendData>
      break;
 80098c0:	e004      	b.n	80098cc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80098c2:	6839      	ldr	r1, [r7, #0]
 80098c4:	6878      	ldr	r0, [r7, #4]
 80098c6:	f000 f88a 	bl	80099de <USBD_CtlError>
      break;
 80098ca:	bf00      	nop
  }
}
 80098cc:	bf00      	nop
 80098ce:	3708      	adds	r7, #8
 80098d0:	46bd      	mov	sp, r7
 80098d2:	bd80      	pop	{r7, pc}

080098d4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b082      	sub	sp, #8
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
 80098dc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	885b      	ldrh	r3, [r3, #2]
 80098e2:	2b01      	cmp	r3, #1
 80098e4:	d107      	bne.n	80098f6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	2201      	movs	r2, #1
 80098ea:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80098ee:	6878      	ldr	r0, [r7, #4]
 80098f0:	f000 f940 	bl	8009b74 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80098f4:	e013      	b.n	800991e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	885b      	ldrh	r3, [r3, #2]
 80098fa:	2b02      	cmp	r3, #2
 80098fc:	d10b      	bne.n	8009916 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	889b      	ldrh	r3, [r3, #4]
 8009902:	0a1b      	lsrs	r3, r3, #8
 8009904:	b29b      	uxth	r3, r3
 8009906:	b2da      	uxtb	r2, r3
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800990e:	6878      	ldr	r0, [r7, #4]
 8009910:	f000 f930 	bl	8009b74 <USBD_CtlSendStatus>
}
 8009914:	e003      	b.n	800991e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009916:	6839      	ldr	r1, [r7, #0]
 8009918:	6878      	ldr	r0, [r7, #4]
 800991a:	f000 f860 	bl	80099de <USBD_CtlError>
}
 800991e:	bf00      	nop
 8009920:	3708      	adds	r7, #8
 8009922:	46bd      	mov	sp, r7
 8009924:	bd80      	pop	{r7, pc}

08009926 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009926:	b580      	push	{r7, lr}
 8009928:	b082      	sub	sp, #8
 800992a:	af00      	add	r7, sp, #0
 800992c:	6078      	str	r0, [r7, #4]
 800992e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009936:	b2db      	uxtb	r3, r3
 8009938:	3b01      	subs	r3, #1
 800993a:	2b02      	cmp	r3, #2
 800993c:	d80b      	bhi.n	8009956 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	885b      	ldrh	r3, [r3, #2]
 8009942:	2b01      	cmp	r3, #1
 8009944:	d10c      	bne.n	8009960 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	2200      	movs	r2, #0
 800994a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800994e:	6878      	ldr	r0, [r7, #4]
 8009950:	f000 f910 	bl	8009b74 <USBD_CtlSendStatus>
      }
      break;
 8009954:	e004      	b.n	8009960 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009956:	6839      	ldr	r1, [r7, #0]
 8009958:	6878      	ldr	r0, [r7, #4]
 800995a:	f000 f840 	bl	80099de <USBD_CtlError>
      break;
 800995e:	e000      	b.n	8009962 <USBD_ClrFeature+0x3c>
      break;
 8009960:	bf00      	nop
  }
}
 8009962:	bf00      	nop
 8009964:	3708      	adds	r7, #8
 8009966:	46bd      	mov	sp, r7
 8009968:	bd80      	pop	{r7, pc}

0800996a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800996a:	b580      	push	{r7, lr}
 800996c:	b084      	sub	sp, #16
 800996e:	af00      	add	r7, sp, #0
 8009970:	6078      	str	r0, [r7, #4]
 8009972:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	781a      	ldrb	r2, [r3, #0]
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	3301      	adds	r3, #1
 8009984:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	781a      	ldrb	r2, [r3, #0]
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	3301      	adds	r3, #1
 8009992:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009994:	68f8      	ldr	r0, [r7, #12]
 8009996:	f7ff fa16 	bl	8008dc6 <SWAPBYTE>
 800999a:	4603      	mov	r3, r0
 800999c:	461a      	mov	r2, r3
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	3301      	adds	r3, #1
 80099a6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	3301      	adds	r3, #1
 80099ac:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80099ae:	68f8      	ldr	r0, [r7, #12]
 80099b0:	f7ff fa09 	bl	8008dc6 <SWAPBYTE>
 80099b4:	4603      	mov	r3, r0
 80099b6:	461a      	mov	r2, r3
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	3301      	adds	r3, #1
 80099c0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	3301      	adds	r3, #1
 80099c6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80099c8:	68f8      	ldr	r0, [r7, #12]
 80099ca:	f7ff f9fc 	bl	8008dc6 <SWAPBYTE>
 80099ce:	4603      	mov	r3, r0
 80099d0:	461a      	mov	r2, r3
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	80da      	strh	r2, [r3, #6]
}
 80099d6:	bf00      	nop
 80099d8:	3710      	adds	r7, #16
 80099da:	46bd      	mov	sp, r7
 80099dc:	bd80      	pop	{r7, pc}

080099de <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099de:	b580      	push	{r7, lr}
 80099e0:	b082      	sub	sp, #8
 80099e2:	af00      	add	r7, sp, #0
 80099e4:	6078      	str	r0, [r7, #4]
 80099e6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80099e8:	2180      	movs	r1, #128	@ 0x80
 80099ea:	6878      	ldr	r0, [r7, #4]
 80099ec:	f000 fd08 	bl	800a400 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80099f0:	2100      	movs	r1, #0
 80099f2:	6878      	ldr	r0, [r7, #4]
 80099f4:	f000 fd04 	bl	800a400 <USBD_LL_StallEP>
}
 80099f8:	bf00      	nop
 80099fa:	3708      	adds	r7, #8
 80099fc:	46bd      	mov	sp, r7
 80099fe:	bd80      	pop	{r7, pc}

08009a00 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b086      	sub	sp, #24
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	60f8      	str	r0, [r7, #12]
 8009a08:	60b9      	str	r1, [r7, #8]
 8009a0a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d036      	beq.n	8009a84 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009a1a:	6938      	ldr	r0, [r7, #16]
 8009a1c:	f000 f836 	bl	8009a8c <USBD_GetLen>
 8009a20:	4603      	mov	r3, r0
 8009a22:	3301      	adds	r3, #1
 8009a24:	b29b      	uxth	r3, r3
 8009a26:	005b      	lsls	r3, r3, #1
 8009a28:	b29a      	uxth	r2, r3
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009a2e:	7dfb      	ldrb	r3, [r7, #23]
 8009a30:	68ba      	ldr	r2, [r7, #8]
 8009a32:	4413      	add	r3, r2
 8009a34:	687a      	ldr	r2, [r7, #4]
 8009a36:	7812      	ldrb	r2, [r2, #0]
 8009a38:	701a      	strb	r2, [r3, #0]
  idx++;
 8009a3a:	7dfb      	ldrb	r3, [r7, #23]
 8009a3c:	3301      	adds	r3, #1
 8009a3e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009a40:	7dfb      	ldrb	r3, [r7, #23]
 8009a42:	68ba      	ldr	r2, [r7, #8]
 8009a44:	4413      	add	r3, r2
 8009a46:	2203      	movs	r2, #3
 8009a48:	701a      	strb	r2, [r3, #0]
  idx++;
 8009a4a:	7dfb      	ldrb	r3, [r7, #23]
 8009a4c:	3301      	adds	r3, #1
 8009a4e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009a50:	e013      	b.n	8009a7a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009a52:	7dfb      	ldrb	r3, [r7, #23]
 8009a54:	68ba      	ldr	r2, [r7, #8]
 8009a56:	4413      	add	r3, r2
 8009a58:	693a      	ldr	r2, [r7, #16]
 8009a5a:	7812      	ldrb	r2, [r2, #0]
 8009a5c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009a5e:	693b      	ldr	r3, [r7, #16]
 8009a60:	3301      	adds	r3, #1
 8009a62:	613b      	str	r3, [r7, #16]
    idx++;
 8009a64:	7dfb      	ldrb	r3, [r7, #23]
 8009a66:	3301      	adds	r3, #1
 8009a68:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009a6a:	7dfb      	ldrb	r3, [r7, #23]
 8009a6c:	68ba      	ldr	r2, [r7, #8]
 8009a6e:	4413      	add	r3, r2
 8009a70:	2200      	movs	r2, #0
 8009a72:	701a      	strb	r2, [r3, #0]
    idx++;
 8009a74:	7dfb      	ldrb	r3, [r7, #23]
 8009a76:	3301      	adds	r3, #1
 8009a78:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009a7a:	693b      	ldr	r3, [r7, #16]
 8009a7c:	781b      	ldrb	r3, [r3, #0]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d1e7      	bne.n	8009a52 <USBD_GetString+0x52>
 8009a82:	e000      	b.n	8009a86 <USBD_GetString+0x86>
    return;
 8009a84:	bf00      	nop
  }
}
 8009a86:	3718      	adds	r7, #24
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	bd80      	pop	{r7, pc}

08009a8c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009a8c:	b480      	push	{r7}
 8009a8e:	b085      	sub	sp, #20
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009a94:	2300      	movs	r3, #0
 8009a96:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009a9c:	e005      	b.n	8009aaa <USBD_GetLen+0x1e>
  {
    len++;
 8009a9e:	7bfb      	ldrb	r3, [r7, #15]
 8009aa0:	3301      	adds	r3, #1
 8009aa2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009aa4:	68bb      	ldr	r3, [r7, #8]
 8009aa6:	3301      	adds	r3, #1
 8009aa8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009aaa:	68bb      	ldr	r3, [r7, #8]
 8009aac:	781b      	ldrb	r3, [r3, #0]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d1f5      	bne.n	8009a9e <USBD_GetLen+0x12>
  }

  return len;
 8009ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	3714      	adds	r7, #20
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009abe:	4770      	bx	lr

08009ac0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b084      	sub	sp, #16
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	60f8      	str	r0, [r7, #12]
 8009ac8:	60b9      	str	r1, [r7, #8]
 8009aca:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	2202      	movs	r2, #2
 8009ad0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	687a      	ldr	r2, [r7, #4]
 8009ad8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	687a      	ldr	r2, [r7, #4]
 8009ade:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	68ba      	ldr	r2, [r7, #8]
 8009ae4:	2100      	movs	r1, #0
 8009ae6:	68f8      	ldr	r0, [r7, #12]
 8009ae8:	f000 fd13 	bl	800a512 <USBD_LL_Transmit>

  return USBD_OK;
 8009aec:	2300      	movs	r3, #0
}
 8009aee:	4618      	mov	r0, r3
 8009af0:	3710      	adds	r7, #16
 8009af2:	46bd      	mov	sp, r7
 8009af4:	bd80      	pop	{r7, pc}

08009af6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009af6:	b580      	push	{r7, lr}
 8009af8:	b084      	sub	sp, #16
 8009afa:	af00      	add	r7, sp, #0
 8009afc:	60f8      	str	r0, [r7, #12]
 8009afe:	60b9      	str	r1, [r7, #8]
 8009b00:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	68ba      	ldr	r2, [r7, #8]
 8009b06:	2100      	movs	r1, #0
 8009b08:	68f8      	ldr	r0, [r7, #12]
 8009b0a:	f000 fd02 	bl	800a512 <USBD_LL_Transmit>

  return USBD_OK;
 8009b0e:	2300      	movs	r3, #0
}
 8009b10:	4618      	mov	r0, r3
 8009b12:	3710      	adds	r7, #16
 8009b14:	46bd      	mov	sp, r7
 8009b16:	bd80      	pop	{r7, pc}

08009b18 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b084      	sub	sp, #16
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	60f8      	str	r0, [r7, #12]
 8009b20:	60b9      	str	r1, [r7, #8]
 8009b22:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	2203      	movs	r2, #3
 8009b28:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	687a      	ldr	r2, [r7, #4]
 8009b30:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	687a      	ldr	r2, [r7, #4]
 8009b38:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	68ba      	ldr	r2, [r7, #8]
 8009b40:	2100      	movs	r1, #0
 8009b42:	68f8      	ldr	r0, [r7, #12]
 8009b44:	f000 fd06 	bl	800a554 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009b48:	2300      	movs	r3, #0
}
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	3710      	adds	r7, #16
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	bd80      	pop	{r7, pc}

08009b52 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009b52:	b580      	push	{r7, lr}
 8009b54:	b084      	sub	sp, #16
 8009b56:	af00      	add	r7, sp, #0
 8009b58:	60f8      	str	r0, [r7, #12]
 8009b5a:	60b9      	str	r1, [r7, #8]
 8009b5c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	68ba      	ldr	r2, [r7, #8]
 8009b62:	2100      	movs	r1, #0
 8009b64:	68f8      	ldr	r0, [r7, #12]
 8009b66:	f000 fcf5 	bl	800a554 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009b6a:	2300      	movs	r3, #0
}
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	3710      	adds	r7, #16
 8009b70:	46bd      	mov	sp, r7
 8009b72:	bd80      	pop	{r7, pc}

08009b74 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b082      	sub	sp, #8
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2204      	movs	r2, #4
 8009b80:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009b84:	2300      	movs	r3, #0
 8009b86:	2200      	movs	r2, #0
 8009b88:	2100      	movs	r1, #0
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	f000 fcc1 	bl	800a512 <USBD_LL_Transmit>

  return USBD_OK;
 8009b90:	2300      	movs	r3, #0
}
 8009b92:	4618      	mov	r0, r3
 8009b94:	3708      	adds	r7, #8
 8009b96:	46bd      	mov	sp, r7
 8009b98:	bd80      	pop	{r7, pc}

08009b9a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009b9a:	b580      	push	{r7, lr}
 8009b9c:	b082      	sub	sp, #8
 8009b9e:	af00      	add	r7, sp, #0
 8009ba0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	2205      	movs	r2, #5
 8009ba6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009baa:	2300      	movs	r3, #0
 8009bac:	2200      	movs	r2, #0
 8009bae:	2100      	movs	r1, #0
 8009bb0:	6878      	ldr	r0, [r7, #4]
 8009bb2:	f000 fccf 	bl	800a554 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009bb6:	2300      	movs	r3, #0
}
 8009bb8:	4618      	mov	r0, r3
 8009bba:	3708      	adds	r7, #8
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	bd80      	pop	{r7, pc}

08009bc0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	4912      	ldr	r1, [pc, #72]	@ (8009c10 <MX_USB_DEVICE_Init+0x50>)
 8009bc8:	4812      	ldr	r0, [pc, #72]	@ (8009c14 <MX_USB_DEVICE_Init+0x54>)
 8009bca:	f7fe fcd9 	bl	8008580 <USBD_Init>
 8009bce:	4603      	mov	r3, r0
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d001      	beq.n	8009bd8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009bd4:	f7f7 fbec 	bl	80013b0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009bd8:	490f      	ldr	r1, [pc, #60]	@ (8009c18 <MX_USB_DEVICE_Init+0x58>)
 8009bda:	480e      	ldr	r0, [pc, #56]	@ (8009c14 <MX_USB_DEVICE_Init+0x54>)
 8009bdc:	f7fe fd00 	bl	80085e0 <USBD_RegisterClass>
 8009be0:	4603      	mov	r3, r0
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d001      	beq.n	8009bea <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009be6:	f7f7 fbe3 	bl	80013b0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009bea:	490c      	ldr	r1, [pc, #48]	@ (8009c1c <MX_USB_DEVICE_Init+0x5c>)
 8009bec:	4809      	ldr	r0, [pc, #36]	@ (8009c14 <MX_USB_DEVICE_Init+0x54>)
 8009bee:	f7fe fbf7 	bl	80083e0 <USBD_CDC_RegisterInterface>
 8009bf2:	4603      	mov	r3, r0
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d001      	beq.n	8009bfc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009bf8:	f7f7 fbda 	bl	80013b0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009bfc:	4805      	ldr	r0, [pc, #20]	@ (8009c14 <MX_USB_DEVICE_Init+0x54>)
 8009bfe:	f7fe fd25 	bl	800864c <USBD_Start>
 8009c02:	4603      	mov	r3, r0
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d001      	beq.n	8009c0c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009c08:	f7f7 fbd2 	bl	80013b0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009c0c:	bf00      	nop
 8009c0e:	bd80      	pop	{r7, pc}
 8009c10:	200000ac 	.word	0x200000ac
 8009c14:	20000560 	.word	0x20000560
 8009c18:	20000018 	.word	0x20000018
 8009c1c:	20000098 	.word	0x20000098

08009c20 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009c24:	2200      	movs	r2, #0
 8009c26:	4905      	ldr	r1, [pc, #20]	@ (8009c3c <CDC_Init_FS+0x1c>)
 8009c28:	4805      	ldr	r0, [pc, #20]	@ (8009c40 <CDC_Init_FS+0x20>)
 8009c2a:	f7fe fbf3 	bl	8008414 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009c2e:	4905      	ldr	r1, [pc, #20]	@ (8009c44 <CDC_Init_FS+0x24>)
 8009c30:	4803      	ldr	r0, [pc, #12]	@ (8009c40 <CDC_Init_FS+0x20>)
 8009c32:	f7fe fc11 	bl	8008458 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009c36:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009c38:	4618      	mov	r0, r3
 8009c3a:	bd80      	pop	{r7, pc}
 8009c3c:	2000103c 	.word	0x2000103c
 8009c40:	20000560 	.word	0x20000560
 8009c44:	2000083c 	.word	0x2000083c

08009c48 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009c48:	b480      	push	{r7}
 8009c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009c4c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009c4e:	4618      	mov	r0, r3
 8009c50:	46bd      	mov	sp, r7
 8009c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c56:	4770      	bx	lr

08009c58 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009c58:	b480      	push	{r7}
 8009c5a:	b083      	sub	sp, #12
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	4603      	mov	r3, r0
 8009c60:	6039      	str	r1, [r7, #0]
 8009c62:	71fb      	strb	r3, [r7, #7]
 8009c64:	4613      	mov	r3, r2
 8009c66:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009c68:	79fb      	ldrb	r3, [r7, #7]
 8009c6a:	2b23      	cmp	r3, #35	@ 0x23
 8009c6c:	d84a      	bhi.n	8009d04 <CDC_Control_FS+0xac>
 8009c6e:	a201      	add	r2, pc, #4	@ (adr r2, 8009c74 <CDC_Control_FS+0x1c>)
 8009c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c74:	08009d05 	.word	0x08009d05
 8009c78:	08009d05 	.word	0x08009d05
 8009c7c:	08009d05 	.word	0x08009d05
 8009c80:	08009d05 	.word	0x08009d05
 8009c84:	08009d05 	.word	0x08009d05
 8009c88:	08009d05 	.word	0x08009d05
 8009c8c:	08009d05 	.word	0x08009d05
 8009c90:	08009d05 	.word	0x08009d05
 8009c94:	08009d05 	.word	0x08009d05
 8009c98:	08009d05 	.word	0x08009d05
 8009c9c:	08009d05 	.word	0x08009d05
 8009ca0:	08009d05 	.word	0x08009d05
 8009ca4:	08009d05 	.word	0x08009d05
 8009ca8:	08009d05 	.word	0x08009d05
 8009cac:	08009d05 	.word	0x08009d05
 8009cb0:	08009d05 	.word	0x08009d05
 8009cb4:	08009d05 	.word	0x08009d05
 8009cb8:	08009d05 	.word	0x08009d05
 8009cbc:	08009d05 	.word	0x08009d05
 8009cc0:	08009d05 	.word	0x08009d05
 8009cc4:	08009d05 	.word	0x08009d05
 8009cc8:	08009d05 	.word	0x08009d05
 8009ccc:	08009d05 	.word	0x08009d05
 8009cd0:	08009d05 	.word	0x08009d05
 8009cd4:	08009d05 	.word	0x08009d05
 8009cd8:	08009d05 	.word	0x08009d05
 8009cdc:	08009d05 	.word	0x08009d05
 8009ce0:	08009d05 	.word	0x08009d05
 8009ce4:	08009d05 	.word	0x08009d05
 8009ce8:	08009d05 	.word	0x08009d05
 8009cec:	08009d05 	.word	0x08009d05
 8009cf0:	08009d05 	.word	0x08009d05
 8009cf4:	08009d05 	.word	0x08009d05
 8009cf8:	08009d05 	.word	0x08009d05
 8009cfc:	08009d05 	.word	0x08009d05
 8009d00:	08009d05 	.word	0x08009d05
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009d04:	bf00      	nop
  }

  return (USBD_OK);
 8009d06:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009d08:	4618      	mov	r0, r3
 8009d0a:	370c      	adds	r7, #12
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d12:	4770      	bx	lr

08009d14 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b082      	sub	sp, #8
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
 8009d1c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009d1e:	6879      	ldr	r1, [r7, #4]
 8009d20:	4805      	ldr	r0, [pc, #20]	@ (8009d38 <CDC_Receive_FS+0x24>)
 8009d22:	f7fe fb99 	bl	8008458 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009d26:	4804      	ldr	r0, [pc, #16]	@ (8009d38 <CDC_Receive_FS+0x24>)
 8009d28:	f7fe fbf4 	bl	8008514 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009d2c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009d2e:	4618      	mov	r0, r3
 8009d30:	3708      	adds	r7, #8
 8009d32:	46bd      	mov	sp, r7
 8009d34:	bd80      	pop	{r7, pc}
 8009d36:	bf00      	nop
 8009d38:	20000560 	.word	0x20000560

08009d3c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b084      	sub	sp, #16
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
 8009d44:	460b      	mov	r3, r1
 8009d46:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009d48:	2300      	movs	r3, #0
 8009d4a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009d4c:	4b0d      	ldr	r3, [pc, #52]	@ (8009d84 <CDC_Transmit_FS+0x48>)
 8009d4e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009d52:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009d54:	68bb      	ldr	r3, [r7, #8]
 8009d56:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d001      	beq.n	8009d62 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009d5e:	2301      	movs	r3, #1
 8009d60:	e00b      	b.n	8009d7a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009d62:	887b      	ldrh	r3, [r7, #2]
 8009d64:	461a      	mov	r2, r3
 8009d66:	6879      	ldr	r1, [r7, #4]
 8009d68:	4806      	ldr	r0, [pc, #24]	@ (8009d84 <CDC_Transmit_FS+0x48>)
 8009d6a:	f7fe fb53 	bl	8008414 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009d6e:	4805      	ldr	r0, [pc, #20]	@ (8009d84 <CDC_Transmit_FS+0x48>)
 8009d70:	f7fe fb90 	bl	8008494 <USBD_CDC_TransmitPacket>
 8009d74:	4603      	mov	r3, r0
 8009d76:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	3710      	adds	r7, #16
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	bd80      	pop	{r7, pc}
 8009d82:	bf00      	nop
 8009d84:	20000560 	.word	0x20000560

08009d88 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009d88:	b480      	push	{r7}
 8009d8a:	b087      	sub	sp, #28
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	60f8      	str	r0, [r7, #12]
 8009d90:	60b9      	str	r1, [r7, #8]
 8009d92:	4613      	mov	r3, r2
 8009d94:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009d96:	2300      	movs	r3, #0
 8009d98:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009d9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009d9e:	4618      	mov	r0, r3
 8009da0:	371c      	adds	r7, #28
 8009da2:	46bd      	mov	sp, r7
 8009da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da8:	4770      	bx	lr
	...

08009dac <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009dac:	b480      	push	{r7}
 8009dae:	b083      	sub	sp, #12
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	4603      	mov	r3, r0
 8009db4:	6039      	str	r1, [r7, #0]
 8009db6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	2212      	movs	r2, #18
 8009dbc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009dbe:	4b03      	ldr	r3, [pc, #12]	@ (8009dcc <USBD_FS_DeviceDescriptor+0x20>)
}
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	370c      	adds	r7, #12
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dca:	4770      	bx	lr
 8009dcc:	200000cc 	.word	0x200000cc

08009dd0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009dd0:	b480      	push	{r7}
 8009dd2:	b083      	sub	sp, #12
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	6039      	str	r1, [r7, #0]
 8009dda:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	2204      	movs	r2, #4
 8009de0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009de2:	4b03      	ldr	r3, [pc, #12]	@ (8009df0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009de4:	4618      	mov	r0, r3
 8009de6:	370c      	adds	r7, #12
 8009de8:	46bd      	mov	sp, r7
 8009dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dee:	4770      	bx	lr
 8009df0:	200000ec 	.word	0x200000ec

08009df4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b082      	sub	sp, #8
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	4603      	mov	r3, r0
 8009dfc:	6039      	str	r1, [r7, #0]
 8009dfe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009e00:	79fb      	ldrb	r3, [r7, #7]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d105      	bne.n	8009e12 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009e06:	683a      	ldr	r2, [r7, #0]
 8009e08:	4907      	ldr	r1, [pc, #28]	@ (8009e28 <USBD_FS_ProductStrDescriptor+0x34>)
 8009e0a:	4808      	ldr	r0, [pc, #32]	@ (8009e2c <USBD_FS_ProductStrDescriptor+0x38>)
 8009e0c:	f7ff fdf8 	bl	8009a00 <USBD_GetString>
 8009e10:	e004      	b.n	8009e1c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009e12:	683a      	ldr	r2, [r7, #0]
 8009e14:	4904      	ldr	r1, [pc, #16]	@ (8009e28 <USBD_FS_ProductStrDescriptor+0x34>)
 8009e16:	4805      	ldr	r0, [pc, #20]	@ (8009e2c <USBD_FS_ProductStrDescriptor+0x38>)
 8009e18:	f7ff fdf2 	bl	8009a00 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009e1c:	4b02      	ldr	r3, [pc, #8]	@ (8009e28 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009e1e:	4618      	mov	r0, r3
 8009e20:	3708      	adds	r7, #8
 8009e22:	46bd      	mov	sp, r7
 8009e24:	bd80      	pop	{r7, pc}
 8009e26:	bf00      	nop
 8009e28:	2000183c 	.word	0x2000183c
 8009e2c:	0800d3c0 	.word	0x0800d3c0

08009e30 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b082      	sub	sp, #8
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	4603      	mov	r3, r0
 8009e38:	6039      	str	r1, [r7, #0]
 8009e3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009e3c:	683a      	ldr	r2, [r7, #0]
 8009e3e:	4904      	ldr	r1, [pc, #16]	@ (8009e50 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009e40:	4804      	ldr	r0, [pc, #16]	@ (8009e54 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009e42:	f7ff fddd 	bl	8009a00 <USBD_GetString>
  return USBD_StrDesc;
 8009e46:	4b02      	ldr	r3, [pc, #8]	@ (8009e50 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009e48:	4618      	mov	r0, r3
 8009e4a:	3708      	adds	r7, #8
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	bd80      	pop	{r7, pc}
 8009e50:	2000183c 	.word	0x2000183c
 8009e54:	0800d3d8 	.word	0x0800d3d8

08009e58 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b082      	sub	sp, #8
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	4603      	mov	r3, r0
 8009e60:	6039      	str	r1, [r7, #0]
 8009e62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	221a      	movs	r2, #26
 8009e68:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009e6a:	f000 f855 	bl	8009f18 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009e6e:	4b02      	ldr	r3, [pc, #8]	@ (8009e78 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009e70:	4618      	mov	r0, r3
 8009e72:	3708      	adds	r7, #8
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bd80      	pop	{r7, pc}
 8009e78:	200000f0 	.word	0x200000f0

08009e7c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b082      	sub	sp, #8
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	4603      	mov	r3, r0
 8009e84:	6039      	str	r1, [r7, #0]
 8009e86:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009e88:	79fb      	ldrb	r3, [r7, #7]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d105      	bne.n	8009e9a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009e8e:	683a      	ldr	r2, [r7, #0]
 8009e90:	4907      	ldr	r1, [pc, #28]	@ (8009eb0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009e92:	4808      	ldr	r0, [pc, #32]	@ (8009eb4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009e94:	f7ff fdb4 	bl	8009a00 <USBD_GetString>
 8009e98:	e004      	b.n	8009ea4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009e9a:	683a      	ldr	r2, [r7, #0]
 8009e9c:	4904      	ldr	r1, [pc, #16]	@ (8009eb0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009e9e:	4805      	ldr	r0, [pc, #20]	@ (8009eb4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009ea0:	f7ff fdae 	bl	8009a00 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009ea4:	4b02      	ldr	r3, [pc, #8]	@ (8009eb0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	3708      	adds	r7, #8
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	bd80      	pop	{r7, pc}
 8009eae:	bf00      	nop
 8009eb0:	2000183c 	.word	0x2000183c
 8009eb4:	0800d3ec 	.word	0x0800d3ec

08009eb8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b082      	sub	sp, #8
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	4603      	mov	r3, r0
 8009ec0:	6039      	str	r1, [r7, #0]
 8009ec2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009ec4:	79fb      	ldrb	r3, [r7, #7]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d105      	bne.n	8009ed6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009eca:	683a      	ldr	r2, [r7, #0]
 8009ecc:	4907      	ldr	r1, [pc, #28]	@ (8009eec <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009ece:	4808      	ldr	r0, [pc, #32]	@ (8009ef0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009ed0:	f7ff fd96 	bl	8009a00 <USBD_GetString>
 8009ed4:	e004      	b.n	8009ee0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009ed6:	683a      	ldr	r2, [r7, #0]
 8009ed8:	4904      	ldr	r1, [pc, #16]	@ (8009eec <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009eda:	4805      	ldr	r0, [pc, #20]	@ (8009ef0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009edc:	f7ff fd90 	bl	8009a00 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009ee0:	4b02      	ldr	r3, [pc, #8]	@ (8009eec <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	3708      	adds	r7, #8
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	bd80      	pop	{r7, pc}
 8009eea:	bf00      	nop
 8009eec:	2000183c 	.word	0x2000183c
 8009ef0:	0800d3f8 	.word	0x0800d3f8

08009ef4 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ef4:	b480      	push	{r7}
 8009ef6:	b083      	sub	sp, #12
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	4603      	mov	r3, r0
 8009efc:	6039      	str	r1, [r7, #0]
 8009efe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	220c      	movs	r2, #12
 8009f04:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8009f06:	4b03      	ldr	r3, [pc, #12]	@ (8009f14 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8009f08:	4618      	mov	r0, r3
 8009f0a:	370c      	adds	r7, #12
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f12:	4770      	bx	lr
 8009f14:	200000e0 	.word	0x200000e0

08009f18 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b084      	sub	sp, #16
 8009f1c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009f1e:	4b0f      	ldr	r3, [pc, #60]	@ (8009f5c <Get_SerialNum+0x44>)
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009f24:	4b0e      	ldr	r3, [pc, #56]	@ (8009f60 <Get_SerialNum+0x48>)
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009f2a:	4b0e      	ldr	r3, [pc, #56]	@ (8009f64 <Get_SerialNum+0x4c>)
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009f30:	68fa      	ldr	r2, [r7, #12]
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	4413      	add	r3, r2
 8009f36:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d009      	beq.n	8009f52 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009f3e:	2208      	movs	r2, #8
 8009f40:	4909      	ldr	r1, [pc, #36]	@ (8009f68 <Get_SerialNum+0x50>)
 8009f42:	68f8      	ldr	r0, [r7, #12]
 8009f44:	f000 f814 	bl	8009f70 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009f48:	2204      	movs	r2, #4
 8009f4a:	4908      	ldr	r1, [pc, #32]	@ (8009f6c <Get_SerialNum+0x54>)
 8009f4c:	68b8      	ldr	r0, [r7, #8]
 8009f4e:	f000 f80f 	bl	8009f70 <IntToUnicode>
  }
}
 8009f52:	bf00      	nop
 8009f54:	3710      	adds	r7, #16
 8009f56:	46bd      	mov	sp, r7
 8009f58:	bd80      	pop	{r7, pc}
 8009f5a:	bf00      	nop
 8009f5c:	1fff7a10 	.word	0x1fff7a10
 8009f60:	1fff7a14 	.word	0x1fff7a14
 8009f64:	1fff7a18 	.word	0x1fff7a18
 8009f68:	200000f2 	.word	0x200000f2
 8009f6c:	20000102 	.word	0x20000102

08009f70 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009f70:	b480      	push	{r7}
 8009f72:	b087      	sub	sp, #28
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	60f8      	str	r0, [r7, #12]
 8009f78:	60b9      	str	r1, [r7, #8]
 8009f7a:	4613      	mov	r3, r2
 8009f7c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009f7e:	2300      	movs	r3, #0
 8009f80:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009f82:	2300      	movs	r3, #0
 8009f84:	75fb      	strb	r3, [r7, #23]
 8009f86:	e027      	b.n	8009fd8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	0f1b      	lsrs	r3, r3, #28
 8009f8c:	2b09      	cmp	r3, #9
 8009f8e:	d80b      	bhi.n	8009fa8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	0f1b      	lsrs	r3, r3, #28
 8009f94:	b2da      	uxtb	r2, r3
 8009f96:	7dfb      	ldrb	r3, [r7, #23]
 8009f98:	005b      	lsls	r3, r3, #1
 8009f9a:	4619      	mov	r1, r3
 8009f9c:	68bb      	ldr	r3, [r7, #8]
 8009f9e:	440b      	add	r3, r1
 8009fa0:	3230      	adds	r2, #48	@ 0x30
 8009fa2:	b2d2      	uxtb	r2, r2
 8009fa4:	701a      	strb	r2, [r3, #0]
 8009fa6:	e00a      	b.n	8009fbe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	0f1b      	lsrs	r3, r3, #28
 8009fac:	b2da      	uxtb	r2, r3
 8009fae:	7dfb      	ldrb	r3, [r7, #23]
 8009fb0:	005b      	lsls	r3, r3, #1
 8009fb2:	4619      	mov	r1, r3
 8009fb4:	68bb      	ldr	r3, [r7, #8]
 8009fb6:	440b      	add	r3, r1
 8009fb8:	3237      	adds	r2, #55	@ 0x37
 8009fba:	b2d2      	uxtb	r2, r2
 8009fbc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	011b      	lsls	r3, r3, #4
 8009fc2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009fc4:	7dfb      	ldrb	r3, [r7, #23]
 8009fc6:	005b      	lsls	r3, r3, #1
 8009fc8:	3301      	adds	r3, #1
 8009fca:	68ba      	ldr	r2, [r7, #8]
 8009fcc:	4413      	add	r3, r2
 8009fce:	2200      	movs	r2, #0
 8009fd0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009fd2:	7dfb      	ldrb	r3, [r7, #23]
 8009fd4:	3301      	adds	r3, #1
 8009fd6:	75fb      	strb	r3, [r7, #23]
 8009fd8:	7dfa      	ldrb	r2, [r7, #23]
 8009fda:	79fb      	ldrb	r3, [r7, #7]
 8009fdc:	429a      	cmp	r2, r3
 8009fde:	d3d3      	bcc.n	8009f88 <IntToUnicode+0x18>
  }
}
 8009fe0:	bf00      	nop
 8009fe2:	bf00      	nop
 8009fe4:	371c      	adds	r7, #28
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fec:	4770      	bx	lr
	...

08009ff0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b0a0      	sub	sp, #128	@ 0x80
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009ff8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	601a      	str	r2, [r3, #0]
 800a000:	605a      	str	r2, [r3, #4]
 800a002:	609a      	str	r2, [r3, #8]
 800a004:	60da      	str	r2, [r3, #12]
 800a006:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a008:	f107 0310 	add.w	r3, r7, #16
 800a00c:	225c      	movs	r2, #92	@ 0x5c
 800a00e:	2100      	movs	r1, #0
 800a010:	4618      	mov	r0, r3
 800a012:	f001 f8e2 	bl	800b1da <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a01e:	d149      	bne.n	800a0b4 <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800a020:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a024:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800a026:	2300      	movs	r3, #0
 800a028:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a02a:	f107 0310 	add.w	r3, r7, #16
 800a02e:	4618      	mov	r0, r3
 800a030:	f7fa fa3a 	bl	80044a8 <HAL_RCCEx_PeriphCLKConfig>
 800a034:	4603      	mov	r3, r0
 800a036:	2b00      	cmp	r3, #0
 800a038:	d001      	beq.n	800a03e <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 800a03a:	f7f7 f9b9 	bl	80013b0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a03e:	2300      	movs	r3, #0
 800a040:	60fb      	str	r3, [r7, #12]
 800a042:	4b1e      	ldr	r3, [pc, #120]	@ (800a0bc <HAL_PCD_MspInit+0xcc>)
 800a044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a046:	4a1d      	ldr	r2, [pc, #116]	@ (800a0bc <HAL_PCD_MspInit+0xcc>)
 800a048:	f043 0301 	orr.w	r3, r3, #1
 800a04c:	6313      	str	r3, [r2, #48]	@ 0x30
 800a04e:	4b1b      	ldr	r3, [pc, #108]	@ (800a0bc <HAL_PCD_MspInit+0xcc>)
 800a050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a052:	f003 0301 	and.w	r3, r3, #1
 800a056:	60fb      	str	r3, [r7, #12]
 800a058:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a05a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800a05e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a060:	2302      	movs	r3, #2
 800a062:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a064:	2300      	movs	r3, #0
 800a066:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a068:	2303      	movs	r3, #3
 800a06a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a06c:	230a      	movs	r3, #10
 800a06e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a070:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800a074:	4619      	mov	r1, r3
 800a076:	4812      	ldr	r0, [pc, #72]	@ (800a0c0 <HAL_PCD_MspInit+0xd0>)
 800a078:	f7f8 fb6e 	bl	8002758 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a07c:	4b0f      	ldr	r3, [pc, #60]	@ (800a0bc <HAL_PCD_MspInit+0xcc>)
 800a07e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a080:	4a0e      	ldr	r2, [pc, #56]	@ (800a0bc <HAL_PCD_MspInit+0xcc>)
 800a082:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a086:	6353      	str	r3, [r2, #52]	@ 0x34
 800a088:	2300      	movs	r3, #0
 800a08a:	60bb      	str	r3, [r7, #8]
 800a08c:	4b0b      	ldr	r3, [pc, #44]	@ (800a0bc <HAL_PCD_MspInit+0xcc>)
 800a08e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a090:	4a0a      	ldr	r2, [pc, #40]	@ (800a0bc <HAL_PCD_MspInit+0xcc>)
 800a092:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a096:	6453      	str	r3, [r2, #68]	@ 0x44
 800a098:	4b08      	ldr	r3, [pc, #32]	@ (800a0bc <HAL_PCD_MspInit+0xcc>)
 800a09a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a09c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a0a0:	60bb      	str	r3, [r7, #8]
 800a0a2:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	2100      	movs	r1, #0
 800a0a8:	2043      	movs	r0, #67	@ 0x43
 800a0aa:	f7f8 f834 	bl	8002116 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a0ae:	2043      	movs	r0, #67	@ 0x43
 800a0b0:	f7f8 f84d 	bl	800214e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a0b4:	bf00      	nop
 800a0b6:	3780      	adds	r7, #128	@ 0x80
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	bd80      	pop	{r7, pc}
 800a0bc:	40023800 	.word	0x40023800
 800a0c0:	40020000 	.word	0x40020000

0800a0c4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b082      	sub	sp, #8
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800a0d8:	4619      	mov	r1, r3
 800a0da:	4610      	mov	r0, r2
 800a0dc:	f7fe fb03 	bl	80086e6 <USBD_LL_SetupStage>
}
 800a0e0:	bf00      	nop
 800a0e2:	3708      	adds	r7, #8
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	bd80      	pop	{r7, pc}

0800a0e8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b082      	sub	sp, #8
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
 800a0f0:	460b      	mov	r3, r1
 800a0f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a0fa:	78fa      	ldrb	r2, [r7, #3]
 800a0fc:	6879      	ldr	r1, [r7, #4]
 800a0fe:	4613      	mov	r3, r2
 800a100:	00db      	lsls	r3, r3, #3
 800a102:	4413      	add	r3, r2
 800a104:	009b      	lsls	r3, r3, #2
 800a106:	440b      	add	r3, r1
 800a108:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800a10c:	681a      	ldr	r2, [r3, #0]
 800a10e:	78fb      	ldrb	r3, [r7, #3]
 800a110:	4619      	mov	r1, r3
 800a112:	f7fe fb3d 	bl	8008790 <USBD_LL_DataOutStage>
}
 800a116:	bf00      	nop
 800a118:	3708      	adds	r7, #8
 800a11a:	46bd      	mov	sp, r7
 800a11c:	bd80      	pop	{r7, pc}

0800a11e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a11e:	b580      	push	{r7, lr}
 800a120:	b082      	sub	sp, #8
 800a122:	af00      	add	r7, sp, #0
 800a124:	6078      	str	r0, [r7, #4]
 800a126:	460b      	mov	r3, r1
 800a128:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a130:	78fa      	ldrb	r2, [r7, #3]
 800a132:	6879      	ldr	r1, [r7, #4]
 800a134:	4613      	mov	r3, r2
 800a136:	00db      	lsls	r3, r3, #3
 800a138:	4413      	add	r3, r2
 800a13a:	009b      	lsls	r3, r3, #2
 800a13c:	440b      	add	r3, r1
 800a13e:	3320      	adds	r3, #32
 800a140:	681a      	ldr	r2, [r3, #0]
 800a142:	78fb      	ldrb	r3, [r7, #3]
 800a144:	4619      	mov	r1, r3
 800a146:	f7fe fbd6 	bl	80088f6 <USBD_LL_DataInStage>
}
 800a14a:	bf00      	nop
 800a14c:	3708      	adds	r7, #8
 800a14e:	46bd      	mov	sp, r7
 800a150:	bd80      	pop	{r7, pc}

0800a152 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a152:	b580      	push	{r7, lr}
 800a154:	b082      	sub	sp, #8
 800a156:	af00      	add	r7, sp, #0
 800a158:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a160:	4618      	mov	r0, r3
 800a162:	f7fe fd10 	bl	8008b86 <USBD_LL_SOF>
}
 800a166:	bf00      	nop
 800a168:	3708      	adds	r7, #8
 800a16a:	46bd      	mov	sp, r7
 800a16c:	bd80      	pop	{r7, pc}

0800a16e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a16e:	b580      	push	{r7, lr}
 800a170:	b084      	sub	sp, #16
 800a172:	af00      	add	r7, sp, #0
 800a174:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a176:	2301      	movs	r3, #1
 800a178:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	79db      	ldrb	r3, [r3, #7]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d102      	bne.n	800a188 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a182:	2300      	movs	r3, #0
 800a184:	73fb      	strb	r3, [r7, #15]
 800a186:	e008      	b.n	800a19a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	79db      	ldrb	r3, [r3, #7]
 800a18c:	2b02      	cmp	r3, #2
 800a18e:	d102      	bne.n	800a196 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a190:	2301      	movs	r3, #1
 800a192:	73fb      	strb	r3, [r7, #15]
 800a194:	e001      	b.n	800a19a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a196:	f7f7 f90b 	bl	80013b0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a1a0:	7bfa      	ldrb	r2, [r7, #15]
 800a1a2:	4611      	mov	r1, r2
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	f7fe fcaa 	bl	8008afe <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	f7fe fc52 	bl	8008a5a <USBD_LL_Reset>
}
 800a1b6:	bf00      	nop
 800a1b8:	3710      	adds	r7, #16
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	bd80      	pop	{r7, pc}
	...

0800a1c0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b082      	sub	sp, #8
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	f7fe fca5 	bl	8008b1e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	687a      	ldr	r2, [r7, #4]
 800a1e0:	6812      	ldr	r2, [r2, #0]
 800a1e2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a1e6:	f043 0301 	orr.w	r3, r3, #1
 800a1ea:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	7adb      	ldrb	r3, [r3, #11]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d005      	beq.n	800a200 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a1f4:	4b04      	ldr	r3, [pc, #16]	@ (800a208 <HAL_PCD_SuspendCallback+0x48>)
 800a1f6:	691b      	ldr	r3, [r3, #16]
 800a1f8:	4a03      	ldr	r2, [pc, #12]	@ (800a208 <HAL_PCD_SuspendCallback+0x48>)
 800a1fa:	f043 0306 	orr.w	r3, r3, #6
 800a1fe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a200:	bf00      	nop
 800a202:	3708      	adds	r7, #8
 800a204:	46bd      	mov	sp, r7
 800a206:	bd80      	pop	{r7, pc}
 800a208:	e000ed00 	.word	0xe000ed00

0800a20c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b082      	sub	sp, #8
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a21a:	4618      	mov	r0, r3
 800a21c:	f7fe fc9b 	bl	8008b56 <USBD_LL_Resume>
}
 800a220:	bf00      	nop
 800a222:	3708      	adds	r7, #8
 800a224:	46bd      	mov	sp, r7
 800a226:	bd80      	pop	{r7, pc}

0800a228 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b082      	sub	sp, #8
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
 800a230:	460b      	mov	r3, r1
 800a232:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a23a:	78fa      	ldrb	r2, [r7, #3]
 800a23c:	4611      	mov	r1, r2
 800a23e:	4618      	mov	r0, r3
 800a240:	f7fe fcf3 	bl	8008c2a <USBD_LL_IsoOUTIncomplete>
}
 800a244:	bf00      	nop
 800a246:	3708      	adds	r7, #8
 800a248:	46bd      	mov	sp, r7
 800a24a:	bd80      	pop	{r7, pc}

0800a24c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b082      	sub	sp, #8
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
 800a254:	460b      	mov	r3, r1
 800a256:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a25e:	78fa      	ldrb	r2, [r7, #3]
 800a260:	4611      	mov	r1, r2
 800a262:	4618      	mov	r0, r3
 800a264:	f7fe fcaf 	bl	8008bc6 <USBD_LL_IsoINIncomplete>
}
 800a268:	bf00      	nop
 800a26a:	3708      	adds	r7, #8
 800a26c:	46bd      	mov	sp, r7
 800a26e:	bd80      	pop	{r7, pc}

0800a270 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a270:	b580      	push	{r7, lr}
 800a272:	b082      	sub	sp, #8
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a27e:	4618      	mov	r0, r3
 800a280:	f7fe fd05 	bl	8008c8e <USBD_LL_DevConnected>
}
 800a284:	bf00      	nop
 800a286:	3708      	adds	r7, #8
 800a288:	46bd      	mov	sp, r7
 800a28a:	bd80      	pop	{r7, pc}

0800a28c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b082      	sub	sp, #8
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a29a:	4618      	mov	r0, r3
 800a29c:	f7fe fd02 	bl	8008ca4 <USBD_LL_DevDisconnected>
}
 800a2a0:	bf00      	nop
 800a2a2:	3708      	adds	r7, #8
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	bd80      	pop	{r7, pc}

0800a2a8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b082      	sub	sp, #8
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	781b      	ldrb	r3, [r3, #0]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d13c      	bne.n	800a332 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a2b8:	4a20      	ldr	r2, [pc, #128]	@ (800a33c <USBD_LL_Init+0x94>)
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	4a1e      	ldr	r2, [pc, #120]	@ (800a33c <USBD_LL_Init+0x94>)
 800a2c4:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a2c8:	4b1c      	ldr	r3, [pc, #112]	@ (800a33c <USBD_LL_Init+0x94>)
 800a2ca:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800a2ce:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800a2d0:	4b1a      	ldr	r3, [pc, #104]	@ (800a33c <USBD_LL_Init+0x94>)
 800a2d2:	2206      	movs	r2, #6
 800a2d4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a2d6:	4b19      	ldr	r3, [pc, #100]	@ (800a33c <USBD_LL_Init+0x94>)
 800a2d8:	2202      	movs	r2, #2
 800a2da:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a2dc:	4b17      	ldr	r3, [pc, #92]	@ (800a33c <USBD_LL_Init+0x94>)
 800a2de:	2200      	movs	r2, #0
 800a2e0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a2e2:	4b16      	ldr	r3, [pc, #88]	@ (800a33c <USBD_LL_Init+0x94>)
 800a2e4:	2202      	movs	r2, #2
 800a2e6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a2e8:	4b14      	ldr	r3, [pc, #80]	@ (800a33c <USBD_LL_Init+0x94>)
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a2ee:	4b13      	ldr	r3, [pc, #76]	@ (800a33c <USBD_LL_Init+0x94>)
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a2f4:	4b11      	ldr	r3, [pc, #68]	@ (800a33c <USBD_LL_Init+0x94>)
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a2fa:	4b10      	ldr	r3, [pc, #64]	@ (800a33c <USBD_LL_Init+0x94>)
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a300:	4b0e      	ldr	r3, [pc, #56]	@ (800a33c <USBD_LL_Init+0x94>)
 800a302:	2200      	movs	r2, #0
 800a304:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a306:	480d      	ldr	r0, [pc, #52]	@ (800a33c <USBD_LL_Init+0x94>)
 800a308:	f7f8 fd18 	bl	8002d3c <HAL_PCD_Init>
 800a30c:	4603      	mov	r3, r0
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d001      	beq.n	800a316 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a312:	f7f7 f84d 	bl	80013b0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a316:	2180      	movs	r1, #128	@ 0x80
 800a318:	4808      	ldr	r0, [pc, #32]	@ (800a33c <USBD_LL_Init+0x94>)
 800a31a:	f7f9 ff76 	bl	800420a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a31e:	2240      	movs	r2, #64	@ 0x40
 800a320:	2100      	movs	r1, #0
 800a322:	4806      	ldr	r0, [pc, #24]	@ (800a33c <USBD_LL_Init+0x94>)
 800a324:	f7f9 ff2a 	bl	800417c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a328:	2280      	movs	r2, #128	@ 0x80
 800a32a:	2101      	movs	r1, #1
 800a32c:	4803      	ldr	r0, [pc, #12]	@ (800a33c <USBD_LL_Init+0x94>)
 800a32e:	f7f9 ff25 	bl	800417c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a332:	2300      	movs	r3, #0
}
 800a334:	4618      	mov	r0, r3
 800a336:	3708      	adds	r7, #8
 800a338:	46bd      	mov	sp, r7
 800a33a:	bd80      	pop	{r7, pc}
 800a33c:	20001a3c 	.word	0x20001a3c

0800a340 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b084      	sub	sp, #16
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a348:	2300      	movs	r3, #0
 800a34a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a34c:	2300      	movs	r3, #0
 800a34e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a356:	4618      	mov	r0, r3
 800a358:	f7f8 fe06 	bl	8002f68 <HAL_PCD_Start>
 800a35c:	4603      	mov	r3, r0
 800a35e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a360:	7bfb      	ldrb	r3, [r7, #15]
 800a362:	4618      	mov	r0, r3
 800a364:	f000 f990 	bl	800a688 <USBD_Get_USB_Status>
 800a368:	4603      	mov	r3, r0
 800a36a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a36c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a36e:	4618      	mov	r0, r3
 800a370:	3710      	adds	r7, #16
 800a372:	46bd      	mov	sp, r7
 800a374:	bd80      	pop	{r7, pc}

0800a376 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a376:	b580      	push	{r7, lr}
 800a378:	b084      	sub	sp, #16
 800a37a:	af00      	add	r7, sp, #0
 800a37c:	6078      	str	r0, [r7, #4]
 800a37e:	4608      	mov	r0, r1
 800a380:	4611      	mov	r1, r2
 800a382:	461a      	mov	r2, r3
 800a384:	4603      	mov	r3, r0
 800a386:	70fb      	strb	r3, [r7, #3]
 800a388:	460b      	mov	r3, r1
 800a38a:	70bb      	strb	r3, [r7, #2]
 800a38c:	4613      	mov	r3, r2
 800a38e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a390:	2300      	movs	r3, #0
 800a392:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a394:	2300      	movs	r3, #0
 800a396:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a39e:	78bb      	ldrb	r3, [r7, #2]
 800a3a0:	883a      	ldrh	r2, [r7, #0]
 800a3a2:	78f9      	ldrb	r1, [r7, #3]
 800a3a4:	f7f9 fb07 	bl	80039b6 <HAL_PCD_EP_Open>
 800a3a8:	4603      	mov	r3, r0
 800a3aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a3ac:	7bfb      	ldrb	r3, [r7, #15]
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	f000 f96a 	bl	800a688 <USBD_Get_USB_Status>
 800a3b4:	4603      	mov	r3, r0
 800a3b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a3b8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	3710      	adds	r7, #16
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	bd80      	pop	{r7, pc}

0800a3c2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a3c2:	b580      	push	{r7, lr}
 800a3c4:	b084      	sub	sp, #16
 800a3c6:	af00      	add	r7, sp, #0
 800a3c8:	6078      	str	r0, [r7, #4]
 800a3ca:	460b      	mov	r3, r1
 800a3cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a3dc:	78fa      	ldrb	r2, [r7, #3]
 800a3de:	4611      	mov	r1, r2
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	f7f9 fb50 	bl	8003a86 <HAL_PCD_EP_Close>
 800a3e6:	4603      	mov	r3, r0
 800a3e8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a3ea:	7bfb      	ldrb	r3, [r7, #15]
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	f000 f94b 	bl	800a688 <USBD_Get_USB_Status>
 800a3f2:	4603      	mov	r3, r0
 800a3f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a3f6:	7bbb      	ldrb	r3, [r7, #14]
}
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	3710      	adds	r7, #16
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	bd80      	pop	{r7, pc}

0800a400 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a400:	b580      	push	{r7, lr}
 800a402:	b084      	sub	sp, #16
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
 800a408:	460b      	mov	r3, r1
 800a40a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a40c:	2300      	movs	r3, #0
 800a40e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a410:	2300      	movs	r3, #0
 800a412:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a41a:	78fa      	ldrb	r2, [r7, #3]
 800a41c:	4611      	mov	r1, r2
 800a41e:	4618      	mov	r0, r3
 800a420:	f7f9 fc08 	bl	8003c34 <HAL_PCD_EP_SetStall>
 800a424:	4603      	mov	r3, r0
 800a426:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a428:	7bfb      	ldrb	r3, [r7, #15]
 800a42a:	4618      	mov	r0, r3
 800a42c:	f000 f92c 	bl	800a688 <USBD_Get_USB_Status>
 800a430:	4603      	mov	r3, r0
 800a432:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a434:	7bbb      	ldrb	r3, [r7, #14]
}
 800a436:	4618      	mov	r0, r3
 800a438:	3710      	adds	r7, #16
 800a43a:	46bd      	mov	sp, r7
 800a43c:	bd80      	pop	{r7, pc}

0800a43e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a43e:	b580      	push	{r7, lr}
 800a440:	b084      	sub	sp, #16
 800a442:	af00      	add	r7, sp, #0
 800a444:	6078      	str	r0, [r7, #4]
 800a446:	460b      	mov	r3, r1
 800a448:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a44a:	2300      	movs	r3, #0
 800a44c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a44e:	2300      	movs	r3, #0
 800a450:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a458:	78fa      	ldrb	r2, [r7, #3]
 800a45a:	4611      	mov	r1, r2
 800a45c:	4618      	mov	r0, r3
 800a45e:	f7f9 fc4c 	bl	8003cfa <HAL_PCD_EP_ClrStall>
 800a462:	4603      	mov	r3, r0
 800a464:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a466:	7bfb      	ldrb	r3, [r7, #15]
 800a468:	4618      	mov	r0, r3
 800a46a:	f000 f90d 	bl	800a688 <USBD_Get_USB_Status>
 800a46e:	4603      	mov	r3, r0
 800a470:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a472:	7bbb      	ldrb	r3, [r7, #14]
}
 800a474:	4618      	mov	r0, r3
 800a476:	3710      	adds	r7, #16
 800a478:	46bd      	mov	sp, r7
 800a47a:	bd80      	pop	{r7, pc}

0800a47c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a47c:	b480      	push	{r7}
 800a47e:	b085      	sub	sp, #20
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
 800a484:	460b      	mov	r3, r1
 800a486:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a48e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a490:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a494:	2b00      	cmp	r3, #0
 800a496:	da0b      	bge.n	800a4b0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a498:	78fb      	ldrb	r3, [r7, #3]
 800a49a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a49e:	68f9      	ldr	r1, [r7, #12]
 800a4a0:	4613      	mov	r3, r2
 800a4a2:	00db      	lsls	r3, r3, #3
 800a4a4:	4413      	add	r3, r2
 800a4a6:	009b      	lsls	r3, r3, #2
 800a4a8:	440b      	add	r3, r1
 800a4aa:	3316      	adds	r3, #22
 800a4ac:	781b      	ldrb	r3, [r3, #0]
 800a4ae:	e00b      	b.n	800a4c8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a4b0:	78fb      	ldrb	r3, [r7, #3]
 800a4b2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a4b6:	68f9      	ldr	r1, [r7, #12]
 800a4b8:	4613      	mov	r3, r2
 800a4ba:	00db      	lsls	r3, r3, #3
 800a4bc:	4413      	add	r3, r2
 800a4be:	009b      	lsls	r3, r3, #2
 800a4c0:	440b      	add	r3, r1
 800a4c2:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800a4c6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	3714      	adds	r7, #20
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d2:	4770      	bx	lr

0800a4d4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b084      	sub	sp, #16
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
 800a4dc:	460b      	mov	r3, r1
 800a4de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a4ee:	78fa      	ldrb	r2, [r7, #3]
 800a4f0:	4611      	mov	r1, r2
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	f7f9 fa3b 	bl	800396e <HAL_PCD_SetAddress>
 800a4f8:	4603      	mov	r3, r0
 800a4fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a4fc:	7bfb      	ldrb	r3, [r7, #15]
 800a4fe:	4618      	mov	r0, r3
 800a500:	f000 f8c2 	bl	800a688 <USBD_Get_USB_Status>
 800a504:	4603      	mov	r3, r0
 800a506:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a508:	7bbb      	ldrb	r3, [r7, #14]
}
 800a50a:	4618      	mov	r0, r3
 800a50c:	3710      	adds	r7, #16
 800a50e:	46bd      	mov	sp, r7
 800a510:	bd80      	pop	{r7, pc}

0800a512 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a512:	b580      	push	{r7, lr}
 800a514:	b086      	sub	sp, #24
 800a516:	af00      	add	r7, sp, #0
 800a518:	60f8      	str	r0, [r7, #12]
 800a51a:	607a      	str	r2, [r7, #4]
 800a51c:	603b      	str	r3, [r7, #0]
 800a51e:	460b      	mov	r3, r1
 800a520:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a522:	2300      	movs	r3, #0
 800a524:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a526:	2300      	movs	r3, #0
 800a528:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a530:	7af9      	ldrb	r1, [r7, #11]
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	687a      	ldr	r2, [r7, #4]
 800a536:	f7f9 fb43 	bl	8003bc0 <HAL_PCD_EP_Transmit>
 800a53a:	4603      	mov	r3, r0
 800a53c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a53e:	7dfb      	ldrb	r3, [r7, #23]
 800a540:	4618      	mov	r0, r3
 800a542:	f000 f8a1 	bl	800a688 <USBD_Get_USB_Status>
 800a546:	4603      	mov	r3, r0
 800a548:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a54a:	7dbb      	ldrb	r3, [r7, #22]
}
 800a54c:	4618      	mov	r0, r3
 800a54e:	3718      	adds	r7, #24
 800a550:	46bd      	mov	sp, r7
 800a552:	bd80      	pop	{r7, pc}

0800a554 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b086      	sub	sp, #24
 800a558:	af00      	add	r7, sp, #0
 800a55a:	60f8      	str	r0, [r7, #12]
 800a55c:	607a      	str	r2, [r7, #4]
 800a55e:	603b      	str	r3, [r7, #0]
 800a560:	460b      	mov	r3, r1
 800a562:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a564:	2300      	movs	r3, #0
 800a566:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a568:	2300      	movs	r3, #0
 800a56a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a572:	7af9      	ldrb	r1, [r7, #11]
 800a574:	683b      	ldr	r3, [r7, #0]
 800a576:	687a      	ldr	r2, [r7, #4]
 800a578:	f7f9 facf 	bl	8003b1a <HAL_PCD_EP_Receive>
 800a57c:	4603      	mov	r3, r0
 800a57e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a580:	7dfb      	ldrb	r3, [r7, #23]
 800a582:	4618      	mov	r0, r3
 800a584:	f000 f880 	bl	800a688 <USBD_Get_USB_Status>
 800a588:	4603      	mov	r3, r0
 800a58a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a58c:	7dbb      	ldrb	r3, [r7, #22]
}
 800a58e:	4618      	mov	r0, r3
 800a590:	3718      	adds	r7, #24
 800a592:	46bd      	mov	sp, r7
 800a594:	bd80      	pop	{r7, pc}

0800a596 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a596:	b580      	push	{r7, lr}
 800a598:	b082      	sub	sp, #8
 800a59a:	af00      	add	r7, sp, #0
 800a59c:	6078      	str	r0, [r7, #4]
 800a59e:	460b      	mov	r3, r1
 800a5a0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a5a8:	78fa      	ldrb	r2, [r7, #3]
 800a5aa:	4611      	mov	r1, r2
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	f7f9 faef 	bl	8003b90 <HAL_PCD_EP_GetRxCount>
 800a5b2:	4603      	mov	r3, r0
}
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	3708      	adds	r7, #8
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	bd80      	pop	{r7, pc}

0800a5bc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b082      	sub	sp, #8
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
 800a5c4:	460b      	mov	r3, r1
 800a5c6:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800a5c8:	78fb      	ldrb	r3, [r7, #3]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d002      	beq.n	800a5d4 <HAL_PCDEx_LPM_Callback+0x18>
 800a5ce:	2b01      	cmp	r3, #1
 800a5d0:	d01f      	beq.n	800a612 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800a5d2:	e03b      	b.n	800a64c <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	7adb      	ldrb	r3, [r3, #11]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d007      	beq.n	800a5ec <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800a5dc:	f7f6 fcce 	bl	8000f7c <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a5e0:	4b1c      	ldr	r3, [pc, #112]	@ (800a654 <HAL_PCDEx_LPM_Callback+0x98>)
 800a5e2:	691b      	ldr	r3, [r3, #16]
 800a5e4:	4a1b      	ldr	r2, [pc, #108]	@ (800a654 <HAL_PCDEx_LPM_Callback+0x98>)
 800a5e6:	f023 0306 	bic.w	r3, r3, #6
 800a5ea:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	687a      	ldr	r2, [r7, #4]
 800a5f8:	6812      	ldr	r2, [r2, #0]
 800a5fa:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a5fe:	f023 0301 	bic.w	r3, r3, #1
 800a602:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a60a:	4618      	mov	r0, r3
 800a60c:	f7fe faa3 	bl	8008b56 <USBD_LL_Resume>
    break;
 800a610:	e01c      	b.n	800a64c <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	687a      	ldr	r2, [r7, #4]
 800a61e:	6812      	ldr	r2, [r2, #0]
 800a620:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a624:	f043 0301 	orr.w	r3, r3, #1
 800a628:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a630:	4618      	mov	r0, r3
 800a632:	f7fe fa74 	bl	8008b1e <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	7adb      	ldrb	r3, [r3, #11]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d005      	beq.n	800a64a <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a63e:	4b05      	ldr	r3, [pc, #20]	@ (800a654 <HAL_PCDEx_LPM_Callback+0x98>)
 800a640:	691b      	ldr	r3, [r3, #16]
 800a642:	4a04      	ldr	r2, [pc, #16]	@ (800a654 <HAL_PCDEx_LPM_Callback+0x98>)
 800a644:	f043 0306 	orr.w	r3, r3, #6
 800a648:	6113      	str	r3, [r2, #16]
    break;
 800a64a:	bf00      	nop
}
 800a64c:	bf00      	nop
 800a64e:	3708      	adds	r7, #8
 800a650:	46bd      	mov	sp, r7
 800a652:	bd80      	pop	{r7, pc}
 800a654:	e000ed00 	.word	0xe000ed00

0800a658 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a658:	b480      	push	{r7}
 800a65a:	b083      	sub	sp, #12
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a660:	4b03      	ldr	r3, [pc, #12]	@ (800a670 <USBD_static_malloc+0x18>)
}
 800a662:	4618      	mov	r0, r3
 800a664:	370c      	adds	r7, #12
 800a666:	46bd      	mov	sp, r7
 800a668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66c:	4770      	bx	lr
 800a66e:	bf00      	nop
 800a670:	20001f20 	.word	0x20001f20

0800a674 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a674:	b480      	push	{r7}
 800a676:	b083      	sub	sp, #12
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]

}
 800a67c:	bf00      	nop
 800a67e:	370c      	adds	r7, #12
 800a680:	46bd      	mov	sp, r7
 800a682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a686:	4770      	bx	lr

0800a688 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a688:	b480      	push	{r7}
 800a68a:	b085      	sub	sp, #20
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	4603      	mov	r3, r0
 800a690:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a692:	2300      	movs	r3, #0
 800a694:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a696:	79fb      	ldrb	r3, [r7, #7]
 800a698:	2b03      	cmp	r3, #3
 800a69a:	d817      	bhi.n	800a6cc <USBD_Get_USB_Status+0x44>
 800a69c:	a201      	add	r2, pc, #4	@ (adr r2, 800a6a4 <USBD_Get_USB_Status+0x1c>)
 800a69e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6a2:	bf00      	nop
 800a6a4:	0800a6b5 	.word	0x0800a6b5
 800a6a8:	0800a6bb 	.word	0x0800a6bb
 800a6ac:	0800a6c1 	.word	0x0800a6c1
 800a6b0:	0800a6c7 	.word	0x0800a6c7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	73fb      	strb	r3, [r7, #15]
    break;
 800a6b8:	e00b      	b.n	800a6d2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a6ba:	2303      	movs	r3, #3
 800a6bc:	73fb      	strb	r3, [r7, #15]
    break;
 800a6be:	e008      	b.n	800a6d2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a6c0:	2301      	movs	r3, #1
 800a6c2:	73fb      	strb	r3, [r7, #15]
    break;
 800a6c4:	e005      	b.n	800a6d2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a6c6:	2303      	movs	r3, #3
 800a6c8:	73fb      	strb	r3, [r7, #15]
    break;
 800a6ca:	e002      	b.n	800a6d2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a6cc:	2303      	movs	r3, #3
 800a6ce:	73fb      	strb	r3, [r7, #15]
    break;
 800a6d0:	bf00      	nop
  }
  return usb_status;
 800a6d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	3714      	adds	r7, #20
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6de:	4770      	bx	lr

0800a6e0 <__cvt>:
 800a6e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a6e4:	ec57 6b10 	vmov	r6, r7, d0
 800a6e8:	2f00      	cmp	r7, #0
 800a6ea:	460c      	mov	r4, r1
 800a6ec:	4619      	mov	r1, r3
 800a6ee:	463b      	mov	r3, r7
 800a6f0:	bfbb      	ittet	lt
 800a6f2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a6f6:	461f      	movlt	r7, r3
 800a6f8:	2300      	movge	r3, #0
 800a6fa:	232d      	movlt	r3, #45	@ 0x2d
 800a6fc:	700b      	strb	r3, [r1, #0]
 800a6fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a700:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a704:	4691      	mov	r9, r2
 800a706:	f023 0820 	bic.w	r8, r3, #32
 800a70a:	bfbc      	itt	lt
 800a70c:	4632      	movlt	r2, r6
 800a70e:	4616      	movlt	r6, r2
 800a710:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a714:	d005      	beq.n	800a722 <__cvt+0x42>
 800a716:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a71a:	d100      	bne.n	800a71e <__cvt+0x3e>
 800a71c:	3401      	adds	r4, #1
 800a71e:	2102      	movs	r1, #2
 800a720:	e000      	b.n	800a724 <__cvt+0x44>
 800a722:	2103      	movs	r1, #3
 800a724:	ab03      	add	r3, sp, #12
 800a726:	9301      	str	r3, [sp, #4]
 800a728:	ab02      	add	r3, sp, #8
 800a72a:	9300      	str	r3, [sp, #0]
 800a72c:	ec47 6b10 	vmov	d0, r6, r7
 800a730:	4653      	mov	r3, sl
 800a732:	4622      	mov	r2, r4
 800a734:	f000 fe5c 	bl	800b3f0 <_dtoa_r>
 800a738:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a73c:	4605      	mov	r5, r0
 800a73e:	d119      	bne.n	800a774 <__cvt+0x94>
 800a740:	f019 0f01 	tst.w	r9, #1
 800a744:	d00e      	beq.n	800a764 <__cvt+0x84>
 800a746:	eb00 0904 	add.w	r9, r0, r4
 800a74a:	2200      	movs	r2, #0
 800a74c:	2300      	movs	r3, #0
 800a74e:	4630      	mov	r0, r6
 800a750:	4639      	mov	r1, r7
 800a752:	f7f6 f9d9 	bl	8000b08 <__aeabi_dcmpeq>
 800a756:	b108      	cbz	r0, 800a75c <__cvt+0x7c>
 800a758:	f8cd 900c 	str.w	r9, [sp, #12]
 800a75c:	2230      	movs	r2, #48	@ 0x30
 800a75e:	9b03      	ldr	r3, [sp, #12]
 800a760:	454b      	cmp	r3, r9
 800a762:	d31e      	bcc.n	800a7a2 <__cvt+0xc2>
 800a764:	9b03      	ldr	r3, [sp, #12]
 800a766:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a768:	1b5b      	subs	r3, r3, r5
 800a76a:	4628      	mov	r0, r5
 800a76c:	6013      	str	r3, [r2, #0]
 800a76e:	b004      	add	sp, #16
 800a770:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a774:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a778:	eb00 0904 	add.w	r9, r0, r4
 800a77c:	d1e5      	bne.n	800a74a <__cvt+0x6a>
 800a77e:	7803      	ldrb	r3, [r0, #0]
 800a780:	2b30      	cmp	r3, #48	@ 0x30
 800a782:	d10a      	bne.n	800a79a <__cvt+0xba>
 800a784:	2200      	movs	r2, #0
 800a786:	2300      	movs	r3, #0
 800a788:	4630      	mov	r0, r6
 800a78a:	4639      	mov	r1, r7
 800a78c:	f7f6 f9bc 	bl	8000b08 <__aeabi_dcmpeq>
 800a790:	b918      	cbnz	r0, 800a79a <__cvt+0xba>
 800a792:	f1c4 0401 	rsb	r4, r4, #1
 800a796:	f8ca 4000 	str.w	r4, [sl]
 800a79a:	f8da 3000 	ldr.w	r3, [sl]
 800a79e:	4499      	add	r9, r3
 800a7a0:	e7d3      	b.n	800a74a <__cvt+0x6a>
 800a7a2:	1c59      	adds	r1, r3, #1
 800a7a4:	9103      	str	r1, [sp, #12]
 800a7a6:	701a      	strb	r2, [r3, #0]
 800a7a8:	e7d9      	b.n	800a75e <__cvt+0x7e>

0800a7aa <__exponent>:
 800a7aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a7ac:	2900      	cmp	r1, #0
 800a7ae:	bfba      	itte	lt
 800a7b0:	4249      	neglt	r1, r1
 800a7b2:	232d      	movlt	r3, #45	@ 0x2d
 800a7b4:	232b      	movge	r3, #43	@ 0x2b
 800a7b6:	2909      	cmp	r1, #9
 800a7b8:	7002      	strb	r2, [r0, #0]
 800a7ba:	7043      	strb	r3, [r0, #1]
 800a7bc:	dd29      	ble.n	800a812 <__exponent+0x68>
 800a7be:	f10d 0307 	add.w	r3, sp, #7
 800a7c2:	461d      	mov	r5, r3
 800a7c4:	270a      	movs	r7, #10
 800a7c6:	461a      	mov	r2, r3
 800a7c8:	fbb1 f6f7 	udiv	r6, r1, r7
 800a7cc:	fb07 1416 	mls	r4, r7, r6, r1
 800a7d0:	3430      	adds	r4, #48	@ 0x30
 800a7d2:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a7d6:	460c      	mov	r4, r1
 800a7d8:	2c63      	cmp	r4, #99	@ 0x63
 800a7da:	f103 33ff 	add.w	r3, r3, #4294967295
 800a7de:	4631      	mov	r1, r6
 800a7e0:	dcf1      	bgt.n	800a7c6 <__exponent+0x1c>
 800a7e2:	3130      	adds	r1, #48	@ 0x30
 800a7e4:	1e94      	subs	r4, r2, #2
 800a7e6:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a7ea:	1c41      	adds	r1, r0, #1
 800a7ec:	4623      	mov	r3, r4
 800a7ee:	42ab      	cmp	r3, r5
 800a7f0:	d30a      	bcc.n	800a808 <__exponent+0x5e>
 800a7f2:	f10d 0309 	add.w	r3, sp, #9
 800a7f6:	1a9b      	subs	r3, r3, r2
 800a7f8:	42ac      	cmp	r4, r5
 800a7fa:	bf88      	it	hi
 800a7fc:	2300      	movhi	r3, #0
 800a7fe:	3302      	adds	r3, #2
 800a800:	4403      	add	r3, r0
 800a802:	1a18      	subs	r0, r3, r0
 800a804:	b003      	add	sp, #12
 800a806:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a808:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a80c:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a810:	e7ed      	b.n	800a7ee <__exponent+0x44>
 800a812:	2330      	movs	r3, #48	@ 0x30
 800a814:	3130      	adds	r1, #48	@ 0x30
 800a816:	7083      	strb	r3, [r0, #2]
 800a818:	70c1      	strb	r1, [r0, #3]
 800a81a:	1d03      	adds	r3, r0, #4
 800a81c:	e7f1      	b.n	800a802 <__exponent+0x58>
	...

0800a820 <_printf_float>:
 800a820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a824:	b08d      	sub	sp, #52	@ 0x34
 800a826:	460c      	mov	r4, r1
 800a828:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a82c:	4616      	mov	r6, r2
 800a82e:	461f      	mov	r7, r3
 800a830:	4605      	mov	r5, r0
 800a832:	f000 fcdb 	bl	800b1ec <_localeconv_r>
 800a836:	6803      	ldr	r3, [r0, #0]
 800a838:	9304      	str	r3, [sp, #16]
 800a83a:	4618      	mov	r0, r3
 800a83c:	f7f5 fd38 	bl	80002b0 <strlen>
 800a840:	2300      	movs	r3, #0
 800a842:	930a      	str	r3, [sp, #40]	@ 0x28
 800a844:	f8d8 3000 	ldr.w	r3, [r8]
 800a848:	9005      	str	r0, [sp, #20]
 800a84a:	3307      	adds	r3, #7
 800a84c:	f023 0307 	bic.w	r3, r3, #7
 800a850:	f103 0208 	add.w	r2, r3, #8
 800a854:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a858:	f8d4 b000 	ldr.w	fp, [r4]
 800a85c:	f8c8 2000 	str.w	r2, [r8]
 800a860:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a864:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a868:	9307      	str	r3, [sp, #28]
 800a86a:	f8cd 8018 	str.w	r8, [sp, #24]
 800a86e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a872:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a876:	4b9c      	ldr	r3, [pc, #624]	@ (800aae8 <_printf_float+0x2c8>)
 800a878:	f04f 32ff 	mov.w	r2, #4294967295
 800a87c:	f7f6 f976 	bl	8000b6c <__aeabi_dcmpun>
 800a880:	bb70      	cbnz	r0, 800a8e0 <_printf_float+0xc0>
 800a882:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a886:	4b98      	ldr	r3, [pc, #608]	@ (800aae8 <_printf_float+0x2c8>)
 800a888:	f04f 32ff 	mov.w	r2, #4294967295
 800a88c:	f7f6 f950 	bl	8000b30 <__aeabi_dcmple>
 800a890:	bb30      	cbnz	r0, 800a8e0 <_printf_float+0xc0>
 800a892:	2200      	movs	r2, #0
 800a894:	2300      	movs	r3, #0
 800a896:	4640      	mov	r0, r8
 800a898:	4649      	mov	r1, r9
 800a89a:	f7f6 f93f 	bl	8000b1c <__aeabi_dcmplt>
 800a89e:	b110      	cbz	r0, 800a8a6 <_printf_float+0x86>
 800a8a0:	232d      	movs	r3, #45	@ 0x2d
 800a8a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a8a6:	4a91      	ldr	r2, [pc, #580]	@ (800aaec <_printf_float+0x2cc>)
 800a8a8:	4b91      	ldr	r3, [pc, #580]	@ (800aaf0 <_printf_float+0x2d0>)
 800a8aa:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a8ae:	bf94      	ite	ls
 800a8b0:	4690      	movls	r8, r2
 800a8b2:	4698      	movhi	r8, r3
 800a8b4:	2303      	movs	r3, #3
 800a8b6:	6123      	str	r3, [r4, #16]
 800a8b8:	f02b 0304 	bic.w	r3, fp, #4
 800a8bc:	6023      	str	r3, [r4, #0]
 800a8be:	f04f 0900 	mov.w	r9, #0
 800a8c2:	9700      	str	r7, [sp, #0]
 800a8c4:	4633      	mov	r3, r6
 800a8c6:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a8c8:	4621      	mov	r1, r4
 800a8ca:	4628      	mov	r0, r5
 800a8cc:	f000 f9d2 	bl	800ac74 <_printf_common>
 800a8d0:	3001      	adds	r0, #1
 800a8d2:	f040 808d 	bne.w	800a9f0 <_printf_float+0x1d0>
 800a8d6:	f04f 30ff 	mov.w	r0, #4294967295
 800a8da:	b00d      	add	sp, #52	@ 0x34
 800a8dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8e0:	4642      	mov	r2, r8
 800a8e2:	464b      	mov	r3, r9
 800a8e4:	4640      	mov	r0, r8
 800a8e6:	4649      	mov	r1, r9
 800a8e8:	f7f6 f940 	bl	8000b6c <__aeabi_dcmpun>
 800a8ec:	b140      	cbz	r0, 800a900 <_printf_float+0xe0>
 800a8ee:	464b      	mov	r3, r9
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	bfbc      	itt	lt
 800a8f4:	232d      	movlt	r3, #45	@ 0x2d
 800a8f6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a8fa:	4a7e      	ldr	r2, [pc, #504]	@ (800aaf4 <_printf_float+0x2d4>)
 800a8fc:	4b7e      	ldr	r3, [pc, #504]	@ (800aaf8 <_printf_float+0x2d8>)
 800a8fe:	e7d4      	b.n	800a8aa <_printf_float+0x8a>
 800a900:	6863      	ldr	r3, [r4, #4]
 800a902:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a906:	9206      	str	r2, [sp, #24]
 800a908:	1c5a      	adds	r2, r3, #1
 800a90a:	d13b      	bne.n	800a984 <_printf_float+0x164>
 800a90c:	2306      	movs	r3, #6
 800a90e:	6063      	str	r3, [r4, #4]
 800a910:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a914:	2300      	movs	r3, #0
 800a916:	6022      	str	r2, [r4, #0]
 800a918:	9303      	str	r3, [sp, #12]
 800a91a:	ab0a      	add	r3, sp, #40	@ 0x28
 800a91c:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a920:	ab09      	add	r3, sp, #36	@ 0x24
 800a922:	9300      	str	r3, [sp, #0]
 800a924:	6861      	ldr	r1, [r4, #4]
 800a926:	ec49 8b10 	vmov	d0, r8, r9
 800a92a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a92e:	4628      	mov	r0, r5
 800a930:	f7ff fed6 	bl	800a6e0 <__cvt>
 800a934:	9b06      	ldr	r3, [sp, #24]
 800a936:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a938:	2b47      	cmp	r3, #71	@ 0x47
 800a93a:	4680      	mov	r8, r0
 800a93c:	d129      	bne.n	800a992 <_printf_float+0x172>
 800a93e:	1cc8      	adds	r0, r1, #3
 800a940:	db02      	blt.n	800a948 <_printf_float+0x128>
 800a942:	6863      	ldr	r3, [r4, #4]
 800a944:	4299      	cmp	r1, r3
 800a946:	dd41      	ble.n	800a9cc <_printf_float+0x1ac>
 800a948:	f1aa 0a02 	sub.w	sl, sl, #2
 800a94c:	fa5f fa8a 	uxtb.w	sl, sl
 800a950:	3901      	subs	r1, #1
 800a952:	4652      	mov	r2, sl
 800a954:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a958:	9109      	str	r1, [sp, #36]	@ 0x24
 800a95a:	f7ff ff26 	bl	800a7aa <__exponent>
 800a95e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a960:	1813      	adds	r3, r2, r0
 800a962:	2a01      	cmp	r2, #1
 800a964:	4681      	mov	r9, r0
 800a966:	6123      	str	r3, [r4, #16]
 800a968:	dc02      	bgt.n	800a970 <_printf_float+0x150>
 800a96a:	6822      	ldr	r2, [r4, #0]
 800a96c:	07d2      	lsls	r2, r2, #31
 800a96e:	d501      	bpl.n	800a974 <_printf_float+0x154>
 800a970:	3301      	adds	r3, #1
 800a972:	6123      	str	r3, [r4, #16]
 800a974:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d0a2      	beq.n	800a8c2 <_printf_float+0xa2>
 800a97c:	232d      	movs	r3, #45	@ 0x2d
 800a97e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a982:	e79e      	b.n	800a8c2 <_printf_float+0xa2>
 800a984:	9a06      	ldr	r2, [sp, #24]
 800a986:	2a47      	cmp	r2, #71	@ 0x47
 800a988:	d1c2      	bne.n	800a910 <_printf_float+0xf0>
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d1c0      	bne.n	800a910 <_printf_float+0xf0>
 800a98e:	2301      	movs	r3, #1
 800a990:	e7bd      	b.n	800a90e <_printf_float+0xee>
 800a992:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a996:	d9db      	bls.n	800a950 <_printf_float+0x130>
 800a998:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a99c:	d118      	bne.n	800a9d0 <_printf_float+0x1b0>
 800a99e:	2900      	cmp	r1, #0
 800a9a0:	6863      	ldr	r3, [r4, #4]
 800a9a2:	dd0b      	ble.n	800a9bc <_printf_float+0x19c>
 800a9a4:	6121      	str	r1, [r4, #16]
 800a9a6:	b913      	cbnz	r3, 800a9ae <_printf_float+0x18e>
 800a9a8:	6822      	ldr	r2, [r4, #0]
 800a9aa:	07d0      	lsls	r0, r2, #31
 800a9ac:	d502      	bpl.n	800a9b4 <_printf_float+0x194>
 800a9ae:	3301      	adds	r3, #1
 800a9b0:	440b      	add	r3, r1
 800a9b2:	6123      	str	r3, [r4, #16]
 800a9b4:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a9b6:	f04f 0900 	mov.w	r9, #0
 800a9ba:	e7db      	b.n	800a974 <_printf_float+0x154>
 800a9bc:	b913      	cbnz	r3, 800a9c4 <_printf_float+0x1a4>
 800a9be:	6822      	ldr	r2, [r4, #0]
 800a9c0:	07d2      	lsls	r2, r2, #31
 800a9c2:	d501      	bpl.n	800a9c8 <_printf_float+0x1a8>
 800a9c4:	3302      	adds	r3, #2
 800a9c6:	e7f4      	b.n	800a9b2 <_printf_float+0x192>
 800a9c8:	2301      	movs	r3, #1
 800a9ca:	e7f2      	b.n	800a9b2 <_printf_float+0x192>
 800a9cc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a9d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a9d2:	4299      	cmp	r1, r3
 800a9d4:	db05      	blt.n	800a9e2 <_printf_float+0x1c2>
 800a9d6:	6823      	ldr	r3, [r4, #0]
 800a9d8:	6121      	str	r1, [r4, #16]
 800a9da:	07d8      	lsls	r0, r3, #31
 800a9dc:	d5ea      	bpl.n	800a9b4 <_printf_float+0x194>
 800a9de:	1c4b      	adds	r3, r1, #1
 800a9e0:	e7e7      	b.n	800a9b2 <_printf_float+0x192>
 800a9e2:	2900      	cmp	r1, #0
 800a9e4:	bfd4      	ite	le
 800a9e6:	f1c1 0202 	rsble	r2, r1, #2
 800a9ea:	2201      	movgt	r2, #1
 800a9ec:	4413      	add	r3, r2
 800a9ee:	e7e0      	b.n	800a9b2 <_printf_float+0x192>
 800a9f0:	6823      	ldr	r3, [r4, #0]
 800a9f2:	055a      	lsls	r2, r3, #21
 800a9f4:	d407      	bmi.n	800aa06 <_printf_float+0x1e6>
 800a9f6:	6923      	ldr	r3, [r4, #16]
 800a9f8:	4642      	mov	r2, r8
 800a9fa:	4631      	mov	r1, r6
 800a9fc:	4628      	mov	r0, r5
 800a9fe:	47b8      	blx	r7
 800aa00:	3001      	adds	r0, #1
 800aa02:	d12b      	bne.n	800aa5c <_printf_float+0x23c>
 800aa04:	e767      	b.n	800a8d6 <_printf_float+0xb6>
 800aa06:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800aa0a:	f240 80dd 	bls.w	800abc8 <_printf_float+0x3a8>
 800aa0e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800aa12:	2200      	movs	r2, #0
 800aa14:	2300      	movs	r3, #0
 800aa16:	f7f6 f877 	bl	8000b08 <__aeabi_dcmpeq>
 800aa1a:	2800      	cmp	r0, #0
 800aa1c:	d033      	beq.n	800aa86 <_printf_float+0x266>
 800aa1e:	4a37      	ldr	r2, [pc, #220]	@ (800aafc <_printf_float+0x2dc>)
 800aa20:	2301      	movs	r3, #1
 800aa22:	4631      	mov	r1, r6
 800aa24:	4628      	mov	r0, r5
 800aa26:	47b8      	blx	r7
 800aa28:	3001      	adds	r0, #1
 800aa2a:	f43f af54 	beq.w	800a8d6 <_printf_float+0xb6>
 800aa2e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800aa32:	4543      	cmp	r3, r8
 800aa34:	db02      	blt.n	800aa3c <_printf_float+0x21c>
 800aa36:	6823      	ldr	r3, [r4, #0]
 800aa38:	07d8      	lsls	r0, r3, #31
 800aa3a:	d50f      	bpl.n	800aa5c <_printf_float+0x23c>
 800aa3c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aa40:	4631      	mov	r1, r6
 800aa42:	4628      	mov	r0, r5
 800aa44:	47b8      	blx	r7
 800aa46:	3001      	adds	r0, #1
 800aa48:	f43f af45 	beq.w	800a8d6 <_printf_float+0xb6>
 800aa4c:	f04f 0900 	mov.w	r9, #0
 800aa50:	f108 38ff 	add.w	r8, r8, #4294967295
 800aa54:	f104 0a1a 	add.w	sl, r4, #26
 800aa58:	45c8      	cmp	r8, r9
 800aa5a:	dc09      	bgt.n	800aa70 <_printf_float+0x250>
 800aa5c:	6823      	ldr	r3, [r4, #0]
 800aa5e:	079b      	lsls	r3, r3, #30
 800aa60:	f100 8103 	bmi.w	800ac6a <_printf_float+0x44a>
 800aa64:	68e0      	ldr	r0, [r4, #12]
 800aa66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aa68:	4298      	cmp	r0, r3
 800aa6a:	bfb8      	it	lt
 800aa6c:	4618      	movlt	r0, r3
 800aa6e:	e734      	b.n	800a8da <_printf_float+0xba>
 800aa70:	2301      	movs	r3, #1
 800aa72:	4652      	mov	r2, sl
 800aa74:	4631      	mov	r1, r6
 800aa76:	4628      	mov	r0, r5
 800aa78:	47b8      	blx	r7
 800aa7a:	3001      	adds	r0, #1
 800aa7c:	f43f af2b 	beq.w	800a8d6 <_printf_float+0xb6>
 800aa80:	f109 0901 	add.w	r9, r9, #1
 800aa84:	e7e8      	b.n	800aa58 <_printf_float+0x238>
 800aa86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	dc39      	bgt.n	800ab00 <_printf_float+0x2e0>
 800aa8c:	4a1b      	ldr	r2, [pc, #108]	@ (800aafc <_printf_float+0x2dc>)
 800aa8e:	2301      	movs	r3, #1
 800aa90:	4631      	mov	r1, r6
 800aa92:	4628      	mov	r0, r5
 800aa94:	47b8      	blx	r7
 800aa96:	3001      	adds	r0, #1
 800aa98:	f43f af1d 	beq.w	800a8d6 <_printf_float+0xb6>
 800aa9c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800aaa0:	ea59 0303 	orrs.w	r3, r9, r3
 800aaa4:	d102      	bne.n	800aaac <_printf_float+0x28c>
 800aaa6:	6823      	ldr	r3, [r4, #0]
 800aaa8:	07d9      	lsls	r1, r3, #31
 800aaaa:	d5d7      	bpl.n	800aa5c <_printf_float+0x23c>
 800aaac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aab0:	4631      	mov	r1, r6
 800aab2:	4628      	mov	r0, r5
 800aab4:	47b8      	blx	r7
 800aab6:	3001      	adds	r0, #1
 800aab8:	f43f af0d 	beq.w	800a8d6 <_printf_float+0xb6>
 800aabc:	f04f 0a00 	mov.w	sl, #0
 800aac0:	f104 0b1a 	add.w	fp, r4, #26
 800aac4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aac6:	425b      	negs	r3, r3
 800aac8:	4553      	cmp	r3, sl
 800aaca:	dc01      	bgt.n	800aad0 <_printf_float+0x2b0>
 800aacc:	464b      	mov	r3, r9
 800aace:	e793      	b.n	800a9f8 <_printf_float+0x1d8>
 800aad0:	2301      	movs	r3, #1
 800aad2:	465a      	mov	r2, fp
 800aad4:	4631      	mov	r1, r6
 800aad6:	4628      	mov	r0, r5
 800aad8:	47b8      	blx	r7
 800aada:	3001      	adds	r0, #1
 800aadc:	f43f aefb 	beq.w	800a8d6 <_printf_float+0xb6>
 800aae0:	f10a 0a01 	add.w	sl, sl, #1
 800aae4:	e7ee      	b.n	800aac4 <_printf_float+0x2a4>
 800aae6:	bf00      	nop
 800aae8:	7fefffff 	.word	0x7fefffff
 800aaec:	0800d428 	.word	0x0800d428
 800aaf0:	0800d42c 	.word	0x0800d42c
 800aaf4:	0800d430 	.word	0x0800d430
 800aaf8:	0800d434 	.word	0x0800d434
 800aafc:	0800d438 	.word	0x0800d438
 800ab00:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ab02:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ab06:	4553      	cmp	r3, sl
 800ab08:	bfa8      	it	ge
 800ab0a:	4653      	movge	r3, sl
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	4699      	mov	r9, r3
 800ab10:	dc36      	bgt.n	800ab80 <_printf_float+0x360>
 800ab12:	f04f 0b00 	mov.w	fp, #0
 800ab16:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ab1a:	f104 021a 	add.w	r2, r4, #26
 800ab1e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ab20:	9306      	str	r3, [sp, #24]
 800ab22:	eba3 0309 	sub.w	r3, r3, r9
 800ab26:	455b      	cmp	r3, fp
 800ab28:	dc31      	bgt.n	800ab8e <_printf_float+0x36e>
 800ab2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab2c:	459a      	cmp	sl, r3
 800ab2e:	dc3a      	bgt.n	800aba6 <_printf_float+0x386>
 800ab30:	6823      	ldr	r3, [r4, #0]
 800ab32:	07da      	lsls	r2, r3, #31
 800ab34:	d437      	bmi.n	800aba6 <_printf_float+0x386>
 800ab36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab38:	ebaa 0903 	sub.w	r9, sl, r3
 800ab3c:	9b06      	ldr	r3, [sp, #24]
 800ab3e:	ebaa 0303 	sub.w	r3, sl, r3
 800ab42:	4599      	cmp	r9, r3
 800ab44:	bfa8      	it	ge
 800ab46:	4699      	movge	r9, r3
 800ab48:	f1b9 0f00 	cmp.w	r9, #0
 800ab4c:	dc33      	bgt.n	800abb6 <_printf_float+0x396>
 800ab4e:	f04f 0800 	mov.w	r8, #0
 800ab52:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ab56:	f104 0b1a 	add.w	fp, r4, #26
 800ab5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab5c:	ebaa 0303 	sub.w	r3, sl, r3
 800ab60:	eba3 0309 	sub.w	r3, r3, r9
 800ab64:	4543      	cmp	r3, r8
 800ab66:	f77f af79 	ble.w	800aa5c <_printf_float+0x23c>
 800ab6a:	2301      	movs	r3, #1
 800ab6c:	465a      	mov	r2, fp
 800ab6e:	4631      	mov	r1, r6
 800ab70:	4628      	mov	r0, r5
 800ab72:	47b8      	blx	r7
 800ab74:	3001      	adds	r0, #1
 800ab76:	f43f aeae 	beq.w	800a8d6 <_printf_float+0xb6>
 800ab7a:	f108 0801 	add.w	r8, r8, #1
 800ab7e:	e7ec      	b.n	800ab5a <_printf_float+0x33a>
 800ab80:	4642      	mov	r2, r8
 800ab82:	4631      	mov	r1, r6
 800ab84:	4628      	mov	r0, r5
 800ab86:	47b8      	blx	r7
 800ab88:	3001      	adds	r0, #1
 800ab8a:	d1c2      	bne.n	800ab12 <_printf_float+0x2f2>
 800ab8c:	e6a3      	b.n	800a8d6 <_printf_float+0xb6>
 800ab8e:	2301      	movs	r3, #1
 800ab90:	4631      	mov	r1, r6
 800ab92:	4628      	mov	r0, r5
 800ab94:	9206      	str	r2, [sp, #24]
 800ab96:	47b8      	blx	r7
 800ab98:	3001      	adds	r0, #1
 800ab9a:	f43f ae9c 	beq.w	800a8d6 <_printf_float+0xb6>
 800ab9e:	9a06      	ldr	r2, [sp, #24]
 800aba0:	f10b 0b01 	add.w	fp, fp, #1
 800aba4:	e7bb      	b.n	800ab1e <_printf_float+0x2fe>
 800aba6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800abaa:	4631      	mov	r1, r6
 800abac:	4628      	mov	r0, r5
 800abae:	47b8      	blx	r7
 800abb0:	3001      	adds	r0, #1
 800abb2:	d1c0      	bne.n	800ab36 <_printf_float+0x316>
 800abb4:	e68f      	b.n	800a8d6 <_printf_float+0xb6>
 800abb6:	9a06      	ldr	r2, [sp, #24]
 800abb8:	464b      	mov	r3, r9
 800abba:	4442      	add	r2, r8
 800abbc:	4631      	mov	r1, r6
 800abbe:	4628      	mov	r0, r5
 800abc0:	47b8      	blx	r7
 800abc2:	3001      	adds	r0, #1
 800abc4:	d1c3      	bne.n	800ab4e <_printf_float+0x32e>
 800abc6:	e686      	b.n	800a8d6 <_printf_float+0xb6>
 800abc8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800abcc:	f1ba 0f01 	cmp.w	sl, #1
 800abd0:	dc01      	bgt.n	800abd6 <_printf_float+0x3b6>
 800abd2:	07db      	lsls	r3, r3, #31
 800abd4:	d536      	bpl.n	800ac44 <_printf_float+0x424>
 800abd6:	2301      	movs	r3, #1
 800abd8:	4642      	mov	r2, r8
 800abda:	4631      	mov	r1, r6
 800abdc:	4628      	mov	r0, r5
 800abde:	47b8      	blx	r7
 800abe0:	3001      	adds	r0, #1
 800abe2:	f43f ae78 	beq.w	800a8d6 <_printf_float+0xb6>
 800abe6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800abea:	4631      	mov	r1, r6
 800abec:	4628      	mov	r0, r5
 800abee:	47b8      	blx	r7
 800abf0:	3001      	adds	r0, #1
 800abf2:	f43f ae70 	beq.w	800a8d6 <_printf_float+0xb6>
 800abf6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800abfa:	2200      	movs	r2, #0
 800abfc:	2300      	movs	r3, #0
 800abfe:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ac02:	f7f5 ff81 	bl	8000b08 <__aeabi_dcmpeq>
 800ac06:	b9c0      	cbnz	r0, 800ac3a <_printf_float+0x41a>
 800ac08:	4653      	mov	r3, sl
 800ac0a:	f108 0201 	add.w	r2, r8, #1
 800ac0e:	4631      	mov	r1, r6
 800ac10:	4628      	mov	r0, r5
 800ac12:	47b8      	blx	r7
 800ac14:	3001      	adds	r0, #1
 800ac16:	d10c      	bne.n	800ac32 <_printf_float+0x412>
 800ac18:	e65d      	b.n	800a8d6 <_printf_float+0xb6>
 800ac1a:	2301      	movs	r3, #1
 800ac1c:	465a      	mov	r2, fp
 800ac1e:	4631      	mov	r1, r6
 800ac20:	4628      	mov	r0, r5
 800ac22:	47b8      	blx	r7
 800ac24:	3001      	adds	r0, #1
 800ac26:	f43f ae56 	beq.w	800a8d6 <_printf_float+0xb6>
 800ac2a:	f108 0801 	add.w	r8, r8, #1
 800ac2e:	45d0      	cmp	r8, sl
 800ac30:	dbf3      	blt.n	800ac1a <_printf_float+0x3fa>
 800ac32:	464b      	mov	r3, r9
 800ac34:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800ac38:	e6df      	b.n	800a9fa <_printf_float+0x1da>
 800ac3a:	f04f 0800 	mov.w	r8, #0
 800ac3e:	f104 0b1a 	add.w	fp, r4, #26
 800ac42:	e7f4      	b.n	800ac2e <_printf_float+0x40e>
 800ac44:	2301      	movs	r3, #1
 800ac46:	4642      	mov	r2, r8
 800ac48:	e7e1      	b.n	800ac0e <_printf_float+0x3ee>
 800ac4a:	2301      	movs	r3, #1
 800ac4c:	464a      	mov	r2, r9
 800ac4e:	4631      	mov	r1, r6
 800ac50:	4628      	mov	r0, r5
 800ac52:	47b8      	blx	r7
 800ac54:	3001      	adds	r0, #1
 800ac56:	f43f ae3e 	beq.w	800a8d6 <_printf_float+0xb6>
 800ac5a:	f108 0801 	add.w	r8, r8, #1
 800ac5e:	68e3      	ldr	r3, [r4, #12]
 800ac60:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ac62:	1a5b      	subs	r3, r3, r1
 800ac64:	4543      	cmp	r3, r8
 800ac66:	dcf0      	bgt.n	800ac4a <_printf_float+0x42a>
 800ac68:	e6fc      	b.n	800aa64 <_printf_float+0x244>
 800ac6a:	f04f 0800 	mov.w	r8, #0
 800ac6e:	f104 0919 	add.w	r9, r4, #25
 800ac72:	e7f4      	b.n	800ac5e <_printf_float+0x43e>

0800ac74 <_printf_common>:
 800ac74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac78:	4616      	mov	r6, r2
 800ac7a:	4698      	mov	r8, r3
 800ac7c:	688a      	ldr	r2, [r1, #8]
 800ac7e:	690b      	ldr	r3, [r1, #16]
 800ac80:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ac84:	4293      	cmp	r3, r2
 800ac86:	bfb8      	it	lt
 800ac88:	4613      	movlt	r3, r2
 800ac8a:	6033      	str	r3, [r6, #0]
 800ac8c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ac90:	4607      	mov	r7, r0
 800ac92:	460c      	mov	r4, r1
 800ac94:	b10a      	cbz	r2, 800ac9a <_printf_common+0x26>
 800ac96:	3301      	adds	r3, #1
 800ac98:	6033      	str	r3, [r6, #0]
 800ac9a:	6823      	ldr	r3, [r4, #0]
 800ac9c:	0699      	lsls	r1, r3, #26
 800ac9e:	bf42      	ittt	mi
 800aca0:	6833      	ldrmi	r3, [r6, #0]
 800aca2:	3302      	addmi	r3, #2
 800aca4:	6033      	strmi	r3, [r6, #0]
 800aca6:	6825      	ldr	r5, [r4, #0]
 800aca8:	f015 0506 	ands.w	r5, r5, #6
 800acac:	d106      	bne.n	800acbc <_printf_common+0x48>
 800acae:	f104 0a19 	add.w	sl, r4, #25
 800acb2:	68e3      	ldr	r3, [r4, #12]
 800acb4:	6832      	ldr	r2, [r6, #0]
 800acb6:	1a9b      	subs	r3, r3, r2
 800acb8:	42ab      	cmp	r3, r5
 800acba:	dc26      	bgt.n	800ad0a <_printf_common+0x96>
 800acbc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800acc0:	6822      	ldr	r2, [r4, #0]
 800acc2:	3b00      	subs	r3, #0
 800acc4:	bf18      	it	ne
 800acc6:	2301      	movne	r3, #1
 800acc8:	0692      	lsls	r2, r2, #26
 800acca:	d42b      	bmi.n	800ad24 <_printf_common+0xb0>
 800accc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800acd0:	4641      	mov	r1, r8
 800acd2:	4638      	mov	r0, r7
 800acd4:	47c8      	blx	r9
 800acd6:	3001      	adds	r0, #1
 800acd8:	d01e      	beq.n	800ad18 <_printf_common+0xa4>
 800acda:	6823      	ldr	r3, [r4, #0]
 800acdc:	6922      	ldr	r2, [r4, #16]
 800acde:	f003 0306 	and.w	r3, r3, #6
 800ace2:	2b04      	cmp	r3, #4
 800ace4:	bf02      	ittt	eq
 800ace6:	68e5      	ldreq	r5, [r4, #12]
 800ace8:	6833      	ldreq	r3, [r6, #0]
 800acea:	1aed      	subeq	r5, r5, r3
 800acec:	68a3      	ldr	r3, [r4, #8]
 800acee:	bf0c      	ite	eq
 800acf0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800acf4:	2500      	movne	r5, #0
 800acf6:	4293      	cmp	r3, r2
 800acf8:	bfc4      	itt	gt
 800acfa:	1a9b      	subgt	r3, r3, r2
 800acfc:	18ed      	addgt	r5, r5, r3
 800acfe:	2600      	movs	r6, #0
 800ad00:	341a      	adds	r4, #26
 800ad02:	42b5      	cmp	r5, r6
 800ad04:	d11a      	bne.n	800ad3c <_printf_common+0xc8>
 800ad06:	2000      	movs	r0, #0
 800ad08:	e008      	b.n	800ad1c <_printf_common+0xa8>
 800ad0a:	2301      	movs	r3, #1
 800ad0c:	4652      	mov	r2, sl
 800ad0e:	4641      	mov	r1, r8
 800ad10:	4638      	mov	r0, r7
 800ad12:	47c8      	blx	r9
 800ad14:	3001      	adds	r0, #1
 800ad16:	d103      	bne.n	800ad20 <_printf_common+0xac>
 800ad18:	f04f 30ff 	mov.w	r0, #4294967295
 800ad1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad20:	3501      	adds	r5, #1
 800ad22:	e7c6      	b.n	800acb2 <_printf_common+0x3e>
 800ad24:	18e1      	adds	r1, r4, r3
 800ad26:	1c5a      	adds	r2, r3, #1
 800ad28:	2030      	movs	r0, #48	@ 0x30
 800ad2a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ad2e:	4422      	add	r2, r4
 800ad30:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ad34:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ad38:	3302      	adds	r3, #2
 800ad3a:	e7c7      	b.n	800accc <_printf_common+0x58>
 800ad3c:	2301      	movs	r3, #1
 800ad3e:	4622      	mov	r2, r4
 800ad40:	4641      	mov	r1, r8
 800ad42:	4638      	mov	r0, r7
 800ad44:	47c8      	blx	r9
 800ad46:	3001      	adds	r0, #1
 800ad48:	d0e6      	beq.n	800ad18 <_printf_common+0xa4>
 800ad4a:	3601      	adds	r6, #1
 800ad4c:	e7d9      	b.n	800ad02 <_printf_common+0x8e>
	...

0800ad50 <_printf_i>:
 800ad50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ad54:	7e0f      	ldrb	r7, [r1, #24]
 800ad56:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ad58:	2f78      	cmp	r7, #120	@ 0x78
 800ad5a:	4691      	mov	r9, r2
 800ad5c:	4680      	mov	r8, r0
 800ad5e:	460c      	mov	r4, r1
 800ad60:	469a      	mov	sl, r3
 800ad62:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ad66:	d807      	bhi.n	800ad78 <_printf_i+0x28>
 800ad68:	2f62      	cmp	r7, #98	@ 0x62
 800ad6a:	d80a      	bhi.n	800ad82 <_printf_i+0x32>
 800ad6c:	2f00      	cmp	r7, #0
 800ad6e:	f000 80d2 	beq.w	800af16 <_printf_i+0x1c6>
 800ad72:	2f58      	cmp	r7, #88	@ 0x58
 800ad74:	f000 80b9 	beq.w	800aeea <_printf_i+0x19a>
 800ad78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ad7c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ad80:	e03a      	b.n	800adf8 <_printf_i+0xa8>
 800ad82:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ad86:	2b15      	cmp	r3, #21
 800ad88:	d8f6      	bhi.n	800ad78 <_printf_i+0x28>
 800ad8a:	a101      	add	r1, pc, #4	@ (adr r1, 800ad90 <_printf_i+0x40>)
 800ad8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ad90:	0800ade9 	.word	0x0800ade9
 800ad94:	0800adfd 	.word	0x0800adfd
 800ad98:	0800ad79 	.word	0x0800ad79
 800ad9c:	0800ad79 	.word	0x0800ad79
 800ada0:	0800ad79 	.word	0x0800ad79
 800ada4:	0800ad79 	.word	0x0800ad79
 800ada8:	0800adfd 	.word	0x0800adfd
 800adac:	0800ad79 	.word	0x0800ad79
 800adb0:	0800ad79 	.word	0x0800ad79
 800adb4:	0800ad79 	.word	0x0800ad79
 800adb8:	0800ad79 	.word	0x0800ad79
 800adbc:	0800aefd 	.word	0x0800aefd
 800adc0:	0800ae27 	.word	0x0800ae27
 800adc4:	0800aeb7 	.word	0x0800aeb7
 800adc8:	0800ad79 	.word	0x0800ad79
 800adcc:	0800ad79 	.word	0x0800ad79
 800add0:	0800af1f 	.word	0x0800af1f
 800add4:	0800ad79 	.word	0x0800ad79
 800add8:	0800ae27 	.word	0x0800ae27
 800addc:	0800ad79 	.word	0x0800ad79
 800ade0:	0800ad79 	.word	0x0800ad79
 800ade4:	0800aebf 	.word	0x0800aebf
 800ade8:	6833      	ldr	r3, [r6, #0]
 800adea:	1d1a      	adds	r2, r3, #4
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	6032      	str	r2, [r6, #0]
 800adf0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800adf4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800adf8:	2301      	movs	r3, #1
 800adfa:	e09d      	b.n	800af38 <_printf_i+0x1e8>
 800adfc:	6833      	ldr	r3, [r6, #0]
 800adfe:	6820      	ldr	r0, [r4, #0]
 800ae00:	1d19      	adds	r1, r3, #4
 800ae02:	6031      	str	r1, [r6, #0]
 800ae04:	0606      	lsls	r6, r0, #24
 800ae06:	d501      	bpl.n	800ae0c <_printf_i+0xbc>
 800ae08:	681d      	ldr	r5, [r3, #0]
 800ae0a:	e003      	b.n	800ae14 <_printf_i+0xc4>
 800ae0c:	0645      	lsls	r5, r0, #25
 800ae0e:	d5fb      	bpl.n	800ae08 <_printf_i+0xb8>
 800ae10:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ae14:	2d00      	cmp	r5, #0
 800ae16:	da03      	bge.n	800ae20 <_printf_i+0xd0>
 800ae18:	232d      	movs	r3, #45	@ 0x2d
 800ae1a:	426d      	negs	r5, r5
 800ae1c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ae20:	4859      	ldr	r0, [pc, #356]	@ (800af88 <_printf_i+0x238>)
 800ae22:	230a      	movs	r3, #10
 800ae24:	e011      	b.n	800ae4a <_printf_i+0xfa>
 800ae26:	6821      	ldr	r1, [r4, #0]
 800ae28:	6833      	ldr	r3, [r6, #0]
 800ae2a:	0608      	lsls	r0, r1, #24
 800ae2c:	f853 5b04 	ldr.w	r5, [r3], #4
 800ae30:	d402      	bmi.n	800ae38 <_printf_i+0xe8>
 800ae32:	0649      	lsls	r1, r1, #25
 800ae34:	bf48      	it	mi
 800ae36:	b2ad      	uxthmi	r5, r5
 800ae38:	2f6f      	cmp	r7, #111	@ 0x6f
 800ae3a:	4853      	ldr	r0, [pc, #332]	@ (800af88 <_printf_i+0x238>)
 800ae3c:	6033      	str	r3, [r6, #0]
 800ae3e:	bf14      	ite	ne
 800ae40:	230a      	movne	r3, #10
 800ae42:	2308      	moveq	r3, #8
 800ae44:	2100      	movs	r1, #0
 800ae46:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ae4a:	6866      	ldr	r6, [r4, #4]
 800ae4c:	60a6      	str	r6, [r4, #8]
 800ae4e:	2e00      	cmp	r6, #0
 800ae50:	bfa2      	ittt	ge
 800ae52:	6821      	ldrge	r1, [r4, #0]
 800ae54:	f021 0104 	bicge.w	r1, r1, #4
 800ae58:	6021      	strge	r1, [r4, #0]
 800ae5a:	b90d      	cbnz	r5, 800ae60 <_printf_i+0x110>
 800ae5c:	2e00      	cmp	r6, #0
 800ae5e:	d04b      	beq.n	800aef8 <_printf_i+0x1a8>
 800ae60:	4616      	mov	r6, r2
 800ae62:	fbb5 f1f3 	udiv	r1, r5, r3
 800ae66:	fb03 5711 	mls	r7, r3, r1, r5
 800ae6a:	5dc7      	ldrb	r7, [r0, r7]
 800ae6c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ae70:	462f      	mov	r7, r5
 800ae72:	42bb      	cmp	r3, r7
 800ae74:	460d      	mov	r5, r1
 800ae76:	d9f4      	bls.n	800ae62 <_printf_i+0x112>
 800ae78:	2b08      	cmp	r3, #8
 800ae7a:	d10b      	bne.n	800ae94 <_printf_i+0x144>
 800ae7c:	6823      	ldr	r3, [r4, #0]
 800ae7e:	07df      	lsls	r7, r3, #31
 800ae80:	d508      	bpl.n	800ae94 <_printf_i+0x144>
 800ae82:	6923      	ldr	r3, [r4, #16]
 800ae84:	6861      	ldr	r1, [r4, #4]
 800ae86:	4299      	cmp	r1, r3
 800ae88:	bfde      	ittt	le
 800ae8a:	2330      	movle	r3, #48	@ 0x30
 800ae8c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ae90:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ae94:	1b92      	subs	r2, r2, r6
 800ae96:	6122      	str	r2, [r4, #16]
 800ae98:	f8cd a000 	str.w	sl, [sp]
 800ae9c:	464b      	mov	r3, r9
 800ae9e:	aa03      	add	r2, sp, #12
 800aea0:	4621      	mov	r1, r4
 800aea2:	4640      	mov	r0, r8
 800aea4:	f7ff fee6 	bl	800ac74 <_printf_common>
 800aea8:	3001      	adds	r0, #1
 800aeaa:	d14a      	bne.n	800af42 <_printf_i+0x1f2>
 800aeac:	f04f 30ff 	mov.w	r0, #4294967295
 800aeb0:	b004      	add	sp, #16
 800aeb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aeb6:	6823      	ldr	r3, [r4, #0]
 800aeb8:	f043 0320 	orr.w	r3, r3, #32
 800aebc:	6023      	str	r3, [r4, #0]
 800aebe:	4833      	ldr	r0, [pc, #204]	@ (800af8c <_printf_i+0x23c>)
 800aec0:	2778      	movs	r7, #120	@ 0x78
 800aec2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800aec6:	6823      	ldr	r3, [r4, #0]
 800aec8:	6831      	ldr	r1, [r6, #0]
 800aeca:	061f      	lsls	r7, r3, #24
 800aecc:	f851 5b04 	ldr.w	r5, [r1], #4
 800aed0:	d402      	bmi.n	800aed8 <_printf_i+0x188>
 800aed2:	065f      	lsls	r7, r3, #25
 800aed4:	bf48      	it	mi
 800aed6:	b2ad      	uxthmi	r5, r5
 800aed8:	6031      	str	r1, [r6, #0]
 800aeda:	07d9      	lsls	r1, r3, #31
 800aedc:	bf44      	itt	mi
 800aede:	f043 0320 	orrmi.w	r3, r3, #32
 800aee2:	6023      	strmi	r3, [r4, #0]
 800aee4:	b11d      	cbz	r5, 800aeee <_printf_i+0x19e>
 800aee6:	2310      	movs	r3, #16
 800aee8:	e7ac      	b.n	800ae44 <_printf_i+0xf4>
 800aeea:	4827      	ldr	r0, [pc, #156]	@ (800af88 <_printf_i+0x238>)
 800aeec:	e7e9      	b.n	800aec2 <_printf_i+0x172>
 800aeee:	6823      	ldr	r3, [r4, #0]
 800aef0:	f023 0320 	bic.w	r3, r3, #32
 800aef4:	6023      	str	r3, [r4, #0]
 800aef6:	e7f6      	b.n	800aee6 <_printf_i+0x196>
 800aef8:	4616      	mov	r6, r2
 800aefa:	e7bd      	b.n	800ae78 <_printf_i+0x128>
 800aefc:	6833      	ldr	r3, [r6, #0]
 800aefe:	6825      	ldr	r5, [r4, #0]
 800af00:	6961      	ldr	r1, [r4, #20]
 800af02:	1d18      	adds	r0, r3, #4
 800af04:	6030      	str	r0, [r6, #0]
 800af06:	062e      	lsls	r6, r5, #24
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	d501      	bpl.n	800af10 <_printf_i+0x1c0>
 800af0c:	6019      	str	r1, [r3, #0]
 800af0e:	e002      	b.n	800af16 <_printf_i+0x1c6>
 800af10:	0668      	lsls	r0, r5, #25
 800af12:	d5fb      	bpl.n	800af0c <_printf_i+0x1bc>
 800af14:	8019      	strh	r1, [r3, #0]
 800af16:	2300      	movs	r3, #0
 800af18:	6123      	str	r3, [r4, #16]
 800af1a:	4616      	mov	r6, r2
 800af1c:	e7bc      	b.n	800ae98 <_printf_i+0x148>
 800af1e:	6833      	ldr	r3, [r6, #0]
 800af20:	1d1a      	adds	r2, r3, #4
 800af22:	6032      	str	r2, [r6, #0]
 800af24:	681e      	ldr	r6, [r3, #0]
 800af26:	6862      	ldr	r2, [r4, #4]
 800af28:	2100      	movs	r1, #0
 800af2a:	4630      	mov	r0, r6
 800af2c:	f7f5 f970 	bl	8000210 <memchr>
 800af30:	b108      	cbz	r0, 800af36 <_printf_i+0x1e6>
 800af32:	1b80      	subs	r0, r0, r6
 800af34:	6060      	str	r0, [r4, #4]
 800af36:	6863      	ldr	r3, [r4, #4]
 800af38:	6123      	str	r3, [r4, #16]
 800af3a:	2300      	movs	r3, #0
 800af3c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800af40:	e7aa      	b.n	800ae98 <_printf_i+0x148>
 800af42:	6923      	ldr	r3, [r4, #16]
 800af44:	4632      	mov	r2, r6
 800af46:	4649      	mov	r1, r9
 800af48:	4640      	mov	r0, r8
 800af4a:	47d0      	blx	sl
 800af4c:	3001      	adds	r0, #1
 800af4e:	d0ad      	beq.n	800aeac <_printf_i+0x15c>
 800af50:	6823      	ldr	r3, [r4, #0]
 800af52:	079b      	lsls	r3, r3, #30
 800af54:	d413      	bmi.n	800af7e <_printf_i+0x22e>
 800af56:	68e0      	ldr	r0, [r4, #12]
 800af58:	9b03      	ldr	r3, [sp, #12]
 800af5a:	4298      	cmp	r0, r3
 800af5c:	bfb8      	it	lt
 800af5e:	4618      	movlt	r0, r3
 800af60:	e7a6      	b.n	800aeb0 <_printf_i+0x160>
 800af62:	2301      	movs	r3, #1
 800af64:	4632      	mov	r2, r6
 800af66:	4649      	mov	r1, r9
 800af68:	4640      	mov	r0, r8
 800af6a:	47d0      	blx	sl
 800af6c:	3001      	adds	r0, #1
 800af6e:	d09d      	beq.n	800aeac <_printf_i+0x15c>
 800af70:	3501      	adds	r5, #1
 800af72:	68e3      	ldr	r3, [r4, #12]
 800af74:	9903      	ldr	r1, [sp, #12]
 800af76:	1a5b      	subs	r3, r3, r1
 800af78:	42ab      	cmp	r3, r5
 800af7a:	dcf2      	bgt.n	800af62 <_printf_i+0x212>
 800af7c:	e7eb      	b.n	800af56 <_printf_i+0x206>
 800af7e:	2500      	movs	r5, #0
 800af80:	f104 0619 	add.w	r6, r4, #25
 800af84:	e7f5      	b.n	800af72 <_printf_i+0x222>
 800af86:	bf00      	nop
 800af88:	0800d43a 	.word	0x0800d43a
 800af8c:	0800d44b 	.word	0x0800d44b

0800af90 <std>:
 800af90:	2300      	movs	r3, #0
 800af92:	b510      	push	{r4, lr}
 800af94:	4604      	mov	r4, r0
 800af96:	e9c0 3300 	strd	r3, r3, [r0]
 800af9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800af9e:	6083      	str	r3, [r0, #8]
 800afa0:	8181      	strh	r1, [r0, #12]
 800afa2:	6643      	str	r3, [r0, #100]	@ 0x64
 800afa4:	81c2      	strh	r2, [r0, #14]
 800afa6:	6183      	str	r3, [r0, #24]
 800afa8:	4619      	mov	r1, r3
 800afaa:	2208      	movs	r2, #8
 800afac:	305c      	adds	r0, #92	@ 0x5c
 800afae:	f000 f914 	bl	800b1da <memset>
 800afb2:	4b0d      	ldr	r3, [pc, #52]	@ (800afe8 <std+0x58>)
 800afb4:	6263      	str	r3, [r4, #36]	@ 0x24
 800afb6:	4b0d      	ldr	r3, [pc, #52]	@ (800afec <std+0x5c>)
 800afb8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800afba:	4b0d      	ldr	r3, [pc, #52]	@ (800aff0 <std+0x60>)
 800afbc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800afbe:	4b0d      	ldr	r3, [pc, #52]	@ (800aff4 <std+0x64>)
 800afc0:	6323      	str	r3, [r4, #48]	@ 0x30
 800afc2:	4b0d      	ldr	r3, [pc, #52]	@ (800aff8 <std+0x68>)
 800afc4:	6224      	str	r4, [r4, #32]
 800afc6:	429c      	cmp	r4, r3
 800afc8:	d006      	beq.n	800afd8 <std+0x48>
 800afca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800afce:	4294      	cmp	r4, r2
 800afd0:	d002      	beq.n	800afd8 <std+0x48>
 800afd2:	33d0      	adds	r3, #208	@ 0xd0
 800afd4:	429c      	cmp	r4, r3
 800afd6:	d105      	bne.n	800afe4 <std+0x54>
 800afd8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800afdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800afe0:	f000 b978 	b.w	800b2d4 <__retarget_lock_init_recursive>
 800afe4:	bd10      	pop	{r4, pc}
 800afe6:	bf00      	nop
 800afe8:	0800b155 	.word	0x0800b155
 800afec:	0800b177 	.word	0x0800b177
 800aff0:	0800b1af 	.word	0x0800b1af
 800aff4:	0800b1d3 	.word	0x0800b1d3
 800aff8:	20002140 	.word	0x20002140

0800affc <stdio_exit_handler>:
 800affc:	4a02      	ldr	r2, [pc, #8]	@ (800b008 <stdio_exit_handler+0xc>)
 800affe:	4903      	ldr	r1, [pc, #12]	@ (800b00c <stdio_exit_handler+0x10>)
 800b000:	4803      	ldr	r0, [pc, #12]	@ (800b010 <stdio_exit_handler+0x14>)
 800b002:	f000 b869 	b.w	800b0d8 <_fwalk_sglue>
 800b006:	bf00      	nop
 800b008:	2000010c 	.word	0x2000010c
 800b00c:	0800cc35 	.word	0x0800cc35
 800b010:	2000011c 	.word	0x2000011c

0800b014 <cleanup_stdio>:
 800b014:	6841      	ldr	r1, [r0, #4]
 800b016:	4b0c      	ldr	r3, [pc, #48]	@ (800b048 <cleanup_stdio+0x34>)
 800b018:	4299      	cmp	r1, r3
 800b01a:	b510      	push	{r4, lr}
 800b01c:	4604      	mov	r4, r0
 800b01e:	d001      	beq.n	800b024 <cleanup_stdio+0x10>
 800b020:	f001 fe08 	bl	800cc34 <_fflush_r>
 800b024:	68a1      	ldr	r1, [r4, #8]
 800b026:	4b09      	ldr	r3, [pc, #36]	@ (800b04c <cleanup_stdio+0x38>)
 800b028:	4299      	cmp	r1, r3
 800b02a:	d002      	beq.n	800b032 <cleanup_stdio+0x1e>
 800b02c:	4620      	mov	r0, r4
 800b02e:	f001 fe01 	bl	800cc34 <_fflush_r>
 800b032:	68e1      	ldr	r1, [r4, #12]
 800b034:	4b06      	ldr	r3, [pc, #24]	@ (800b050 <cleanup_stdio+0x3c>)
 800b036:	4299      	cmp	r1, r3
 800b038:	d004      	beq.n	800b044 <cleanup_stdio+0x30>
 800b03a:	4620      	mov	r0, r4
 800b03c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b040:	f001 bdf8 	b.w	800cc34 <_fflush_r>
 800b044:	bd10      	pop	{r4, pc}
 800b046:	bf00      	nop
 800b048:	20002140 	.word	0x20002140
 800b04c:	200021a8 	.word	0x200021a8
 800b050:	20002210 	.word	0x20002210

0800b054 <global_stdio_init.part.0>:
 800b054:	b510      	push	{r4, lr}
 800b056:	4b0b      	ldr	r3, [pc, #44]	@ (800b084 <global_stdio_init.part.0+0x30>)
 800b058:	4c0b      	ldr	r4, [pc, #44]	@ (800b088 <global_stdio_init.part.0+0x34>)
 800b05a:	4a0c      	ldr	r2, [pc, #48]	@ (800b08c <global_stdio_init.part.0+0x38>)
 800b05c:	601a      	str	r2, [r3, #0]
 800b05e:	4620      	mov	r0, r4
 800b060:	2200      	movs	r2, #0
 800b062:	2104      	movs	r1, #4
 800b064:	f7ff ff94 	bl	800af90 <std>
 800b068:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b06c:	2201      	movs	r2, #1
 800b06e:	2109      	movs	r1, #9
 800b070:	f7ff ff8e 	bl	800af90 <std>
 800b074:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b078:	2202      	movs	r2, #2
 800b07a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b07e:	2112      	movs	r1, #18
 800b080:	f7ff bf86 	b.w	800af90 <std>
 800b084:	20002278 	.word	0x20002278
 800b088:	20002140 	.word	0x20002140
 800b08c:	0800affd 	.word	0x0800affd

0800b090 <__sfp_lock_acquire>:
 800b090:	4801      	ldr	r0, [pc, #4]	@ (800b098 <__sfp_lock_acquire+0x8>)
 800b092:	f000 b920 	b.w	800b2d6 <__retarget_lock_acquire_recursive>
 800b096:	bf00      	nop
 800b098:	20002281 	.word	0x20002281

0800b09c <__sfp_lock_release>:
 800b09c:	4801      	ldr	r0, [pc, #4]	@ (800b0a4 <__sfp_lock_release+0x8>)
 800b09e:	f000 b91b 	b.w	800b2d8 <__retarget_lock_release_recursive>
 800b0a2:	bf00      	nop
 800b0a4:	20002281 	.word	0x20002281

0800b0a8 <__sinit>:
 800b0a8:	b510      	push	{r4, lr}
 800b0aa:	4604      	mov	r4, r0
 800b0ac:	f7ff fff0 	bl	800b090 <__sfp_lock_acquire>
 800b0b0:	6a23      	ldr	r3, [r4, #32]
 800b0b2:	b11b      	cbz	r3, 800b0bc <__sinit+0x14>
 800b0b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b0b8:	f7ff bff0 	b.w	800b09c <__sfp_lock_release>
 800b0bc:	4b04      	ldr	r3, [pc, #16]	@ (800b0d0 <__sinit+0x28>)
 800b0be:	6223      	str	r3, [r4, #32]
 800b0c0:	4b04      	ldr	r3, [pc, #16]	@ (800b0d4 <__sinit+0x2c>)
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d1f5      	bne.n	800b0b4 <__sinit+0xc>
 800b0c8:	f7ff ffc4 	bl	800b054 <global_stdio_init.part.0>
 800b0cc:	e7f2      	b.n	800b0b4 <__sinit+0xc>
 800b0ce:	bf00      	nop
 800b0d0:	0800b015 	.word	0x0800b015
 800b0d4:	20002278 	.word	0x20002278

0800b0d8 <_fwalk_sglue>:
 800b0d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b0dc:	4607      	mov	r7, r0
 800b0de:	4688      	mov	r8, r1
 800b0e0:	4614      	mov	r4, r2
 800b0e2:	2600      	movs	r6, #0
 800b0e4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b0e8:	f1b9 0901 	subs.w	r9, r9, #1
 800b0ec:	d505      	bpl.n	800b0fa <_fwalk_sglue+0x22>
 800b0ee:	6824      	ldr	r4, [r4, #0]
 800b0f0:	2c00      	cmp	r4, #0
 800b0f2:	d1f7      	bne.n	800b0e4 <_fwalk_sglue+0xc>
 800b0f4:	4630      	mov	r0, r6
 800b0f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b0fa:	89ab      	ldrh	r3, [r5, #12]
 800b0fc:	2b01      	cmp	r3, #1
 800b0fe:	d907      	bls.n	800b110 <_fwalk_sglue+0x38>
 800b100:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b104:	3301      	adds	r3, #1
 800b106:	d003      	beq.n	800b110 <_fwalk_sglue+0x38>
 800b108:	4629      	mov	r1, r5
 800b10a:	4638      	mov	r0, r7
 800b10c:	47c0      	blx	r8
 800b10e:	4306      	orrs	r6, r0
 800b110:	3568      	adds	r5, #104	@ 0x68
 800b112:	e7e9      	b.n	800b0e8 <_fwalk_sglue+0x10>

0800b114 <siprintf>:
 800b114:	b40e      	push	{r1, r2, r3}
 800b116:	b500      	push	{lr}
 800b118:	b09c      	sub	sp, #112	@ 0x70
 800b11a:	ab1d      	add	r3, sp, #116	@ 0x74
 800b11c:	9002      	str	r0, [sp, #8]
 800b11e:	9006      	str	r0, [sp, #24]
 800b120:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b124:	4809      	ldr	r0, [pc, #36]	@ (800b14c <siprintf+0x38>)
 800b126:	9107      	str	r1, [sp, #28]
 800b128:	9104      	str	r1, [sp, #16]
 800b12a:	4909      	ldr	r1, [pc, #36]	@ (800b150 <siprintf+0x3c>)
 800b12c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b130:	9105      	str	r1, [sp, #20]
 800b132:	6800      	ldr	r0, [r0, #0]
 800b134:	9301      	str	r3, [sp, #4]
 800b136:	a902      	add	r1, sp, #8
 800b138:	f001 fbfc 	bl	800c934 <_svfiprintf_r>
 800b13c:	9b02      	ldr	r3, [sp, #8]
 800b13e:	2200      	movs	r2, #0
 800b140:	701a      	strb	r2, [r3, #0]
 800b142:	b01c      	add	sp, #112	@ 0x70
 800b144:	f85d eb04 	ldr.w	lr, [sp], #4
 800b148:	b003      	add	sp, #12
 800b14a:	4770      	bx	lr
 800b14c:	20000118 	.word	0x20000118
 800b150:	ffff0208 	.word	0xffff0208

0800b154 <__sread>:
 800b154:	b510      	push	{r4, lr}
 800b156:	460c      	mov	r4, r1
 800b158:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b15c:	f000 f86c 	bl	800b238 <_read_r>
 800b160:	2800      	cmp	r0, #0
 800b162:	bfab      	itete	ge
 800b164:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b166:	89a3      	ldrhlt	r3, [r4, #12]
 800b168:	181b      	addge	r3, r3, r0
 800b16a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b16e:	bfac      	ite	ge
 800b170:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b172:	81a3      	strhlt	r3, [r4, #12]
 800b174:	bd10      	pop	{r4, pc}

0800b176 <__swrite>:
 800b176:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b17a:	461f      	mov	r7, r3
 800b17c:	898b      	ldrh	r3, [r1, #12]
 800b17e:	05db      	lsls	r3, r3, #23
 800b180:	4605      	mov	r5, r0
 800b182:	460c      	mov	r4, r1
 800b184:	4616      	mov	r6, r2
 800b186:	d505      	bpl.n	800b194 <__swrite+0x1e>
 800b188:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b18c:	2302      	movs	r3, #2
 800b18e:	2200      	movs	r2, #0
 800b190:	f000 f840 	bl	800b214 <_lseek_r>
 800b194:	89a3      	ldrh	r3, [r4, #12]
 800b196:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b19a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b19e:	81a3      	strh	r3, [r4, #12]
 800b1a0:	4632      	mov	r2, r6
 800b1a2:	463b      	mov	r3, r7
 800b1a4:	4628      	mov	r0, r5
 800b1a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b1aa:	f000 b857 	b.w	800b25c <_write_r>

0800b1ae <__sseek>:
 800b1ae:	b510      	push	{r4, lr}
 800b1b0:	460c      	mov	r4, r1
 800b1b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1b6:	f000 f82d 	bl	800b214 <_lseek_r>
 800b1ba:	1c43      	adds	r3, r0, #1
 800b1bc:	89a3      	ldrh	r3, [r4, #12]
 800b1be:	bf15      	itete	ne
 800b1c0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b1c2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b1c6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b1ca:	81a3      	strheq	r3, [r4, #12]
 800b1cc:	bf18      	it	ne
 800b1ce:	81a3      	strhne	r3, [r4, #12]
 800b1d0:	bd10      	pop	{r4, pc}

0800b1d2 <__sclose>:
 800b1d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1d6:	f000 b80d 	b.w	800b1f4 <_close_r>

0800b1da <memset>:
 800b1da:	4402      	add	r2, r0
 800b1dc:	4603      	mov	r3, r0
 800b1de:	4293      	cmp	r3, r2
 800b1e0:	d100      	bne.n	800b1e4 <memset+0xa>
 800b1e2:	4770      	bx	lr
 800b1e4:	f803 1b01 	strb.w	r1, [r3], #1
 800b1e8:	e7f9      	b.n	800b1de <memset+0x4>
	...

0800b1ec <_localeconv_r>:
 800b1ec:	4800      	ldr	r0, [pc, #0]	@ (800b1f0 <_localeconv_r+0x4>)
 800b1ee:	4770      	bx	lr
 800b1f0:	20000258 	.word	0x20000258

0800b1f4 <_close_r>:
 800b1f4:	b538      	push	{r3, r4, r5, lr}
 800b1f6:	4d06      	ldr	r5, [pc, #24]	@ (800b210 <_close_r+0x1c>)
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	4604      	mov	r4, r0
 800b1fc:	4608      	mov	r0, r1
 800b1fe:	602b      	str	r3, [r5, #0]
 800b200:	f7f6 fb00 	bl	8001804 <_close>
 800b204:	1c43      	adds	r3, r0, #1
 800b206:	d102      	bne.n	800b20e <_close_r+0x1a>
 800b208:	682b      	ldr	r3, [r5, #0]
 800b20a:	b103      	cbz	r3, 800b20e <_close_r+0x1a>
 800b20c:	6023      	str	r3, [r4, #0]
 800b20e:	bd38      	pop	{r3, r4, r5, pc}
 800b210:	2000227c 	.word	0x2000227c

0800b214 <_lseek_r>:
 800b214:	b538      	push	{r3, r4, r5, lr}
 800b216:	4d07      	ldr	r5, [pc, #28]	@ (800b234 <_lseek_r+0x20>)
 800b218:	4604      	mov	r4, r0
 800b21a:	4608      	mov	r0, r1
 800b21c:	4611      	mov	r1, r2
 800b21e:	2200      	movs	r2, #0
 800b220:	602a      	str	r2, [r5, #0]
 800b222:	461a      	mov	r2, r3
 800b224:	f7f6 fb15 	bl	8001852 <_lseek>
 800b228:	1c43      	adds	r3, r0, #1
 800b22a:	d102      	bne.n	800b232 <_lseek_r+0x1e>
 800b22c:	682b      	ldr	r3, [r5, #0]
 800b22e:	b103      	cbz	r3, 800b232 <_lseek_r+0x1e>
 800b230:	6023      	str	r3, [r4, #0]
 800b232:	bd38      	pop	{r3, r4, r5, pc}
 800b234:	2000227c 	.word	0x2000227c

0800b238 <_read_r>:
 800b238:	b538      	push	{r3, r4, r5, lr}
 800b23a:	4d07      	ldr	r5, [pc, #28]	@ (800b258 <_read_r+0x20>)
 800b23c:	4604      	mov	r4, r0
 800b23e:	4608      	mov	r0, r1
 800b240:	4611      	mov	r1, r2
 800b242:	2200      	movs	r2, #0
 800b244:	602a      	str	r2, [r5, #0]
 800b246:	461a      	mov	r2, r3
 800b248:	f7f6 faa3 	bl	8001792 <_read>
 800b24c:	1c43      	adds	r3, r0, #1
 800b24e:	d102      	bne.n	800b256 <_read_r+0x1e>
 800b250:	682b      	ldr	r3, [r5, #0]
 800b252:	b103      	cbz	r3, 800b256 <_read_r+0x1e>
 800b254:	6023      	str	r3, [r4, #0]
 800b256:	bd38      	pop	{r3, r4, r5, pc}
 800b258:	2000227c 	.word	0x2000227c

0800b25c <_write_r>:
 800b25c:	b538      	push	{r3, r4, r5, lr}
 800b25e:	4d07      	ldr	r5, [pc, #28]	@ (800b27c <_write_r+0x20>)
 800b260:	4604      	mov	r4, r0
 800b262:	4608      	mov	r0, r1
 800b264:	4611      	mov	r1, r2
 800b266:	2200      	movs	r2, #0
 800b268:	602a      	str	r2, [r5, #0]
 800b26a:	461a      	mov	r2, r3
 800b26c:	f7f6 faae 	bl	80017cc <_write>
 800b270:	1c43      	adds	r3, r0, #1
 800b272:	d102      	bne.n	800b27a <_write_r+0x1e>
 800b274:	682b      	ldr	r3, [r5, #0]
 800b276:	b103      	cbz	r3, 800b27a <_write_r+0x1e>
 800b278:	6023      	str	r3, [r4, #0]
 800b27a:	bd38      	pop	{r3, r4, r5, pc}
 800b27c:	2000227c 	.word	0x2000227c

0800b280 <__errno>:
 800b280:	4b01      	ldr	r3, [pc, #4]	@ (800b288 <__errno+0x8>)
 800b282:	6818      	ldr	r0, [r3, #0]
 800b284:	4770      	bx	lr
 800b286:	bf00      	nop
 800b288:	20000118 	.word	0x20000118

0800b28c <__libc_init_array>:
 800b28c:	b570      	push	{r4, r5, r6, lr}
 800b28e:	4d0d      	ldr	r5, [pc, #52]	@ (800b2c4 <__libc_init_array+0x38>)
 800b290:	4c0d      	ldr	r4, [pc, #52]	@ (800b2c8 <__libc_init_array+0x3c>)
 800b292:	1b64      	subs	r4, r4, r5
 800b294:	10a4      	asrs	r4, r4, #2
 800b296:	2600      	movs	r6, #0
 800b298:	42a6      	cmp	r6, r4
 800b29a:	d109      	bne.n	800b2b0 <__libc_init_array+0x24>
 800b29c:	4d0b      	ldr	r5, [pc, #44]	@ (800b2cc <__libc_init_array+0x40>)
 800b29e:	4c0c      	ldr	r4, [pc, #48]	@ (800b2d0 <__libc_init_array+0x44>)
 800b2a0:	f002 f866 	bl	800d370 <_init>
 800b2a4:	1b64      	subs	r4, r4, r5
 800b2a6:	10a4      	asrs	r4, r4, #2
 800b2a8:	2600      	movs	r6, #0
 800b2aa:	42a6      	cmp	r6, r4
 800b2ac:	d105      	bne.n	800b2ba <__libc_init_array+0x2e>
 800b2ae:	bd70      	pop	{r4, r5, r6, pc}
 800b2b0:	f855 3b04 	ldr.w	r3, [r5], #4
 800b2b4:	4798      	blx	r3
 800b2b6:	3601      	adds	r6, #1
 800b2b8:	e7ee      	b.n	800b298 <__libc_init_array+0xc>
 800b2ba:	f855 3b04 	ldr.w	r3, [r5], #4
 800b2be:	4798      	blx	r3
 800b2c0:	3601      	adds	r6, #1
 800b2c2:	e7f2      	b.n	800b2aa <__libc_init_array+0x1e>
 800b2c4:	0800d7a0 	.word	0x0800d7a0
 800b2c8:	0800d7a0 	.word	0x0800d7a0
 800b2cc:	0800d7a0 	.word	0x0800d7a0
 800b2d0:	0800d7a4 	.word	0x0800d7a4

0800b2d4 <__retarget_lock_init_recursive>:
 800b2d4:	4770      	bx	lr

0800b2d6 <__retarget_lock_acquire_recursive>:
 800b2d6:	4770      	bx	lr

0800b2d8 <__retarget_lock_release_recursive>:
 800b2d8:	4770      	bx	lr

0800b2da <quorem>:
 800b2da:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2de:	6903      	ldr	r3, [r0, #16]
 800b2e0:	690c      	ldr	r4, [r1, #16]
 800b2e2:	42a3      	cmp	r3, r4
 800b2e4:	4607      	mov	r7, r0
 800b2e6:	db7e      	blt.n	800b3e6 <quorem+0x10c>
 800b2e8:	3c01      	subs	r4, #1
 800b2ea:	f101 0814 	add.w	r8, r1, #20
 800b2ee:	00a3      	lsls	r3, r4, #2
 800b2f0:	f100 0514 	add.w	r5, r0, #20
 800b2f4:	9300      	str	r3, [sp, #0]
 800b2f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b2fa:	9301      	str	r3, [sp, #4]
 800b2fc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b300:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b304:	3301      	adds	r3, #1
 800b306:	429a      	cmp	r2, r3
 800b308:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b30c:	fbb2 f6f3 	udiv	r6, r2, r3
 800b310:	d32e      	bcc.n	800b370 <quorem+0x96>
 800b312:	f04f 0a00 	mov.w	sl, #0
 800b316:	46c4      	mov	ip, r8
 800b318:	46ae      	mov	lr, r5
 800b31a:	46d3      	mov	fp, sl
 800b31c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b320:	b298      	uxth	r0, r3
 800b322:	fb06 a000 	mla	r0, r6, r0, sl
 800b326:	0c02      	lsrs	r2, r0, #16
 800b328:	0c1b      	lsrs	r3, r3, #16
 800b32a:	fb06 2303 	mla	r3, r6, r3, r2
 800b32e:	f8de 2000 	ldr.w	r2, [lr]
 800b332:	b280      	uxth	r0, r0
 800b334:	b292      	uxth	r2, r2
 800b336:	1a12      	subs	r2, r2, r0
 800b338:	445a      	add	r2, fp
 800b33a:	f8de 0000 	ldr.w	r0, [lr]
 800b33e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b342:	b29b      	uxth	r3, r3
 800b344:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b348:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b34c:	b292      	uxth	r2, r2
 800b34e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b352:	45e1      	cmp	r9, ip
 800b354:	f84e 2b04 	str.w	r2, [lr], #4
 800b358:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b35c:	d2de      	bcs.n	800b31c <quorem+0x42>
 800b35e:	9b00      	ldr	r3, [sp, #0]
 800b360:	58eb      	ldr	r3, [r5, r3]
 800b362:	b92b      	cbnz	r3, 800b370 <quorem+0x96>
 800b364:	9b01      	ldr	r3, [sp, #4]
 800b366:	3b04      	subs	r3, #4
 800b368:	429d      	cmp	r5, r3
 800b36a:	461a      	mov	r2, r3
 800b36c:	d32f      	bcc.n	800b3ce <quorem+0xf4>
 800b36e:	613c      	str	r4, [r7, #16]
 800b370:	4638      	mov	r0, r7
 800b372:	f001 f97b 	bl	800c66c <__mcmp>
 800b376:	2800      	cmp	r0, #0
 800b378:	db25      	blt.n	800b3c6 <quorem+0xec>
 800b37a:	4629      	mov	r1, r5
 800b37c:	2000      	movs	r0, #0
 800b37e:	f858 2b04 	ldr.w	r2, [r8], #4
 800b382:	f8d1 c000 	ldr.w	ip, [r1]
 800b386:	fa1f fe82 	uxth.w	lr, r2
 800b38a:	fa1f f38c 	uxth.w	r3, ip
 800b38e:	eba3 030e 	sub.w	r3, r3, lr
 800b392:	4403      	add	r3, r0
 800b394:	0c12      	lsrs	r2, r2, #16
 800b396:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b39a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b39e:	b29b      	uxth	r3, r3
 800b3a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b3a4:	45c1      	cmp	r9, r8
 800b3a6:	f841 3b04 	str.w	r3, [r1], #4
 800b3aa:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b3ae:	d2e6      	bcs.n	800b37e <quorem+0xa4>
 800b3b0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b3b4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b3b8:	b922      	cbnz	r2, 800b3c4 <quorem+0xea>
 800b3ba:	3b04      	subs	r3, #4
 800b3bc:	429d      	cmp	r5, r3
 800b3be:	461a      	mov	r2, r3
 800b3c0:	d30b      	bcc.n	800b3da <quorem+0x100>
 800b3c2:	613c      	str	r4, [r7, #16]
 800b3c4:	3601      	adds	r6, #1
 800b3c6:	4630      	mov	r0, r6
 800b3c8:	b003      	add	sp, #12
 800b3ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3ce:	6812      	ldr	r2, [r2, #0]
 800b3d0:	3b04      	subs	r3, #4
 800b3d2:	2a00      	cmp	r2, #0
 800b3d4:	d1cb      	bne.n	800b36e <quorem+0x94>
 800b3d6:	3c01      	subs	r4, #1
 800b3d8:	e7c6      	b.n	800b368 <quorem+0x8e>
 800b3da:	6812      	ldr	r2, [r2, #0]
 800b3dc:	3b04      	subs	r3, #4
 800b3de:	2a00      	cmp	r2, #0
 800b3e0:	d1ef      	bne.n	800b3c2 <quorem+0xe8>
 800b3e2:	3c01      	subs	r4, #1
 800b3e4:	e7ea      	b.n	800b3bc <quorem+0xe2>
 800b3e6:	2000      	movs	r0, #0
 800b3e8:	e7ee      	b.n	800b3c8 <quorem+0xee>
 800b3ea:	0000      	movs	r0, r0
 800b3ec:	0000      	movs	r0, r0
	...

0800b3f0 <_dtoa_r>:
 800b3f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3f4:	69c7      	ldr	r7, [r0, #28]
 800b3f6:	b099      	sub	sp, #100	@ 0x64
 800b3f8:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b3fc:	ec55 4b10 	vmov	r4, r5, d0
 800b400:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800b402:	9109      	str	r1, [sp, #36]	@ 0x24
 800b404:	4683      	mov	fp, r0
 800b406:	920e      	str	r2, [sp, #56]	@ 0x38
 800b408:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b40a:	b97f      	cbnz	r7, 800b42c <_dtoa_r+0x3c>
 800b40c:	2010      	movs	r0, #16
 800b40e:	f000 fdfd 	bl	800c00c <malloc>
 800b412:	4602      	mov	r2, r0
 800b414:	f8cb 001c 	str.w	r0, [fp, #28]
 800b418:	b920      	cbnz	r0, 800b424 <_dtoa_r+0x34>
 800b41a:	4ba7      	ldr	r3, [pc, #668]	@ (800b6b8 <_dtoa_r+0x2c8>)
 800b41c:	21ef      	movs	r1, #239	@ 0xef
 800b41e:	48a7      	ldr	r0, [pc, #668]	@ (800b6bc <_dtoa_r+0x2cc>)
 800b420:	f001 fc68 	bl	800ccf4 <__assert_func>
 800b424:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b428:	6007      	str	r7, [r0, #0]
 800b42a:	60c7      	str	r7, [r0, #12]
 800b42c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b430:	6819      	ldr	r1, [r3, #0]
 800b432:	b159      	cbz	r1, 800b44c <_dtoa_r+0x5c>
 800b434:	685a      	ldr	r2, [r3, #4]
 800b436:	604a      	str	r2, [r1, #4]
 800b438:	2301      	movs	r3, #1
 800b43a:	4093      	lsls	r3, r2
 800b43c:	608b      	str	r3, [r1, #8]
 800b43e:	4658      	mov	r0, fp
 800b440:	f000 feda 	bl	800c1f8 <_Bfree>
 800b444:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b448:	2200      	movs	r2, #0
 800b44a:	601a      	str	r2, [r3, #0]
 800b44c:	1e2b      	subs	r3, r5, #0
 800b44e:	bfb9      	ittee	lt
 800b450:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b454:	9303      	strlt	r3, [sp, #12]
 800b456:	2300      	movge	r3, #0
 800b458:	6033      	strge	r3, [r6, #0]
 800b45a:	9f03      	ldr	r7, [sp, #12]
 800b45c:	4b98      	ldr	r3, [pc, #608]	@ (800b6c0 <_dtoa_r+0x2d0>)
 800b45e:	bfbc      	itt	lt
 800b460:	2201      	movlt	r2, #1
 800b462:	6032      	strlt	r2, [r6, #0]
 800b464:	43bb      	bics	r3, r7
 800b466:	d112      	bne.n	800b48e <_dtoa_r+0x9e>
 800b468:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b46a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b46e:	6013      	str	r3, [r2, #0]
 800b470:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b474:	4323      	orrs	r3, r4
 800b476:	f000 854d 	beq.w	800bf14 <_dtoa_r+0xb24>
 800b47a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b47c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800b6d4 <_dtoa_r+0x2e4>
 800b480:	2b00      	cmp	r3, #0
 800b482:	f000 854f 	beq.w	800bf24 <_dtoa_r+0xb34>
 800b486:	f10a 0303 	add.w	r3, sl, #3
 800b48a:	f000 bd49 	b.w	800bf20 <_dtoa_r+0xb30>
 800b48e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b492:	2200      	movs	r2, #0
 800b494:	ec51 0b17 	vmov	r0, r1, d7
 800b498:	2300      	movs	r3, #0
 800b49a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800b49e:	f7f5 fb33 	bl	8000b08 <__aeabi_dcmpeq>
 800b4a2:	4680      	mov	r8, r0
 800b4a4:	b158      	cbz	r0, 800b4be <_dtoa_r+0xce>
 800b4a6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b4a8:	2301      	movs	r3, #1
 800b4aa:	6013      	str	r3, [r2, #0]
 800b4ac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b4ae:	b113      	cbz	r3, 800b4b6 <_dtoa_r+0xc6>
 800b4b0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b4b2:	4b84      	ldr	r3, [pc, #528]	@ (800b6c4 <_dtoa_r+0x2d4>)
 800b4b4:	6013      	str	r3, [r2, #0]
 800b4b6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800b6d8 <_dtoa_r+0x2e8>
 800b4ba:	f000 bd33 	b.w	800bf24 <_dtoa_r+0xb34>
 800b4be:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b4c2:	aa16      	add	r2, sp, #88	@ 0x58
 800b4c4:	a917      	add	r1, sp, #92	@ 0x5c
 800b4c6:	4658      	mov	r0, fp
 800b4c8:	f001 f980 	bl	800c7cc <__d2b>
 800b4cc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b4d0:	4681      	mov	r9, r0
 800b4d2:	2e00      	cmp	r6, #0
 800b4d4:	d077      	beq.n	800b5c6 <_dtoa_r+0x1d6>
 800b4d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b4d8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800b4dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b4e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b4e4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b4e8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b4ec:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b4f0:	4619      	mov	r1, r3
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	4b74      	ldr	r3, [pc, #464]	@ (800b6c8 <_dtoa_r+0x2d8>)
 800b4f6:	f7f4 fee7 	bl	80002c8 <__aeabi_dsub>
 800b4fa:	a369      	add	r3, pc, #420	@ (adr r3, 800b6a0 <_dtoa_r+0x2b0>)
 800b4fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b500:	f7f5 f89a 	bl	8000638 <__aeabi_dmul>
 800b504:	a368      	add	r3, pc, #416	@ (adr r3, 800b6a8 <_dtoa_r+0x2b8>)
 800b506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b50a:	f7f4 fedf 	bl	80002cc <__adddf3>
 800b50e:	4604      	mov	r4, r0
 800b510:	4630      	mov	r0, r6
 800b512:	460d      	mov	r5, r1
 800b514:	f7f5 f826 	bl	8000564 <__aeabi_i2d>
 800b518:	a365      	add	r3, pc, #404	@ (adr r3, 800b6b0 <_dtoa_r+0x2c0>)
 800b51a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b51e:	f7f5 f88b 	bl	8000638 <__aeabi_dmul>
 800b522:	4602      	mov	r2, r0
 800b524:	460b      	mov	r3, r1
 800b526:	4620      	mov	r0, r4
 800b528:	4629      	mov	r1, r5
 800b52a:	f7f4 fecf 	bl	80002cc <__adddf3>
 800b52e:	4604      	mov	r4, r0
 800b530:	460d      	mov	r5, r1
 800b532:	f7f5 fb31 	bl	8000b98 <__aeabi_d2iz>
 800b536:	2200      	movs	r2, #0
 800b538:	4607      	mov	r7, r0
 800b53a:	2300      	movs	r3, #0
 800b53c:	4620      	mov	r0, r4
 800b53e:	4629      	mov	r1, r5
 800b540:	f7f5 faec 	bl	8000b1c <__aeabi_dcmplt>
 800b544:	b140      	cbz	r0, 800b558 <_dtoa_r+0x168>
 800b546:	4638      	mov	r0, r7
 800b548:	f7f5 f80c 	bl	8000564 <__aeabi_i2d>
 800b54c:	4622      	mov	r2, r4
 800b54e:	462b      	mov	r3, r5
 800b550:	f7f5 fada 	bl	8000b08 <__aeabi_dcmpeq>
 800b554:	b900      	cbnz	r0, 800b558 <_dtoa_r+0x168>
 800b556:	3f01      	subs	r7, #1
 800b558:	2f16      	cmp	r7, #22
 800b55a:	d851      	bhi.n	800b600 <_dtoa_r+0x210>
 800b55c:	4b5b      	ldr	r3, [pc, #364]	@ (800b6cc <_dtoa_r+0x2dc>)
 800b55e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b562:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b566:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b56a:	f7f5 fad7 	bl	8000b1c <__aeabi_dcmplt>
 800b56e:	2800      	cmp	r0, #0
 800b570:	d048      	beq.n	800b604 <_dtoa_r+0x214>
 800b572:	3f01      	subs	r7, #1
 800b574:	2300      	movs	r3, #0
 800b576:	9312      	str	r3, [sp, #72]	@ 0x48
 800b578:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b57a:	1b9b      	subs	r3, r3, r6
 800b57c:	1e5a      	subs	r2, r3, #1
 800b57e:	bf44      	itt	mi
 800b580:	f1c3 0801 	rsbmi	r8, r3, #1
 800b584:	2300      	movmi	r3, #0
 800b586:	9208      	str	r2, [sp, #32]
 800b588:	bf54      	ite	pl
 800b58a:	f04f 0800 	movpl.w	r8, #0
 800b58e:	9308      	strmi	r3, [sp, #32]
 800b590:	2f00      	cmp	r7, #0
 800b592:	db39      	blt.n	800b608 <_dtoa_r+0x218>
 800b594:	9b08      	ldr	r3, [sp, #32]
 800b596:	970f      	str	r7, [sp, #60]	@ 0x3c
 800b598:	443b      	add	r3, r7
 800b59a:	9308      	str	r3, [sp, #32]
 800b59c:	2300      	movs	r3, #0
 800b59e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b5a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b5a2:	2b09      	cmp	r3, #9
 800b5a4:	d864      	bhi.n	800b670 <_dtoa_r+0x280>
 800b5a6:	2b05      	cmp	r3, #5
 800b5a8:	bfc4      	itt	gt
 800b5aa:	3b04      	subgt	r3, #4
 800b5ac:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800b5ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b5b0:	f1a3 0302 	sub.w	r3, r3, #2
 800b5b4:	bfcc      	ite	gt
 800b5b6:	2400      	movgt	r4, #0
 800b5b8:	2401      	movle	r4, #1
 800b5ba:	2b03      	cmp	r3, #3
 800b5bc:	d863      	bhi.n	800b686 <_dtoa_r+0x296>
 800b5be:	e8df f003 	tbb	[pc, r3]
 800b5c2:	372a      	.short	0x372a
 800b5c4:	5535      	.short	0x5535
 800b5c6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800b5ca:	441e      	add	r6, r3
 800b5cc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b5d0:	2b20      	cmp	r3, #32
 800b5d2:	bfc1      	itttt	gt
 800b5d4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b5d8:	409f      	lslgt	r7, r3
 800b5da:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b5de:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b5e2:	bfd6      	itet	le
 800b5e4:	f1c3 0320 	rsble	r3, r3, #32
 800b5e8:	ea47 0003 	orrgt.w	r0, r7, r3
 800b5ec:	fa04 f003 	lslle.w	r0, r4, r3
 800b5f0:	f7f4 ffa8 	bl	8000544 <__aeabi_ui2d>
 800b5f4:	2201      	movs	r2, #1
 800b5f6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b5fa:	3e01      	subs	r6, #1
 800b5fc:	9214      	str	r2, [sp, #80]	@ 0x50
 800b5fe:	e777      	b.n	800b4f0 <_dtoa_r+0x100>
 800b600:	2301      	movs	r3, #1
 800b602:	e7b8      	b.n	800b576 <_dtoa_r+0x186>
 800b604:	9012      	str	r0, [sp, #72]	@ 0x48
 800b606:	e7b7      	b.n	800b578 <_dtoa_r+0x188>
 800b608:	427b      	negs	r3, r7
 800b60a:	930a      	str	r3, [sp, #40]	@ 0x28
 800b60c:	2300      	movs	r3, #0
 800b60e:	eba8 0807 	sub.w	r8, r8, r7
 800b612:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b614:	e7c4      	b.n	800b5a0 <_dtoa_r+0x1b0>
 800b616:	2300      	movs	r3, #0
 800b618:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b61a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	dc35      	bgt.n	800b68c <_dtoa_r+0x29c>
 800b620:	2301      	movs	r3, #1
 800b622:	9300      	str	r3, [sp, #0]
 800b624:	9307      	str	r3, [sp, #28]
 800b626:	461a      	mov	r2, r3
 800b628:	920e      	str	r2, [sp, #56]	@ 0x38
 800b62a:	e00b      	b.n	800b644 <_dtoa_r+0x254>
 800b62c:	2301      	movs	r3, #1
 800b62e:	e7f3      	b.n	800b618 <_dtoa_r+0x228>
 800b630:	2300      	movs	r3, #0
 800b632:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b634:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b636:	18fb      	adds	r3, r7, r3
 800b638:	9300      	str	r3, [sp, #0]
 800b63a:	3301      	adds	r3, #1
 800b63c:	2b01      	cmp	r3, #1
 800b63e:	9307      	str	r3, [sp, #28]
 800b640:	bfb8      	it	lt
 800b642:	2301      	movlt	r3, #1
 800b644:	f8db 001c 	ldr.w	r0, [fp, #28]
 800b648:	2100      	movs	r1, #0
 800b64a:	2204      	movs	r2, #4
 800b64c:	f102 0514 	add.w	r5, r2, #20
 800b650:	429d      	cmp	r5, r3
 800b652:	d91f      	bls.n	800b694 <_dtoa_r+0x2a4>
 800b654:	6041      	str	r1, [r0, #4]
 800b656:	4658      	mov	r0, fp
 800b658:	f000 fd8e 	bl	800c178 <_Balloc>
 800b65c:	4682      	mov	sl, r0
 800b65e:	2800      	cmp	r0, #0
 800b660:	d13c      	bne.n	800b6dc <_dtoa_r+0x2ec>
 800b662:	4b1b      	ldr	r3, [pc, #108]	@ (800b6d0 <_dtoa_r+0x2e0>)
 800b664:	4602      	mov	r2, r0
 800b666:	f240 11af 	movw	r1, #431	@ 0x1af
 800b66a:	e6d8      	b.n	800b41e <_dtoa_r+0x2e>
 800b66c:	2301      	movs	r3, #1
 800b66e:	e7e0      	b.n	800b632 <_dtoa_r+0x242>
 800b670:	2401      	movs	r4, #1
 800b672:	2300      	movs	r3, #0
 800b674:	9309      	str	r3, [sp, #36]	@ 0x24
 800b676:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b678:	f04f 33ff 	mov.w	r3, #4294967295
 800b67c:	9300      	str	r3, [sp, #0]
 800b67e:	9307      	str	r3, [sp, #28]
 800b680:	2200      	movs	r2, #0
 800b682:	2312      	movs	r3, #18
 800b684:	e7d0      	b.n	800b628 <_dtoa_r+0x238>
 800b686:	2301      	movs	r3, #1
 800b688:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b68a:	e7f5      	b.n	800b678 <_dtoa_r+0x288>
 800b68c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b68e:	9300      	str	r3, [sp, #0]
 800b690:	9307      	str	r3, [sp, #28]
 800b692:	e7d7      	b.n	800b644 <_dtoa_r+0x254>
 800b694:	3101      	adds	r1, #1
 800b696:	0052      	lsls	r2, r2, #1
 800b698:	e7d8      	b.n	800b64c <_dtoa_r+0x25c>
 800b69a:	bf00      	nop
 800b69c:	f3af 8000 	nop.w
 800b6a0:	636f4361 	.word	0x636f4361
 800b6a4:	3fd287a7 	.word	0x3fd287a7
 800b6a8:	8b60c8b3 	.word	0x8b60c8b3
 800b6ac:	3fc68a28 	.word	0x3fc68a28
 800b6b0:	509f79fb 	.word	0x509f79fb
 800b6b4:	3fd34413 	.word	0x3fd34413
 800b6b8:	0800d469 	.word	0x0800d469
 800b6bc:	0800d480 	.word	0x0800d480
 800b6c0:	7ff00000 	.word	0x7ff00000
 800b6c4:	0800d439 	.word	0x0800d439
 800b6c8:	3ff80000 	.word	0x3ff80000
 800b6cc:	0800d578 	.word	0x0800d578
 800b6d0:	0800d4d8 	.word	0x0800d4d8
 800b6d4:	0800d465 	.word	0x0800d465
 800b6d8:	0800d438 	.word	0x0800d438
 800b6dc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b6e0:	6018      	str	r0, [r3, #0]
 800b6e2:	9b07      	ldr	r3, [sp, #28]
 800b6e4:	2b0e      	cmp	r3, #14
 800b6e6:	f200 80a4 	bhi.w	800b832 <_dtoa_r+0x442>
 800b6ea:	2c00      	cmp	r4, #0
 800b6ec:	f000 80a1 	beq.w	800b832 <_dtoa_r+0x442>
 800b6f0:	2f00      	cmp	r7, #0
 800b6f2:	dd33      	ble.n	800b75c <_dtoa_r+0x36c>
 800b6f4:	4bad      	ldr	r3, [pc, #692]	@ (800b9ac <_dtoa_r+0x5bc>)
 800b6f6:	f007 020f 	and.w	r2, r7, #15
 800b6fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b6fe:	ed93 7b00 	vldr	d7, [r3]
 800b702:	05f8      	lsls	r0, r7, #23
 800b704:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b708:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b70c:	d516      	bpl.n	800b73c <_dtoa_r+0x34c>
 800b70e:	4ba8      	ldr	r3, [pc, #672]	@ (800b9b0 <_dtoa_r+0x5c0>)
 800b710:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b714:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b718:	f7f5 f8b8 	bl	800088c <__aeabi_ddiv>
 800b71c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b720:	f004 040f 	and.w	r4, r4, #15
 800b724:	2603      	movs	r6, #3
 800b726:	4da2      	ldr	r5, [pc, #648]	@ (800b9b0 <_dtoa_r+0x5c0>)
 800b728:	b954      	cbnz	r4, 800b740 <_dtoa_r+0x350>
 800b72a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b72e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b732:	f7f5 f8ab 	bl	800088c <__aeabi_ddiv>
 800b736:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b73a:	e028      	b.n	800b78e <_dtoa_r+0x39e>
 800b73c:	2602      	movs	r6, #2
 800b73e:	e7f2      	b.n	800b726 <_dtoa_r+0x336>
 800b740:	07e1      	lsls	r1, r4, #31
 800b742:	d508      	bpl.n	800b756 <_dtoa_r+0x366>
 800b744:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b748:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b74c:	f7f4 ff74 	bl	8000638 <__aeabi_dmul>
 800b750:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b754:	3601      	adds	r6, #1
 800b756:	1064      	asrs	r4, r4, #1
 800b758:	3508      	adds	r5, #8
 800b75a:	e7e5      	b.n	800b728 <_dtoa_r+0x338>
 800b75c:	f000 80d2 	beq.w	800b904 <_dtoa_r+0x514>
 800b760:	427c      	negs	r4, r7
 800b762:	4b92      	ldr	r3, [pc, #584]	@ (800b9ac <_dtoa_r+0x5bc>)
 800b764:	4d92      	ldr	r5, [pc, #584]	@ (800b9b0 <_dtoa_r+0x5c0>)
 800b766:	f004 020f 	and.w	r2, r4, #15
 800b76a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b76e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b772:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b776:	f7f4 ff5f 	bl	8000638 <__aeabi_dmul>
 800b77a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b77e:	1124      	asrs	r4, r4, #4
 800b780:	2300      	movs	r3, #0
 800b782:	2602      	movs	r6, #2
 800b784:	2c00      	cmp	r4, #0
 800b786:	f040 80b2 	bne.w	800b8ee <_dtoa_r+0x4fe>
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d1d3      	bne.n	800b736 <_dtoa_r+0x346>
 800b78e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b790:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b794:	2b00      	cmp	r3, #0
 800b796:	f000 80b7 	beq.w	800b908 <_dtoa_r+0x518>
 800b79a:	4b86      	ldr	r3, [pc, #536]	@ (800b9b4 <_dtoa_r+0x5c4>)
 800b79c:	2200      	movs	r2, #0
 800b79e:	4620      	mov	r0, r4
 800b7a0:	4629      	mov	r1, r5
 800b7a2:	f7f5 f9bb 	bl	8000b1c <__aeabi_dcmplt>
 800b7a6:	2800      	cmp	r0, #0
 800b7a8:	f000 80ae 	beq.w	800b908 <_dtoa_r+0x518>
 800b7ac:	9b07      	ldr	r3, [sp, #28]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	f000 80aa 	beq.w	800b908 <_dtoa_r+0x518>
 800b7b4:	9b00      	ldr	r3, [sp, #0]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	dd37      	ble.n	800b82a <_dtoa_r+0x43a>
 800b7ba:	1e7b      	subs	r3, r7, #1
 800b7bc:	9304      	str	r3, [sp, #16]
 800b7be:	4620      	mov	r0, r4
 800b7c0:	4b7d      	ldr	r3, [pc, #500]	@ (800b9b8 <_dtoa_r+0x5c8>)
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	4629      	mov	r1, r5
 800b7c6:	f7f4 ff37 	bl	8000638 <__aeabi_dmul>
 800b7ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b7ce:	9c00      	ldr	r4, [sp, #0]
 800b7d0:	3601      	adds	r6, #1
 800b7d2:	4630      	mov	r0, r6
 800b7d4:	f7f4 fec6 	bl	8000564 <__aeabi_i2d>
 800b7d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b7dc:	f7f4 ff2c 	bl	8000638 <__aeabi_dmul>
 800b7e0:	4b76      	ldr	r3, [pc, #472]	@ (800b9bc <_dtoa_r+0x5cc>)
 800b7e2:	2200      	movs	r2, #0
 800b7e4:	f7f4 fd72 	bl	80002cc <__adddf3>
 800b7e8:	4605      	mov	r5, r0
 800b7ea:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b7ee:	2c00      	cmp	r4, #0
 800b7f0:	f040 808d 	bne.w	800b90e <_dtoa_r+0x51e>
 800b7f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b7f8:	4b71      	ldr	r3, [pc, #452]	@ (800b9c0 <_dtoa_r+0x5d0>)
 800b7fa:	2200      	movs	r2, #0
 800b7fc:	f7f4 fd64 	bl	80002c8 <__aeabi_dsub>
 800b800:	4602      	mov	r2, r0
 800b802:	460b      	mov	r3, r1
 800b804:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b808:	462a      	mov	r2, r5
 800b80a:	4633      	mov	r3, r6
 800b80c:	f7f5 f9a4 	bl	8000b58 <__aeabi_dcmpgt>
 800b810:	2800      	cmp	r0, #0
 800b812:	f040 828b 	bne.w	800bd2c <_dtoa_r+0x93c>
 800b816:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b81a:	462a      	mov	r2, r5
 800b81c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b820:	f7f5 f97c 	bl	8000b1c <__aeabi_dcmplt>
 800b824:	2800      	cmp	r0, #0
 800b826:	f040 8128 	bne.w	800ba7a <_dtoa_r+0x68a>
 800b82a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800b82e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b832:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b834:	2b00      	cmp	r3, #0
 800b836:	f2c0 815a 	blt.w	800baee <_dtoa_r+0x6fe>
 800b83a:	2f0e      	cmp	r7, #14
 800b83c:	f300 8157 	bgt.w	800baee <_dtoa_r+0x6fe>
 800b840:	4b5a      	ldr	r3, [pc, #360]	@ (800b9ac <_dtoa_r+0x5bc>)
 800b842:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b846:	ed93 7b00 	vldr	d7, [r3]
 800b84a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	ed8d 7b00 	vstr	d7, [sp]
 800b852:	da03      	bge.n	800b85c <_dtoa_r+0x46c>
 800b854:	9b07      	ldr	r3, [sp, #28]
 800b856:	2b00      	cmp	r3, #0
 800b858:	f340 8101 	ble.w	800ba5e <_dtoa_r+0x66e>
 800b85c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b860:	4656      	mov	r6, sl
 800b862:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b866:	4620      	mov	r0, r4
 800b868:	4629      	mov	r1, r5
 800b86a:	f7f5 f80f 	bl	800088c <__aeabi_ddiv>
 800b86e:	f7f5 f993 	bl	8000b98 <__aeabi_d2iz>
 800b872:	4680      	mov	r8, r0
 800b874:	f7f4 fe76 	bl	8000564 <__aeabi_i2d>
 800b878:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b87c:	f7f4 fedc 	bl	8000638 <__aeabi_dmul>
 800b880:	4602      	mov	r2, r0
 800b882:	460b      	mov	r3, r1
 800b884:	4620      	mov	r0, r4
 800b886:	4629      	mov	r1, r5
 800b888:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b88c:	f7f4 fd1c 	bl	80002c8 <__aeabi_dsub>
 800b890:	f806 4b01 	strb.w	r4, [r6], #1
 800b894:	9d07      	ldr	r5, [sp, #28]
 800b896:	eba6 040a 	sub.w	r4, r6, sl
 800b89a:	42a5      	cmp	r5, r4
 800b89c:	4602      	mov	r2, r0
 800b89e:	460b      	mov	r3, r1
 800b8a0:	f040 8117 	bne.w	800bad2 <_dtoa_r+0x6e2>
 800b8a4:	f7f4 fd12 	bl	80002cc <__adddf3>
 800b8a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b8ac:	4604      	mov	r4, r0
 800b8ae:	460d      	mov	r5, r1
 800b8b0:	f7f5 f952 	bl	8000b58 <__aeabi_dcmpgt>
 800b8b4:	2800      	cmp	r0, #0
 800b8b6:	f040 80f9 	bne.w	800baac <_dtoa_r+0x6bc>
 800b8ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b8be:	4620      	mov	r0, r4
 800b8c0:	4629      	mov	r1, r5
 800b8c2:	f7f5 f921 	bl	8000b08 <__aeabi_dcmpeq>
 800b8c6:	b118      	cbz	r0, 800b8d0 <_dtoa_r+0x4e0>
 800b8c8:	f018 0f01 	tst.w	r8, #1
 800b8cc:	f040 80ee 	bne.w	800baac <_dtoa_r+0x6bc>
 800b8d0:	4649      	mov	r1, r9
 800b8d2:	4658      	mov	r0, fp
 800b8d4:	f000 fc90 	bl	800c1f8 <_Bfree>
 800b8d8:	2300      	movs	r3, #0
 800b8da:	7033      	strb	r3, [r6, #0]
 800b8dc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b8de:	3701      	adds	r7, #1
 800b8e0:	601f      	str	r7, [r3, #0]
 800b8e2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	f000 831d 	beq.w	800bf24 <_dtoa_r+0xb34>
 800b8ea:	601e      	str	r6, [r3, #0]
 800b8ec:	e31a      	b.n	800bf24 <_dtoa_r+0xb34>
 800b8ee:	07e2      	lsls	r2, r4, #31
 800b8f0:	d505      	bpl.n	800b8fe <_dtoa_r+0x50e>
 800b8f2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b8f6:	f7f4 fe9f 	bl	8000638 <__aeabi_dmul>
 800b8fa:	3601      	adds	r6, #1
 800b8fc:	2301      	movs	r3, #1
 800b8fe:	1064      	asrs	r4, r4, #1
 800b900:	3508      	adds	r5, #8
 800b902:	e73f      	b.n	800b784 <_dtoa_r+0x394>
 800b904:	2602      	movs	r6, #2
 800b906:	e742      	b.n	800b78e <_dtoa_r+0x39e>
 800b908:	9c07      	ldr	r4, [sp, #28]
 800b90a:	9704      	str	r7, [sp, #16]
 800b90c:	e761      	b.n	800b7d2 <_dtoa_r+0x3e2>
 800b90e:	4b27      	ldr	r3, [pc, #156]	@ (800b9ac <_dtoa_r+0x5bc>)
 800b910:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b912:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b916:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b91a:	4454      	add	r4, sl
 800b91c:	2900      	cmp	r1, #0
 800b91e:	d053      	beq.n	800b9c8 <_dtoa_r+0x5d8>
 800b920:	4928      	ldr	r1, [pc, #160]	@ (800b9c4 <_dtoa_r+0x5d4>)
 800b922:	2000      	movs	r0, #0
 800b924:	f7f4 ffb2 	bl	800088c <__aeabi_ddiv>
 800b928:	4633      	mov	r3, r6
 800b92a:	462a      	mov	r2, r5
 800b92c:	f7f4 fccc 	bl	80002c8 <__aeabi_dsub>
 800b930:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b934:	4656      	mov	r6, sl
 800b936:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b93a:	f7f5 f92d 	bl	8000b98 <__aeabi_d2iz>
 800b93e:	4605      	mov	r5, r0
 800b940:	f7f4 fe10 	bl	8000564 <__aeabi_i2d>
 800b944:	4602      	mov	r2, r0
 800b946:	460b      	mov	r3, r1
 800b948:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b94c:	f7f4 fcbc 	bl	80002c8 <__aeabi_dsub>
 800b950:	3530      	adds	r5, #48	@ 0x30
 800b952:	4602      	mov	r2, r0
 800b954:	460b      	mov	r3, r1
 800b956:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b95a:	f806 5b01 	strb.w	r5, [r6], #1
 800b95e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b962:	f7f5 f8db 	bl	8000b1c <__aeabi_dcmplt>
 800b966:	2800      	cmp	r0, #0
 800b968:	d171      	bne.n	800ba4e <_dtoa_r+0x65e>
 800b96a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b96e:	4911      	ldr	r1, [pc, #68]	@ (800b9b4 <_dtoa_r+0x5c4>)
 800b970:	2000      	movs	r0, #0
 800b972:	f7f4 fca9 	bl	80002c8 <__aeabi_dsub>
 800b976:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b97a:	f7f5 f8cf 	bl	8000b1c <__aeabi_dcmplt>
 800b97e:	2800      	cmp	r0, #0
 800b980:	f040 8095 	bne.w	800baae <_dtoa_r+0x6be>
 800b984:	42a6      	cmp	r6, r4
 800b986:	f43f af50 	beq.w	800b82a <_dtoa_r+0x43a>
 800b98a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b98e:	4b0a      	ldr	r3, [pc, #40]	@ (800b9b8 <_dtoa_r+0x5c8>)
 800b990:	2200      	movs	r2, #0
 800b992:	f7f4 fe51 	bl	8000638 <__aeabi_dmul>
 800b996:	4b08      	ldr	r3, [pc, #32]	@ (800b9b8 <_dtoa_r+0x5c8>)
 800b998:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b99c:	2200      	movs	r2, #0
 800b99e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b9a2:	f7f4 fe49 	bl	8000638 <__aeabi_dmul>
 800b9a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b9aa:	e7c4      	b.n	800b936 <_dtoa_r+0x546>
 800b9ac:	0800d578 	.word	0x0800d578
 800b9b0:	0800d550 	.word	0x0800d550
 800b9b4:	3ff00000 	.word	0x3ff00000
 800b9b8:	40240000 	.word	0x40240000
 800b9bc:	401c0000 	.word	0x401c0000
 800b9c0:	40140000 	.word	0x40140000
 800b9c4:	3fe00000 	.word	0x3fe00000
 800b9c8:	4631      	mov	r1, r6
 800b9ca:	4628      	mov	r0, r5
 800b9cc:	f7f4 fe34 	bl	8000638 <__aeabi_dmul>
 800b9d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b9d4:	9415      	str	r4, [sp, #84]	@ 0x54
 800b9d6:	4656      	mov	r6, sl
 800b9d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b9dc:	f7f5 f8dc 	bl	8000b98 <__aeabi_d2iz>
 800b9e0:	4605      	mov	r5, r0
 800b9e2:	f7f4 fdbf 	bl	8000564 <__aeabi_i2d>
 800b9e6:	4602      	mov	r2, r0
 800b9e8:	460b      	mov	r3, r1
 800b9ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b9ee:	f7f4 fc6b 	bl	80002c8 <__aeabi_dsub>
 800b9f2:	3530      	adds	r5, #48	@ 0x30
 800b9f4:	f806 5b01 	strb.w	r5, [r6], #1
 800b9f8:	4602      	mov	r2, r0
 800b9fa:	460b      	mov	r3, r1
 800b9fc:	42a6      	cmp	r6, r4
 800b9fe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ba02:	f04f 0200 	mov.w	r2, #0
 800ba06:	d124      	bne.n	800ba52 <_dtoa_r+0x662>
 800ba08:	4bac      	ldr	r3, [pc, #688]	@ (800bcbc <_dtoa_r+0x8cc>)
 800ba0a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ba0e:	f7f4 fc5d 	bl	80002cc <__adddf3>
 800ba12:	4602      	mov	r2, r0
 800ba14:	460b      	mov	r3, r1
 800ba16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ba1a:	f7f5 f89d 	bl	8000b58 <__aeabi_dcmpgt>
 800ba1e:	2800      	cmp	r0, #0
 800ba20:	d145      	bne.n	800baae <_dtoa_r+0x6be>
 800ba22:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ba26:	49a5      	ldr	r1, [pc, #660]	@ (800bcbc <_dtoa_r+0x8cc>)
 800ba28:	2000      	movs	r0, #0
 800ba2a:	f7f4 fc4d 	bl	80002c8 <__aeabi_dsub>
 800ba2e:	4602      	mov	r2, r0
 800ba30:	460b      	mov	r3, r1
 800ba32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ba36:	f7f5 f871 	bl	8000b1c <__aeabi_dcmplt>
 800ba3a:	2800      	cmp	r0, #0
 800ba3c:	f43f aef5 	beq.w	800b82a <_dtoa_r+0x43a>
 800ba40:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800ba42:	1e73      	subs	r3, r6, #1
 800ba44:	9315      	str	r3, [sp, #84]	@ 0x54
 800ba46:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ba4a:	2b30      	cmp	r3, #48	@ 0x30
 800ba4c:	d0f8      	beq.n	800ba40 <_dtoa_r+0x650>
 800ba4e:	9f04      	ldr	r7, [sp, #16]
 800ba50:	e73e      	b.n	800b8d0 <_dtoa_r+0x4e0>
 800ba52:	4b9b      	ldr	r3, [pc, #620]	@ (800bcc0 <_dtoa_r+0x8d0>)
 800ba54:	f7f4 fdf0 	bl	8000638 <__aeabi_dmul>
 800ba58:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ba5c:	e7bc      	b.n	800b9d8 <_dtoa_r+0x5e8>
 800ba5e:	d10c      	bne.n	800ba7a <_dtoa_r+0x68a>
 800ba60:	4b98      	ldr	r3, [pc, #608]	@ (800bcc4 <_dtoa_r+0x8d4>)
 800ba62:	2200      	movs	r2, #0
 800ba64:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ba68:	f7f4 fde6 	bl	8000638 <__aeabi_dmul>
 800ba6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ba70:	f7f5 f868 	bl	8000b44 <__aeabi_dcmpge>
 800ba74:	2800      	cmp	r0, #0
 800ba76:	f000 8157 	beq.w	800bd28 <_dtoa_r+0x938>
 800ba7a:	2400      	movs	r4, #0
 800ba7c:	4625      	mov	r5, r4
 800ba7e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ba80:	43db      	mvns	r3, r3
 800ba82:	9304      	str	r3, [sp, #16]
 800ba84:	4656      	mov	r6, sl
 800ba86:	2700      	movs	r7, #0
 800ba88:	4621      	mov	r1, r4
 800ba8a:	4658      	mov	r0, fp
 800ba8c:	f000 fbb4 	bl	800c1f8 <_Bfree>
 800ba90:	2d00      	cmp	r5, #0
 800ba92:	d0dc      	beq.n	800ba4e <_dtoa_r+0x65e>
 800ba94:	b12f      	cbz	r7, 800baa2 <_dtoa_r+0x6b2>
 800ba96:	42af      	cmp	r7, r5
 800ba98:	d003      	beq.n	800baa2 <_dtoa_r+0x6b2>
 800ba9a:	4639      	mov	r1, r7
 800ba9c:	4658      	mov	r0, fp
 800ba9e:	f000 fbab 	bl	800c1f8 <_Bfree>
 800baa2:	4629      	mov	r1, r5
 800baa4:	4658      	mov	r0, fp
 800baa6:	f000 fba7 	bl	800c1f8 <_Bfree>
 800baaa:	e7d0      	b.n	800ba4e <_dtoa_r+0x65e>
 800baac:	9704      	str	r7, [sp, #16]
 800baae:	4633      	mov	r3, r6
 800bab0:	461e      	mov	r6, r3
 800bab2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bab6:	2a39      	cmp	r2, #57	@ 0x39
 800bab8:	d107      	bne.n	800baca <_dtoa_r+0x6da>
 800baba:	459a      	cmp	sl, r3
 800babc:	d1f8      	bne.n	800bab0 <_dtoa_r+0x6c0>
 800babe:	9a04      	ldr	r2, [sp, #16]
 800bac0:	3201      	adds	r2, #1
 800bac2:	9204      	str	r2, [sp, #16]
 800bac4:	2230      	movs	r2, #48	@ 0x30
 800bac6:	f88a 2000 	strb.w	r2, [sl]
 800baca:	781a      	ldrb	r2, [r3, #0]
 800bacc:	3201      	adds	r2, #1
 800bace:	701a      	strb	r2, [r3, #0]
 800bad0:	e7bd      	b.n	800ba4e <_dtoa_r+0x65e>
 800bad2:	4b7b      	ldr	r3, [pc, #492]	@ (800bcc0 <_dtoa_r+0x8d0>)
 800bad4:	2200      	movs	r2, #0
 800bad6:	f7f4 fdaf 	bl	8000638 <__aeabi_dmul>
 800bada:	2200      	movs	r2, #0
 800badc:	2300      	movs	r3, #0
 800bade:	4604      	mov	r4, r0
 800bae0:	460d      	mov	r5, r1
 800bae2:	f7f5 f811 	bl	8000b08 <__aeabi_dcmpeq>
 800bae6:	2800      	cmp	r0, #0
 800bae8:	f43f aebb 	beq.w	800b862 <_dtoa_r+0x472>
 800baec:	e6f0      	b.n	800b8d0 <_dtoa_r+0x4e0>
 800baee:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800baf0:	2a00      	cmp	r2, #0
 800baf2:	f000 80db 	beq.w	800bcac <_dtoa_r+0x8bc>
 800baf6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800baf8:	2a01      	cmp	r2, #1
 800bafa:	f300 80bf 	bgt.w	800bc7c <_dtoa_r+0x88c>
 800bafe:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800bb00:	2a00      	cmp	r2, #0
 800bb02:	f000 80b7 	beq.w	800bc74 <_dtoa_r+0x884>
 800bb06:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800bb0a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800bb0c:	4646      	mov	r6, r8
 800bb0e:	9a08      	ldr	r2, [sp, #32]
 800bb10:	2101      	movs	r1, #1
 800bb12:	441a      	add	r2, r3
 800bb14:	4658      	mov	r0, fp
 800bb16:	4498      	add	r8, r3
 800bb18:	9208      	str	r2, [sp, #32]
 800bb1a:	f000 fc21 	bl	800c360 <__i2b>
 800bb1e:	4605      	mov	r5, r0
 800bb20:	b15e      	cbz	r6, 800bb3a <_dtoa_r+0x74a>
 800bb22:	9b08      	ldr	r3, [sp, #32]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	dd08      	ble.n	800bb3a <_dtoa_r+0x74a>
 800bb28:	42b3      	cmp	r3, r6
 800bb2a:	9a08      	ldr	r2, [sp, #32]
 800bb2c:	bfa8      	it	ge
 800bb2e:	4633      	movge	r3, r6
 800bb30:	eba8 0803 	sub.w	r8, r8, r3
 800bb34:	1af6      	subs	r6, r6, r3
 800bb36:	1ad3      	subs	r3, r2, r3
 800bb38:	9308      	str	r3, [sp, #32]
 800bb3a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bb3c:	b1f3      	cbz	r3, 800bb7c <_dtoa_r+0x78c>
 800bb3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	f000 80b7 	beq.w	800bcb4 <_dtoa_r+0x8c4>
 800bb46:	b18c      	cbz	r4, 800bb6c <_dtoa_r+0x77c>
 800bb48:	4629      	mov	r1, r5
 800bb4a:	4622      	mov	r2, r4
 800bb4c:	4658      	mov	r0, fp
 800bb4e:	f000 fcc7 	bl	800c4e0 <__pow5mult>
 800bb52:	464a      	mov	r2, r9
 800bb54:	4601      	mov	r1, r0
 800bb56:	4605      	mov	r5, r0
 800bb58:	4658      	mov	r0, fp
 800bb5a:	f000 fc17 	bl	800c38c <__multiply>
 800bb5e:	4649      	mov	r1, r9
 800bb60:	9004      	str	r0, [sp, #16]
 800bb62:	4658      	mov	r0, fp
 800bb64:	f000 fb48 	bl	800c1f8 <_Bfree>
 800bb68:	9b04      	ldr	r3, [sp, #16]
 800bb6a:	4699      	mov	r9, r3
 800bb6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bb6e:	1b1a      	subs	r2, r3, r4
 800bb70:	d004      	beq.n	800bb7c <_dtoa_r+0x78c>
 800bb72:	4649      	mov	r1, r9
 800bb74:	4658      	mov	r0, fp
 800bb76:	f000 fcb3 	bl	800c4e0 <__pow5mult>
 800bb7a:	4681      	mov	r9, r0
 800bb7c:	2101      	movs	r1, #1
 800bb7e:	4658      	mov	r0, fp
 800bb80:	f000 fbee 	bl	800c360 <__i2b>
 800bb84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bb86:	4604      	mov	r4, r0
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	f000 81cf 	beq.w	800bf2c <_dtoa_r+0xb3c>
 800bb8e:	461a      	mov	r2, r3
 800bb90:	4601      	mov	r1, r0
 800bb92:	4658      	mov	r0, fp
 800bb94:	f000 fca4 	bl	800c4e0 <__pow5mult>
 800bb98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb9a:	2b01      	cmp	r3, #1
 800bb9c:	4604      	mov	r4, r0
 800bb9e:	f300 8095 	bgt.w	800bccc <_dtoa_r+0x8dc>
 800bba2:	9b02      	ldr	r3, [sp, #8]
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	f040 8087 	bne.w	800bcb8 <_dtoa_r+0x8c8>
 800bbaa:	9b03      	ldr	r3, [sp, #12]
 800bbac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	f040 8089 	bne.w	800bcc8 <_dtoa_r+0x8d8>
 800bbb6:	9b03      	ldr	r3, [sp, #12]
 800bbb8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bbbc:	0d1b      	lsrs	r3, r3, #20
 800bbbe:	051b      	lsls	r3, r3, #20
 800bbc0:	b12b      	cbz	r3, 800bbce <_dtoa_r+0x7de>
 800bbc2:	9b08      	ldr	r3, [sp, #32]
 800bbc4:	3301      	adds	r3, #1
 800bbc6:	9308      	str	r3, [sp, #32]
 800bbc8:	f108 0801 	add.w	r8, r8, #1
 800bbcc:	2301      	movs	r3, #1
 800bbce:	930a      	str	r3, [sp, #40]	@ 0x28
 800bbd0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	f000 81b0 	beq.w	800bf38 <_dtoa_r+0xb48>
 800bbd8:	6923      	ldr	r3, [r4, #16]
 800bbda:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bbde:	6918      	ldr	r0, [r3, #16]
 800bbe0:	f000 fb72 	bl	800c2c8 <__hi0bits>
 800bbe4:	f1c0 0020 	rsb	r0, r0, #32
 800bbe8:	9b08      	ldr	r3, [sp, #32]
 800bbea:	4418      	add	r0, r3
 800bbec:	f010 001f 	ands.w	r0, r0, #31
 800bbf0:	d077      	beq.n	800bce2 <_dtoa_r+0x8f2>
 800bbf2:	f1c0 0320 	rsb	r3, r0, #32
 800bbf6:	2b04      	cmp	r3, #4
 800bbf8:	dd6b      	ble.n	800bcd2 <_dtoa_r+0x8e2>
 800bbfa:	9b08      	ldr	r3, [sp, #32]
 800bbfc:	f1c0 001c 	rsb	r0, r0, #28
 800bc00:	4403      	add	r3, r0
 800bc02:	4480      	add	r8, r0
 800bc04:	4406      	add	r6, r0
 800bc06:	9308      	str	r3, [sp, #32]
 800bc08:	f1b8 0f00 	cmp.w	r8, #0
 800bc0c:	dd05      	ble.n	800bc1a <_dtoa_r+0x82a>
 800bc0e:	4649      	mov	r1, r9
 800bc10:	4642      	mov	r2, r8
 800bc12:	4658      	mov	r0, fp
 800bc14:	f000 fcbe 	bl	800c594 <__lshift>
 800bc18:	4681      	mov	r9, r0
 800bc1a:	9b08      	ldr	r3, [sp, #32]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	dd05      	ble.n	800bc2c <_dtoa_r+0x83c>
 800bc20:	4621      	mov	r1, r4
 800bc22:	461a      	mov	r2, r3
 800bc24:	4658      	mov	r0, fp
 800bc26:	f000 fcb5 	bl	800c594 <__lshift>
 800bc2a:	4604      	mov	r4, r0
 800bc2c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d059      	beq.n	800bce6 <_dtoa_r+0x8f6>
 800bc32:	4621      	mov	r1, r4
 800bc34:	4648      	mov	r0, r9
 800bc36:	f000 fd19 	bl	800c66c <__mcmp>
 800bc3a:	2800      	cmp	r0, #0
 800bc3c:	da53      	bge.n	800bce6 <_dtoa_r+0x8f6>
 800bc3e:	1e7b      	subs	r3, r7, #1
 800bc40:	9304      	str	r3, [sp, #16]
 800bc42:	4649      	mov	r1, r9
 800bc44:	2300      	movs	r3, #0
 800bc46:	220a      	movs	r2, #10
 800bc48:	4658      	mov	r0, fp
 800bc4a:	f000 faf7 	bl	800c23c <__multadd>
 800bc4e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bc50:	4681      	mov	r9, r0
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	f000 8172 	beq.w	800bf3c <_dtoa_r+0xb4c>
 800bc58:	2300      	movs	r3, #0
 800bc5a:	4629      	mov	r1, r5
 800bc5c:	220a      	movs	r2, #10
 800bc5e:	4658      	mov	r0, fp
 800bc60:	f000 faec 	bl	800c23c <__multadd>
 800bc64:	9b00      	ldr	r3, [sp, #0]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	4605      	mov	r5, r0
 800bc6a:	dc67      	bgt.n	800bd3c <_dtoa_r+0x94c>
 800bc6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc6e:	2b02      	cmp	r3, #2
 800bc70:	dc41      	bgt.n	800bcf6 <_dtoa_r+0x906>
 800bc72:	e063      	b.n	800bd3c <_dtoa_r+0x94c>
 800bc74:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800bc76:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800bc7a:	e746      	b.n	800bb0a <_dtoa_r+0x71a>
 800bc7c:	9b07      	ldr	r3, [sp, #28]
 800bc7e:	1e5c      	subs	r4, r3, #1
 800bc80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bc82:	42a3      	cmp	r3, r4
 800bc84:	bfbf      	itttt	lt
 800bc86:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800bc88:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800bc8a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800bc8c:	1ae3      	sublt	r3, r4, r3
 800bc8e:	bfb4      	ite	lt
 800bc90:	18d2      	addlt	r2, r2, r3
 800bc92:	1b1c      	subge	r4, r3, r4
 800bc94:	9b07      	ldr	r3, [sp, #28]
 800bc96:	bfbc      	itt	lt
 800bc98:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800bc9a:	2400      	movlt	r4, #0
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	bfb5      	itete	lt
 800bca0:	eba8 0603 	sublt.w	r6, r8, r3
 800bca4:	9b07      	ldrge	r3, [sp, #28]
 800bca6:	2300      	movlt	r3, #0
 800bca8:	4646      	movge	r6, r8
 800bcaa:	e730      	b.n	800bb0e <_dtoa_r+0x71e>
 800bcac:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800bcae:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800bcb0:	4646      	mov	r6, r8
 800bcb2:	e735      	b.n	800bb20 <_dtoa_r+0x730>
 800bcb4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bcb6:	e75c      	b.n	800bb72 <_dtoa_r+0x782>
 800bcb8:	2300      	movs	r3, #0
 800bcba:	e788      	b.n	800bbce <_dtoa_r+0x7de>
 800bcbc:	3fe00000 	.word	0x3fe00000
 800bcc0:	40240000 	.word	0x40240000
 800bcc4:	40140000 	.word	0x40140000
 800bcc8:	9b02      	ldr	r3, [sp, #8]
 800bcca:	e780      	b.n	800bbce <_dtoa_r+0x7de>
 800bccc:	2300      	movs	r3, #0
 800bcce:	930a      	str	r3, [sp, #40]	@ 0x28
 800bcd0:	e782      	b.n	800bbd8 <_dtoa_r+0x7e8>
 800bcd2:	d099      	beq.n	800bc08 <_dtoa_r+0x818>
 800bcd4:	9a08      	ldr	r2, [sp, #32]
 800bcd6:	331c      	adds	r3, #28
 800bcd8:	441a      	add	r2, r3
 800bcda:	4498      	add	r8, r3
 800bcdc:	441e      	add	r6, r3
 800bcde:	9208      	str	r2, [sp, #32]
 800bce0:	e792      	b.n	800bc08 <_dtoa_r+0x818>
 800bce2:	4603      	mov	r3, r0
 800bce4:	e7f6      	b.n	800bcd4 <_dtoa_r+0x8e4>
 800bce6:	9b07      	ldr	r3, [sp, #28]
 800bce8:	9704      	str	r7, [sp, #16]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	dc20      	bgt.n	800bd30 <_dtoa_r+0x940>
 800bcee:	9300      	str	r3, [sp, #0]
 800bcf0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bcf2:	2b02      	cmp	r3, #2
 800bcf4:	dd1e      	ble.n	800bd34 <_dtoa_r+0x944>
 800bcf6:	9b00      	ldr	r3, [sp, #0]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	f47f aec0 	bne.w	800ba7e <_dtoa_r+0x68e>
 800bcfe:	4621      	mov	r1, r4
 800bd00:	2205      	movs	r2, #5
 800bd02:	4658      	mov	r0, fp
 800bd04:	f000 fa9a 	bl	800c23c <__multadd>
 800bd08:	4601      	mov	r1, r0
 800bd0a:	4604      	mov	r4, r0
 800bd0c:	4648      	mov	r0, r9
 800bd0e:	f000 fcad 	bl	800c66c <__mcmp>
 800bd12:	2800      	cmp	r0, #0
 800bd14:	f77f aeb3 	ble.w	800ba7e <_dtoa_r+0x68e>
 800bd18:	4656      	mov	r6, sl
 800bd1a:	2331      	movs	r3, #49	@ 0x31
 800bd1c:	f806 3b01 	strb.w	r3, [r6], #1
 800bd20:	9b04      	ldr	r3, [sp, #16]
 800bd22:	3301      	adds	r3, #1
 800bd24:	9304      	str	r3, [sp, #16]
 800bd26:	e6ae      	b.n	800ba86 <_dtoa_r+0x696>
 800bd28:	9c07      	ldr	r4, [sp, #28]
 800bd2a:	9704      	str	r7, [sp, #16]
 800bd2c:	4625      	mov	r5, r4
 800bd2e:	e7f3      	b.n	800bd18 <_dtoa_r+0x928>
 800bd30:	9b07      	ldr	r3, [sp, #28]
 800bd32:	9300      	str	r3, [sp, #0]
 800bd34:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	f000 8104 	beq.w	800bf44 <_dtoa_r+0xb54>
 800bd3c:	2e00      	cmp	r6, #0
 800bd3e:	dd05      	ble.n	800bd4c <_dtoa_r+0x95c>
 800bd40:	4629      	mov	r1, r5
 800bd42:	4632      	mov	r2, r6
 800bd44:	4658      	mov	r0, fp
 800bd46:	f000 fc25 	bl	800c594 <__lshift>
 800bd4a:	4605      	mov	r5, r0
 800bd4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d05a      	beq.n	800be08 <_dtoa_r+0xa18>
 800bd52:	6869      	ldr	r1, [r5, #4]
 800bd54:	4658      	mov	r0, fp
 800bd56:	f000 fa0f 	bl	800c178 <_Balloc>
 800bd5a:	4606      	mov	r6, r0
 800bd5c:	b928      	cbnz	r0, 800bd6a <_dtoa_r+0x97a>
 800bd5e:	4b84      	ldr	r3, [pc, #528]	@ (800bf70 <_dtoa_r+0xb80>)
 800bd60:	4602      	mov	r2, r0
 800bd62:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800bd66:	f7ff bb5a 	b.w	800b41e <_dtoa_r+0x2e>
 800bd6a:	692a      	ldr	r2, [r5, #16]
 800bd6c:	3202      	adds	r2, #2
 800bd6e:	0092      	lsls	r2, r2, #2
 800bd70:	f105 010c 	add.w	r1, r5, #12
 800bd74:	300c      	adds	r0, #12
 800bd76:	f000 ffaf 	bl	800ccd8 <memcpy>
 800bd7a:	2201      	movs	r2, #1
 800bd7c:	4631      	mov	r1, r6
 800bd7e:	4658      	mov	r0, fp
 800bd80:	f000 fc08 	bl	800c594 <__lshift>
 800bd84:	f10a 0301 	add.w	r3, sl, #1
 800bd88:	9307      	str	r3, [sp, #28]
 800bd8a:	9b00      	ldr	r3, [sp, #0]
 800bd8c:	4453      	add	r3, sl
 800bd8e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bd90:	9b02      	ldr	r3, [sp, #8]
 800bd92:	f003 0301 	and.w	r3, r3, #1
 800bd96:	462f      	mov	r7, r5
 800bd98:	930a      	str	r3, [sp, #40]	@ 0x28
 800bd9a:	4605      	mov	r5, r0
 800bd9c:	9b07      	ldr	r3, [sp, #28]
 800bd9e:	4621      	mov	r1, r4
 800bda0:	3b01      	subs	r3, #1
 800bda2:	4648      	mov	r0, r9
 800bda4:	9300      	str	r3, [sp, #0]
 800bda6:	f7ff fa98 	bl	800b2da <quorem>
 800bdaa:	4639      	mov	r1, r7
 800bdac:	9002      	str	r0, [sp, #8]
 800bdae:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800bdb2:	4648      	mov	r0, r9
 800bdb4:	f000 fc5a 	bl	800c66c <__mcmp>
 800bdb8:	462a      	mov	r2, r5
 800bdba:	9008      	str	r0, [sp, #32]
 800bdbc:	4621      	mov	r1, r4
 800bdbe:	4658      	mov	r0, fp
 800bdc0:	f000 fc70 	bl	800c6a4 <__mdiff>
 800bdc4:	68c2      	ldr	r2, [r0, #12]
 800bdc6:	4606      	mov	r6, r0
 800bdc8:	bb02      	cbnz	r2, 800be0c <_dtoa_r+0xa1c>
 800bdca:	4601      	mov	r1, r0
 800bdcc:	4648      	mov	r0, r9
 800bdce:	f000 fc4d 	bl	800c66c <__mcmp>
 800bdd2:	4602      	mov	r2, r0
 800bdd4:	4631      	mov	r1, r6
 800bdd6:	4658      	mov	r0, fp
 800bdd8:	920e      	str	r2, [sp, #56]	@ 0x38
 800bdda:	f000 fa0d 	bl	800c1f8 <_Bfree>
 800bdde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bde0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bde2:	9e07      	ldr	r6, [sp, #28]
 800bde4:	ea43 0102 	orr.w	r1, r3, r2
 800bde8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bdea:	4319      	orrs	r1, r3
 800bdec:	d110      	bne.n	800be10 <_dtoa_r+0xa20>
 800bdee:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bdf2:	d029      	beq.n	800be48 <_dtoa_r+0xa58>
 800bdf4:	9b08      	ldr	r3, [sp, #32]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	dd02      	ble.n	800be00 <_dtoa_r+0xa10>
 800bdfa:	9b02      	ldr	r3, [sp, #8]
 800bdfc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800be00:	9b00      	ldr	r3, [sp, #0]
 800be02:	f883 8000 	strb.w	r8, [r3]
 800be06:	e63f      	b.n	800ba88 <_dtoa_r+0x698>
 800be08:	4628      	mov	r0, r5
 800be0a:	e7bb      	b.n	800bd84 <_dtoa_r+0x994>
 800be0c:	2201      	movs	r2, #1
 800be0e:	e7e1      	b.n	800bdd4 <_dtoa_r+0x9e4>
 800be10:	9b08      	ldr	r3, [sp, #32]
 800be12:	2b00      	cmp	r3, #0
 800be14:	db04      	blt.n	800be20 <_dtoa_r+0xa30>
 800be16:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800be18:	430b      	orrs	r3, r1
 800be1a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800be1c:	430b      	orrs	r3, r1
 800be1e:	d120      	bne.n	800be62 <_dtoa_r+0xa72>
 800be20:	2a00      	cmp	r2, #0
 800be22:	dded      	ble.n	800be00 <_dtoa_r+0xa10>
 800be24:	4649      	mov	r1, r9
 800be26:	2201      	movs	r2, #1
 800be28:	4658      	mov	r0, fp
 800be2a:	f000 fbb3 	bl	800c594 <__lshift>
 800be2e:	4621      	mov	r1, r4
 800be30:	4681      	mov	r9, r0
 800be32:	f000 fc1b 	bl	800c66c <__mcmp>
 800be36:	2800      	cmp	r0, #0
 800be38:	dc03      	bgt.n	800be42 <_dtoa_r+0xa52>
 800be3a:	d1e1      	bne.n	800be00 <_dtoa_r+0xa10>
 800be3c:	f018 0f01 	tst.w	r8, #1
 800be40:	d0de      	beq.n	800be00 <_dtoa_r+0xa10>
 800be42:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800be46:	d1d8      	bne.n	800bdfa <_dtoa_r+0xa0a>
 800be48:	9a00      	ldr	r2, [sp, #0]
 800be4a:	2339      	movs	r3, #57	@ 0x39
 800be4c:	7013      	strb	r3, [r2, #0]
 800be4e:	4633      	mov	r3, r6
 800be50:	461e      	mov	r6, r3
 800be52:	3b01      	subs	r3, #1
 800be54:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800be58:	2a39      	cmp	r2, #57	@ 0x39
 800be5a:	d052      	beq.n	800bf02 <_dtoa_r+0xb12>
 800be5c:	3201      	adds	r2, #1
 800be5e:	701a      	strb	r2, [r3, #0]
 800be60:	e612      	b.n	800ba88 <_dtoa_r+0x698>
 800be62:	2a00      	cmp	r2, #0
 800be64:	dd07      	ble.n	800be76 <_dtoa_r+0xa86>
 800be66:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800be6a:	d0ed      	beq.n	800be48 <_dtoa_r+0xa58>
 800be6c:	9a00      	ldr	r2, [sp, #0]
 800be6e:	f108 0301 	add.w	r3, r8, #1
 800be72:	7013      	strb	r3, [r2, #0]
 800be74:	e608      	b.n	800ba88 <_dtoa_r+0x698>
 800be76:	9b07      	ldr	r3, [sp, #28]
 800be78:	9a07      	ldr	r2, [sp, #28]
 800be7a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800be7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800be80:	4293      	cmp	r3, r2
 800be82:	d028      	beq.n	800bed6 <_dtoa_r+0xae6>
 800be84:	4649      	mov	r1, r9
 800be86:	2300      	movs	r3, #0
 800be88:	220a      	movs	r2, #10
 800be8a:	4658      	mov	r0, fp
 800be8c:	f000 f9d6 	bl	800c23c <__multadd>
 800be90:	42af      	cmp	r7, r5
 800be92:	4681      	mov	r9, r0
 800be94:	f04f 0300 	mov.w	r3, #0
 800be98:	f04f 020a 	mov.w	r2, #10
 800be9c:	4639      	mov	r1, r7
 800be9e:	4658      	mov	r0, fp
 800bea0:	d107      	bne.n	800beb2 <_dtoa_r+0xac2>
 800bea2:	f000 f9cb 	bl	800c23c <__multadd>
 800bea6:	4607      	mov	r7, r0
 800bea8:	4605      	mov	r5, r0
 800beaa:	9b07      	ldr	r3, [sp, #28]
 800beac:	3301      	adds	r3, #1
 800beae:	9307      	str	r3, [sp, #28]
 800beb0:	e774      	b.n	800bd9c <_dtoa_r+0x9ac>
 800beb2:	f000 f9c3 	bl	800c23c <__multadd>
 800beb6:	4629      	mov	r1, r5
 800beb8:	4607      	mov	r7, r0
 800beba:	2300      	movs	r3, #0
 800bebc:	220a      	movs	r2, #10
 800bebe:	4658      	mov	r0, fp
 800bec0:	f000 f9bc 	bl	800c23c <__multadd>
 800bec4:	4605      	mov	r5, r0
 800bec6:	e7f0      	b.n	800beaa <_dtoa_r+0xaba>
 800bec8:	9b00      	ldr	r3, [sp, #0]
 800beca:	2b00      	cmp	r3, #0
 800becc:	bfcc      	ite	gt
 800bece:	461e      	movgt	r6, r3
 800bed0:	2601      	movle	r6, #1
 800bed2:	4456      	add	r6, sl
 800bed4:	2700      	movs	r7, #0
 800bed6:	4649      	mov	r1, r9
 800bed8:	2201      	movs	r2, #1
 800beda:	4658      	mov	r0, fp
 800bedc:	f000 fb5a 	bl	800c594 <__lshift>
 800bee0:	4621      	mov	r1, r4
 800bee2:	4681      	mov	r9, r0
 800bee4:	f000 fbc2 	bl	800c66c <__mcmp>
 800bee8:	2800      	cmp	r0, #0
 800beea:	dcb0      	bgt.n	800be4e <_dtoa_r+0xa5e>
 800beec:	d102      	bne.n	800bef4 <_dtoa_r+0xb04>
 800beee:	f018 0f01 	tst.w	r8, #1
 800bef2:	d1ac      	bne.n	800be4e <_dtoa_r+0xa5e>
 800bef4:	4633      	mov	r3, r6
 800bef6:	461e      	mov	r6, r3
 800bef8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800befc:	2a30      	cmp	r2, #48	@ 0x30
 800befe:	d0fa      	beq.n	800bef6 <_dtoa_r+0xb06>
 800bf00:	e5c2      	b.n	800ba88 <_dtoa_r+0x698>
 800bf02:	459a      	cmp	sl, r3
 800bf04:	d1a4      	bne.n	800be50 <_dtoa_r+0xa60>
 800bf06:	9b04      	ldr	r3, [sp, #16]
 800bf08:	3301      	adds	r3, #1
 800bf0a:	9304      	str	r3, [sp, #16]
 800bf0c:	2331      	movs	r3, #49	@ 0x31
 800bf0e:	f88a 3000 	strb.w	r3, [sl]
 800bf12:	e5b9      	b.n	800ba88 <_dtoa_r+0x698>
 800bf14:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bf16:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800bf74 <_dtoa_r+0xb84>
 800bf1a:	b11b      	cbz	r3, 800bf24 <_dtoa_r+0xb34>
 800bf1c:	f10a 0308 	add.w	r3, sl, #8
 800bf20:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800bf22:	6013      	str	r3, [r2, #0]
 800bf24:	4650      	mov	r0, sl
 800bf26:	b019      	add	sp, #100	@ 0x64
 800bf28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf2e:	2b01      	cmp	r3, #1
 800bf30:	f77f ae37 	ble.w	800bba2 <_dtoa_r+0x7b2>
 800bf34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bf36:	930a      	str	r3, [sp, #40]	@ 0x28
 800bf38:	2001      	movs	r0, #1
 800bf3a:	e655      	b.n	800bbe8 <_dtoa_r+0x7f8>
 800bf3c:	9b00      	ldr	r3, [sp, #0]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	f77f aed6 	ble.w	800bcf0 <_dtoa_r+0x900>
 800bf44:	4656      	mov	r6, sl
 800bf46:	4621      	mov	r1, r4
 800bf48:	4648      	mov	r0, r9
 800bf4a:	f7ff f9c6 	bl	800b2da <quorem>
 800bf4e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800bf52:	f806 8b01 	strb.w	r8, [r6], #1
 800bf56:	9b00      	ldr	r3, [sp, #0]
 800bf58:	eba6 020a 	sub.w	r2, r6, sl
 800bf5c:	4293      	cmp	r3, r2
 800bf5e:	ddb3      	ble.n	800bec8 <_dtoa_r+0xad8>
 800bf60:	4649      	mov	r1, r9
 800bf62:	2300      	movs	r3, #0
 800bf64:	220a      	movs	r2, #10
 800bf66:	4658      	mov	r0, fp
 800bf68:	f000 f968 	bl	800c23c <__multadd>
 800bf6c:	4681      	mov	r9, r0
 800bf6e:	e7ea      	b.n	800bf46 <_dtoa_r+0xb56>
 800bf70:	0800d4d8 	.word	0x0800d4d8
 800bf74:	0800d45c 	.word	0x0800d45c

0800bf78 <_free_r>:
 800bf78:	b538      	push	{r3, r4, r5, lr}
 800bf7a:	4605      	mov	r5, r0
 800bf7c:	2900      	cmp	r1, #0
 800bf7e:	d041      	beq.n	800c004 <_free_r+0x8c>
 800bf80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf84:	1f0c      	subs	r4, r1, #4
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	bfb8      	it	lt
 800bf8a:	18e4      	addlt	r4, r4, r3
 800bf8c:	f000 f8e8 	bl	800c160 <__malloc_lock>
 800bf90:	4a1d      	ldr	r2, [pc, #116]	@ (800c008 <_free_r+0x90>)
 800bf92:	6813      	ldr	r3, [r2, #0]
 800bf94:	b933      	cbnz	r3, 800bfa4 <_free_r+0x2c>
 800bf96:	6063      	str	r3, [r4, #4]
 800bf98:	6014      	str	r4, [r2, #0]
 800bf9a:	4628      	mov	r0, r5
 800bf9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bfa0:	f000 b8e4 	b.w	800c16c <__malloc_unlock>
 800bfa4:	42a3      	cmp	r3, r4
 800bfa6:	d908      	bls.n	800bfba <_free_r+0x42>
 800bfa8:	6820      	ldr	r0, [r4, #0]
 800bfaa:	1821      	adds	r1, r4, r0
 800bfac:	428b      	cmp	r3, r1
 800bfae:	bf01      	itttt	eq
 800bfb0:	6819      	ldreq	r1, [r3, #0]
 800bfb2:	685b      	ldreq	r3, [r3, #4]
 800bfb4:	1809      	addeq	r1, r1, r0
 800bfb6:	6021      	streq	r1, [r4, #0]
 800bfb8:	e7ed      	b.n	800bf96 <_free_r+0x1e>
 800bfba:	461a      	mov	r2, r3
 800bfbc:	685b      	ldr	r3, [r3, #4]
 800bfbe:	b10b      	cbz	r3, 800bfc4 <_free_r+0x4c>
 800bfc0:	42a3      	cmp	r3, r4
 800bfc2:	d9fa      	bls.n	800bfba <_free_r+0x42>
 800bfc4:	6811      	ldr	r1, [r2, #0]
 800bfc6:	1850      	adds	r0, r2, r1
 800bfc8:	42a0      	cmp	r0, r4
 800bfca:	d10b      	bne.n	800bfe4 <_free_r+0x6c>
 800bfcc:	6820      	ldr	r0, [r4, #0]
 800bfce:	4401      	add	r1, r0
 800bfd0:	1850      	adds	r0, r2, r1
 800bfd2:	4283      	cmp	r3, r0
 800bfd4:	6011      	str	r1, [r2, #0]
 800bfd6:	d1e0      	bne.n	800bf9a <_free_r+0x22>
 800bfd8:	6818      	ldr	r0, [r3, #0]
 800bfda:	685b      	ldr	r3, [r3, #4]
 800bfdc:	6053      	str	r3, [r2, #4]
 800bfde:	4408      	add	r0, r1
 800bfe0:	6010      	str	r0, [r2, #0]
 800bfe2:	e7da      	b.n	800bf9a <_free_r+0x22>
 800bfe4:	d902      	bls.n	800bfec <_free_r+0x74>
 800bfe6:	230c      	movs	r3, #12
 800bfe8:	602b      	str	r3, [r5, #0]
 800bfea:	e7d6      	b.n	800bf9a <_free_r+0x22>
 800bfec:	6820      	ldr	r0, [r4, #0]
 800bfee:	1821      	adds	r1, r4, r0
 800bff0:	428b      	cmp	r3, r1
 800bff2:	bf04      	itt	eq
 800bff4:	6819      	ldreq	r1, [r3, #0]
 800bff6:	685b      	ldreq	r3, [r3, #4]
 800bff8:	6063      	str	r3, [r4, #4]
 800bffa:	bf04      	itt	eq
 800bffc:	1809      	addeq	r1, r1, r0
 800bffe:	6021      	streq	r1, [r4, #0]
 800c000:	6054      	str	r4, [r2, #4]
 800c002:	e7ca      	b.n	800bf9a <_free_r+0x22>
 800c004:	bd38      	pop	{r3, r4, r5, pc}
 800c006:	bf00      	nop
 800c008:	20002288 	.word	0x20002288

0800c00c <malloc>:
 800c00c:	4b02      	ldr	r3, [pc, #8]	@ (800c018 <malloc+0xc>)
 800c00e:	4601      	mov	r1, r0
 800c010:	6818      	ldr	r0, [r3, #0]
 800c012:	f000 b825 	b.w	800c060 <_malloc_r>
 800c016:	bf00      	nop
 800c018:	20000118 	.word	0x20000118

0800c01c <sbrk_aligned>:
 800c01c:	b570      	push	{r4, r5, r6, lr}
 800c01e:	4e0f      	ldr	r6, [pc, #60]	@ (800c05c <sbrk_aligned+0x40>)
 800c020:	460c      	mov	r4, r1
 800c022:	6831      	ldr	r1, [r6, #0]
 800c024:	4605      	mov	r5, r0
 800c026:	b911      	cbnz	r1, 800c02e <sbrk_aligned+0x12>
 800c028:	f000 fe46 	bl	800ccb8 <_sbrk_r>
 800c02c:	6030      	str	r0, [r6, #0]
 800c02e:	4621      	mov	r1, r4
 800c030:	4628      	mov	r0, r5
 800c032:	f000 fe41 	bl	800ccb8 <_sbrk_r>
 800c036:	1c43      	adds	r3, r0, #1
 800c038:	d103      	bne.n	800c042 <sbrk_aligned+0x26>
 800c03a:	f04f 34ff 	mov.w	r4, #4294967295
 800c03e:	4620      	mov	r0, r4
 800c040:	bd70      	pop	{r4, r5, r6, pc}
 800c042:	1cc4      	adds	r4, r0, #3
 800c044:	f024 0403 	bic.w	r4, r4, #3
 800c048:	42a0      	cmp	r0, r4
 800c04a:	d0f8      	beq.n	800c03e <sbrk_aligned+0x22>
 800c04c:	1a21      	subs	r1, r4, r0
 800c04e:	4628      	mov	r0, r5
 800c050:	f000 fe32 	bl	800ccb8 <_sbrk_r>
 800c054:	3001      	adds	r0, #1
 800c056:	d1f2      	bne.n	800c03e <sbrk_aligned+0x22>
 800c058:	e7ef      	b.n	800c03a <sbrk_aligned+0x1e>
 800c05a:	bf00      	nop
 800c05c:	20002284 	.word	0x20002284

0800c060 <_malloc_r>:
 800c060:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c064:	1ccd      	adds	r5, r1, #3
 800c066:	f025 0503 	bic.w	r5, r5, #3
 800c06a:	3508      	adds	r5, #8
 800c06c:	2d0c      	cmp	r5, #12
 800c06e:	bf38      	it	cc
 800c070:	250c      	movcc	r5, #12
 800c072:	2d00      	cmp	r5, #0
 800c074:	4606      	mov	r6, r0
 800c076:	db01      	blt.n	800c07c <_malloc_r+0x1c>
 800c078:	42a9      	cmp	r1, r5
 800c07a:	d904      	bls.n	800c086 <_malloc_r+0x26>
 800c07c:	230c      	movs	r3, #12
 800c07e:	6033      	str	r3, [r6, #0]
 800c080:	2000      	movs	r0, #0
 800c082:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c086:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c15c <_malloc_r+0xfc>
 800c08a:	f000 f869 	bl	800c160 <__malloc_lock>
 800c08e:	f8d8 3000 	ldr.w	r3, [r8]
 800c092:	461c      	mov	r4, r3
 800c094:	bb44      	cbnz	r4, 800c0e8 <_malloc_r+0x88>
 800c096:	4629      	mov	r1, r5
 800c098:	4630      	mov	r0, r6
 800c09a:	f7ff ffbf 	bl	800c01c <sbrk_aligned>
 800c09e:	1c43      	adds	r3, r0, #1
 800c0a0:	4604      	mov	r4, r0
 800c0a2:	d158      	bne.n	800c156 <_malloc_r+0xf6>
 800c0a4:	f8d8 4000 	ldr.w	r4, [r8]
 800c0a8:	4627      	mov	r7, r4
 800c0aa:	2f00      	cmp	r7, #0
 800c0ac:	d143      	bne.n	800c136 <_malloc_r+0xd6>
 800c0ae:	2c00      	cmp	r4, #0
 800c0b0:	d04b      	beq.n	800c14a <_malloc_r+0xea>
 800c0b2:	6823      	ldr	r3, [r4, #0]
 800c0b4:	4639      	mov	r1, r7
 800c0b6:	4630      	mov	r0, r6
 800c0b8:	eb04 0903 	add.w	r9, r4, r3
 800c0bc:	f000 fdfc 	bl	800ccb8 <_sbrk_r>
 800c0c0:	4581      	cmp	r9, r0
 800c0c2:	d142      	bne.n	800c14a <_malloc_r+0xea>
 800c0c4:	6821      	ldr	r1, [r4, #0]
 800c0c6:	1a6d      	subs	r5, r5, r1
 800c0c8:	4629      	mov	r1, r5
 800c0ca:	4630      	mov	r0, r6
 800c0cc:	f7ff ffa6 	bl	800c01c <sbrk_aligned>
 800c0d0:	3001      	adds	r0, #1
 800c0d2:	d03a      	beq.n	800c14a <_malloc_r+0xea>
 800c0d4:	6823      	ldr	r3, [r4, #0]
 800c0d6:	442b      	add	r3, r5
 800c0d8:	6023      	str	r3, [r4, #0]
 800c0da:	f8d8 3000 	ldr.w	r3, [r8]
 800c0de:	685a      	ldr	r2, [r3, #4]
 800c0e0:	bb62      	cbnz	r2, 800c13c <_malloc_r+0xdc>
 800c0e2:	f8c8 7000 	str.w	r7, [r8]
 800c0e6:	e00f      	b.n	800c108 <_malloc_r+0xa8>
 800c0e8:	6822      	ldr	r2, [r4, #0]
 800c0ea:	1b52      	subs	r2, r2, r5
 800c0ec:	d420      	bmi.n	800c130 <_malloc_r+0xd0>
 800c0ee:	2a0b      	cmp	r2, #11
 800c0f0:	d917      	bls.n	800c122 <_malloc_r+0xc2>
 800c0f2:	1961      	adds	r1, r4, r5
 800c0f4:	42a3      	cmp	r3, r4
 800c0f6:	6025      	str	r5, [r4, #0]
 800c0f8:	bf18      	it	ne
 800c0fa:	6059      	strne	r1, [r3, #4]
 800c0fc:	6863      	ldr	r3, [r4, #4]
 800c0fe:	bf08      	it	eq
 800c100:	f8c8 1000 	streq.w	r1, [r8]
 800c104:	5162      	str	r2, [r4, r5]
 800c106:	604b      	str	r3, [r1, #4]
 800c108:	4630      	mov	r0, r6
 800c10a:	f000 f82f 	bl	800c16c <__malloc_unlock>
 800c10e:	f104 000b 	add.w	r0, r4, #11
 800c112:	1d23      	adds	r3, r4, #4
 800c114:	f020 0007 	bic.w	r0, r0, #7
 800c118:	1ac2      	subs	r2, r0, r3
 800c11a:	bf1c      	itt	ne
 800c11c:	1a1b      	subne	r3, r3, r0
 800c11e:	50a3      	strne	r3, [r4, r2]
 800c120:	e7af      	b.n	800c082 <_malloc_r+0x22>
 800c122:	6862      	ldr	r2, [r4, #4]
 800c124:	42a3      	cmp	r3, r4
 800c126:	bf0c      	ite	eq
 800c128:	f8c8 2000 	streq.w	r2, [r8]
 800c12c:	605a      	strne	r2, [r3, #4]
 800c12e:	e7eb      	b.n	800c108 <_malloc_r+0xa8>
 800c130:	4623      	mov	r3, r4
 800c132:	6864      	ldr	r4, [r4, #4]
 800c134:	e7ae      	b.n	800c094 <_malloc_r+0x34>
 800c136:	463c      	mov	r4, r7
 800c138:	687f      	ldr	r7, [r7, #4]
 800c13a:	e7b6      	b.n	800c0aa <_malloc_r+0x4a>
 800c13c:	461a      	mov	r2, r3
 800c13e:	685b      	ldr	r3, [r3, #4]
 800c140:	42a3      	cmp	r3, r4
 800c142:	d1fb      	bne.n	800c13c <_malloc_r+0xdc>
 800c144:	2300      	movs	r3, #0
 800c146:	6053      	str	r3, [r2, #4]
 800c148:	e7de      	b.n	800c108 <_malloc_r+0xa8>
 800c14a:	230c      	movs	r3, #12
 800c14c:	6033      	str	r3, [r6, #0]
 800c14e:	4630      	mov	r0, r6
 800c150:	f000 f80c 	bl	800c16c <__malloc_unlock>
 800c154:	e794      	b.n	800c080 <_malloc_r+0x20>
 800c156:	6005      	str	r5, [r0, #0]
 800c158:	e7d6      	b.n	800c108 <_malloc_r+0xa8>
 800c15a:	bf00      	nop
 800c15c:	20002288 	.word	0x20002288

0800c160 <__malloc_lock>:
 800c160:	4801      	ldr	r0, [pc, #4]	@ (800c168 <__malloc_lock+0x8>)
 800c162:	f7ff b8b8 	b.w	800b2d6 <__retarget_lock_acquire_recursive>
 800c166:	bf00      	nop
 800c168:	20002280 	.word	0x20002280

0800c16c <__malloc_unlock>:
 800c16c:	4801      	ldr	r0, [pc, #4]	@ (800c174 <__malloc_unlock+0x8>)
 800c16e:	f7ff b8b3 	b.w	800b2d8 <__retarget_lock_release_recursive>
 800c172:	bf00      	nop
 800c174:	20002280 	.word	0x20002280

0800c178 <_Balloc>:
 800c178:	b570      	push	{r4, r5, r6, lr}
 800c17a:	69c6      	ldr	r6, [r0, #28]
 800c17c:	4604      	mov	r4, r0
 800c17e:	460d      	mov	r5, r1
 800c180:	b976      	cbnz	r6, 800c1a0 <_Balloc+0x28>
 800c182:	2010      	movs	r0, #16
 800c184:	f7ff ff42 	bl	800c00c <malloc>
 800c188:	4602      	mov	r2, r0
 800c18a:	61e0      	str	r0, [r4, #28]
 800c18c:	b920      	cbnz	r0, 800c198 <_Balloc+0x20>
 800c18e:	4b18      	ldr	r3, [pc, #96]	@ (800c1f0 <_Balloc+0x78>)
 800c190:	4818      	ldr	r0, [pc, #96]	@ (800c1f4 <_Balloc+0x7c>)
 800c192:	216b      	movs	r1, #107	@ 0x6b
 800c194:	f000 fdae 	bl	800ccf4 <__assert_func>
 800c198:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c19c:	6006      	str	r6, [r0, #0]
 800c19e:	60c6      	str	r6, [r0, #12]
 800c1a0:	69e6      	ldr	r6, [r4, #28]
 800c1a2:	68f3      	ldr	r3, [r6, #12]
 800c1a4:	b183      	cbz	r3, 800c1c8 <_Balloc+0x50>
 800c1a6:	69e3      	ldr	r3, [r4, #28]
 800c1a8:	68db      	ldr	r3, [r3, #12]
 800c1aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c1ae:	b9b8      	cbnz	r0, 800c1e0 <_Balloc+0x68>
 800c1b0:	2101      	movs	r1, #1
 800c1b2:	fa01 f605 	lsl.w	r6, r1, r5
 800c1b6:	1d72      	adds	r2, r6, #5
 800c1b8:	0092      	lsls	r2, r2, #2
 800c1ba:	4620      	mov	r0, r4
 800c1bc:	f000 fdb8 	bl	800cd30 <_calloc_r>
 800c1c0:	b160      	cbz	r0, 800c1dc <_Balloc+0x64>
 800c1c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c1c6:	e00e      	b.n	800c1e6 <_Balloc+0x6e>
 800c1c8:	2221      	movs	r2, #33	@ 0x21
 800c1ca:	2104      	movs	r1, #4
 800c1cc:	4620      	mov	r0, r4
 800c1ce:	f000 fdaf 	bl	800cd30 <_calloc_r>
 800c1d2:	69e3      	ldr	r3, [r4, #28]
 800c1d4:	60f0      	str	r0, [r6, #12]
 800c1d6:	68db      	ldr	r3, [r3, #12]
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d1e4      	bne.n	800c1a6 <_Balloc+0x2e>
 800c1dc:	2000      	movs	r0, #0
 800c1de:	bd70      	pop	{r4, r5, r6, pc}
 800c1e0:	6802      	ldr	r2, [r0, #0]
 800c1e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c1e6:	2300      	movs	r3, #0
 800c1e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c1ec:	e7f7      	b.n	800c1de <_Balloc+0x66>
 800c1ee:	bf00      	nop
 800c1f0:	0800d469 	.word	0x0800d469
 800c1f4:	0800d4e9 	.word	0x0800d4e9

0800c1f8 <_Bfree>:
 800c1f8:	b570      	push	{r4, r5, r6, lr}
 800c1fa:	69c6      	ldr	r6, [r0, #28]
 800c1fc:	4605      	mov	r5, r0
 800c1fe:	460c      	mov	r4, r1
 800c200:	b976      	cbnz	r6, 800c220 <_Bfree+0x28>
 800c202:	2010      	movs	r0, #16
 800c204:	f7ff ff02 	bl	800c00c <malloc>
 800c208:	4602      	mov	r2, r0
 800c20a:	61e8      	str	r0, [r5, #28]
 800c20c:	b920      	cbnz	r0, 800c218 <_Bfree+0x20>
 800c20e:	4b09      	ldr	r3, [pc, #36]	@ (800c234 <_Bfree+0x3c>)
 800c210:	4809      	ldr	r0, [pc, #36]	@ (800c238 <_Bfree+0x40>)
 800c212:	218f      	movs	r1, #143	@ 0x8f
 800c214:	f000 fd6e 	bl	800ccf4 <__assert_func>
 800c218:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c21c:	6006      	str	r6, [r0, #0]
 800c21e:	60c6      	str	r6, [r0, #12]
 800c220:	b13c      	cbz	r4, 800c232 <_Bfree+0x3a>
 800c222:	69eb      	ldr	r3, [r5, #28]
 800c224:	6862      	ldr	r2, [r4, #4]
 800c226:	68db      	ldr	r3, [r3, #12]
 800c228:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c22c:	6021      	str	r1, [r4, #0]
 800c22e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c232:	bd70      	pop	{r4, r5, r6, pc}
 800c234:	0800d469 	.word	0x0800d469
 800c238:	0800d4e9 	.word	0x0800d4e9

0800c23c <__multadd>:
 800c23c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c240:	690d      	ldr	r5, [r1, #16]
 800c242:	4607      	mov	r7, r0
 800c244:	460c      	mov	r4, r1
 800c246:	461e      	mov	r6, r3
 800c248:	f101 0c14 	add.w	ip, r1, #20
 800c24c:	2000      	movs	r0, #0
 800c24e:	f8dc 3000 	ldr.w	r3, [ip]
 800c252:	b299      	uxth	r1, r3
 800c254:	fb02 6101 	mla	r1, r2, r1, r6
 800c258:	0c1e      	lsrs	r6, r3, #16
 800c25a:	0c0b      	lsrs	r3, r1, #16
 800c25c:	fb02 3306 	mla	r3, r2, r6, r3
 800c260:	b289      	uxth	r1, r1
 800c262:	3001      	adds	r0, #1
 800c264:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c268:	4285      	cmp	r5, r0
 800c26a:	f84c 1b04 	str.w	r1, [ip], #4
 800c26e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c272:	dcec      	bgt.n	800c24e <__multadd+0x12>
 800c274:	b30e      	cbz	r6, 800c2ba <__multadd+0x7e>
 800c276:	68a3      	ldr	r3, [r4, #8]
 800c278:	42ab      	cmp	r3, r5
 800c27a:	dc19      	bgt.n	800c2b0 <__multadd+0x74>
 800c27c:	6861      	ldr	r1, [r4, #4]
 800c27e:	4638      	mov	r0, r7
 800c280:	3101      	adds	r1, #1
 800c282:	f7ff ff79 	bl	800c178 <_Balloc>
 800c286:	4680      	mov	r8, r0
 800c288:	b928      	cbnz	r0, 800c296 <__multadd+0x5a>
 800c28a:	4602      	mov	r2, r0
 800c28c:	4b0c      	ldr	r3, [pc, #48]	@ (800c2c0 <__multadd+0x84>)
 800c28e:	480d      	ldr	r0, [pc, #52]	@ (800c2c4 <__multadd+0x88>)
 800c290:	21ba      	movs	r1, #186	@ 0xba
 800c292:	f000 fd2f 	bl	800ccf4 <__assert_func>
 800c296:	6922      	ldr	r2, [r4, #16]
 800c298:	3202      	adds	r2, #2
 800c29a:	f104 010c 	add.w	r1, r4, #12
 800c29e:	0092      	lsls	r2, r2, #2
 800c2a0:	300c      	adds	r0, #12
 800c2a2:	f000 fd19 	bl	800ccd8 <memcpy>
 800c2a6:	4621      	mov	r1, r4
 800c2a8:	4638      	mov	r0, r7
 800c2aa:	f7ff ffa5 	bl	800c1f8 <_Bfree>
 800c2ae:	4644      	mov	r4, r8
 800c2b0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c2b4:	3501      	adds	r5, #1
 800c2b6:	615e      	str	r6, [r3, #20]
 800c2b8:	6125      	str	r5, [r4, #16]
 800c2ba:	4620      	mov	r0, r4
 800c2bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2c0:	0800d4d8 	.word	0x0800d4d8
 800c2c4:	0800d4e9 	.word	0x0800d4e9

0800c2c8 <__hi0bits>:
 800c2c8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c2cc:	4603      	mov	r3, r0
 800c2ce:	bf36      	itet	cc
 800c2d0:	0403      	lslcc	r3, r0, #16
 800c2d2:	2000      	movcs	r0, #0
 800c2d4:	2010      	movcc	r0, #16
 800c2d6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c2da:	bf3c      	itt	cc
 800c2dc:	021b      	lslcc	r3, r3, #8
 800c2de:	3008      	addcc	r0, #8
 800c2e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c2e4:	bf3c      	itt	cc
 800c2e6:	011b      	lslcc	r3, r3, #4
 800c2e8:	3004      	addcc	r0, #4
 800c2ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c2ee:	bf3c      	itt	cc
 800c2f0:	009b      	lslcc	r3, r3, #2
 800c2f2:	3002      	addcc	r0, #2
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	db05      	blt.n	800c304 <__hi0bits+0x3c>
 800c2f8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c2fc:	f100 0001 	add.w	r0, r0, #1
 800c300:	bf08      	it	eq
 800c302:	2020      	moveq	r0, #32
 800c304:	4770      	bx	lr

0800c306 <__lo0bits>:
 800c306:	6803      	ldr	r3, [r0, #0]
 800c308:	4602      	mov	r2, r0
 800c30a:	f013 0007 	ands.w	r0, r3, #7
 800c30e:	d00b      	beq.n	800c328 <__lo0bits+0x22>
 800c310:	07d9      	lsls	r1, r3, #31
 800c312:	d421      	bmi.n	800c358 <__lo0bits+0x52>
 800c314:	0798      	lsls	r0, r3, #30
 800c316:	bf49      	itett	mi
 800c318:	085b      	lsrmi	r3, r3, #1
 800c31a:	089b      	lsrpl	r3, r3, #2
 800c31c:	2001      	movmi	r0, #1
 800c31e:	6013      	strmi	r3, [r2, #0]
 800c320:	bf5c      	itt	pl
 800c322:	6013      	strpl	r3, [r2, #0]
 800c324:	2002      	movpl	r0, #2
 800c326:	4770      	bx	lr
 800c328:	b299      	uxth	r1, r3
 800c32a:	b909      	cbnz	r1, 800c330 <__lo0bits+0x2a>
 800c32c:	0c1b      	lsrs	r3, r3, #16
 800c32e:	2010      	movs	r0, #16
 800c330:	b2d9      	uxtb	r1, r3
 800c332:	b909      	cbnz	r1, 800c338 <__lo0bits+0x32>
 800c334:	3008      	adds	r0, #8
 800c336:	0a1b      	lsrs	r3, r3, #8
 800c338:	0719      	lsls	r1, r3, #28
 800c33a:	bf04      	itt	eq
 800c33c:	091b      	lsreq	r3, r3, #4
 800c33e:	3004      	addeq	r0, #4
 800c340:	0799      	lsls	r1, r3, #30
 800c342:	bf04      	itt	eq
 800c344:	089b      	lsreq	r3, r3, #2
 800c346:	3002      	addeq	r0, #2
 800c348:	07d9      	lsls	r1, r3, #31
 800c34a:	d403      	bmi.n	800c354 <__lo0bits+0x4e>
 800c34c:	085b      	lsrs	r3, r3, #1
 800c34e:	f100 0001 	add.w	r0, r0, #1
 800c352:	d003      	beq.n	800c35c <__lo0bits+0x56>
 800c354:	6013      	str	r3, [r2, #0]
 800c356:	4770      	bx	lr
 800c358:	2000      	movs	r0, #0
 800c35a:	4770      	bx	lr
 800c35c:	2020      	movs	r0, #32
 800c35e:	4770      	bx	lr

0800c360 <__i2b>:
 800c360:	b510      	push	{r4, lr}
 800c362:	460c      	mov	r4, r1
 800c364:	2101      	movs	r1, #1
 800c366:	f7ff ff07 	bl	800c178 <_Balloc>
 800c36a:	4602      	mov	r2, r0
 800c36c:	b928      	cbnz	r0, 800c37a <__i2b+0x1a>
 800c36e:	4b05      	ldr	r3, [pc, #20]	@ (800c384 <__i2b+0x24>)
 800c370:	4805      	ldr	r0, [pc, #20]	@ (800c388 <__i2b+0x28>)
 800c372:	f240 1145 	movw	r1, #325	@ 0x145
 800c376:	f000 fcbd 	bl	800ccf4 <__assert_func>
 800c37a:	2301      	movs	r3, #1
 800c37c:	6144      	str	r4, [r0, #20]
 800c37e:	6103      	str	r3, [r0, #16]
 800c380:	bd10      	pop	{r4, pc}
 800c382:	bf00      	nop
 800c384:	0800d4d8 	.word	0x0800d4d8
 800c388:	0800d4e9 	.word	0x0800d4e9

0800c38c <__multiply>:
 800c38c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c390:	4614      	mov	r4, r2
 800c392:	690a      	ldr	r2, [r1, #16]
 800c394:	6923      	ldr	r3, [r4, #16]
 800c396:	429a      	cmp	r2, r3
 800c398:	bfa8      	it	ge
 800c39a:	4623      	movge	r3, r4
 800c39c:	460f      	mov	r7, r1
 800c39e:	bfa4      	itt	ge
 800c3a0:	460c      	movge	r4, r1
 800c3a2:	461f      	movge	r7, r3
 800c3a4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c3a8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c3ac:	68a3      	ldr	r3, [r4, #8]
 800c3ae:	6861      	ldr	r1, [r4, #4]
 800c3b0:	eb0a 0609 	add.w	r6, sl, r9
 800c3b4:	42b3      	cmp	r3, r6
 800c3b6:	b085      	sub	sp, #20
 800c3b8:	bfb8      	it	lt
 800c3ba:	3101      	addlt	r1, #1
 800c3bc:	f7ff fedc 	bl	800c178 <_Balloc>
 800c3c0:	b930      	cbnz	r0, 800c3d0 <__multiply+0x44>
 800c3c2:	4602      	mov	r2, r0
 800c3c4:	4b44      	ldr	r3, [pc, #272]	@ (800c4d8 <__multiply+0x14c>)
 800c3c6:	4845      	ldr	r0, [pc, #276]	@ (800c4dc <__multiply+0x150>)
 800c3c8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c3cc:	f000 fc92 	bl	800ccf4 <__assert_func>
 800c3d0:	f100 0514 	add.w	r5, r0, #20
 800c3d4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c3d8:	462b      	mov	r3, r5
 800c3da:	2200      	movs	r2, #0
 800c3dc:	4543      	cmp	r3, r8
 800c3de:	d321      	bcc.n	800c424 <__multiply+0x98>
 800c3e0:	f107 0114 	add.w	r1, r7, #20
 800c3e4:	f104 0214 	add.w	r2, r4, #20
 800c3e8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c3ec:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c3f0:	9302      	str	r3, [sp, #8]
 800c3f2:	1b13      	subs	r3, r2, r4
 800c3f4:	3b15      	subs	r3, #21
 800c3f6:	f023 0303 	bic.w	r3, r3, #3
 800c3fa:	3304      	adds	r3, #4
 800c3fc:	f104 0715 	add.w	r7, r4, #21
 800c400:	42ba      	cmp	r2, r7
 800c402:	bf38      	it	cc
 800c404:	2304      	movcc	r3, #4
 800c406:	9301      	str	r3, [sp, #4]
 800c408:	9b02      	ldr	r3, [sp, #8]
 800c40a:	9103      	str	r1, [sp, #12]
 800c40c:	428b      	cmp	r3, r1
 800c40e:	d80c      	bhi.n	800c42a <__multiply+0x9e>
 800c410:	2e00      	cmp	r6, #0
 800c412:	dd03      	ble.n	800c41c <__multiply+0x90>
 800c414:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d05b      	beq.n	800c4d4 <__multiply+0x148>
 800c41c:	6106      	str	r6, [r0, #16]
 800c41e:	b005      	add	sp, #20
 800c420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c424:	f843 2b04 	str.w	r2, [r3], #4
 800c428:	e7d8      	b.n	800c3dc <__multiply+0x50>
 800c42a:	f8b1 a000 	ldrh.w	sl, [r1]
 800c42e:	f1ba 0f00 	cmp.w	sl, #0
 800c432:	d024      	beq.n	800c47e <__multiply+0xf2>
 800c434:	f104 0e14 	add.w	lr, r4, #20
 800c438:	46a9      	mov	r9, r5
 800c43a:	f04f 0c00 	mov.w	ip, #0
 800c43e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c442:	f8d9 3000 	ldr.w	r3, [r9]
 800c446:	fa1f fb87 	uxth.w	fp, r7
 800c44a:	b29b      	uxth	r3, r3
 800c44c:	fb0a 330b 	mla	r3, sl, fp, r3
 800c450:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c454:	f8d9 7000 	ldr.w	r7, [r9]
 800c458:	4463      	add	r3, ip
 800c45a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c45e:	fb0a c70b 	mla	r7, sl, fp, ip
 800c462:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c466:	b29b      	uxth	r3, r3
 800c468:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c46c:	4572      	cmp	r2, lr
 800c46e:	f849 3b04 	str.w	r3, [r9], #4
 800c472:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c476:	d8e2      	bhi.n	800c43e <__multiply+0xb2>
 800c478:	9b01      	ldr	r3, [sp, #4]
 800c47a:	f845 c003 	str.w	ip, [r5, r3]
 800c47e:	9b03      	ldr	r3, [sp, #12]
 800c480:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c484:	3104      	adds	r1, #4
 800c486:	f1b9 0f00 	cmp.w	r9, #0
 800c48a:	d021      	beq.n	800c4d0 <__multiply+0x144>
 800c48c:	682b      	ldr	r3, [r5, #0]
 800c48e:	f104 0c14 	add.w	ip, r4, #20
 800c492:	46ae      	mov	lr, r5
 800c494:	f04f 0a00 	mov.w	sl, #0
 800c498:	f8bc b000 	ldrh.w	fp, [ip]
 800c49c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c4a0:	fb09 770b 	mla	r7, r9, fp, r7
 800c4a4:	4457      	add	r7, sl
 800c4a6:	b29b      	uxth	r3, r3
 800c4a8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c4ac:	f84e 3b04 	str.w	r3, [lr], #4
 800c4b0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c4b4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c4b8:	f8be 3000 	ldrh.w	r3, [lr]
 800c4bc:	fb09 330a 	mla	r3, r9, sl, r3
 800c4c0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c4c4:	4562      	cmp	r2, ip
 800c4c6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c4ca:	d8e5      	bhi.n	800c498 <__multiply+0x10c>
 800c4cc:	9f01      	ldr	r7, [sp, #4]
 800c4ce:	51eb      	str	r3, [r5, r7]
 800c4d0:	3504      	adds	r5, #4
 800c4d2:	e799      	b.n	800c408 <__multiply+0x7c>
 800c4d4:	3e01      	subs	r6, #1
 800c4d6:	e79b      	b.n	800c410 <__multiply+0x84>
 800c4d8:	0800d4d8 	.word	0x0800d4d8
 800c4dc:	0800d4e9 	.word	0x0800d4e9

0800c4e0 <__pow5mult>:
 800c4e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c4e4:	4615      	mov	r5, r2
 800c4e6:	f012 0203 	ands.w	r2, r2, #3
 800c4ea:	4607      	mov	r7, r0
 800c4ec:	460e      	mov	r6, r1
 800c4ee:	d007      	beq.n	800c500 <__pow5mult+0x20>
 800c4f0:	4c25      	ldr	r4, [pc, #148]	@ (800c588 <__pow5mult+0xa8>)
 800c4f2:	3a01      	subs	r2, #1
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c4fa:	f7ff fe9f 	bl	800c23c <__multadd>
 800c4fe:	4606      	mov	r6, r0
 800c500:	10ad      	asrs	r5, r5, #2
 800c502:	d03d      	beq.n	800c580 <__pow5mult+0xa0>
 800c504:	69fc      	ldr	r4, [r7, #28]
 800c506:	b97c      	cbnz	r4, 800c528 <__pow5mult+0x48>
 800c508:	2010      	movs	r0, #16
 800c50a:	f7ff fd7f 	bl	800c00c <malloc>
 800c50e:	4602      	mov	r2, r0
 800c510:	61f8      	str	r0, [r7, #28]
 800c512:	b928      	cbnz	r0, 800c520 <__pow5mult+0x40>
 800c514:	4b1d      	ldr	r3, [pc, #116]	@ (800c58c <__pow5mult+0xac>)
 800c516:	481e      	ldr	r0, [pc, #120]	@ (800c590 <__pow5mult+0xb0>)
 800c518:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c51c:	f000 fbea 	bl	800ccf4 <__assert_func>
 800c520:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c524:	6004      	str	r4, [r0, #0]
 800c526:	60c4      	str	r4, [r0, #12]
 800c528:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c52c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c530:	b94c      	cbnz	r4, 800c546 <__pow5mult+0x66>
 800c532:	f240 2171 	movw	r1, #625	@ 0x271
 800c536:	4638      	mov	r0, r7
 800c538:	f7ff ff12 	bl	800c360 <__i2b>
 800c53c:	2300      	movs	r3, #0
 800c53e:	f8c8 0008 	str.w	r0, [r8, #8]
 800c542:	4604      	mov	r4, r0
 800c544:	6003      	str	r3, [r0, #0]
 800c546:	f04f 0900 	mov.w	r9, #0
 800c54a:	07eb      	lsls	r3, r5, #31
 800c54c:	d50a      	bpl.n	800c564 <__pow5mult+0x84>
 800c54e:	4631      	mov	r1, r6
 800c550:	4622      	mov	r2, r4
 800c552:	4638      	mov	r0, r7
 800c554:	f7ff ff1a 	bl	800c38c <__multiply>
 800c558:	4631      	mov	r1, r6
 800c55a:	4680      	mov	r8, r0
 800c55c:	4638      	mov	r0, r7
 800c55e:	f7ff fe4b 	bl	800c1f8 <_Bfree>
 800c562:	4646      	mov	r6, r8
 800c564:	106d      	asrs	r5, r5, #1
 800c566:	d00b      	beq.n	800c580 <__pow5mult+0xa0>
 800c568:	6820      	ldr	r0, [r4, #0]
 800c56a:	b938      	cbnz	r0, 800c57c <__pow5mult+0x9c>
 800c56c:	4622      	mov	r2, r4
 800c56e:	4621      	mov	r1, r4
 800c570:	4638      	mov	r0, r7
 800c572:	f7ff ff0b 	bl	800c38c <__multiply>
 800c576:	6020      	str	r0, [r4, #0]
 800c578:	f8c0 9000 	str.w	r9, [r0]
 800c57c:	4604      	mov	r4, r0
 800c57e:	e7e4      	b.n	800c54a <__pow5mult+0x6a>
 800c580:	4630      	mov	r0, r6
 800c582:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c586:	bf00      	nop
 800c588:	0800d544 	.word	0x0800d544
 800c58c:	0800d469 	.word	0x0800d469
 800c590:	0800d4e9 	.word	0x0800d4e9

0800c594 <__lshift>:
 800c594:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c598:	460c      	mov	r4, r1
 800c59a:	6849      	ldr	r1, [r1, #4]
 800c59c:	6923      	ldr	r3, [r4, #16]
 800c59e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c5a2:	68a3      	ldr	r3, [r4, #8]
 800c5a4:	4607      	mov	r7, r0
 800c5a6:	4691      	mov	r9, r2
 800c5a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c5ac:	f108 0601 	add.w	r6, r8, #1
 800c5b0:	42b3      	cmp	r3, r6
 800c5b2:	db0b      	blt.n	800c5cc <__lshift+0x38>
 800c5b4:	4638      	mov	r0, r7
 800c5b6:	f7ff fddf 	bl	800c178 <_Balloc>
 800c5ba:	4605      	mov	r5, r0
 800c5bc:	b948      	cbnz	r0, 800c5d2 <__lshift+0x3e>
 800c5be:	4602      	mov	r2, r0
 800c5c0:	4b28      	ldr	r3, [pc, #160]	@ (800c664 <__lshift+0xd0>)
 800c5c2:	4829      	ldr	r0, [pc, #164]	@ (800c668 <__lshift+0xd4>)
 800c5c4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c5c8:	f000 fb94 	bl	800ccf4 <__assert_func>
 800c5cc:	3101      	adds	r1, #1
 800c5ce:	005b      	lsls	r3, r3, #1
 800c5d0:	e7ee      	b.n	800c5b0 <__lshift+0x1c>
 800c5d2:	2300      	movs	r3, #0
 800c5d4:	f100 0114 	add.w	r1, r0, #20
 800c5d8:	f100 0210 	add.w	r2, r0, #16
 800c5dc:	4618      	mov	r0, r3
 800c5de:	4553      	cmp	r3, sl
 800c5e0:	db33      	blt.n	800c64a <__lshift+0xb6>
 800c5e2:	6920      	ldr	r0, [r4, #16]
 800c5e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c5e8:	f104 0314 	add.w	r3, r4, #20
 800c5ec:	f019 091f 	ands.w	r9, r9, #31
 800c5f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c5f4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c5f8:	d02b      	beq.n	800c652 <__lshift+0xbe>
 800c5fa:	f1c9 0e20 	rsb	lr, r9, #32
 800c5fe:	468a      	mov	sl, r1
 800c600:	2200      	movs	r2, #0
 800c602:	6818      	ldr	r0, [r3, #0]
 800c604:	fa00 f009 	lsl.w	r0, r0, r9
 800c608:	4310      	orrs	r0, r2
 800c60a:	f84a 0b04 	str.w	r0, [sl], #4
 800c60e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c612:	459c      	cmp	ip, r3
 800c614:	fa22 f20e 	lsr.w	r2, r2, lr
 800c618:	d8f3      	bhi.n	800c602 <__lshift+0x6e>
 800c61a:	ebac 0304 	sub.w	r3, ip, r4
 800c61e:	3b15      	subs	r3, #21
 800c620:	f023 0303 	bic.w	r3, r3, #3
 800c624:	3304      	adds	r3, #4
 800c626:	f104 0015 	add.w	r0, r4, #21
 800c62a:	4584      	cmp	ip, r0
 800c62c:	bf38      	it	cc
 800c62e:	2304      	movcc	r3, #4
 800c630:	50ca      	str	r2, [r1, r3]
 800c632:	b10a      	cbz	r2, 800c638 <__lshift+0xa4>
 800c634:	f108 0602 	add.w	r6, r8, #2
 800c638:	3e01      	subs	r6, #1
 800c63a:	4638      	mov	r0, r7
 800c63c:	612e      	str	r6, [r5, #16]
 800c63e:	4621      	mov	r1, r4
 800c640:	f7ff fdda 	bl	800c1f8 <_Bfree>
 800c644:	4628      	mov	r0, r5
 800c646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c64a:	f842 0f04 	str.w	r0, [r2, #4]!
 800c64e:	3301      	adds	r3, #1
 800c650:	e7c5      	b.n	800c5de <__lshift+0x4a>
 800c652:	3904      	subs	r1, #4
 800c654:	f853 2b04 	ldr.w	r2, [r3], #4
 800c658:	f841 2f04 	str.w	r2, [r1, #4]!
 800c65c:	459c      	cmp	ip, r3
 800c65e:	d8f9      	bhi.n	800c654 <__lshift+0xc0>
 800c660:	e7ea      	b.n	800c638 <__lshift+0xa4>
 800c662:	bf00      	nop
 800c664:	0800d4d8 	.word	0x0800d4d8
 800c668:	0800d4e9 	.word	0x0800d4e9

0800c66c <__mcmp>:
 800c66c:	690a      	ldr	r2, [r1, #16]
 800c66e:	4603      	mov	r3, r0
 800c670:	6900      	ldr	r0, [r0, #16]
 800c672:	1a80      	subs	r0, r0, r2
 800c674:	b530      	push	{r4, r5, lr}
 800c676:	d10e      	bne.n	800c696 <__mcmp+0x2a>
 800c678:	3314      	adds	r3, #20
 800c67a:	3114      	adds	r1, #20
 800c67c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c680:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c684:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c688:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c68c:	4295      	cmp	r5, r2
 800c68e:	d003      	beq.n	800c698 <__mcmp+0x2c>
 800c690:	d205      	bcs.n	800c69e <__mcmp+0x32>
 800c692:	f04f 30ff 	mov.w	r0, #4294967295
 800c696:	bd30      	pop	{r4, r5, pc}
 800c698:	42a3      	cmp	r3, r4
 800c69a:	d3f3      	bcc.n	800c684 <__mcmp+0x18>
 800c69c:	e7fb      	b.n	800c696 <__mcmp+0x2a>
 800c69e:	2001      	movs	r0, #1
 800c6a0:	e7f9      	b.n	800c696 <__mcmp+0x2a>
	...

0800c6a4 <__mdiff>:
 800c6a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6a8:	4689      	mov	r9, r1
 800c6aa:	4606      	mov	r6, r0
 800c6ac:	4611      	mov	r1, r2
 800c6ae:	4648      	mov	r0, r9
 800c6b0:	4614      	mov	r4, r2
 800c6b2:	f7ff ffdb 	bl	800c66c <__mcmp>
 800c6b6:	1e05      	subs	r5, r0, #0
 800c6b8:	d112      	bne.n	800c6e0 <__mdiff+0x3c>
 800c6ba:	4629      	mov	r1, r5
 800c6bc:	4630      	mov	r0, r6
 800c6be:	f7ff fd5b 	bl	800c178 <_Balloc>
 800c6c2:	4602      	mov	r2, r0
 800c6c4:	b928      	cbnz	r0, 800c6d2 <__mdiff+0x2e>
 800c6c6:	4b3f      	ldr	r3, [pc, #252]	@ (800c7c4 <__mdiff+0x120>)
 800c6c8:	f240 2137 	movw	r1, #567	@ 0x237
 800c6cc:	483e      	ldr	r0, [pc, #248]	@ (800c7c8 <__mdiff+0x124>)
 800c6ce:	f000 fb11 	bl	800ccf4 <__assert_func>
 800c6d2:	2301      	movs	r3, #1
 800c6d4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c6d8:	4610      	mov	r0, r2
 800c6da:	b003      	add	sp, #12
 800c6dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6e0:	bfbc      	itt	lt
 800c6e2:	464b      	movlt	r3, r9
 800c6e4:	46a1      	movlt	r9, r4
 800c6e6:	4630      	mov	r0, r6
 800c6e8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c6ec:	bfba      	itte	lt
 800c6ee:	461c      	movlt	r4, r3
 800c6f0:	2501      	movlt	r5, #1
 800c6f2:	2500      	movge	r5, #0
 800c6f4:	f7ff fd40 	bl	800c178 <_Balloc>
 800c6f8:	4602      	mov	r2, r0
 800c6fa:	b918      	cbnz	r0, 800c704 <__mdiff+0x60>
 800c6fc:	4b31      	ldr	r3, [pc, #196]	@ (800c7c4 <__mdiff+0x120>)
 800c6fe:	f240 2145 	movw	r1, #581	@ 0x245
 800c702:	e7e3      	b.n	800c6cc <__mdiff+0x28>
 800c704:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c708:	6926      	ldr	r6, [r4, #16]
 800c70a:	60c5      	str	r5, [r0, #12]
 800c70c:	f109 0310 	add.w	r3, r9, #16
 800c710:	f109 0514 	add.w	r5, r9, #20
 800c714:	f104 0e14 	add.w	lr, r4, #20
 800c718:	f100 0b14 	add.w	fp, r0, #20
 800c71c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c720:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c724:	9301      	str	r3, [sp, #4]
 800c726:	46d9      	mov	r9, fp
 800c728:	f04f 0c00 	mov.w	ip, #0
 800c72c:	9b01      	ldr	r3, [sp, #4]
 800c72e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c732:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c736:	9301      	str	r3, [sp, #4]
 800c738:	fa1f f38a 	uxth.w	r3, sl
 800c73c:	4619      	mov	r1, r3
 800c73e:	b283      	uxth	r3, r0
 800c740:	1acb      	subs	r3, r1, r3
 800c742:	0c00      	lsrs	r0, r0, #16
 800c744:	4463      	add	r3, ip
 800c746:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c74a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c74e:	b29b      	uxth	r3, r3
 800c750:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c754:	4576      	cmp	r6, lr
 800c756:	f849 3b04 	str.w	r3, [r9], #4
 800c75a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c75e:	d8e5      	bhi.n	800c72c <__mdiff+0x88>
 800c760:	1b33      	subs	r3, r6, r4
 800c762:	3b15      	subs	r3, #21
 800c764:	f023 0303 	bic.w	r3, r3, #3
 800c768:	3415      	adds	r4, #21
 800c76a:	3304      	adds	r3, #4
 800c76c:	42a6      	cmp	r6, r4
 800c76e:	bf38      	it	cc
 800c770:	2304      	movcc	r3, #4
 800c772:	441d      	add	r5, r3
 800c774:	445b      	add	r3, fp
 800c776:	461e      	mov	r6, r3
 800c778:	462c      	mov	r4, r5
 800c77a:	4544      	cmp	r4, r8
 800c77c:	d30e      	bcc.n	800c79c <__mdiff+0xf8>
 800c77e:	f108 0103 	add.w	r1, r8, #3
 800c782:	1b49      	subs	r1, r1, r5
 800c784:	f021 0103 	bic.w	r1, r1, #3
 800c788:	3d03      	subs	r5, #3
 800c78a:	45a8      	cmp	r8, r5
 800c78c:	bf38      	it	cc
 800c78e:	2100      	movcc	r1, #0
 800c790:	440b      	add	r3, r1
 800c792:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c796:	b191      	cbz	r1, 800c7be <__mdiff+0x11a>
 800c798:	6117      	str	r7, [r2, #16]
 800c79a:	e79d      	b.n	800c6d8 <__mdiff+0x34>
 800c79c:	f854 1b04 	ldr.w	r1, [r4], #4
 800c7a0:	46e6      	mov	lr, ip
 800c7a2:	0c08      	lsrs	r0, r1, #16
 800c7a4:	fa1c fc81 	uxtah	ip, ip, r1
 800c7a8:	4471      	add	r1, lr
 800c7aa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c7ae:	b289      	uxth	r1, r1
 800c7b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c7b4:	f846 1b04 	str.w	r1, [r6], #4
 800c7b8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c7bc:	e7dd      	b.n	800c77a <__mdiff+0xd6>
 800c7be:	3f01      	subs	r7, #1
 800c7c0:	e7e7      	b.n	800c792 <__mdiff+0xee>
 800c7c2:	bf00      	nop
 800c7c4:	0800d4d8 	.word	0x0800d4d8
 800c7c8:	0800d4e9 	.word	0x0800d4e9

0800c7cc <__d2b>:
 800c7cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c7d0:	460f      	mov	r7, r1
 800c7d2:	2101      	movs	r1, #1
 800c7d4:	ec59 8b10 	vmov	r8, r9, d0
 800c7d8:	4616      	mov	r6, r2
 800c7da:	f7ff fccd 	bl	800c178 <_Balloc>
 800c7de:	4604      	mov	r4, r0
 800c7e0:	b930      	cbnz	r0, 800c7f0 <__d2b+0x24>
 800c7e2:	4602      	mov	r2, r0
 800c7e4:	4b23      	ldr	r3, [pc, #140]	@ (800c874 <__d2b+0xa8>)
 800c7e6:	4824      	ldr	r0, [pc, #144]	@ (800c878 <__d2b+0xac>)
 800c7e8:	f240 310f 	movw	r1, #783	@ 0x30f
 800c7ec:	f000 fa82 	bl	800ccf4 <__assert_func>
 800c7f0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c7f4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c7f8:	b10d      	cbz	r5, 800c7fe <__d2b+0x32>
 800c7fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c7fe:	9301      	str	r3, [sp, #4]
 800c800:	f1b8 0300 	subs.w	r3, r8, #0
 800c804:	d023      	beq.n	800c84e <__d2b+0x82>
 800c806:	4668      	mov	r0, sp
 800c808:	9300      	str	r3, [sp, #0]
 800c80a:	f7ff fd7c 	bl	800c306 <__lo0bits>
 800c80e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c812:	b1d0      	cbz	r0, 800c84a <__d2b+0x7e>
 800c814:	f1c0 0320 	rsb	r3, r0, #32
 800c818:	fa02 f303 	lsl.w	r3, r2, r3
 800c81c:	430b      	orrs	r3, r1
 800c81e:	40c2      	lsrs	r2, r0
 800c820:	6163      	str	r3, [r4, #20]
 800c822:	9201      	str	r2, [sp, #4]
 800c824:	9b01      	ldr	r3, [sp, #4]
 800c826:	61a3      	str	r3, [r4, #24]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	bf0c      	ite	eq
 800c82c:	2201      	moveq	r2, #1
 800c82e:	2202      	movne	r2, #2
 800c830:	6122      	str	r2, [r4, #16]
 800c832:	b1a5      	cbz	r5, 800c85e <__d2b+0x92>
 800c834:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c838:	4405      	add	r5, r0
 800c83a:	603d      	str	r5, [r7, #0]
 800c83c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c840:	6030      	str	r0, [r6, #0]
 800c842:	4620      	mov	r0, r4
 800c844:	b003      	add	sp, #12
 800c846:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c84a:	6161      	str	r1, [r4, #20]
 800c84c:	e7ea      	b.n	800c824 <__d2b+0x58>
 800c84e:	a801      	add	r0, sp, #4
 800c850:	f7ff fd59 	bl	800c306 <__lo0bits>
 800c854:	9b01      	ldr	r3, [sp, #4]
 800c856:	6163      	str	r3, [r4, #20]
 800c858:	3020      	adds	r0, #32
 800c85a:	2201      	movs	r2, #1
 800c85c:	e7e8      	b.n	800c830 <__d2b+0x64>
 800c85e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c862:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c866:	6038      	str	r0, [r7, #0]
 800c868:	6918      	ldr	r0, [r3, #16]
 800c86a:	f7ff fd2d 	bl	800c2c8 <__hi0bits>
 800c86e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c872:	e7e5      	b.n	800c840 <__d2b+0x74>
 800c874:	0800d4d8 	.word	0x0800d4d8
 800c878:	0800d4e9 	.word	0x0800d4e9

0800c87c <__ssputs_r>:
 800c87c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c880:	688e      	ldr	r6, [r1, #8]
 800c882:	461f      	mov	r7, r3
 800c884:	42be      	cmp	r6, r7
 800c886:	680b      	ldr	r3, [r1, #0]
 800c888:	4682      	mov	sl, r0
 800c88a:	460c      	mov	r4, r1
 800c88c:	4690      	mov	r8, r2
 800c88e:	d82d      	bhi.n	800c8ec <__ssputs_r+0x70>
 800c890:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c894:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c898:	d026      	beq.n	800c8e8 <__ssputs_r+0x6c>
 800c89a:	6965      	ldr	r5, [r4, #20]
 800c89c:	6909      	ldr	r1, [r1, #16]
 800c89e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c8a2:	eba3 0901 	sub.w	r9, r3, r1
 800c8a6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c8aa:	1c7b      	adds	r3, r7, #1
 800c8ac:	444b      	add	r3, r9
 800c8ae:	106d      	asrs	r5, r5, #1
 800c8b0:	429d      	cmp	r5, r3
 800c8b2:	bf38      	it	cc
 800c8b4:	461d      	movcc	r5, r3
 800c8b6:	0553      	lsls	r3, r2, #21
 800c8b8:	d527      	bpl.n	800c90a <__ssputs_r+0x8e>
 800c8ba:	4629      	mov	r1, r5
 800c8bc:	f7ff fbd0 	bl	800c060 <_malloc_r>
 800c8c0:	4606      	mov	r6, r0
 800c8c2:	b360      	cbz	r0, 800c91e <__ssputs_r+0xa2>
 800c8c4:	6921      	ldr	r1, [r4, #16]
 800c8c6:	464a      	mov	r2, r9
 800c8c8:	f000 fa06 	bl	800ccd8 <memcpy>
 800c8cc:	89a3      	ldrh	r3, [r4, #12]
 800c8ce:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c8d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c8d6:	81a3      	strh	r3, [r4, #12]
 800c8d8:	6126      	str	r6, [r4, #16]
 800c8da:	6165      	str	r5, [r4, #20]
 800c8dc:	444e      	add	r6, r9
 800c8de:	eba5 0509 	sub.w	r5, r5, r9
 800c8e2:	6026      	str	r6, [r4, #0]
 800c8e4:	60a5      	str	r5, [r4, #8]
 800c8e6:	463e      	mov	r6, r7
 800c8e8:	42be      	cmp	r6, r7
 800c8ea:	d900      	bls.n	800c8ee <__ssputs_r+0x72>
 800c8ec:	463e      	mov	r6, r7
 800c8ee:	6820      	ldr	r0, [r4, #0]
 800c8f0:	4632      	mov	r2, r6
 800c8f2:	4641      	mov	r1, r8
 800c8f4:	f000 f9c6 	bl	800cc84 <memmove>
 800c8f8:	68a3      	ldr	r3, [r4, #8]
 800c8fa:	1b9b      	subs	r3, r3, r6
 800c8fc:	60a3      	str	r3, [r4, #8]
 800c8fe:	6823      	ldr	r3, [r4, #0]
 800c900:	4433      	add	r3, r6
 800c902:	6023      	str	r3, [r4, #0]
 800c904:	2000      	movs	r0, #0
 800c906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c90a:	462a      	mov	r2, r5
 800c90c:	f000 fa36 	bl	800cd7c <_realloc_r>
 800c910:	4606      	mov	r6, r0
 800c912:	2800      	cmp	r0, #0
 800c914:	d1e0      	bne.n	800c8d8 <__ssputs_r+0x5c>
 800c916:	6921      	ldr	r1, [r4, #16]
 800c918:	4650      	mov	r0, sl
 800c91a:	f7ff fb2d 	bl	800bf78 <_free_r>
 800c91e:	230c      	movs	r3, #12
 800c920:	f8ca 3000 	str.w	r3, [sl]
 800c924:	89a3      	ldrh	r3, [r4, #12]
 800c926:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c92a:	81a3      	strh	r3, [r4, #12]
 800c92c:	f04f 30ff 	mov.w	r0, #4294967295
 800c930:	e7e9      	b.n	800c906 <__ssputs_r+0x8a>
	...

0800c934 <_svfiprintf_r>:
 800c934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c938:	4698      	mov	r8, r3
 800c93a:	898b      	ldrh	r3, [r1, #12]
 800c93c:	061b      	lsls	r3, r3, #24
 800c93e:	b09d      	sub	sp, #116	@ 0x74
 800c940:	4607      	mov	r7, r0
 800c942:	460d      	mov	r5, r1
 800c944:	4614      	mov	r4, r2
 800c946:	d510      	bpl.n	800c96a <_svfiprintf_r+0x36>
 800c948:	690b      	ldr	r3, [r1, #16]
 800c94a:	b973      	cbnz	r3, 800c96a <_svfiprintf_r+0x36>
 800c94c:	2140      	movs	r1, #64	@ 0x40
 800c94e:	f7ff fb87 	bl	800c060 <_malloc_r>
 800c952:	6028      	str	r0, [r5, #0]
 800c954:	6128      	str	r0, [r5, #16]
 800c956:	b930      	cbnz	r0, 800c966 <_svfiprintf_r+0x32>
 800c958:	230c      	movs	r3, #12
 800c95a:	603b      	str	r3, [r7, #0]
 800c95c:	f04f 30ff 	mov.w	r0, #4294967295
 800c960:	b01d      	add	sp, #116	@ 0x74
 800c962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c966:	2340      	movs	r3, #64	@ 0x40
 800c968:	616b      	str	r3, [r5, #20]
 800c96a:	2300      	movs	r3, #0
 800c96c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c96e:	2320      	movs	r3, #32
 800c970:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c974:	f8cd 800c 	str.w	r8, [sp, #12]
 800c978:	2330      	movs	r3, #48	@ 0x30
 800c97a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800cb18 <_svfiprintf_r+0x1e4>
 800c97e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c982:	f04f 0901 	mov.w	r9, #1
 800c986:	4623      	mov	r3, r4
 800c988:	469a      	mov	sl, r3
 800c98a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c98e:	b10a      	cbz	r2, 800c994 <_svfiprintf_r+0x60>
 800c990:	2a25      	cmp	r2, #37	@ 0x25
 800c992:	d1f9      	bne.n	800c988 <_svfiprintf_r+0x54>
 800c994:	ebba 0b04 	subs.w	fp, sl, r4
 800c998:	d00b      	beq.n	800c9b2 <_svfiprintf_r+0x7e>
 800c99a:	465b      	mov	r3, fp
 800c99c:	4622      	mov	r2, r4
 800c99e:	4629      	mov	r1, r5
 800c9a0:	4638      	mov	r0, r7
 800c9a2:	f7ff ff6b 	bl	800c87c <__ssputs_r>
 800c9a6:	3001      	adds	r0, #1
 800c9a8:	f000 80a7 	beq.w	800cafa <_svfiprintf_r+0x1c6>
 800c9ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c9ae:	445a      	add	r2, fp
 800c9b0:	9209      	str	r2, [sp, #36]	@ 0x24
 800c9b2:	f89a 3000 	ldrb.w	r3, [sl]
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	f000 809f 	beq.w	800cafa <_svfiprintf_r+0x1c6>
 800c9bc:	2300      	movs	r3, #0
 800c9be:	f04f 32ff 	mov.w	r2, #4294967295
 800c9c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c9c6:	f10a 0a01 	add.w	sl, sl, #1
 800c9ca:	9304      	str	r3, [sp, #16]
 800c9cc:	9307      	str	r3, [sp, #28]
 800c9ce:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c9d2:	931a      	str	r3, [sp, #104]	@ 0x68
 800c9d4:	4654      	mov	r4, sl
 800c9d6:	2205      	movs	r2, #5
 800c9d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9dc:	484e      	ldr	r0, [pc, #312]	@ (800cb18 <_svfiprintf_r+0x1e4>)
 800c9de:	f7f3 fc17 	bl	8000210 <memchr>
 800c9e2:	9a04      	ldr	r2, [sp, #16]
 800c9e4:	b9d8      	cbnz	r0, 800ca1e <_svfiprintf_r+0xea>
 800c9e6:	06d0      	lsls	r0, r2, #27
 800c9e8:	bf44      	itt	mi
 800c9ea:	2320      	movmi	r3, #32
 800c9ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c9f0:	0711      	lsls	r1, r2, #28
 800c9f2:	bf44      	itt	mi
 800c9f4:	232b      	movmi	r3, #43	@ 0x2b
 800c9f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c9fa:	f89a 3000 	ldrb.w	r3, [sl]
 800c9fe:	2b2a      	cmp	r3, #42	@ 0x2a
 800ca00:	d015      	beq.n	800ca2e <_svfiprintf_r+0xfa>
 800ca02:	9a07      	ldr	r2, [sp, #28]
 800ca04:	4654      	mov	r4, sl
 800ca06:	2000      	movs	r0, #0
 800ca08:	f04f 0c0a 	mov.w	ip, #10
 800ca0c:	4621      	mov	r1, r4
 800ca0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ca12:	3b30      	subs	r3, #48	@ 0x30
 800ca14:	2b09      	cmp	r3, #9
 800ca16:	d94b      	bls.n	800cab0 <_svfiprintf_r+0x17c>
 800ca18:	b1b0      	cbz	r0, 800ca48 <_svfiprintf_r+0x114>
 800ca1a:	9207      	str	r2, [sp, #28]
 800ca1c:	e014      	b.n	800ca48 <_svfiprintf_r+0x114>
 800ca1e:	eba0 0308 	sub.w	r3, r0, r8
 800ca22:	fa09 f303 	lsl.w	r3, r9, r3
 800ca26:	4313      	orrs	r3, r2
 800ca28:	9304      	str	r3, [sp, #16]
 800ca2a:	46a2      	mov	sl, r4
 800ca2c:	e7d2      	b.n	800c9d4 <_svfiprintf_r+0xa0>
 800ca2e:	9b03      	ldr	r3, [sp, #12]
 800ca30:	1d19      	adds	r1, r3, #4
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	9103      	str	r1, [sp, #12]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	bfbb      	ittet	lt
 800ca3a:	425b      	neglt	r3, r3
 800ca3c:	f042 0202 	orrlt.w	r2, r2, #2
 800ca40:	9307      	strge	r3, [sp, #28]
 800ca42:	9307      	strlt	r3, [sp, #28]
 800ca44:	bfb8      	it	lt
 800ca46:	9204      	strlt	r2, [sp, #16]
 800ca48:	7823      	ldrb	r3, [r4, #0]
 800ca4a:	2b2e      	cmp	r3, #46	@ 0x2e
 800ca4c:	d10a      	bne.n	800ca64 <_svfiprintf_r+0x130>
 800ca4e:	7863      	ldrb	r3, [r4, #1]
 800ca50:	2b2a      	cmp	r3, #42	@ 0x2a
 800ca52:	d132      	bne.n	800caba <_svfiprintf_r+0x186>
 800ca54:	9b03      	ldr	r3, [sp, #12]
 800ca56:	1d1a      	adds	r2, r3, #4
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	9203      	str	r2, [sp, #12]
 800ca5c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ca60:	3402      	adds	r4, #2
 800ca62:	9305      	str	r3, [sp, #20]
 800ca64:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800cb28 <_svfiprintf_r+0x1f4>
 800ca68:	7821      	ldrb	r1, [r4, #0]
 800ca6a:	2203      	movs	r2, #3
 800ca6c:	4650      	mov	r0, sl
 800ca6e:	f7f3 fbcf 	bl	8000210 <memchr>
 800ca72:	b138      	cbz	r0, 800ca84 <_svfiprintf_r+0x150>
 800ca74:	9b04      	ldr	r3, [sp, #16]
 800ca76:	eba0 000a 	sub.w	r0, r0, sl
 800ca7a:	2240      	movs	r2, #64	@ 0x40
 800ca7c:	4082      	lsls	r2, r0
 800ca7e:	4313      	orrs	r3, r2
 800ca80:	3401      	adds	r4, #1
 800ca82:	9304      	str	r3, [sp, #16]
 800ca84:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca88:	4824      	ldr	r0, [pc, #144]	@ (800cb1c <_svfiprintf_r+0x1e8>)
 800ca8a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ca8e:	2206      	movs	r2, #6
 800ca90:	f7f3 fbbe 	bl	8000210 <memchr>
 800ca94:	2800      	cmp	r0, #0
 800ca96:	d036      	beq.n	800cb06 <_svfiprintf_r+0x1d2>
 800ca98:	4b21      	ldr	r3, [pc, #132]	@ (800cb20 <_svfiprintf_r+0x1ec>)
 800ca9a:	bb1b      	cbnz	r3, 800cae4 <_svfiprintf_r+0x1b0>
 800ca9c:	9b03      	ldr	r3, [sp, #12]
 800ca9e:	3307      	adds	r3, #7
 800caa0:	f023 0307 	bic.w	r3, r3, #7
 800caa4:	3308      	adds	r3, #8
 800caa6:	9303      	str	r3, [sp, #12]
 800caa8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800caaa:	4433      	add	r3, r6
 800caac:	9309      	str	r3, [sp, #36]	@ 0x24
 800caae:	e76a      	b.n	800c986 <_svfiprintf_r+0x52>
 800cab0:	fb0c 3202 	mla	r2, ip, r2, r3
 800cab4:	460c      	mov	r4, r1
 800cab6:	2001      	movs	r0, #1
 800cab8:	e7a8      	b.n	800ca0c <_svfiprintf_r+0xd8>
 800caba:	2300      	movs	r3, #0
 800cabc:	3401      	adds	r4, #1
 800cabe:	9305      	str	r3, [sp, #20]
 800cac0:	4619      	mov	r1, r3
 800cac2:	f04f 0c0a 	mov.w	ip, #10
 800cac6:	4620      	mov	r0, r4
 800cac8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cacc:	3a30      	subs	r2, #48	@ 0x30
 800cace:	2a09      	cmp	r2, #9
 800cad0:	d903      	bls.n	800cada <_svfiprintf_r+0x1a6>
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d0c6      	beq.n	800ca64 <_svfiprintf_r+0x130>
 800cad6:	9105      	str	r1, [sp, #20]
 800cad8:	e7c4      	b.n	800ca64 <_svfiprintf_r+0x130>
 800cada:	fb0c 2101 	mla	r1, ip, r1, r2
 800cade:	4604      	mov	r4, r0
 800cae0:	2301      	movs	r3, #1
 800cae2:	e7f0      	b.n	800cac6 <_svfiprintf_r+0x192>
 800cae4:	ab03      	add	r3, sp, #12
 800cae6:	9300      	str	r3, [sp, #0]
 800cae8:	462a      	mov	r2, r5
 800caea:	4b0e      	ldr	r3, [pc, #56]	@ (800cb24 <_svfiprintf_r+0x1f0>)
 800caec:	a904      	add	r1, sp, #16
 800caee:	4638      	mov	r0, r7
 800caf0:	f7fd fe96 	bl	800a820 <_printf_float>
 800caf4:	1c42      	adds	r2, r0, #1
 800caf6:	4606      	mov	r6, r0
 800caf8:	d1d6      	bne.n	800caa8 <_svfiprintf_r+0x174>
 800cafa:	89ab      	ldrh	r3, [r5, #12]
 800cafc:	065b      	lsls	r3, r3, #25
 800cafe:	f53f af2d 	bmi.w	800c95c <_svfiprintf_r+0x28>
 800cb02:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cb04:	e72c      	b.n	800c960 <_svfiprintf_r+0x2c>
 800cb06:	ab03      	add	r3, sp, #12
 800cb08:	9300      	str	r3, [sp, #0]
 800cb0a:	462a      	mov	r2, r5
 800cb0c:	4b05      	ldr	r3, [pc, #20]	@ (800cb24 <_svfiprintf_r+0x1f0>)
 800cb0e:	a904      	add	r1, sp, #16
 800cb10:	4638      	mov	r0, r7
 800cb12:	f7fe f91d 	bl	800ad50 <_printf_i>
 800cb16:	e7ed      	b.n	800caf4 <_svfiprintf_r+0x1c0>
 800cb18:	0800d640 	.word	0x0800d640
 800cb1c:	0800d64a 	.word	0x0800d64a
 800cb20:	0800a821 	.word	0x0800a821
 800cb24:	0800c87d 	.word	0x0800c87d
 800cb28:	0800d646 	.word	0x0800d646

0800cb2c <__sflush_r>:
 800cb2c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cb30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb34:	0716      	lsls	r6, r2, #28
 800cb36:	4605      	mov	r5, r0
 800cb38:	460c      	mov	r4, r1
 800cb3a:	d454      	bmi.n	800cbe6 <__sflush_r+0xba>
 800cb3c:	684b      	ldr	r3, [r1, #4]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	dc02      	bgt.n	800cb48 <__sflush_r+0x1c>
 800cb42:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	dd48      	ble.n	800cbda <__sflush_r+0xae>
 800cb48:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cb4a:	2e00      	cmp	r6, #0
 800cb4c:	d045      	beq.n	800cbda <__sflush_r+0xae>
 800cb4e:	2300      	movs	r3, #0
 800cb50:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800cb54:	682f      	ldr	r7, [r5, #0]
 800cb56:	6a21      	ldr	r1, [r4, #32]
 800cb58:	602b      	str	r3, [r5, #0]
 800cb5a:	d030      	beq.n	800cbbe <__sflush_r+0x92>
 800cb5c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800cb5e:	89a3      	ldrh	r3, [r4, #12]
 800cb60:	0759      	lsls	r1, r3, #29
 800cb62:	d505      	bpl.n	800cb70 <__sflush_r+0x44>
 800cb64:	6863      	ldr	r3, [r4, #4]
 800cb66:	1ad2      	subs	r2, r2, r3
 800cb68:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cb6a:	b10b      	cbz	r3, 800cb70 <__sflush_r+0x44>
 800cb6c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800cb6e:	1ad2      	subs	r2, r2, r3
 800cb70:	2300      	movs	r3, #0
 800cb72:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cb74:	6a21      	ldr	r1, [r4, #32]
 800cb76:	4628      	mov	r0, r5
 800cb78:	47b0      	blx	r6
 800cb7a:	1c43      	adds	r3, r0, #1
 800cb7c:	89a3      	ldrh	r3, [r4, #12]
 800cb7e:	d106      	bne.n	800cb8e <__sflush_r+0x62>
 800cb80:	6829      	ldr	r1, [r5, #0]
 800cb82:	291d      	cmp	r1, #29
 800cb84:	d82b      	bhi.n	800cbde <__sflush_r+0xb2>
 800cb86:	4a2a      	ldr	r2, [pc, #168]	@ (800cc30 <__sflush_r+0x104>)
 800cb88:	410a      	asrs	r2, r1
 800cb8a:	07d6      	lsls	r6, r2, #31
 800cb8c:	d427      	bmi.n	800cbde <__sflush_r+0xb2>
 800cb8e:	2200      	movs	r2, #0
 800cb90:	6062      	str	r2, [r4, #4]
 800cb92:	04d9      	lsls	r1, r3, #19
 800cb94:	6922      	ldr	r2, [r4, #16]
 800cb96:	6022      	str	r2, [r4, #0]
 800cb98:	d504      	bpl.n	800cba4 <__sflush_r+0x78>
 800cb9a:	1c42      	adds	r2, r0, #1
 800cb9c:	d101      	bne.n	800cba2 <__sflush_r+0x76>
 800cb9e:	682b      	ldr	r3, [r5, #0]
 800cba0:	b903      	cbnz	r3, 800cba4 <__sflush_r+0x78>
 800cba2:	6560      	str	r0, [r4, #84]	@ 0x54
 800cba4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cba6:	602f      	str	r7, [r5, #0]
 800cba8:	b1b9      	cbz	r1, 800cbda <__sflush_r+0xae>
 800cbaa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cbae:	4299      	cmp	r1, r3
 800cbb0:	d002      	beq.n	800cbb8 <__sflush_r+0x8c>
 800cbb2:	4628      	mov	r0, r5
 800cbb4:	f7ff f9e0 	bl	800bf78 <_free_r>
 800cbb8:	2300      	movs	r3, #0
 800cbba:	6363      	str	r3, [r4, #52]	@ 0x34
 800cbbc:	e00d      	b.n	800cbda <__sflush_r+0xae>
 800cbbe:	2301      	movs	r3, #1
 800cbc0:	4628      	mov	r0, r5
 800cbc2:	47b0      	blx	r6
 800cbc4:	4602      	mov	r2, r0
 800cbc6:	1c50      	adds	r0, r2, #1
 800cbc8:	d1c9      	bne.n	800cb5e <__sflush_r+0x32>
 800cbca:	682b      	ldr	r3, [r5, #0]
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d0c6      	beq.n	800cb5e <__sflush_r+0x32>
 800cbd0:	2b1d      	cmp	r3, #29
 800cbd2:	d001      	beq.n	800cbd8 <__sflush_r+0xac>
 800cbd4:	2b16      	cmp	r3, #22
 800cbd6:	d11e      	bne.n	800cc16 <__sflush_r+0xea>
 800cbd8:	602f      	str	r7, [r5, #0]
 800cbda:	2000      	movs	r0, #0
 800cbdc:	e022      	b.n	800cc24 <__sflush_r+0xf8>
 800cbde:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cbe2:	b21b      	sxth	r3, r3
 800cbe4:	e01b      	b.n	800cc1e <__sflush_r+0xf2>
 800cbe6:	690f      	ldr	r7, [r1, #16]
 800cbe8:	2f00      	cmp	r7, #0
 800cbea:	d0f6      	beq.n	800cbda <__sflush_r+0xae>
 800cbec:	0793      	lsls	r3, r2, #30
 800cbee:	680e      	ldr	r6, [r1, #0]
 800cbf0:	bf08      	it	eq
 800cbf2:	694b      	ldreq	r3, [r1, #20]
 800cbf4:	600f      	str	r7, [r1, #0]
 800cbf6:	bf18      	it	ne
 800cbf8:	2300      	movne	r3, #0
 800cbfa:	eba6 0807 	sub.w	r8, r6, r7
 800cbfe:	608b      	str	r3, [r1, #8]
 800cc00:	f1b8 0f00 	cmp.w	r8, #0
 800cc04:	dde9      	ble.n	800cbda <__sflush_r+0xae>
 800cc06:	6a21      	ldr	r1, [r4, #32]
 800cc08:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800cc0a:	4643      	mov	r3, r8
 800cc0c:	463a      	mov	r2, r7
 800cc0e:	4628      	mov	r0, r5
 800cc10:	47b0      	blx	r6
 800cc12:	2800      	cmp	r0, #0
 800cc14:	dc08      	bgt.n	800cc28 <__sflush_r+0xfc>
 800cc16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cc1e:	81a3      	strh	r3, [r4, #12]
 800cc20:	f04f 30ff 	mov.w	r0, #4294967295
 800cc24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc28:	4407      	add	r7, r0
 800cc2a:	eba8 0800 	sub.w	r8, r8, r0
 800cc2e:	e7e7      	b.n	800cc00 <__sflush_r+0xd4>
 800cc30:	dfbffffe 	.word	0xdfbffffe

0800cc34 <_fflush_r>:
 800cc34:	b538      	push	{r3, r4, r5, lr}
 800cc36:	690b      	ldr	r3, [r1, #16]
 800cc38:	4605      	mov	r5, r0
 800cc3a:	460c      	mov	r4, r1
 800cc3c:	b913      	cbnz	r3, 800cc44 <_fflush_r+0x10>
 800cc3e:	2500      	movs	r5, #0
 800cc40:	4628      	mov	r0, r5
 800cc42:	bd38      	pop	{r3, r4, r5, pc}
 800cc44:	b118      	cbz	r0, 800cc4e <_fflush_r+0x1a>
 800cc46:	6a03      	ldr	r3, [r0, #32]
 800cc48:	b90b      	cbnz	r3, 800cc4e <_fflush_r+0x1a>
 800cc4a:	f7fe fa2d 	bl	800b0a8 <__sinit>
 800cc4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d0f3      	beq.n	800cc3e <_fflush_r+0xa>
 800cc56:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cc58:	07d0      	lsls	r0, r2, #31
 800cc5a:	d404      	bmi.n	800cc66 <_fflush_r+0x32>
 800cc5c:	0599      	lsls	r1, r3, #22
 800cc5e:	d402      	bmi.n	800cc66 <_fflush_r+0x32>
 800cc60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cc62:	f7fe fb38 	bl	800b2d6 <__retarget_lock_acquire_recursive>
 800cc66:	4628      	mov	r0, r5
 800cc68:	4621      	mov	r1, r4
 800cc6a:	f7ff ff5f 	bl	800cb2c <__sflush_r>
 800cc6e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cc70:	07da      	lsls	r2, r3, #31
 800cc72:	4605      	mov	r5, r0
 800cc74:	d4e4      	bmi.n	800cc40 <_fflush_r+0xc>
 800cc76:	89a3      	ldrh	r3, [r4, #12]
 800cc78:	059b      	lsls	r3, r3, #22
 800cc7a:	d4e1      	bmi.n	800cc40 <_fflush_r+0xc>
 800cc7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cc7e:	f7fe fb2b 	bl	800b2d8 <__retarget_lock_release_recursive>
 800cc82:	e7dd      	b.n	800cc40 <_fflush_r+0xc>

0800cc84 <memmove>:
 800cc84:	4288      	cmp	r0, r1
 800cc86:	b510      	push	{r4, lr}
 800cc88:	eb01 0402 	add.w	r4, r1, r2
 800cc8c:	d902      	bls.n	800cc94 <memmove+0x10>
 800cc8e:	4284      	cmp	r4, r0
 800cc90:	4623      	mov	r3, r4
 800cc92:	d807      	bhi.n	800cca4 <memmove+0x20>
 800cc94:	1e43      	subs	r3, r0, #1
 800cc96:	42a1      	cmp	r1, r4
 800cc98:	d008      	beq.n	800ccac <memmove+0x28>
 800cc9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cc9e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cca2:	e7f8      	b.n	800cc96 <memmove+0x12>
 800cca4:	4402      	add	r2, r0
 800cca6:	4601      	mov	r1, r0
 800cca8:	428a      	cmp	r2, r1
 800ccaa:	d100      	bne.n	800ccae <memmove+0x2a>
 800ccac:	bd10      	pop	{r4, pc}
 800ccae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ccb2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ccb6:	e7f7      	b.n	800cca8 <memmove+0x24>

0800ccb8 <_sbrk_r>:
 800ccb8:	b538      	push	{r3, r4, r5, lr}
 800ccba:	4d06      	ldr	r5, [pc, #24]	@ (800ccd4 <_sbrk_r+0x1c>)
 800ccbc:	2300      	movs	r3, #0
 800ccbe:	4604      	mov	r4, r0
 800ccc0:	4608      	mov	r0, r1
 800ccc2:	602b      	str	r3, [r5, #0]
 800ccc4:	f7f4 fdd2 	bl	800186c <_sbrk>
 800ccc8:	1c43      	adds	r3, r0, #1
 800ccca:	d102      	bne.n	800ccd2 <_sbrk_r+0x1a>
 800cccc:	682b      	ldr	r3, [r5, #0]
 800ccce:	b103      	cbz	r3, 800ccd2 <_sbrk_r+0x1a>
 800ccd0:	6023      	str	r3, [r4, #0]
 800ccd2:	bd38      	pop	{r3, r4, r5, pc}
 800ccd4:	2000227c 	.word	0x2000227c

0800ccd8 <memcpy>:
 800ccd8:	440a      	add	r2, r1
 800ccda:	4291      	cmp	r1, r2
 800ccdc:	f100 33ff 	add.w	r3, r0, #4294967295
 800cce0:	d100      	bne.n	800cce4 <memcpy+0xc>
 800cce2:	4770      	bx	lr
 800cce4:	b510      	push	{r4, lr}
 800cce6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ccea:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ccee:	4291      	cmp	r1, r2
 800ccf0:	d1f9      	bne.n	800cce6 <memcpy+0xe>
 800ccf2:	bd10      	pop	{r4, pc}

0800ccf4 <__assert_func>:
 800ccf4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ccf6:	4614      	mov	r4, r2
 800ccf8:	461a      	mov	r2, r3
 800ccfa:	4b09      	ldr	r3, [pc, #36]	@ (800cd20 <__assert_func+0x2c>)
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	4605      	mov	r5, r0
 800cd00:	68d8      	ldr	r0, [r3, #12]
 800cd02:	b954      	cbnz	r4, 800cd1a <__assert_func+0x26>
 800cd04:	4b07      	ldr	r3, [pc, #28]	@ (800cd24 <__assert_func+0x30>)
 800cd06:	461c      	mov	r4, r3
 800cd08:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cd0c:	9100      	str	r1, [sp, #0]
 800cd0e:	462b      	mov	r3, r5
 800cd10:	4905      	ldr	r1, [pc, #20]	@ (800cd28 <__assert_func+0x34>)
 800cd12:	f000 f86f 	bl	800cdf4 <fiprintf>
 800cd16:	f000 f87f 	bl	800ce18 <abort>
 800cd1a:	4b04      	ldr	r3, [pc, #16]	@ (800cd2c <__assert_func+0x38>)
 800cd1c:	e7f4      	b.n	800cd08 <__assert_func+0x14>
 800cd1e:	bf00      	nop
 800cd20:	20000118 	.word	0x20000118
 800cd24:	0800d696 	.word	0x0800d696
 800cd28:	0800d668 	.word	0x0800d668
 800cd2c:	0800d65b 	.word	0x0800d65b

0800cd30 <_calloc_r>:
 800cd30:	b570      	push	{r4, r5, r6, lr}
 800cd32:	fba1 5402 	umull	r5, r4, r1, r2
 800cd36:	b93c      	cbnz	r4, 800cd48 <_calloc_r+0x18>
 800cd38:	4629      	mov	r1, r5
 800cd3a:	f7ff f991 	bl	800c060 <_malloc_r>
 800cd3e:	4606      	mov	r6, r0
 800cd40:	b928      	cbnz	r0, 800cd4e <_calloc_r+0x1e>
 800cd42:	2600      	movs	r6, #0
 800cd44:	4630      	mov	r0, r6
 800cd46:	bd70      	pop	{r4, r5, r6, pc}
 800cd48:	220c      	movs	r2, #12
 800cd4a:	6002      	str	r2, [r0, #0]
 800cd4c:	e7f9      	b.n	800cd42 <_calloc_r+0x12>
 800cd4e:	462a      	mov	r2, r5
 800cd50:	4621      	mov	r1, r4
 800cd52:	f7fe fa42 	bl	800b1da <memset>
 800cd56:	e7f5      	b.n	800cd44 <_calloc_r+0x14>

0800cd58 <__ascii_mbtowc>:
 800cd58:	b082      	sub	sp, #8
 800cd5a:	b901      	cbnz	r1, 800cd5e <__ascii_mbtowc+0x6>
 800cd5c:	a901      	add	r1, sp, #4
 800cd5e:	b142      	cbz	r2, 800cd72 <__ascii_mbtowc+0x1a>
 800cd60:	b14b      	cbz	r3, 800cd76 <__ascii_mbtowc+0x1e>
 800cd62:	7813      	ldrb	r3, [r2, #0]
 800cd64:	600b      	str	r3, [r1, #0]
 800cd66:	7812      	ldrb	r2, [r2, #0]
 800cd68:	1e10      	subs	r0, r2, #0
 800cd6a:	bf18      	it	ne
 800cd6c:	2001      	movne	r0, #1
 800cd6e:	b002      	add	sp, #8
 800cd70:	4770      	bx	lr
 800cd72:	4610      	mov	r0, r2
 800cd74:	e7fb      	b.n	800cd6e <__ascii_mbtowc+0x16>
 800cd76:	f06f 0001 	mvn.w	r0, #1
 800cd7a:	e7f8      	b.n	800cd6e <__ascii_mbtowc+0x16>

0800cd7c <_realloc_r>:
 800cd7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd80:	4680      	mov	r8, r0
 800cd82:	4615      	mov	r5, r2
 800cd84:	460c      	mov	r4, r1
 800cd86:	b921      	cbnz	r1, 800cd92 <_realloc_r+0x16>
 800cd88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cd8c:	4611      	mov	r1, r2
 800cd8e:	f7ff b967 	b.w	800c060 <_malloc_r>
 800cd92:	b92a      	cbnz	r2, 800cda0 <_realloc_r+0x24>
 800cd94:	f7ff f8f0 	bl	800bf78 <_free_r>
 800cd98:	2400      	movs	r4, #0
 800cd9a:	4620      	mov	r0, r4
 800cd9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cda0:	f000 f841 	bl	800ce26 <_malloc_usable_size_r>
 800cda4:	4285      	cmp	r5, r0
 800cda6:	4606      	mov	r6, r0
 800cda8:	d802      	bhi.n	800cdb0 <_realloc_r+0x34>
 800cdaa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800cdae:	d8f4      	bhi.n	800cd9a <_realloc_r+0x1e>
 800cdb0:	4629      	mov	r1, r5
 800cdb2:	4640      	mov	r0, r8
 800cdb4:	f7ff f954 	bl	800c060 <_malloc_r>
 800cdb8:	4607      	mov	r7, r0
 800cdba:	2800      	cmp	r0, #0
 800cdbc:	d0ec      	beq.n	800cd98 <_realloc_r+0x1c>
 800cdbe:	42b5      	cmp	r5, r6
 800cdc0:	462a      	mov	r2, r5
 800cdc2:	4621      	mov	r1, r4
 800cdc4:	bf28      	it	cs
 800cdc6:	4632      	movcs	r2, r6
 800cdc8:	f7ff ff86 	bl	800ccd8 <memcpy>
 800cdcc:	4621      	mov	r1, r4
 800cdce:	4640      	mov	r0, r8
 800cdd0:	f7ff f8d2 	bl	800bf78 <_free_r>
 800cdd4:	463c      	mov	r4, r7
 800cdd6:	e7e0      	b.n	800cd9a <_realloc_r+0x1e>

0800cdd8 <__ascii_wctomb>:
 800cdd8:	4603      	mov	r3, r0
 800cdda:	4608      	mov	r0, r1
 800cddc:	b141      	cbz	r1, 800cdf0 <__ascii_wctomb+0x18>
 800cdde:	2aff      	cmp	r2, #255	@ 0xff
 800cde0:	d904      	bls.n	800cdec <__ascii_wctomb+0x14>
 800cde2:	228a      	movs	r2, #138	@ 0x8a
 800cde4:	601a      	str	r2, [r3, #0]
 800cde6:	f04f 30ff 	mov.w	r0, #4294967295
 800cdea:	4770      	bx	lr
 800cdec:	700a      	strb	r2, [r1, #0]
 800cdee:	2001      	movs	r0, #1
 800cdf0:	4770      	bx	lr
	...

0800cdf4 <fiprintf>:
 800cdf4:	b40e      	push	{r1, r2, r3}
 800cdf6:	b503      	push	{r0, r1, lr}
 800cdf8:	4601      	mov	r1, r0
 800cdfa:	ab03      	add	r3, sp, #12
 800cdfc:	4805      	ldr	r0, [pc, #20]	@ (800ce14 <fiprintf+0x20>)
 800cdfe:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce02:	6800      	ldr	r0, [r0, #0]
 800ce04:	9301      	str	r3, [sp, #4]
 800ce06:	f000 f83f 	bl	800ce88 <_vfiprintf_r>
 800ce0a:	b002      	add	sp, #8
 800ce0c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ce10:	b003      	add	sp, #12
 800ce12:	4770      	bx	lr
 800ce14:	20000118 	.word	0x20000118

0800ce18 <abort>:
 800ce18:	b508      	push	{r3, lr}
 800ce1a:	2006      	movs	r0, #6
 800ce1c:	f000 fa08 	bl	800d230 <raise>
 800ce20:	2001      	movs	r0, #1
 800ce22:	f7f4 fcab 	bl	800177c <_exit>

0800ce26 <_malloc_usable_size_r>:
 800ce26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ce2a:	1f18      	subs	r0, r3, #4
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	bfbc      	itt	lt
 800ce30:	580b      	ldrlt	r3, [r1, r0]
 800ce32:	18c0      	addlt	r0, r0, r3
 800ce34:	4770      	bx	lr

0800ce36 <__sfputc_r>:
 800ce36:	6893      	ldr	r3, [r2, #8]
 800ce38:	3b01      	subs	r3, #1
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	b410      	push	{r4}
 800ce3e:	6093      	str	r3, [r2, #8]
 800ce40:	da08      	bge.n	800ce54 <__sfputc_r+0x1e>
 800ce42:	6994      	ldr	r4, [r2, #24]
 800ce44:	42a3      	cmp	r3, r4
 800ce46:	db01      	blt.n	800ce4c <__sfputc_r+0x16>
 800ce48:	290a      	cmp	r1, #10
 800ce4a:	d103      	bne.n	800ce54 <__sfputc_r+0x1e>
 800ce4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ce50:	f000 b932 	b.w	800d0b8 <__swbuf_r>
 800ce54:	6813      	ldr	r3, [r2, #0]
 800ce56:	1c58      	adds	r0, r3, #1
 800ce58:	6010      	str	r0, [r2, #0]
 800ce5a:	7019      	strb	r1, [r3, #0]
 800ce5c:	4608      	mov	r0, r1
 800ce5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ce62:	4770      	bx	lr

0800ce64 <__sfputs_r>:
 800ce64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce66:	4606      	mov	r6, r0
 800ce68:	460f      	mov	r7, r1
 800ce6a:	4614      	mov	r4, r2
 800ce6c:	18d5      	adds	r5, r2, r3
 800ce6e:	42ac      	cmp	r4, r5
 800ce70:	d101      	bne.n	800ce76 <__sfputs_r+0x12>
 800ce72:	2000      	movs	r0, #0
 800ce74:	e007      	b.n	800ce86 <__sfputs_r+0x22>
 800ce76:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce7a:	463a      	mov	r2, r7
 800ce7c:	4630      	mov	r0, r6
 800ce7e:	f7ff ffda 	bl	800ce36 <__sfputc_r>
 800ce82:	1c43      	adds	r3, r0, #1
 800ce84:	d1f3      	bne.n	800ce6e <__sfputs_r+0xa>
 800ce86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ce88 <_vfiprintf_r>:
 800ce88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce8c:	460d      	mov	r5, r1
 800ce8e:	b09d      	sub	sp, #116	@ 0x74
 800ce90:	4614      	mov	r4, r2
 800ce92:	4698      	mov	r8, r3
 800ce94:	4606      	mov	r6, r0
 800ce96:	b118      	cbz	r0, 800cea0 <_vfiprintf_r+0x18>
 800ce98:	6a03      	ldr	r3, [r0, #32]
 800ce9a:	b90b      	cbnz	r3, 800cea0 <_vfiprintf_r+0x18>
 800ce9c:	f7fe f904 	bl	800b0a8 <__sinit>
 800cea0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cea2:	07d9      	lsls	r1, r3, #31
 800cea4:	d405      	bmi.n	800ceb2 <_vfiprintf_r+0x2a>
 800cea6:	89ab      	ldrh	r3, [r5, #12]
 800cea8:	059a      	lsls	r2, r3, #22
 800ceaa:	d402      	bmi.n	800ceb2 <_vfiprintf_r+0x2a>
 800ceac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ceae:	f7fe fa12 	bl	800b2d6 <__retarget_lock_acquire_recursive>
 800ceb2:	89ab      	ldrh	r3, [r5, #12]
 800ceb4:	071b      	lsls	r3, r3, #28
 800ceb6:	d501      	bpl.n	800cebc <_vfiprintf_r+0x34>
 800ceb8:	692b      	ldr	r3, [r5, #16]
 800ceba:	b99b      	cbnz	r3, 800cee4 <_vfiprintf_r+0x5c>
 800cebc:	4629      	mov	r1, r5
 800cebe:	4630      	mov	r0, r6
 800cec0:	f000 f938 	bl	800d134 <__swsetup_r>
 800cec4:	b170      	cbz	r0, 800cee4 <_vfiprintf_r+0x5c>
 800cec6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cec8:	07dc      	lsls	r4, r3, #31
 800ceca:	d504      	bpl.n	800ced6 <_vfiprintf_r+0x4e>
 800cecc:	f04f 30ff 	mov.w	r0, #4294967295
 800ced0:	b01d      	add	sp, #116	@ 0x74
 800ced2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ced6:	89ab      	ldrh	r3, [r5, #12]
 800ced8:	0598      	lsls	r0, r3, #22
 800ceda:	d4f7      	bmi.n	800cecc <_vfiprintf_r+0x44>
 800cedc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cede:	f7fe f9fb 	bl	800b2d8 <__retarget_lock_release_recursive>
 800cee2:	e7f3      	b.n	800cecc <_vfiprintf_r+0x44>
 800cee4:	2300      	movs	r3, #0
 800cee6:	9309      	str	r3, [sp, #36]	@ 0x24
 800cee8:	2320      	movs	r3, #32
 800ceea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ceee:	f8cd 800c 	str.w	r8, [sp, #12]
 800cef2:	2330      	movs	r3, #48	@ 0x30
 800cef4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d0a4 <_vfiprintf_r+0x21c>
 800cef8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cefc:	f04f 0901 	mov.w	r9, #1
 800cf00:	4623      	mov	r3, r4
 800cf02:	469a      	mov	sl, r3
 800cf04:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cf08:	b10a      	cbz	r2, 800cf0e <_vfiprintf_r+0x86>
 800cf0a:	2a25      	cmp	r2, #37	@ 0x25
 800cf0c:	d1f9      	bne.n	800cf02 <_vfiprintf_r+0x7a>
 800cf0e:	ebba 0b04 	subs.w	fp, sl, r4
 800cf12:	d00b      	beq.n	800cf2c <_vfiprintf_r+0xa4>
 800cf14:	465b      	mov	r3, fp
 800cf16:	4622      	mov	r2, r4
 800cf18:	4629      	mov	r1, r5
 800cf1a:	4630      	mov	r0, r6
 800cf1c:	f7ff ffa2 	bl	800ce64 <__sfputs_r>
 800cf20:	3001      	adds	r0, #1
 800cf22:	f000 80a7 	beq.w	800d074 <_vfiprintf_r+0x1ec>
 800cf26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cf28:	445a      	add	r2, fp
 800cf2a:	9209      	str	r2, [sp, #36]	@ 0x24
 800cf2c:	f89a 3000 	ldrb.w	r3, [sl]
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	f000 809f 	beq.w	800d074 <_vfiprintf_r+0x1ec>
 800cf36:	2300      	movs	r3, #0
 800cf38:	f04f 32ff 	mov.w	r2, #4294967295
 800cf3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cf40:	f10a 0a01 	add.w	sl, sl, #1
 800cf44:	9304      	str	r3, [sp, #16]
 800cf46:	9307      	str	r3, [sp, #28]
 800cf48:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cf4c:	931a      	str	r3, [sp, #104]	@ 0x68
 800cf4e:	4654      	mov	r4, sl
 800cf50:	2205      	movs	r2, #5
 800cf52:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf56:	4853      	ldr	r0, [pc, #332]	@ (800d0a4 <_vfiprintf_r+0x21c>)
 800cf58:	f7f3 f95a 	bl	8000210 <memchr>
 800cf5c:	9a04      	ldr	r2, [sp, #16]
 800cf5e:	b9d8      	cbnz	r0, 800cf98 <_vfiprintf_r+0x110>
 800cf60:	06d1      	lsls	r1, r2, #27
 800cf62:	bf44      	itt	mi
 800cf64:	2320      	movmi	r3, #32
 800cf66:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cf6a:	0713      	lsls	r3, r2, #28
 800cf6c:	bf44      	itt	mi
 800cf6e:	232b      	movmi	r3, #43	@ 0x2b
 800cf70:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cf74:	f89a 3000 	ldrb.w	r3, [sl]
 800cf78:	2b2a      	cmp	r3, #42	@ 0x2a
 800cf7a:	d015      	beq.n	800cfa8 <_vfiprintf_r+0x120>
 800cf7c:	9a07      	ldr	r2, [sp, #28]
 800cf7e:	4654      	mov	r4, sl
 800cf80:	2000      	movs	r0, #0
 800cf82:	f04f 0c0a 	mov.w	ip, #10
 800cf86:	4621      	mov	r1, r4
 800cf88:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cf8c:	3b30      	subs	r3, #48	@ 0x30
 800cf8e:	2b09      	cmp	r3, #9
 800cf90:	d94b      	bls.n	800d02a <_vfiprintf_r+0x1a2>
 800cf92:	b1b0      	cbz	r0, 800cfc2 <_vfiprintf_r+0x13a>
 800cf94:	9207      	str	r2, [sp, #28]
 800cf96:	e014      	b.n	800cfc2 <_vfiprintf_r+0x13a>
 800cf98:	eba0 0308 	sub.w	r3, r0, r8
 800cf9c:	fa09 f303 	lsl.w	r3, r9, r3
 800cfa0:	4313      	orrs	r3, r2
 800cfa2:	9304      	str	r3, [sp, #16]
 800cfa4:	46a2      	mov	sl, r4
 800cfa6:	e7d2      	b.n	800cf4e <_vfiprintf_r+0xc6>
 800cfa8:	9b03      	ldr	r3, [sp, #12]
 800cfaa:	1d19      	adds	r1, r3, #4
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	9103      	str	r1, [sp, #12]
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	bfbb      	ittet	lt
 800cfb4:	425b      	neglt	r3, r3
 800cfb6:	f042 0202 	orrlt.w	r2, r2, #2
 800cfba:	9307      	strge	r3, [sp, #28]
 800cfbc:	9307      	strlt	r3, [sp, #28]
 800cfbe:	bfb8      	it	lt
 800cfc0:	9204      	strlt	r2, [sp, #16]
 800cfc2:	7823      	ldrb	r3, [r4, #0]
 800cfc4:	2b2e      	cmp	r3, #46	@ 0x2e
 800cfc6:	d10a      	bne.n	800cfde <_vfiprintf_r+0x156>
 800cfc8:	7863      	ldrb	r3, [r4, #1]
 800cfca:	2b2a      	cmp	r3, #42	@ 0x2a
 800cfcc:	d132      	bne.n	800d034 <_vfiprintf_r+0x1ac>
 800cfce:	9b03      	ldr	r3, [sp, #12]
 800cfd0:	1d1a      	adds	r2, r3, #4
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	9203      	str	r2, [sp, #12]
 800cfd6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cfda:	3402      	adds	r4, #2
 800cfdc:	9305      	str	r3, [sp, #20]
 800cfde:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d0b4 <_vfiprintf_r+0x22c>
 800cfe2:	7821      	ldrb	r1, [r4, #0]
 800cfe4:	2203      	movs	r2, #3
 800cfe6:	4650      	mov	r0, sl
 800cfe8:	f7f3 f912 	bl	8000210 <memchr>
 800cfec:	b138      	cbz	r0, 800cffe <_vfiprintf_r+0x176>
 800cfee:	9b04      	ldr	r3, [sp, #16]
 800cff0:	eba0 000a 	sub.w	r0, r0, sl
 800cff4:	2240      	movs	r2, #64	@ 0x40
 800cff6:	4082      	lsls	r2, r0
 800cff8:	4313      	orrs	r3, r2
 800cffa:	3401      	adds	r4, #1
 800cffc:	9304      	str	r3, [sp, #16]
 800cffe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d002:	4829      	ldr	r0, [pc, #164]	@ (800d0a8 <_vfiprintf_r+0x220>)
 800d004:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d008:	2206      	movs	r2, #6
 800d00a:	f7f3 f901 	bl	8000210 <memchr>
 800d00e:	2800      	cmp	r0, #0
 800d010:	d03f      	beq.n	800d092 <_vfiprintf_r+0x20a>
 800d012:	4b26      	ldr	r3, [pc, #152]	@ (800d0ac <_vfiprintf_r+0x224>)
 800d014:	bb1b      	cbnz	r3, 800d05e <_vfiprintf_r+0x1d6>
 800d016:	9b03      	ldr	r3, [sp, #12]
 800d018:	3307      	adds	r3, #7
 800d01a:	f023 0307 	bic.w	r3, r3, #7
 800d01e:	3308      	adds	r3, #8
 800d020:	9303      	str	r3, [sp, #12]
 800d022:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d024:	443b      	add	r3, r7
 800d026:	9309      	str	r3, [sp, #36]	@ 0x24
 800d028:	e76a      	b.n	800cf00 <_vfiprintf_r+0x78>
 800d02a:	fb0c 3202 	mla	r2, ip, r2, r3
 800d02e:	460c      	mov	r4, r1
 800d030:	2001      	movs	r0, #1
 800d032:	e7a8      	b.n	800cf86 <_vfiprintf_r+0xfe>
 800d034:	2300      	movs	r3, #0
 800d036:	3401      	adds	r4, #1
 800d038:	9305      	str	r3, [sp, #20]
 800d03a:	4619      	mov	r1, r3
 800d03c:	f04f 0c0a 	mov.w	ip, #10
 800d040:	4620      	mov	r0, r4
 800d042:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d046:	3a30      	subs	r2, #48	@ 0x30
 800d048:	2a09      	cmp	r2, #9
 800d04a:	d903      	bls.n	800d054 <_vfiprintf_r+0x1cc>
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d0c6      	beq.n	800cfde <_vfiprintf_r+0x156>
 800d050:	9105      	str	r1, [sp, #20]
 800d052:	e7c4      	b.n	800cfde <_vfiprintf_r+0x156>
 800d054:	fb0c 2101 	mla	r1, ip, r1, r2
 800d058:	4604      	mov	r4, r0
 800d05a:	2301      	movs	r3, #1
 800d05c:	e7f0      	b.n	800d040 <_vfiprintf_r+0x1b8>
 800d05e:	ab03      	add	r3, sp, #12
 800d060:	9300      	str	r3, [sp, #0]
 800d062:	462a      	mov	r2, r5
 800d064:	4b12      	ldr	r3, [pc, #72]	@ (800d0b0 <_vfiprintf_r+0x228>)
 800d066:	a904      	add	r1, sp, #16
 800d068:	4630      	mov	r0, r6
 800d06a:	f7fd fbd9 	bl	800a820 <_printf_float>
 800d06e:	4607      	mov	r7, r0
 800d070:	1c78      	adds	r0, r7, #1
 800d072:	d1d6      	bne.n	800d022 <_vfiprintf_r+0x19a>
 800d074:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d076:	07d9      	lsls	r1, r3, #31
 800d078:	d405      	bmi.n	800d086 <_vfiprintf_r+0x1fe>
 800d07a:	89ab      	ldrh	r3, [r5, #12]
 800d07c:	059a      	lsls	r2, r3, #22
 800d07e:	d402      	bmi.n	800d086 <_vfiprintf_r+0x1fe>
 800d080:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d082:	f7fe f929 	bl	800b2d8 <__retarget_lock_release_recursive>
 800d086:	89ab      	ldrh	r3, [r5, #12]
 800d088:	065b      	lsls	r3, r3, #25
 800d08a:	f53f af1f 	bmi.w	800cecc <_vfiprintf_r+0x44>
 800d08e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d090:	e71e      	b.n	800ced0 <_vfiprintf_r+0x48>
 800d092:	ab03      	add	r3, sp, #12
 800d094:	9300      	str	r3, [sp, #0]
 800d096:	462a      	mov	r2, r5
 800d098:	4b05      	ldr	r3, [pc, #20]	@ (800d0b0 <_vfiprintf_r+0x228>)
 800d09a:	a904      	add	r1, sp, #16
 800d09c:	4630      	mov	r0, r6
 800d09e:	f7fd fe57 	bl	800ad50 <_printf_i>
 800d0a2:	e7e4      	b.n	800d06e <_vfiprintf_r+0x1e6>
 800d0a4:	0800d640 	.word	0x0800d640
 800d0a8:	0800d64a 	.word	0x0800d64a
 800d0ac:	0800a821 	.word	0x0800a821
 800d0b0:	0800ce65 	.word	0x0800ce65
 800d0b4:	0800d646 	.word	0x0800d646

0800d0b8 <__swbuf_r>:
 800d0b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0ba:	460e      	mov	r6, r1
 800d0bc:	4614      	mov	r4, r2
 800d0be:	4605      	mov	r5, r0
 800d0c0:	b118      	cbz	r0, 800d0ca <__swbuf_r+0x12>
 800d0c2:	6a03      	ldr	r3, [r0, #32]
 800d0c4:	b90b      	cbnz	r3, 800d0ca <__swbuf_r+0x12>
 800d0c6:	f7fd ffef 	bl	800b0a8 <__sinit>
 800d0ca:	69a3      	ldr	r3, [r4, #24]
 800d0cc:	60a3      	str	r3, [r4, #8]
 800d0ce:	89a3      	ldrh	r3, [r4, #12]
 800d0d0:	071a      	lsls	r2, r3, #28
 800d0d2:	d501      	bpl.n	800d0d8 <__swbuf_r+0x20>
 800d0d4:	6923      	ldr	r3, [r4, #16]
 800d0d6:	b943      	cbnz	r3, 800d0ea <__swbuf_r+0x32>
 800d0d8:	4621      	mov	r1, r4
 800d0da:	4628      	mov	r0, r5
 800d0dc:	f000 f82a 	bl	800d134 <__swsetup_r>
 800d0e0:	b118      	cbz	r0, 800d0ea <__swbuf_r+0x32>
 800d0e2:	f04f 37ff 	mov.w	r7, #4294967295
 800d0e6:	4638      	mov	r0, r7
 800d0e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d0ea:	6823      	ldr	r3, [r4, #0]
 800d0ec:	6922      	ldr	r2, [r4, #16]
 800d0ee:	1a98      	subs	r0, r3, r2
 800d0f0:	6963      	ldr	r3, [r4, #20]
 800d0f2:	b2f6      	uxtb	r6, r6
 800d0f4:	4283      	cmp	r3, r0
 800d0f6:	4637      	mov	r7, r6
 800d0f8:	dc05      	bgt.n	800d106 <__swbuf_r+0x4e>
 800d0fa:	4621      	mov	r1, r4
 800d0fc:	4628      	mov	r0, r5
 800d0fe:	f7ff fd99 	bl	800cc34 <_fflush_r>
 800d102:	2800      	cmp	r0, #0
 800d104:	d1ed      	bne.n	800d0e2 <__swbuf_r+0x2a>
 800d106:	68a3      	ldr	r3, [r4, #8]
 800d108:	3b01      	subs	r3, #1
 800d10a:	60a3      	str	r3, [r4, #8]
 800d10c:	6823      	ldr	r3, [r4, #0]
 800d10e:	1c5a      	adds	r2, r3, #1
 800d110:	6022      	str	r2, [r4, #0]
 800d112:	701e      	strb	r6, [r3, #0]
 800d114:	6962      	ldr	r2, [r4, #20]
 800d116:	1c43      	adds	r3, r0, #1
 800d118:	429a      	cmp	r2, r3
 800d11a:	d004      	beq.n	800d126 <__swbuf_r+0x6e>
 800d11c:	89a3      	ldrh	r3, [r4, #12]
 800d11e:	07db      	lsls	r3, r3, #31
 800d120:	d5e1      	bpl.n	800d0e6 <__swbuf_r+0x2e>
 800d122:	2e0a      	cmp	r6, #10
 800d124:	d1df      	bne.n	800d0e6 <__swbuf_r+0x2e>
 800d126:	4621      	mov	r1, r4
 800d128:	4628      	mov	r0, r5
 800d12a:	f7ff fd83 	bl	800cc34 <_fflush_r>
 800d12e:	2800      	cmp	r0, #0
 800d130:	d0d9      	beq.n	800d0e6 <__swbuf_r+0x2e>
 800d132:	e7d6      	b.n	800d0e2 <__swbuf_r+0x2a>

0800d134 <__swsetup_r>:
 800d134:	b538      	push	{r3, r4, r5, lr}
 800d136:	4b29      	ldr	r3, [pc, #164]	@ (800d1dc <__swsetup_r+0xa8>)
 800d138:	4605      	mov	r5, r0
 800d13a:	6818      	ldr	r0, [r3, #0]
 800d13c:	460c      	mov	r4, r1
 800d13e:	b118      	cbz	r0, 800d148 <__swsetup_r+0x14>
 800d140:	6a03      	ldr	r3, [r0, #32]
 800d142:	b90b      	cbnz	r3, 800d148 <__swsetup_r+0x14>
 800d144:	f7fd ffb0 	bl	800b0a8 <__sinit>
 800d148:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d14c:	0719      	lsls	r1, r3, #28
 800d14e:	d422      	bmi.n	800d196 <__swsetup_r+0x62>
 800d150:	06da      	lsls	r2, r3, #27
 800d152:	d407      	bmi.n	800d164 <__swsetup_r+0x30>
 800d154:	2209      	movs	r2, #9
 800d156:	602a      	str	r2, [r5, #0]
 800d158:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d15c:	81a3      	strh	r3, [r4, #12]
 800d15e:	f04f 30ff 	mov.w	r0, #4294967295
 800d162:	e033      	b.n	800d1cc <__swsetup_r+0x98>
 800d164:	0758      	lsls	r0, r3, #29
 800d166:	d512      	bpl.n	800d18e <__swsetup_r+0x5a>
 800d168:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d16a:	b141      	cbz	r1, 800d17e <__swsetup_r+0x4a>
 800d16c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d170:	4299      	cmp	r1, r3
 800d172:	d002      	beq.n	800d17a <__swsetup_r+0x46>
 800d174:	4628      	mov	r0, r5
 800d176:	f7fe feff 	bl	800bf78 <_free_r>
 800d17a:	2300      	movs	r3, #0
 800d17c:	6363      	str	r3, [r4, #52]	@ 0x34
 800d17e:	89a3      	ldrh	r3, [r4, #12]
 800d180:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d184:	81a3      	strh	r3, [r4, #12]
 800d186:	2300      	movs	r3, #0
 800d188:	6063      	str	r3, [r4, #4]
 800d18a:	6923      	ldr	r3, [r4, #16]
 800d18c:	6023      	str	r3, [r4, #0]
 800d18e:	89a3      	ldrh	r3, [r4, #12]
 800d190:	f043 0308 	orr.w	r3, r3, #8
 800d194:	81a3      	strh	r3, [r4, #12]
 800d196:	6923      	ldr	r3, [r4, #16]
 800d198:	b94b      	cbnz	r3, 800d1ae <__swsetup_r+0x7a>
 800d19a:	89a3      	ldrh	r3, [r4, #12]
 800d19c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d1a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d1a4:	d003      	beq.n	800d1ae <__swsetup_r+0x7a>
 800d1a6:	4621      	mov	r1, r4
 800d1a8:	4628      	mov	r0, r5
 800d1aa:	f000 f883 	bl	800d2b4 <__smakebuf_r>
 800d1ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d1b2:	f013 0201 	ands.w	r2, r3, #1
 800d1b6:	d00a      	beq.n	800d1ce <__swsetup_r+0x9a>
 800d1b8:	2200      	movs	r2, #0
 800d1ba:	60a2      	str	r2, [r4, #8]
 800d1bc:	6962      	ldr	r2, [r4, #20]
 800d1be:	4252      	negs	r2, r2
 800d1c0:	61a2      	str	r2, [r4, #24]
 800d1c2:	6922      	ldr	r2, [r4, #16]
 800d1c4:	b942      	cbnz	r2, 800d1d8 <__swsetup_r+0xa4>
 800d1c6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d1ca:	d1c5      	bne.n	800d158 <__swsetup_r+0x24>
 800d1cc:	bd38      	pop	{r3, r4, r5, pc}
 800d1ce:	0799      	lsls	r1, r3, #30
 800d1d0:	bf58      	it	pl
 800d1d2:	6962      	ldrpl	r2, [r4, #20]
 800d1d4:	60a2      	str	r2, [r4, #8]
 800d1d6:	e7f4      	b.n	800d1c2 <__swsetup_r+0x8e>
 800d1d8:	2000      	movs	r0, #0
 800d1da:	e7f7      	b.n	800d1cc <__swsetup_r+0x98>
 800d1dc:	20000118 	.word	0x20000118

0800d1e0 <_raise_r>:
 800d1e0:	291f      	cmp	r1, #31
 800d1e2:	b538      	push	{r3, r4, r5, lr}
 800d1e4:	4605      	mov	r5, r0
 800d1e6:	460c      	mov	r4, r1
 800d1e8:	d904      	bls.n	800d1f4 <_raise_r+0x14>
 800d1ea:	2316      	movs	r3, #22
 800d1ec:	6003      	str	r3, [r0, #0]
 800d1ee:	f04f 30ff 	mov.w	r0, #4294967295
 800d1f2:	bd38      	pop	{r3, r4, r5, pc}
 800d1f4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d1f6:	b112      	cbz	r2, 800d1fe <_raise_r+0x1e>
 800d1f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d1fc:	b94b      	cbnz	r3, 800d212 <_raise_r+0x32>
 800d1fe:	4628      	mov	r0, r5
 800d200:	f000 f830 	bl	800d264 <_getpid_r>
 800d204:	4622      	mov	r2, r4
 800d206:	4601      	mov	r1, r0
 800d208:	4628      	mov	r0, r5
 800d20a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d20e:	f000 b817 	b.w	800d240 <_kill_r>
 800d212:	2b01      	cmp	r3, #1
 800d214:	d00a      	beq.n	800d22c <_raise_r+0x4c>
 800d216:	1c59      	adds	r1, r3, #1
 800d218:	d103      	bne.n	800d222 <_raise_r+0x42>
 800d21a:	2316      	movs	r3, #22
 800d21c:	6003      	str	r3, [r0, #0]
 800d21e:	2001      	movs	r0, #1
 800d220:	e7e7      	b.n	800d1f2 <_raise_r+0x12>
 800d222:	2100      	movs	r1, #0
 800d224:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d228:	4620      	mov	r0, r4
 800d22a:	4798      	blx	r3
 800d22c:	2000      	movs	r0, #0
 800d22e:	e7e0      	b.n	800d1f2 <_raise_r+0x12>

0800d230 <raise>:
 800d230:	4b02      	ldr	r3, [pc, #8]	@ (800d23c <raise+0xc>)
 800d232:	4601      	mov	r1, r0
 800d234:	6818      	ldr	r0, [r3, #0]
 800d236:	f7ff bfd3 	b.w	800d1e0 <_raise_r>
 800d23a:	bf00      	nop
 800d23c:	20000118 	.word	0x20000118

0800d240 <_kill_r>:
 800d240:	b538      	push	{r3, r4, r5, lr}
 800d242:	4d07      	ldr	r5, [pc, #28]	@ (800d260 <_kill_r+0x20>)
 800d244:	2300      	movs	r3, #0
 800d246:	4604      	mov	r4, r0
 800d248:	4608      	mov	r0, r1
 800d24a:	4611      	mov	r1, r2
 800d24c:	602b      	str	r3, [r5, #0]
 800d24e:	f7f4 fa85 	bl	800175c <_kill>
 800d252:	1c43      	adds	r3, r0, #1
 800d254:	d102      	bne.n	800d25c <_kill_r+0x1c>
 800d256:	682b      	ldr	r3, [r5, #0]
 800d258:	b103      	cbz	r3, 800d25c <_kill_r+0x1c>
 800d25a:	6023      	str	r3, [r4, #0]
 800d25c:	bd38      	pop	{r3, r4, r5, pc}
 800d25e:	bf00      	nop
 800d260:	2000227c 	.word	0x2000227c

0800d264 <_getpid_r>:
 800d264:	f7f4 ba72 	b.w	800174c <_getpid>

0800d268 <__swhatbuf_r>:
 800d268:	b570      	push	{r4, r5, r6, lr}
 800d26a:	460c      	mov	r4, r1
 800d26c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d270:	2900      	cmp	r1, #0
 800d272:	b096      	sub	sp, #88	@ 0x58
 800d274:	4615      	mov	r5, r2
 800d276:	461e      	mov	r6, r3
 800d278:	da0d      	bge.n	800d296 <__swhatbuf_r+0x2e>
 800d27a:	89a3      	ldrh	r3, [r4, #12]
 800d27c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d280:	f04f 0100 	mov.w	r1, #0
 800d284:	bf14      	ite	ne
 800d286:	2340      	movne	r3, #64	@ 0x40
 800d288:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d28c:	2000      	movs	r0, #0
 800d28e:	6031      	str	r1, [r6, #0]
 800d290:	602b      	str	r3, [r5, #0]
 800d292:	b016      	add	sp, #88	@ 0x58
 800d294:	bd70      	pop	{r4, r5, r6, pc}
 800d296:	466a      	mov	r2, sp
 800d298:	f000 f848 	bl	800d32c <_fstat_r>
 800d29c:	2800      	cmp	r0, #0
 800d29e:	dbec      	blt.n	800d27a <__swhatbuf_r+0x12>
 800d2a0:	9901      	ldr	r1, [sp, #4]
 800d2a2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d2a6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d2aa:	4259      	negs	r1, r3
 800d2ac:	4159      	adcs	r1, r3
 800d2ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d2b2:	e7eb      	b.n	800d28c <__swhatbuf_r+0x24>

0800d2b4 <__smakebuf_r>:
 800d2b4:	898b      	ldrh	r3, [r1, #12]
 800d2b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d2b8:	079d      	lsls	r5, r3, #30
 800d2ba:	4606      	mov	r6, r0
 800d2bc:	460c      	mov	r4, r1
 800d2be:	d507      	bpl.n	800d2d0 <__smakebuf_r+0x1c>
 800d2c0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d2c4:	6023      	str	r3, [r4, #0]
 800d2c6:	6123      	str	r3, [r4, #16]
 800d2c8:	2301      	movs	r3, #1
 800d2ca:	6163      	str	r3, [r4, #20]
 800d2cc:	b003      	add	sp, #12
 800d2ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d2d0:	ab01      	add	r3, sp, #4
 800d2d2:	466a      	mov	r2, sp
 800d2d4:	f7ff ffc8 	bl	800d268 <__swhatbuf_r>
 800d2d8:	9f00      	ldr	r7, [sp, #0]
 800d2da:	4605      	mov	r5, r0
 800d2dc:	4639      	mov	r1, r7
 800d2de:	4630      	mov	r0, r6
 800d2e0:	f7fe febe 	bl	800c060 <_malloc_r>
 800d2e4:	b948      	cbnz	r0, 800d2fa <__smakebuf_r+0x46>
 800d2e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d2ea:	059a      	lsls	r2, r3, #22
 800d2ec:	d4ee      	bmi.n	800d2cc <__smakebuf_r+0x18>
 800d2ee:	f023 0303 	bic.w	r3, r3, #3
 800d2f2:	f043 0302 	orr.w	r3, r3, #2
 800d2f6:	81a3      	strh	r3, [r4, #12]
 800d2f8:	e7e2      	b.n	800d2c0 <__smakebuf_r+0xc>
 800d2fa:	89a3      	ldrh	r3, [r4, #12]
 800d2fc:	6020      	str	r0, [r4, #0]
 800d2fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d302:	81a3      	strh	r3, [r4, #12]
 800d304:	9b01      	ldr	r3, [sp, #4]
 800d306:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d30a:	b15b      	cbz	r3, 800d324 <__smakebuf_r+0x70>
 800d30c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d310:	4630      	mov	r0, r6
 800d312:	f000 f81d 	bl	800d350 <_isatty_r>
 800d316:	b128      	cbz	r0, 800d324 <__smakebuf_r+0x70>
 800d318:	89a3      	ldrh	r3, [r4, #12]
 800d31a:	f023 0303 	bic.w	r3, r3, #3
 800d31e:	f043 0301 	orr.w	r3, r3, #1
 800d322:	81a3      	strh	r3, [r4, #12]
 800d324:	89a3      	ldrh	r3, [r4, #12]
 800d326:	431d      	orrs	r5, r3
 800d328:	81a5      	strh	r5, [r4, #12]
 800d32a:	e7cf      	b.n	800d2cc <__smakebuf_r+0x18>

0800d32c <_fstat_r>:
 800d32c:	b538      	push	{r3, r4, r5, lr}
 800d32e:	4d07      	ldr	r5, [pc, #28]	@ (800d34c <_fstat_r+0x20>)
 800d330:	2300      	movs	r3, #0
 800d332:	4604      	mov	r4, r0
 800d334:	4608      	mov	r0, r1
 800d336:	4611      	mov	r1, r2
 800d338:	602b      	str	r3, [r5, #0]
 800d33a:	f7f4 fa6f 	bl	800181c <_fstat>
 800d33e:	1c43      	adds	r3, r0, #1
 800d340:	d102      	bne.n	800d348 <_fstat_r+0x1c>
 800d342:	682b      	ldr	r3, [r5, #0]
 800d344:	b103      	cbz	r3, 800d348 <_fstat_r+0x1c>
 800d346:	6023      	str	r3, [r4, #0]
 800d348:	bd38      	pop	{r3, r4, r5, pc}
 800d34a:	bf00      	nop
 800d34c:	2000227c 	.word	0x2000227c

0800d350 <_isatty_r>:
 800d350:	b538      	push	{r3, r4, r5, lr}
 800d352:	4d06      	ldr	r5, [pc, #24]	@ (800d36c <_isatty_r+0x1c>)
 800d354:	2300      	movs	r3, #0
 800d356:	4604      	mov	r4, r0
 800d358:	4608      	mov	r0, r1
 800d35a:	602b      	str	r3, [r5, #0]
 800d35c:	f7f4 fa6e 	bl	800183c <_isatty>
 800d360:	1c43      	adds	r3, r0, #1
 800d362:	d102      	bne.n	800d36a <_isatty_r+0x1a>
 800d364:	682b      	ldr	r3, [r5, #0]
 800d366:	b103      	cbz	r3, 800d36a <_isatty_r+0x1a>
 800d368:	6023      	str	r3, [r4, #0]
 800d36a:	bd38      	pop	{r3, r4, r5, pc}
 800d36c:	2000227c 	.word	0x2000227c

0800d370 <_init>:
 800d370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d372:	bf00      	nop
 800d374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d376:	bc08      	pop	{r3}
 800d378:	469e      	mov	lr, r3
 800d37a:	4770      	bx	lr

0800d37c <_fini>:
 800d37c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d37e:	bf00      	nop
 800d380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d382:	bc08      	pop	{r3}
 800d384:	469e      	mov	lr, r3
 800d386:	4770      	bx	lr
